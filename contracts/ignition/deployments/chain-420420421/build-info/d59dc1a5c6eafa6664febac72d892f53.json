{
  "id": "d59dc1a5c6eafa6664febac72d892f53",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "contracts/IStaking.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\n/*\n\n## Introduction\n\nTODO\n\nhttps://excalidraw.com/#json=jbWQYv0LqecjPxrt5gnEy,fXpnaX2LDA_aKnGK_mNTYg\n\n## Use-Cases\n\n* Allow EVM accounts (users) to stake, and have a reasonably good experience, on-par with native accounts. As per my understanding, EVM accounts cannot yet directly transact with pallets, and ergo will only rely on this.\n* Allow EVM contracts to experiment building custom pooled-staking (ala Lido).\n* Allow existing parachains to (possibly) re-implement their protocol in AH (Bifrost vDOT, Acala LDOT, moonbeam stDOT).\n* (experimental) A validator can put their funds into a contract that interfaces with the following. This contract is fully owned by the validator and they can do anything, except it restricts them from certain arbitrary commission changes. Require the EVM account to be able to transact with other pallets (e.g. validator needs to set session keys, claim rewards etc), and a good template contract for it.\n\n## Implementation Notes\n\n### Upgradability and Splitting\nPrecompiles are not upgradable in any meaningful way, yet we can later add more features to each, as an extension to that particular interface. This is also a motivation for the interfaces to be broken apart as much as possible, rather than one massive one, beyond a better exercise of separation of concerns. For example, I opted to not include the \"blocking\" mechanism that validator have access to in the interface (tentative, open to suggestions), and if need be it can be added later in a new precompile (`StakingRolesV2`) that extends the current oen (`StakingRoles`).\n\n### Bond Limits\n\nTODO\n\n## Risks / Stability\n\nTODO\n\n## Resources\n\n* https://research.lido.fi/t/updated-lido-kusama-polkadot-ls-by-mixbytes/877 / https://research.lido.fi/t/sunsetting-of-lido-on-polkadot-and-kusama/4067\n* https://github.com/moonbeam-foundation/moonbeam/blob/0e600693f70b67c59ed6a9688deb91fa5339cd5a/precompiles/parachain-staking/StakingInterface.sol\n\n*/\n\n/// @title Staking Interface\n/// @notice Allows users to bond, unbond, and manage their bonded amounts in the staking system. For doing more interesting things, such as nomination, see `StakingRoles`.\n/// @dev Talks to the directly `pallet-staking-async`.\n/// @author kianenigma\ninterface IStakingBasic {\n\tstruct Stake {\n\t\tuint128 active; // The amount of tokens actively bonded.\n\t\tuint128 total; // The total tokens bonded, active + unbonding.\n\t}\n\n\tstruct Unbonding {\n\t\tuint32 era; // The era when the unbonding will be available.\n\t\tuint128 amount; // The amount of tokens that are unbonding.\n\t}\n\n\t/// @notice Bonds the caller's account, increasing the bonded amount by up to `value` tokens. The caller's bonded amount after this call must be be greater than `minimum_bond()`.\n\t/// @return amount The actual amount that was additionally bonded. Returns 0 on failure.\n\t/// @dev At the moment, staking pallet only imposes `ED` as the minimum bond. A separate PR should parameterize this and use `ed.max(minimum_bond)` instead. This is a wrapper for `bond` and `bond_extra`.\n\tfunction bond() external payable returns (uint128 amount);\n\n\t/// @notice Unbonds up to `value` tokens from the caller's account. Note that unbonding is a two step process, and should be followed by `withdraw_unbonded()` to actually withdraw the unbonded tokens. .\n\t/// @dev A staker cannot request an unbond such that their leftover bond is less than `minimum_bond()`, unless if the leftover is zero. For this you can also use `full_unbond()`.\n\t/// @param value The amount of tokens to unbond.\n\t/// @return amount The actual amount that was unbonded. Returns 0 on failure.\n\tfunction unbond(uint128 value) external returns (uint128 amount);\n\n\t/// @notice Unbonds all tokens, preparing to leave the staking system with `withdraw_unbonded`.\n\t/// @dev A shorthand for `unbond(bond.active)`.\n\t/// @return amount The actual amount that was unbonded.\n\tfunction full_unbond() external returns (uint128 amount);\n\n\t/// @notice Rebonds up to `value` tokens from the caller's previously unbonded amount.\n\t/// @dev Essentially for \"I unbonded, but I have now changed my mind\" situation.\n\t/// @param value The amount of tokens to rebond.\n\t/// @return amount The actual amount that was rebonded.\n\tfunction rebond_unbonded(uint128 value) external returns (uint128 amount);\n\n\t/// @notice Withdraws any previously unbonded tokens that have passed the unbonding period.\n\t/// @return amount The actual amount withdrawn.\n\tfunction withdraw_unbonded() external returns (uint128 amount);\n\n\t/// @notice Sets the reward destination address for the caller.\n\t/// @param payee The address to receive rewards. Where and how rewards come from is not in the scope of this interface. Upon declaring a `role`, an account might receive rewards.\n\t/// @return bonded `true` if the caller is bonded and can set the payee, `false` otherwise.\n\tfunction set_payee(address payee) external returns (bool bonded);\n\n\t/// @notice Returns the minimum amount of tokens required to be bonded.\n\t/// @dev This is the minimum amount needed to be a `CHILLED` staker. Implementation: `ed.max(minimum_bond)`.\n\t/// @return minimumBond The minimum bond amount.\n\tfunction minimum_bond() external view returns (uint128 minimumBond);\n\n\t/// @notice Returns the current bonded stake of the caller\n\t/// @dev Implemented exactly as `StakingLedger`.\n\t/// @return stake The `Stake`d amount of the caller.\n\tfunction stake_of() external view returns (Stake memory stake);\n\n\t/// @notice Returns the total amount that the caller can further stake, considering balance and existence requirements.\n\t/// @dev Ensures enough balance is left in the account for existence requirements, but does not leave anything for gas fee payment.\n\t/// @return stakeable The maximum amount the caller can stake.\n\tfunction stake_able() external view returns (uint128 stakeable);\n\n\t/// @notice Returns the payee account for the contract address.\n\t/// @return payee The address that will receive rewards.\n\tfunction payee() external view returns (address payee);\n\n\t/// @notice Returns the current `era` number of the staking system.\n\t/// @dev The era number is the unit of time in the staking system. It does not have a 100% fixed duration, but it aims to be at a parameterized value. For example, eras in Polkadot eras are aiming to be 24 hours. Implementation: `active_era.index`\n\t/// @return era The current era number.\n\tfunction era() external view returns (uint32);\n\n\t/// @notice Returns the unbonding queue of the caller.\n\t/// @dev a list of `(era, amount)`. Once any of the said eras are reached (check via `era`), the amount is withdraw-able via `withdraw_unbonded()`.\n\t/// @return unbondingQueue An array of Unbonding structs containing the era and amount scheduled to be unbonded in that (probably future) era.\n\tfunction unbonding_queue() external view returns (Unbonding[] memory unbondingQueue);\n}\n\n/// @title StakingRoles Interface\n/// @notice Allows setting roles in the Staking system for validators and nominators.\n/// @author kianenigma\ninterface IStakingRoles {\n  /// @title StakingRoles Interface\n  /// @notice Used for setting the roles in the staking system.\n  enum Roles {\n\t/// @notice Staked, but not doing anything.\n\tCHILLED,\n\t/// @notice Staked and validating.\n\tVALIDATOR,\n\t/// @notice Staked and nominating.\n\tNOMINATOR\n  }\n\n  /// @notice Declare the sender's intention to be a nominator, selecting `targets` as their preference.\n  /// @dev Effects can be checked with `role` and `nominations`.\n  /// @param targets An array of addresses to nominate.\n  /// @return bonded True if the caller is bonded and therefore can nominate, false otherwise.\n  function nominate(address[] calldata targets) external returns (bool bonded);\n\n  /// @notice Declare the sender's intention to be a validator, selecting `commission` as their preference.\n  /// @dev Effects can be checked with `role` and `commission`.\n  /// @param commission The commission rate for the validator.\n  /// @return bonded Returns true if the caller is bonded and therefore can validate, false otherwise.\n  function validate(uint32 commission) external returns (bool bonded);\n\n  /// @notice Nullifies the effect of `validate` or `nominate`.\n  /// @dev Has to be called before `unbond` if the intention is to fully leave the staking system.\n  /// @return bonded True if the caller is bonded and therefore can chill, false otherwise.\n  function chill() external returns (bool bonded);\n\n  /// @notice the maximum number of nomination targets that a staker can declare upon `bond`.\n  /// @dev the upper bound of the size of the `targets` array in `nominate`. It might be dynamic based on the runtime, or even the caller's staked balance.\n  function max_nominations() external view returns (uint32 maxNominations);\n\n  /// @notice Returns the role of the caller.\n  /// @return role The role of the caller from the `Roles` enum.\n  function role() external view returns (Roles role);\n\n  /// @notice Returns the addresses that the caller is nominating.\n  /// @return nominations An array of addresses.\n  function nominations() external view returns (address[] memory nominations);\n\n  /// @notice Returns the commission rate of the caller, if they are a validator.\n  /// @return commission The validator commission.\n  function commission() external view returns (uint32 commission);\n\n  /// @notice Returns the minimum bond required for validator\n  /// @return uint128 The amount of minimum stake required\n  function minimum_validator_bond() external view returns (uint128);\n\n  /// @notice Returns the minimum bond required for validator\n  /// @return uint128 The amount of minimum stake required\n  function minimum_nominator_bond() external view returns (uint128);\n\n  /// @notice Return the last known value for the smallest nominator who managed to be actively receiving rewards.\n  /// @dev If `0`, it means we don't have a guess. Otherwise, this value should be treated as a best effort estimate of the minimum \"reasonable\" amount that a nominator should have staked. Bonding a value less than this will likely cause the nominator to not be eligible for receiving rewards. In such cases, one should use `PoolStaking` instead. Please refer to `NPoS` section in the Polkadot wiki for more info, notably: <https://wiki.polkadot.network/learn/learn-nominator/#minimum-active-nomination-to-receive-staking-rewards>\n  /// @return uint128 the estimate minimum staked value for a nominator to earn rewards.\n  function minimum_active_nominator_bond() external view returns (uint128);\n}\n\n/// @title StakingRewards Interface\n/// @notice not needed, just for demonstration purposes. Potentially for claiming staking rewards. Reading rewards is an expensive operation best done off-chain.\n/// @dev Claiming rewards is permissionless and can be done by any account. The payout pays the reward of (validator, era, page-of-nominators), not just a single nominator.\ninterface IStakingRewards {\n  /// @notice Payout rewards, is an expensive operation because of the large storage query, and thus it is recommended that this function is not used.\n  /// @return rewards The amount of rewards paid out\n  function payout() external returns (uint128 rewards);\n\n  /// @notice Get the number of the queue of stakers rewards are pending from, as this has an expensive storage query, it is recommended that is not use.\n  function pending() external view returns (uint128);\n}\n\n\n\ninterface IStaking is IStakingBasic, IStakingRoles, IStakingRewards {}"
      },
      "contracts/MockStaking.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport { IStaking } from \"./IStaking.sol\";\n\ncontract MockStaking is IStaking {\n    uint32 private _era = 100;\n\n    struct UserState {\n        Stake stake;\n        Roles role;\n        address payee;\n        address[] nominations;\n        uint32 commission;\n        Unbonding[] unbondingQueue;\n    }\n\n    mapping(address => UserState) private users;\n\n    function bond() external payable override returns (uint128 amount) {\n        users[msg.sender].stake.active += uint128(msg.value);\n        users[msg.sender].stake.total += uint128(msg.value);\n        return uint128(msg.value);\n    }\n\n    function unbond(uint128 value) external override returns (uint128 amount) {\n        Stake storage s = users[msg.sender].stake;\n        if (value > s.active) value = s.active;\n        s.active -= value;\n        users[msg.sender].unbondingQueue.push(Unbonding({ era: _era + 2, amount: value }));\n        return value;\n    }\n\n    function full_unbond() external override returns (uint128 amount) {\n        Stake storage s = users[msg.sender].stake;\n        amount = s.active;\n        s.active = 0;\n        users[msg.sender].unbondingQueue.push(Unbonding({ era: _era + 2, amount: amount }));\n        return amount;\n    }\n\n    function rebond_unbonded(uint128 value) external override returns (uint128 amount) {\n        users[msg.sender].stake.active += value;\n        return value;\n    }\n\n    function withdraw_unbonded() external override returns (uint128 amount) {\n        Unbonding[] storage queue = users[msg.sender].unbondingQueue;\n        uint128 withdrawable = 0;\n        uint newLength = 0;\n\n        for (uint i = 0; i < queue.length; i++) {\n            if (queue[i].era <= _era) {\n                withdrawable += queue[i].amount;\n            } else {\n                queue[newLength++] = queue[i];\n            }\n        }\n\n        // Resize the queue\n        while (queue.length > newLength) {\n            queue.pop();\n        }\n\n        users[msg.sender].stake.total -= withdrawable;\n        return withdrawable;\n    }\n\n    function set_payee(address payee_) external override returns (bool) {\n        users[msg.sender].payee = payee_;\n        return users[msg.sender].stake.active > 0;\n    }\n\n    function minimum_bond() external pure override returns (uint128) {\n        return 1 ether;\n    }\n\n    function stake_of() external view override returns (Stake memory) {\n        return users[msg.sender].stake;\n    }\n\n    function stake_able() external pure override returns (uint128) {\n        return 1_000_000 ether;\n    }\n\n    function payee() external view override returns (address) {\n        return users[msg.sender].payee;\n    }\n\n    function era() external view override returns (uint32) {\n        return _era;\n    }\n\n    function unbonding_queue() external view override returns (Unbonding[] memory) {\n        return users[msg.sender].unbondingQueue;\n    }\n\n    function nominate(address[] calldata targets) external override returns (bool) {\n        users[msg.sender].role = Roles.NOMINATOR;\n        users[msg.sender].nominations = targets;\n        return users[msg.sender].stake.active > 0;\n    }\n\n    function validate(uint32 _commission) external override returns (bool) {\n        users[msg.sender].role = Roles.VALIDATOR;\n        users[msg.sender].commission = _commission;\n        return users[msg.sender].stake.active > 0;\n    }\n\n    function chill() external override returns (bool) {\n        users[msg.sender].role = Roles.CHILLED;\n        delete users[msg.sender].nominations;\n        users[msg.sender].commission = 0;\n        return users[msg.sender].stake.active > 0;\n    }\n\n    function max_nominations() external pure override returns (uint32) {\n        return 16;\n    }\n\n    function role() external view override returns (Roles) {\n        return users[msg.sender].role;\n    }\n\n    function nominations() external view override returns (address[] memory) {\n        return users[msg.sender].nominations;\n    }\n\n    function commission() external view override returns (uint32) {\n        return users[msg.sender].commission;\n    }\n\n    function minimum_validator_bond() external pure override returns (uint128) {\n        return 100 ether;\n    }\n\n    function minimum_nominator_bond() external pure override returns (uint128) {\n        return 10 ether;\n    }\n\n    function minimum_active_nominator_bond() external pure override returns (uint128) {\n        return 25 ether;\n    }\n\n    function payout() external pure override returns (uint128) {\n        return 5000;\n    }\n\n    function pending() external pure override returns (uint128) {\n        return 2;\n    }\n\n    // Simulate era progression for testing purposes\n    function advanceEra() external {\n        _era++;\n    }\n}\n"
      },
      "contracts/SleepFine.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport { IStaking, IStakingRoles, IStakingRewards } from \"./IStaking.sol\";\n\ncontract SleepFine is AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    bytes32 public constant AI_AGENT_ROLE = keccak256(\"AI_AGENT_ROLE\");\n\n    struct Challenge {\n        // The user who started the challenge.\n        address user;\n       \n        // App key from secure enclave, created when user installed the app,\n        // used to ensure that user cannot tamper the data (without jailbreaking).\n        address app;\n        \n        // Whether the challenge is completed and user has withdrawn pending balance\n        bool completed;\n        // The date when the challenge started\n        uint64 startDate;\n        // Duration of the challenge in days.\n        uint64 durationDays;\n        // Total penalties incurred by the user.\n        uint64 missedDaysCount;\n         \n        // Array of missed days\n        bool[] missedDaysArray;\n        // User's security deposit that is locked for the duration of the challenge.\n        uint128 deposit;\n    }\n\n    /// @notice A challenge is uniquely identified by an incremental Challenge ID\n    /// This simple structure enables users to start multiple challenges\n    Challenge[] public challenges;\n    IStaking public immutable stakingPrecompile;\n\n    modifier onlyApp(uint256 challengeId) {\n        require(challenges[challengeId].app == msg.sender, \"Not authorized\");\n        _;\n    }\n\n    event NewChallenge(\n        address indexed user,\n        uint256 indexed challengeId\n    );\n\n    constructor(IStaking _stakingPrecompile) {\n        stakingPrecompile = _stakingPrecompile;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /*\n     * Admin functions\n     */\n\n    function grantAiAgentRole(address aiAgent) external onlyRole(ADMIN_ROLE) {\n        _grantRole(AI_AGENT_ROLE, aiAgent);\n    }\n\n    function revokeAiAgentRole(address aiAgent) external onlyRole(ADMIN_ROLE) {\n        _revokeRole(AI_AGENT_ROLE, aiAgent);\n    }\n\n    /*\n     * User functions\n     */\n\n    /// @notice User starts challenge by making a deposit from their wallet\n    /// @param numDays Number of days for the challenge\n    /// @param app iOS app scoped key from secure enclave, created when user installed the app\n    function startChallenge(uint64 numDays, address app) external payable returns (uint256) {\n        require(msg.value > 0, \"Deposit required\");\n\n        uint256 challengeId = challenges.length;\n        challenges.push();\n        Challenge storage c = challenges[challengeId];\n        c.user = msg.sender;\n        c.app = app;\n        c.startDate = getCurrentDate();\n        c.durationDays = numDays;\n        c.deposit = uint128(msg.value);\n        c.missedDaysCount = 0;\n        c.missedDaysArray = new bool[](numDays);\n        c.completed = false;\n\n        emit NewChallenge(msg.sender, challengeId);\n        return challengeId;\n    }\n\n    /// @notice iOS app informs the system that the user has missed a sleep\n    /// @dev For hackathon purpose, the app's temporary key is making the\n    // transaction, it covers gas. However, we later plan get the arguments\n    // signed by the app's private key for free using EIP-712 structured\n    // signing and that payload can be relayed by the developer which sponsors\n    // the gas. We expect that the earnings will be enough to cover the\n    // insignificant gas cost.\n    /// @param challengeId The ID of the challenge\n    function reportMissedSleep(uint256 challengeId, uint64 dayId) external onlyApp(challengeId) {\n        Challenge storage c = challenges[challengeId];\n        require(!c.completed, \"Challenge already completed\");\n        if (!c.missedDaysArray[dayId]) {\n            c.missedDaysArray[dayId] = true;\n            c.missedDaysCount++;\n        }\n    }\n\n    function completeChallenge(uint256 challengeId) external onlyApp(challengeId) {\n        Challenge storage c = challenges[challengeId];\n        require(!c.completed, \"Challenge already completed\");\n        require(c.startDate + c.durationDays <= getCurrentDate(), \"Challenge time not completed yet\");\n        c.completed = true;\n\n        uint128 refund = c.deposit * (c.durationDays - c.missedDaysCount) / c.durationDays;\n    \n        (bool success, ) =  payable(c.user).call{value: refund}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    /*\n     * AI Agent functions\n     */\n\n    function nominate(address[] calldata targets) external onlyRole(AI_AGENT_ROLE) returns (bool) {\n        return stakingPrecompile.nominate(targets);\n    }\n\n    function bond(uint128 amount) external onlyRole(AI_AGENT_ROLE) {\n        stakingPrecompile.bond{ value: amount }();\n    }\n\n    function unbond(uint128 amount) external onlyRole(AI_AGENT_ROLE) {\n        stakingPrecompile.unbond(amount);\n    }\n\n    /*\n     * View functions\n     */\n\n    function getChallenge(uint256 challengeId) external view returns (Challenge memory) {\n        return challenges[challengeId];\n    }\n\n    function getCurrentDate() public view returns (uint64) {\n        return uint64(block.timestamp) / 1 days / 1000;\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "parameters": "z"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.26",
    "long_version": "0.8.26+commit.8a97fa7a.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "@openzeppelin/contracts/access/AccessControl.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
          "exportedSymbols": {
            "AccessControl": [
              295
            ],
            "Context": [
              408
            ],
            "ERC165": [
              432
            ],
            "IAccessControl": [
              378
            ]
          },
          "id": 296,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "108:24:0"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
              "file": "./IAccessControl.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 296,
              "sourceUnit": 379,
              "src": "134:52:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "IAccessControl",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 378,
                    "src": "142:14:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../utils/Context.sol",
              "id": 5,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 296,
              "sourceUnit": 409,
              "src": "187:45:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 4,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 408,
                    "src": "195:7:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
              "file": "../utils/introspection/ERC165.sol",
              "id": 7,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 296,
              "sourceUnit": 433,
              "src": "233:57:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 6,
                    "name": "ERC165",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 432,
                    "src": "241:6:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 9,
                    "name": "Context",
                    "nameLocations": [
                      "1988:7:0"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 408,
                    "src": "1988:7:0"
                  },
                  "id": 10,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1988:7:0"
                },
                {
                  "baseName": {
                    "id": 11,
                    "name": "IAccessControl",
                    "nameLocations": [
                      "1997:14:0"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 378,
                    "src": "1997:14:0"
                  },
                  "id": 12,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1997:14:0"
                },
                {
                  "baseName": {
                    "id": 13,
                    "name": "ERC165",
                    "nameLocations": [
                      "2013:6:0"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 432,
                    "src": "2013:6:0"
                  },
                  "id": 14,
                  "nodeType": "InheritanceSpecifier",
                  "src": "2013:6:0"
                }
              ],
              "canonicalName": "AccessControl",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 8,
                "nodeType": "StructuredDocumentation",
                "src": "292:1660:0",
                "text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."
              },
              "fullyImplemented": true,
              "id": 295,
              "linearizedBaseContracts": [
                295,
                432,
                444,
                378,
                408
              ],
              "name": "AccessControl",
              "nameLocation": "1971:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "AccessControl.RoleData",
                  "id": 21,
                  "members": [
                    {
                      "constant": false,
                      "id": 18,
                      "mutability": "mutable",
                      "name": "hasRole",
                      "nameLocation": "2085:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 21,
                      "src": "2052:40:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "typeName": {
                        "id": 17,
                        "keyName": "account",
                        "keyNameLocation": "2068:7:0",
                        "keyType": {
                          "id": 15,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2060:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "2052:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        },
                        "valueName": "",
                        "valueNameLocation": "-1:-1:-1",
                        "valueType": {
                          "id": 16,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2079:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 20,
                      "mutability": "mutable",
                      "name": "adminRole",
                      "nameLocation": "2110:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 21,
                      "src": "2102:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 19,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2102:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "RoleData",
                  "nameLocation": "2033:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 295,
                  "src": "2026:100:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "_roles",
                  "nameLocation": "2174:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 295,
                  "src": "2132:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                    "typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
                  },
                  "typeName": {
                    "id": 25,
                    "keyName": "role",
                    "keyNameLocation": "2148:4:0",
                    "keyType": {
                      "id": 22,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2140:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2132:33:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                      "typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 24,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 23,
                        "name": "RoleData",
                        "nameLocations": [
                          "2156:8:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 21,
                        "src": "2156:8:0"
                      },
                      "referencedDeclaration": 21,
                      "src": "2156:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RoleData_$21_storage_ptr",
                        "typeString": "struct AccessControl.RoleData"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "functionSelector": "a217fddf",
                  "id": 29,
                  "mutability": "constant",
                  "name": "DEFAULT_ADMIN_ROLE",
                  "nameLocation": "2211:18:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 295,
                  "src": "2187:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2187:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "hexValue": "30783030",
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2232:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0x00"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 39,
                    "nodeType": "Block",
                    "src": "2454:44:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 35,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 32,
                              "src": "2475:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 34,
                            "name": "_checkRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              93,
                              114
                            ],
                            "referencedDeclaration": 93,
                            "src": "2464:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32) view"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2464:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 37,
                        "nodeType": "ExpressionStatement",
                        "src": "2464:16:0"
                      },
                      {
                        "id": 38,
                        "nodeType": "PlaceholderStatement",
                        "src": "2490:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 30,
                    "nodeType": "StructuredDocumentation",
                    "src": "2243:174:0",
                    "text": " @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."
                  },
                  "id": 40,
                  "name": "onlyRole",
                  "nameLocation": "2431:8:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 33,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 32,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2448:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "2440:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 31,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2440:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2439:14:0"
                  },
                  "src": "2422:76:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    431
                  ],
                  "body": {
                    "id": 61,
                    "nodeType": "Block",
                    "src": "2656:111:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 59,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 54,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 49,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 43,
                              "src": "2673:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 51,
                                    "name": "IAccessControl",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 378,
                                    "src": "2693:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IAccessControl_$378_$",
                                      "typeString": "type(contract IAccessControl)"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_type$_t_contract$_IAccessControl_$378_$",
                                      "typeString": "type(contract IAccessControl)"
                                    }
                                  ],
                                  "id": 50,
                                  "name": "type",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967269,
                                  "src": "2688:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 52,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2688:20:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$378",
                                  "typeString": "type(contract IAccessControl)"
                                }
                              },
                              "id": 53,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "2709:11:0",
                              "memberName": "interfaceId",
                              "nodeType": "MemberAccess",
                              "src": "2688:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "2673:47:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 57,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 43,
                                "src": "2748:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 55,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967271,
                                "src": "2724:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_super$_AccessControl_$295_$",
                                  "typeString": "type(contract super AccessControl)"
                                }
                              },
                              "id": 56,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2730:17:0",
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 431,
                              "src": "2724:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) view returns (bool)"
                              }
                            },
                            "id": 58,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2724:36:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2673:87:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 48,
                        "id": 60,
                        "nodeType": "Return",
                        "src": "2666:94:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 41,
                    "nodeType": "StructuredDocumentation",
                    "src": "2504:56:0",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 62,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "2574:17:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 45,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2632:8:0"
                  },
                  "parameters": {
                    "id": 44,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 43,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "2599:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 62,
                        "src": "2592:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 42,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2592:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2591:20:0"
                  },
                  "returnParameters": {
                    "id": 48,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 47,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 62,
                        "src": "2650:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 46,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2650:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2649:6:0"
                  },
                  "scope": 295,
                  "src": "2565:202:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    345
                  ],
                  "body": {
                    "id": 79,
                    "nodeType": "Block",
                    "src": "2937:53:0",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 72,
                                "name": "_roles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26,
                                "src": "2954:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                                  "typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
                                }
                              },
                              "id": 74,
                              "indexExpression": {
                                "id": 73,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 65,
                                "src": "2961:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2954:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RoleData_$21_storage",
                                "typeString": "struct AccessControl.RoleData storage ref"
                              }
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2967:7:0",
                            "memberName": "hasRole",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 18,
                            "src": "2954:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 77,
                          "indexExpression": {
                            "id": 76,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 67,
                            "src": "2975:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2954:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 71,
                        "id": 78,
                        "nodeType": "Return",
                        "src": "2947:36:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 63,
                    "nodeType": "StructuredDocumentation",
                    "src": "2773:76:0",
                    "text": " @dev Returns `true` if `account` has been granted `role`."
                  },
                  "functionSelector": "91d14854",
                  "id": 80,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasRole",
                  "nameLocation": "2863:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 68,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 65,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2879:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 80,
                        "src": "2871:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 64,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2871:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 67,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2893:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 80,
                        "src": "2885:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 66,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2885:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2870:31:0"
                  },
                  "returnParameters": {
                    "id": 71,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 70,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 80,
                        "src": "2931:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 69,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2931:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2930:6:0"
                  },
                  "scope": 295,
                  "src": "2854:136:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 92,
                    "nodeType": "Block",
                    "src": "3255:47:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 87,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 83,
                              "src": "3276:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 88,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 390,
                                "src": "3282:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 89,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3282:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 86,
                            "name": "_checkRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              93,
                              114
                            ],
                            "referencedDeclaration": 114,
                            "src": "3265:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
                              "typeString": "function (bytes32,address) view"
                            }
                          },
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3265:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 91,
                        "nodeType": "ExpressionStatement",
                        "src": "3265:30:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 81,
                    "nodeType": "StructuredDocumentation",
                    "src": "2996:198:0",
                    "text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."
                  },
                  "id": 93,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkRole",
                  "nameLocation": "3208:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 84,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 83,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3227:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "3219:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3219:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3218:14:0"
                  },
                  "returnParameters": {
                    "id": 85,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3255:0:0"
                  },
                  "scope": 295,
                  "src": "3199:103:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 113,
                    "nodeType": "Block",
                    "src": "3505:124:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3519:23:0",
                          "subExpression": {
                            "arguments": [
                              {
                                "id": 102,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 96,
                                "src": "3528:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 103,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 98,
                                "src": "3534:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 101,
                              "name": "hasRole",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80,
                              "src": "3520:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                                "typeString": "function (bytes32,address) view returns (bool)"
                              }
                            },
                            "id": 104,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3520:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 112,
                        "nodeType": "IfStatement",
                        "src": "3515:108:0",
                        "trueBody": {
                          "id": 111,
                          "nodeType": "Block",
                          "src": "3544:79:0",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "id": 107,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 98,
                                    "src": "3598:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 108,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 96,
                                    "src": "3607:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 106,
                                  "name": "AccessControlUnauthorizedAccount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 305,
                                  "src": "3565:32:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$_t_bytes32_$returns$_t_error_$",
                                    "typeString": "function (address,bytes32) pure returns (error)"
                                  }
                                },
                                "id": 109,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3565:47:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 110,
                              "nodeType": "RevertStatement",
                              "src": "3558:54:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 94,
                    "nodeType": "StructuredDocumentation",
                    "src": "3308:119:0",
                    "text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."
                  },
                  "id": 114,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkRole",
                  "nameLocation": "3441:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 99,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 96,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3460:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 114,
                        "src": "3452:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 95,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3452:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 98,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3474:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 114,
                        "src": "3466:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 97,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3466:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3451:31:0"
                  },
                  "returnParameters": {
                    "id": 100,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3505:0:0"
                  },
                  "scope": 295,
                  "src": "3432:197:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    353
                  ],
                  "body": {
                    "id": 127,
                    "nodeType": "Block",
                    "src": "3884:46:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 122,
                              "name": "_roles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26,
                              "src": "3901:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                                "typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
                              }
                            },
                            "id": 124,
                            "indexExpression": {
                              "id": 123,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 117,
                              "src": "3908:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3901:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RoleData_$21_storage",
                              "typeString": "struct AccessControl.RoleData storage ref"
                            }
                          },
                          "id": 125,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3914:9:0",
                          "memberName": "adminRole",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 20,
                          "src": "3901:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 121,
                        "id": 126,
                        "nodeType": "Return",
                        "src": "3894:29:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 115,
                    "nodeType": "StructuredDocumentation",
                    "src": "3635:170:0",
                    "text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
                  },
                  "functionSelector": "248a9ca3",
                  "id": 128,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRoleAdmin",
                  "nameLocation": "3819:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 118,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 117,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3840:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "3832:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3832:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3831:14:0"
                  },
                  "returnParameters": {
                    "id": 121,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 120,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "3875:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 119,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3875:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3874:9:0"
                  },
                  "scope": 295,
                  "src": "3810:120:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    361
                  ],
                  "body": {
                    "id": 146,
                    "nodeType": "Block",
                    "src": "4320:42:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 142,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 131,
                              "src": "4341:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 143,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 133,
                              "src": "4347:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 141,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "4330:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4330:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 145,
                        "nodeType": "ExpressionStatement",
                        "src": "4330:25:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 129,
                    "nodeType": "StructuredDocumentation",
                    "src": "3936:285:0",
                    "text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."
                  },
                  "functionSelector": "2f2ff15d",
                  "id": 147,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 137,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 131,
                              "src": "4313:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 136,
                            "name": "getRoleAdmin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 128,
                            "src": "4300:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                              "typeString": "function (bytes32) view returns (bytes32)"
                            }
                          },
                          "id": 138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4300:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 139,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 135,
                        "name": "onlyRole",
                        "nameLocations": [
                          "4291:8:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "4291:8:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4291:28:0"
                    }
                  ],
                  "name": "grantRole",
                  "nameLocation": "4235:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 134,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 131,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "4253:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "4245:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4245:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "4267:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "4259:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4259:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4244:31:0"
                  },
                  "returnParameters": {
                    "id": 140,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4320:0:0"
                  },
                  "scope": 295,
                  "src": "4226:136:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    369
                  ],
                  "body": {
                    "id": 165,
                    "nodeType": "Block",
                    "src": "4737:43:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 161,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 150,
                              "src": "4759:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 162,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 152,
                              "src": "4765:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 160,
                            "name": "_revokeRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "4747:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4747:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 164,
                        "nodeType": "ExpressionStatement",
                        "src": "4747:26:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 148,
                    "nodeType": "StructuredDocumentation",
                    "src": "4368:269:0",
                    "text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."
                  },
                  "functionSelector": "d547741f",
                  "id": 166,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 156,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 150,
                              "src": "4730:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 155,
                            "name": "getRoleAdmin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 128,
                            "src": "4717:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                              "typeString": "function (bytes32) view returns (bytes32)"
                            }
                          },
                          "id": 157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4717:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 158,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 154,
                        "name": "onlyRole",
                        "nameLocations": [
                          "4708:8:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "4708:8:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4708:28:0"
                    }
                  ],
                  "name": "revokeRole",
                  "nameLocation": "4651:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 150,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "4670:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "4662:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 149,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4662:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 152,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "4684:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "4676:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 151,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4676:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4661:31:0"
                  },
                  "returnParameters": {
                    "id": 159,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4737:0:0"
                  },
                  "scope": 295,
                  "src": "4642:138:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    377
                  ],
                  "body": {
                    "id": 188,
                    "nodeType": "Block",
                    "src": "5407:166:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 174,
                            "name": "callerConfirmation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 171,
                            "src": "5421:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 175,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 390,
                              "src": "5443:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 176,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5443:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5421:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 182,
                        "nodeType": "IfStatement",
                        "src": "5417:102:0",
                        "trueBody": {
                          "id": 181,
                          "nodeType": "Block",
                          "src": "5457:62:0",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 178,
                                  "name": "AccessControlBadConfirmation",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 308,
                                  "src": "5478:28:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                    "typeString": "function () pure returns (error)"
                                  }
                                },
                                "id": 179,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5478:30:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 180,
                              "nodeType": "RevertStatement",
                              "src": "5471:37:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 184,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "5541:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 185,
                              "name": "callerConfirmation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 171,
                              "src": "5547:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 183,
                            "name": "_revokeRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "5529:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5529:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 187,
                        "nodeType": "ExpressionStatement",
                        "src": "5529:37:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 167,
                    "nodeType": "StructuredDocumentation",
                    "src": "4786:537:0",
                    "text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."
                  },
                  "functionSelector": "36568abe",
                  "id": 189,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "renounceRole",
                  "nameLocation": "5337:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 169,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "5358:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 189,
                        "src": "5350:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 168,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5350:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 171,
                        "mutability": "mutable",
                        "name": "callerConfirmation",
                        "nameLocation": "5372:18:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 189,
                        "src": "5364:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 170,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5364:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5349:42:0"
                  },
                  "returnParameters": {
                    "id": 173,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5407:0:0"
                  },
                  "scope": 295,
                  "src": "5328:245:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 216,
                    "nodeType": "Block",
                    "src": "5771:174:0",
                    "statements": [
                      {
                        "assignments": [
                          198
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 198,
                            "mutability": "mutable",
                            "name": "previousAdminRole",
                            "nameLocation": "5789:17:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 216,
                            "src": "5781:25:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 197,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5781:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 202,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 200,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 192,
                              "src": "5822:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 199,
                            "name": "getRoleAdmin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 128,
                            "src": "5809:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                              "typeString": "function (bytes32) view returns (bytes32)"
                            }
                          },
                          "id": 201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5809:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5781:46:0"
                      },
                      {
                        "expression": {
                          "id": 208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 203,
                                "name": "_roles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26,
                                "src": "5837:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                                  "typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
                                }
                              },
                              "id": 205,
                              "indexExpression": {
                                "id": 204,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 192,
                                "src": "5844:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5837:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RoleData_$21_storage",
                                "typeString": "struct AccessControl.RoleData storage ref"
                              }
                            },
                            "id": 206,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "5850:9:0",
                            "memberName": "adminRole",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 20,
                            "src": "5837:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 207,
                            "name": "adminRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 194,
                            "src": "5862:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "5837:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 209,
                        "nodeType": "ExpressionStatement",
                        "src": "5837:34:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 211,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 192,
                              "src": "5903:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 212,
                              "name": "previousAdminRole",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 198,
                              "src": "5909:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 213,
                              "name": "adminRole",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 194,
                              "src": "5928:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 210,
                            "name": "RoleAdminChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "5886:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32,bytes32)"
                            }
                          },
                          "id": 214,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5886:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 215,
                        "nodeType": "EmitStatement",
                        "src": "5881:57:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 190,
                    "nodeType": "StructuredDocumentation",
                    "src": "5579:114:0",
                    "text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
                  },
                  "id": 217,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setRoleAdmin",
                  "nameLocation": "5707:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 195,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "5729:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 217,
                        "src": "5721:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5721:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 194,
                        "mutability": "mutable",
                        "name": "adminRole",
                        "nameLocation": "5743:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 217,
                        "src": "5735:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 193,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5735:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5720:33:0"
                  },
                  "returnParameters": {
                    "id": 196,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5771:0:0"
                  },
                  "scope": 295,
                  "src": "5698:247:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 255,
                    "nodeType": "Block",
                    "src": "6262:233:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 231,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "6276:23:0",
                          "subExpression": {
                            "arguments": [
                              {
                                "id": 228,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 220,
                                "src": "6285:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 229,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 222,
                                "src": "6291:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 227,
                              "name": "hasRole",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80,
                              "src": "6277:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                                "typeString": "function (bytes32,address) view returns (bool)"
                              }
                            },
                            "id": 230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6277:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 253,
                          "nodeType": "Block",
                          "src": "6452:37:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 251,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6473:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "functionReturnParameters": 226,
                              "id": 252,
                              "nodeType": "Return",
                              "src": "6466:12:0"
                            }
                          ]
                        },
                        "id": 254,
                        "nodeType": "IfStatement",
                        "src": "6272:217:0",
                        "trueBody": {
                          "id": 250,
                          "nodeType": "Block",
                          "src": "6301:145:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 239,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 232,
                                        "name": "_roles",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 26,
                                        "src": "6315:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                                          "typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
                                        }
                                      },
                                      "id": 234,
                                      "indexExpression": {
                                        "id": 233,
                                        "name": "role",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 220,
                                        "src": "6322:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "6315:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_RoleData_$21_storage",
                                        "typeString": "struct AccessControl.RoleData storage ref"
                                      }
                                    },
                                    "id": 235,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6328:7:0",
                                    "memberName": "hasRole",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 18,
                                    "src": "6315:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    }
                                  },
                                  "id": 237,
                                  "indexExpression": {
                                    "id": 236,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 222,
                                    "src": "6336:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6315:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 238,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6347:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "6315:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 240,
                              "nodeType": "ExpressionStatement",
                              "src": "6315:36:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 242,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 220,
                                    "src": "6382:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "id": 243,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 222,
                                    "src": "6388:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 244,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 390,
                                      "src": "6397:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 245,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6397:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 241,
                                  "name": "RoleGranted",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 326,
                                  "src": "6370:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
                                    "typeString": "function (bytes32,address,address)"
                                  }
                                },
                                "id": 246,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6370:40:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 247,
                              "nodeType": "EmitStatement",
                              "src": "6365:45:0"
                            },
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 248,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6431:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 226,
                              "id": 249,
                              "nodeType": "Return",
                              "src": "6424:11:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 218,
                    "nodeType": "StructuredDocumentation",
                    "src": "5951:223:0",
                    "text": " @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."
                  },
                  "id": 256,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_grantRole",
                  "nameLocation": "6188:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 223,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 220,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "6207:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 256,
                        "src": "6199:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 219,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6199:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 222,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6221:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 256,
                        "src": "6213:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 221,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6213:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6198:31:0"
                  },
                  "returnParameters": {
                    "id": 226,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 225,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 256,
                        "src": "6256:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 224,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6256:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6255:6:0"
                  },
                  "scope": 295,
                  "src": "6179:316:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 293,
                    "nodeType": "Block",
                    "src": "6816:233:0",
                    "statements": [
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 267,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 259,
                              "src": "6838:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 268,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 261,
                              "src": "6844:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 266,
                            "name": "hasRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80,
                            "src": "6830:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) view returns (bool)"
                            }
                          },
                          "id": 269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6830:22:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 291,
                          "nodeType": "Block",
                          "src": "7006:37:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 289,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7027:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "functionReturnParameters": 265,
                              "id": 290,
                              "nodeType": "Return",
                              "src": "7020:12:0"
                            }
                          ]
                        },
                        "id": 292,
                        "nodeType": "IfStatement",
                        "src": "6826:217:0",
                        "trueBody": {
                          "id": 288,
                          "nodeType": "Block",
                          "src": "6854:146:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 277,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 270,
                                        "name": "_roles",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 26,
                                        "src": "6868:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
                                          "typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
                                        }
                                      },
                                      "id": 272,
                                      "indexExpression": {
                                        "id": 271,
                                        "name": "role",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 259,
                                        "src": "6875:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "6868:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_RoleData_$21_storage",
                                        "typeString": "struct AccessControl.RoleData storage ref"
                                      }
                                    },
                                    "id": 273,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6881:7:0",
                                    "memberName": "hasRole",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 18,
                                    "src": "6868:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    }
                                  },
                                  "id": 275,
                                  "indexExpression": {
                                    "id": 274,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 261,
                                    "src": "6889:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6868:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "66616c7365",
                                  "id": 276,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6900:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                },
                                "src": "6868:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 278,
                              "nodeType": "ExpressionStatement",
                              "src": "6868:37:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 280,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 259,
                                    "src": "6936:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "id": 281,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 261,
                                    "src": "6942:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 282,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 390,
                                      "src": "6951:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 283,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6951:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 279,
                                  "name": "RoleRevoked",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 335,
                                  "src": "6924:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
                                    "typeString": "function (bytes32,address,address)"
                                  }
                                },
                                "id": 284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6924:40:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 285,
                              "nodeType": "EmitStatement",
                              "src": "6919:45:0"
                            },
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 286,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6985:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 265,
                              "id": 287,
                              "nodeType": "Return",
                              "src": "6978:11:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 257,
                    "nodeType": "StructuredDocumentation",
                    "src": "6501:226:0",
                    "text": " @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."
                  },
                  "id": 294,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revokeRole",
                  "nameLocation": "6741:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 259,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "6761:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "6753:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 258,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6753:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 261,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6775:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "6767:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6767:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6752:31:0"
                  },
                  "returnParameters": {
                    "id": 265,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "6810:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6810:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6809:6:0"
                  },
                  "scope": 295,
                  "src": "6732:317:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 296,
              "src": "1953:5098:0",
              "usedErrors": [
                305,
                308
              ],
              "usedEvents": [
                317,
                326,
                335
              ]
            }
          ],
          "src": "108:6944:0"
        }
      },
      "@openzeppelin/contracts/access/IAccessControl.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
          "exportedSymbols": {
            "IAccessControl": [
              378
            ]
          },
          "id": 379,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 297,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "109:24:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IAccessControl",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 298,
                "nodeType": "StructuredDocumentation",
                "src": "135:90:1",
                "text": " @dev External interface of AccessControl declared to support ERC-165 detection."
              },
              "fullyImplemented": false,
              "id": 378,
              "linearizedBaseContracts": [
                378
              ],
              "name": "IAccessControl",
              "nameLocation": "236:14:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 299,
                    "nodeType": "StructuredDocumentation",
                    "src": "257:56:1",
                    "text": " @dev The `account` is missing a role."
                  },
                  "errorSelector": "e2517d3f",
                  "id": 305,
                  "name": "AccessControlUnauthorizedAccount",
                  "nameLocation": "324:32:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 304,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 301,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "365:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 305,
                        "src": "357:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 300,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "357:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 303,
                        "mutability": "mutable",
                        "name": "neededRole",
                        "nameLocation": "382:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 305,
                        "src": "374:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 302,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "374:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "356:37:1"
                  },
                  "src": "318:76:1"
                },
                {
                  "documentation": {
                    "id": 306,
                    "nodeType": "StructuredDocumentation",
                    "src": "400:148:1",
                    "text": " @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
                  },
                  "errorSelector": "6697b232",
                  "id": 308,
                  "name": "AccessControlBadConfirmation",
                  "nameLocation": "559:28:1",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 307,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "587:2:1"
                  },
                  "src": "553:37:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 309,
                    "nodeType": "StructuredDocumentation",
                    "src": "596:254:1",
                    "text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted to signal this."
                  },
                  "eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
                  "id": 317,
                  "name": "RoleAdminChanged",
                  "nameLocation": "861:16:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 316,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 311,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "894:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 317,
                        "src": "878:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 310,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "878:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 313,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousAdminRole",
                        "nameLocation": "916:17:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 317,
                        "src": "900:33:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 312,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "900:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 315,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAdminRole",
                        "nameLocation": "951:12:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 317,
                        "src": "935:28:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 314,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "935:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "877:87:1"
                  },
                  "src": "855:110:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 318,
                    "nodeType": "StructuredDocumentation",
                    "src": "971:295:1",
                    "text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
                  },
                  "eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                  "id": 326,
                  "name": "RoleGranted",
                  "nameLocation": "1277:11:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 325,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 320,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "1305:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 326,
                        "src": "1289:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 319,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1289:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 322,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "1327:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 326,
                        "src": "1311:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 321,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1311:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 324,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "1352:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 326,
                        "src": "1336:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 323,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1336:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1288:71:1"
                  },
                  "src": "1271:89:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 327,
                    "nodeType": "StructuredDocumentation",
                    "src": "1366:275:1",
                    "text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
                  },
                  "eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
                  "id": 335,
                  "name": "RoleRevoked",
                  "nameLocation": "1652:11:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 334,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 329,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "1680:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 335,
                        "src": "1664:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 328,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1664:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 331,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "1702:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 335,
                        "src": "1686:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 330,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1686:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 333,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "1727:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 335,
                        "src": "1711:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 332,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1711:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1663:71:1"
                  },
                  "src": "1646:89:1"
                },
                {
                  "documentation": {
                    "id": 336,
                    "nodeType": "StructuredDocumentation",
                    "src": "1741:76:1",
                    "text": " @dev Returns `true` if `account` has been granted `role`."
                  },
                  "functionSelector": "91d14854",
                  "id": 345,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasRole",
                  "nameLocation": "1831:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 341,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 338,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "1847:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 345,
                        "src": "1839:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 337,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1839:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 340,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "1861:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 345,
                        "src": "1853:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 339,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1853:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1838:31:1"
                  },
                  "returnParameters": {
                    "id": 344,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 345,
                        "src": "1893:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1893:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1892:6:1"
                  },
                  "scope": 378,
                  "src": "1822:77:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 346,
                    "nodeType": "StructuredDocumentation",
                    "src": "1905:184:1",
                    "text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
                  },
                  "functionSelector": "248a9ca3",
                  "id": 353,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRoleAdmin",
                  "nameLocation": "2103:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 349,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 348,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2124:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 353,
                        "src": "2116:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 347,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2116:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2115:14:1"
                  },
                  "returnParameters": {
                    "id": 352,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 351,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 353,
                        "src": "2153:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 350,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2153:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2152:9:1"
                  },
                  "scope": 378,
                  "src": "2094:68:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 354,
                    "nodeType": "StructuredDocumentation",
                    "src": "2168:239:1",
                    "text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
                  },
                  "functionSelector": "2f2ff15d",
                  "id": 361,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "grantRole",
                  "nameLocation": "2421:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 359,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 356,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2439:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "2431:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 355,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2431:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 358,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2453:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "2445:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 357,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2445:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2430:31:1"
                  },
                  "returnParameters": {
                    "id": 360,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2470:0:1"
                  },
                  "scope": 378,
                  "src": "2412:59:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 362,
                    "nodeType": "StructuredDocumentation",
                    "src": "2477:223:1",
                    "text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
                  },
                  "functionSelector": "d547741f",
                  "id": 369,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "revokeRole",
                  "nameLocation": "2714:10:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 367,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 364,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2733:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 369,
                        "src": "2725:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 363,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2725:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 366,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2747:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 369,
                        "src": "2739:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 365,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2739:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2724:31:1"
                  },
                  "returnParameters": {
                    "id": 368,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2764:0:1"
                  },
                  "scope": 378,
                  "src": "2705:60:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 370,
                    "nodeType": "StructuredDocumentation",
                    "src": "2771:491:1",
                    "text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."
                  },
                  "functionSelector": "36568abe",
                  "id": 377,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "renounceRole",
                  "nameLocation": "3276:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 375,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 372,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3297:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 377,
                        "src": "3289:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 371,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3289:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 374,
                        "mutability": "mutable",
                        "name": "callerConfirmation",
                        "nameLocation": "3311:18:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 377,
                        "src": "3303:26:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 373,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3303:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3288:42:1"
                  },
                  "returnParameters": {
                    "id": 376,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3339:0:1"
                  },
                  "scope": 378,
                  "src": "3267:73:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 379,
              "src": "226:3116:1",
              "usedErrors": [
                305,
                308
              ],
              "usedEvents": [
                317,
                326,
                335
              ]
            }
          ],
          "src": "109:3234:1"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              408
            ]
          },
          "id": 409,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 380,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:24:2"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 381,
                "nodeType": "StructuredDocumentation",
                "src": "127:496:2",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 408,
              "linearizedBaseContracts": [
                408
              ],
              "name": "Context",
              "nameLocation": "642:7:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 389,
                    "nodeType": "Block",
                    "src": "718:34:2",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 386,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "735:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "739:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "735:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 385,
                        "id": 388,
                        "nodeType": "Return",
                        "src": "728:17:2"
                      }
                    ]
                  },
                  "id": 390,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "665:10:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 382,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "675:2:2"
                  },
                  "returnParameters": {
                    "id": 385,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 390,
                        "src": "709:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "709:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "708:9:2"
                  },
                  "scope": 408,
                  "src": "656:96:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 398,
                    "nodeType": "Block",
                    "src": "825:32:2",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 395,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "842:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "846:4:2",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "842:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 394,
                        "id": 397,
                        "nodeType": "Return",
                        "src": "835:15:2"
                      }
                    ]
                  },
                  "id": 399,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "767:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 391,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "775:2:2"
                  },
                  "returnParameters": {
                    "id": 394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 393,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 399,
                        "src": "809:14:2",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 392,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "808:16:2"
                  },
                  "scope": 408,
                  "src": "758:99:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 406,
                    "nodeType": "Block",
                    "src": "935:25:2",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 404,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "952:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 403,
                        "id": 405,
                        "nodeType": "Return",
                        "src": "945:8:2"
                      }
                    ]
                  },
                  "id": 407,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_contextSuffixLength",
                  "nameLocation": "872:20:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 400,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "892:2:2"
                  },
                  "returnParameters": {
                    "id": 403,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 402,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 407,
                        "src": "926:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 401,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "926:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "925:9:2"
                  },
                  "scope": 408,
                  "src": "863:97:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 409,
              "src": "624:338:2",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "101:862:2"
        }
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
          "exportedSymbols": {
            "ERC165": [
              432
            ],
            "IERC165": [
              444
            ]
          },
          "id": 433,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 410,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "114:24:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
              "file": "./IERC165.sol",
              "id": 412,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 433,
              "sourceUnit": 445,
              "src": "140:38:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 411,
                    "name": "IERC165",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 444,
                    "src": "148:7:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 414,
                    "name": "IERC165",
                    "nameLocations": [
                      "688:7:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 444,
                    "src": "688:7:3"
                  },
                  "id": 415,
                  "nodeType": "InheritanceSpecifier",
                  "src": "688:7:3"
                }
              ],
              "canonicalName": "ERC165",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 413,
                "nodeType": "StructuredDocumentation",
                "src": "180:479:3",
                "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"
              },
              "fullyImplemented": true,
              "id": 432,
              "linearizedBaseContracts": [
                432,
                444
              ],
              "name": "ERC165",
              "nameLocation": "678:6:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [
                    443
                  ],
                  "body": {
                    "id": 430,
                    "nodeType": "Block",
                    "src": "845:64:3",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 423,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 418,
                            "src": "862:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 425,
                                  "name": "IERC165",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 444,
                                  "src": "882:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$444_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$444_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                ],
                                "id": 424,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967269,
                                "src": "877:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 426,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "877:13:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$444",
                                "typeString": "type(contract IERC165)"
                              }
                            },
                            "id": 427,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "891:11:3",
                            "memberName": "interfaceId",
                            "nodeType": "MemberAccess",
                            "src": "877:25:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "862:40:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 422,
                        "id": 429,
                        "nodeType": "Return",
                        "src": "855:47:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 416,
                    "nodeType": "StructuredDocumentation",
                    "src": "702:56:3",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 431,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "772:17:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 418,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "797:11:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 431,
                        "src": "790:18:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 417,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "790:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "789:20:3"
                  },
                  "returnParameters": {
                    "id": 422,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 421,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 431,
                        "src": "839:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 420,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "839:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "838:6:3"
                  },
                  "scope": 432,
                  "src": "763:146:3",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 433,
              "src": "660:251:3",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "114:798:3"
        }
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "id": 4,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
          "exportedSymbols": {
            "IERC165": [
              444
            ]
          },
          "id": 445,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 434,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "115:24:4"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC165",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 435,
                "nodeType": "StructuredDocumentation",
                "src": "141:280:4",
                "text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
              },
              "fullyImplemented": false,
              "id": 444,
              "linearizedBaseContracts": [
                444
              ],
              "name": "IERC165",
              "nameLocation": "432:7:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 436,
                    "nodeType": "StructuredDocumentation",
                    "src": "446:340:4",
                    "text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 443,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "800:17:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 439,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 438,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "825:11:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 443,
                        "src": "818:18:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 437,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "818:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "817:20:4"
                  },
                  "returnParameters": {
                    "id": 442,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 441,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 443,
                        "src": "861:4:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 440,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "861:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "860:6:4"
                  },
                  "scope": 444,
                  "src": "791:76:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 445,
              "src": "422:447:4",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "115:755:4"
        }
      },
      "contracts/IStaking.sol": {
        "id": 5,
        "ast": {
          "absolutePath": "contracts/IStaking.sol",
          "exportedSymbols": {
            "IStaking": [
              634
            ],
            "IStakingBasic": [
              539
            ],
            "IStakingRewards": [
              627
            ],
            "IStakingRoles": [
              613
            ]
          },
          "id": 635,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 446,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".26"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:5"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingBasic",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 447,
                "nodeType": "StructuredDocumentation",
                "src": "2005:279:5",
                "text": "@title Staking Interface\n @notice Allows users to bond, unbond, and manage their bonded amounts in the staking system. For doing more interesting things, such as nomination, see `StakingRoles`.\n @dev Talks to the directly `pallet-staking-async`.\n @author kianenigma"
              },
              "fullyImplemented": false,
              "id": 539,
              "linearizedBaseContracts": [
                539
              ],
              "name": "IStakingBasic",
              "nameLocation": "2294:13:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "IStakingBasic.Stake",
                  "id": 452,
                  "members": [
                    {
                      "constant": false,
                      "id": 449,
                      "mutability": "mutable",
                      "name": "active",
                      "nameLocation": "2336:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 452,
                      "src": "2328:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 448,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "2328:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 451,
                      "mutability": "mutable",
                      "name": "total",
                      "nameLocation": "2395:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 452,
                      "src": "2387:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 450,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "2387:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Stake",
                  "nameLocation": "2318:5:5",
                  "nodeType": "StructDefinition",
                  "scope": 539,
                  "src": "2311:141:5",
                  "visibility": "public"
                },
                {
                  "canonicalName": "IStakingBasic.Unbonding",
                  "id": 457,
                  "members": [
                    {
                      "constant": false,
                      "id": 454,
                      "mutability": "mutable",
                      "name": "era",
                      "nameLocation": "2483:3:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "2476:10:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 453,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2476:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 456,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "2547:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "2539:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 455,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "2539:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Unbonding",
                  "nameLocation": "2462:9:5",
                  "nodeType": "StructDefinition",
                  "scope": 539,
                  "src": "2455:146:5",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 458,
                    "nodeType": "StructuredDocumentation",
                    "src": "2604:473:5",
                    "text": "@notice Bonds the caller's account, increasing the bonded amount by up to `value` tokens. The caller's bonded amount after this call must be be greater than `minimum_bond()`.\n @return amount The actual amount that was additionally bonded. Returns 0 on failure.\n @dev At the moment, staking pallet only imposes `ED` as the minimum bond. A separate PR should parameterize this and use `ed.max(minimum_bond)` instead. This is a wrapper for `bond` and `bond_extra`."
                  },
                  "functionSelector": "64c9ec6f",
                  "id": 463,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "bond",
                  "nameLocation": "3088:4:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 459,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3092:2:5"
                  },
                  "returnParameters": {
                    "id": 462,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3129:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 463,
                        "src": "3121:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "3121:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3120:16:5"
                  },
                  "scope": 539,
                  "src": "3079:58:5",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 464,
                    "nodeType": "StructuredDocumentation",
                    "src": "3140:511:5",
                    "text": "@notice Unbonds up to `value` tokens from the caller's account. Note that unbonding is a two step process, and should be followed by `withdraw_unbonded()` to actually withdraw the unbonded tokens. .\n @dev A staker cannot request an unbond such that their leftover bond is less than `minimum_bond()`, unless if the leftover is zero. For this you can also use `full_unbond()`.\n @param value The amount of tokens to unbond.\n @return amount The actual amount that was unbonded. Returns 0 on failure."
                  },
                  "functionSelector": "e8111842",
                  "id": 471,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unbond",
                  "nameLocation": "3662:6:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 467,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 466,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3677:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 471,
                        "src": "3669:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 465,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "3669:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3668:15:5"
                  },
                  "returnParameters": {
                    "id": 470,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 469,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3710:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 471,
                        "src": "3702:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 468,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "3702:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3701:16:5"
                  },
                  "scope": 539,
                  "src": "3653:65:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 472,
                    "nodeType": "StructuredDocumentation",
                    "src": "3721:201:5",
                    "text": "@notice Unbonds all tokens, preparing to leave the staking system with `withdraw_unbonded`.\n @dev A shorthand for `unbond(bond.active)`.\n @return amount The actual amount that was unbonded."
                  },
                  "functionSelector": "22b223ed",
                  "id": 477,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "full_unbond",
                  "nameLocation": "3933:11:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 473,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3944:2:5"
                  },
                  "returnParameters": {
                    "id": 476,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 475,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3973:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 477,
                        "src": "3965:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 474,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "3965:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3964:16:5"
                  },
                  "scope": 539,
                  "src": "3924:57:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 478,
                    "nodeType": "StructuredDocumentation",
                    "src": "3984:275:5",
                    "text": "@notice Rebonds up to `value` tokens from the caller's previously unbonded amount.\n @dev Essentially for \"I unbonded, but I have now changed my mind\" situation.\n @param value The amount of tokens to rebond.\n @return amount The actual amount that was rebonded."
                  },
                  "functionSelector": "efb073f0",
                  "id": 485,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "rebond_unbonded",
                  "nameLocation": "4270:15:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 481,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 480,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4294:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "4286:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 479,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4286:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4285:15:5"
                  },
                  "returnParameters": {
                    "id": 484,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 483,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4327:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "4319:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 482,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4319:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4318:16:5"
                  },
                  "scope": 539,
                  "src": "4261:74:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 486,
                    "nodeType": "StructuredDocumentation",
                    "src": "4338:140:5",
                    "text": "@notice Withdraws any previously unbonded tokens that have passed the unbonding period.\n @return amount The actual amount withdrawn."
                  },
                  "functionSelector": "77a0fe02",
                  "id": 491,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw_unbonded",
                  "nameLocation": "4489:17:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 487,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4506:2:5"
                  },
                  "returnParameters": {
                    "id": 490,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 489,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4535:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "4527:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 488,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4527:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4526:16:5"
                  },
                  "scope": 539,
                  "src": "4480:63:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 492,
                    "nodeType": "StructuredDocumentation",
                    "src": "4546:336:5",
                    "text": "@notice Sets the reward destination address for the caller.\n @param payee The address to receive rewards. Where and how rewards come from is not in the scope of this interface. Upon declaring a `role`, an account might receive rewards.\n @return bonded `true` if the caller is bonded and can set the payee, `false` otherwise."
                  },
                  "functionSelector": "ec9b28f1",
                  "id": 499,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "set_payee",
                  "nameLocation": "4893:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 495,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 494,
                        "mutability": "mutable",
                        "name": "payee",
                        "nameLocation": "4911:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "4903:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 493,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4903:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4902:15:5"
                  },
                  "returnParameters": {
                    "id": 498,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 497,
                        "mutability": "mutable",
                        "name": "bonded",
                        "nameLocation": "4941:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "4936:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 496,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4936:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4935:13:5"
                  },
                  "scope": 539,
                  "src": "4884:65:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 500,
                    "nodeType": "StructuredDocumentation",
                    "src": "4952:231:5",
                    "text": "@notice Returns the minimum amount of tokens required to be bonded.\n @dev This is the minimum amount needed to be a `CHILLED` staker. Implementation: `ed.max(minimum_bond)`.\n @return minimumBond The minimum bond amount."
                  },
                  "functionSelector": "3eb9776c",
                  "id": 505,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_bond",
                  "nameLocation": "5194:12:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 501,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5206:2:5"
                  },
                  "returnParameters": {
                    "id": 504,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 503,
                        "mutability": "mutable",
                        "name": "minimumBond",
                        "nameLocation": "5240:11:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 505,
                        "src": "5232:19:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 502,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "5232:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5231:21:5"
                  },
                  "scope": 539,
                  "src": "5185:68:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 506,
                    "nodeType": "StructuredDocumentation",
                    "src": "5256:162:5",
                    "text": "@notice Returns the current bonded stake of the caller\n @dev Implemented exactly as `StakingLedger`.\n @return stake The `Stake`d amount of the caller."
                  },
                  "functionSelector": "64e7b428",
                  "id": 512,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake_of",
                  "nameLocation": "5429:8:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 507,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5437:2:5"
                  },
                  "returnParameters": {
                    "id": 511,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 510,
                        "mutability": "mutable",
                        "name": "stake",
                        "nameLocation": "5476:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "5463:18:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Stake_$452_memory_ptr",
                          "typeString": "struct IStakingBasic.Stake"
                        },
                        "typeName": {
                          "id": 509,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 508,
                            "name": "Stake",
                            "nameLocations": [
                              "5463:5:5"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 452,
                            "src": "5463:5:5"
                          },
                          "referencedDeclaration": 452,
                          "src": "5463:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                            "typeString": "struct IStakingBasic.Stake"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5462:20:5"
                  },
                  "scope": 539,
                  "src": "5420:63:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 513,
                    "nodeType": "StructuredDocumentation",
                    "src": "5486:316:5",
                    "text": "@notice Returns the total amount that the caller can further stake, considering balance and existence requirements.\n @dev Ensures enough balance is left in the account for existence requirements, but does not leave anything for gas fee payment.\n @return stakeable The maximum amount the caller can stake."
                  },
                  "functionSelector": "498aa0f1",
                  "id": 518,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake_able",
                  "nameLocation": "5813:10:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 514,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5823:2:5"
                  },
                  "returnParameters": {
                    "id": 517,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 516,
                        "mutability": "mutable",
                        "name": "stakeable",
                        "nameLocation": "5857:9:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 518,
                        "src": "5849:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 515,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "5849:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5848:19:5"
                  },
                  "scope": 539,
                  "src": "5804:64:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 519,
                    "nodeType": "StructuredDocumentation",
                    "src": "5871:121:5",
                    "text": "@notice Returns the payee account for the contract address.\n @return payee The address that will receive rewards."
                  },
                  "functionSelector": "ae90b213",
                  "id": 524,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payee",
                  "nameLocation": "6003:5:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 520,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6008:2:5"
                  },
                  "returnParameters": {
                    "id": 523,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 522,
                        "mutability": "mutable",
                        "name": "payee",
                        "nameLocation": "6042:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "6034:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 521,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6034:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6033:15:5"
                  },
                  "scope": 539,
                  "src": "5994:55:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 525,
                    "nodeType": "StructuredDocumentation",
                    "src": "6052:357:5",
                    "text": "@notice Returns the current `era` number of the staking system.\n @dev The era number is the unit of time in the staking system. It does not have a 100% fixed duration, but it aims to be at a parameterized value. For example, eras in Polkadot eras are aiming to be 24 hours. Implementation: `active_era.index`\n @return era The current era number."
                  },
                  "functionSelector": "143e55e0",
                  "id": 530,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "era",
                  "nameLocation": "6420:3:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 526,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6423:2:5"
                  },
                  "returnParameters": {
                    "id": 529,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 528,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 530,
                        "src": "6449:6:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 527,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6449:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6448:8:5"
                  },
                  "scope": 539,
                  "src": "6411:46:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 531,
                    "nodeType": "StructuredDocumentation",
                    "src": "6460:347:5",
                    "text": "@notice Returns the unbonding queue of the caller.\n @dev a list of `(era, amount)`. Once any of the said eras are reached (check via `era`), the amount is withdraw-able via `withdraw_unbonded()`.\n @return unbondingQueue An array of Unbonding structs containing the era and amount scheduled to be unbonded in that (probably future) era."
                  },
                  "functionSelector": "262c5f0f",
                  "id": 538,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unbonding_queue",
                  "nameLocation": "6818:15:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6833:2:5"
                  },
                  "returnParameters": {
                    "id": 537,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 536,
                        "mutability": "mutable",
                        "name": "unbondingQueue",
                        "nameLocation": "6878:14:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 538,
                        "src": "6859:33:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IStakingBasic.Unbonding[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 534,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 533,
                              "name": "Unbonding",
                              "nameLocations": [
                                "6859:9:5"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 457,
                              "src": "6859:9:5"
                            },
                            "referencedDeclaration": 457,
                            "src": "6859:9:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Unbonding_$457_storage_ptr",
                              "typeString": "struct IStakingBasic.Unbonding"
                            }
                          },
                          "id": 535,
                          "nodeType": "ArrayTypeName",
                          "src": "6859:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                            "typeString": "struct IStakingBasic.Unbonding[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6858:35:5"
                  },
                  "scope": 539,
                  "src": "6809:85:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 635,
              "src": "2284:4612:5",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingRoles",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 540,
                "nodeType": "StructuredDocumentation",
                "src": "6898:143:5",
                "text": "@title StakingRoles Interface\n @notice Allows setting roles in the Staking system for validators and nominators.\n @author kianenigma"
              },
              "fullyImplemented": false,
              "id": 613,
              "linearizedBaseContracts": [
                613
              ],
              "name": "IStakingRoles",
              "nameLocation": "7051:13:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "IStakingRoles.Roles",
                  "documentation": {
                    "id": 541,
                    "nodeType": "StructuredDocumentation",
                    "src": "7069:97:5",
                    "text": "@title StakingRoles Interface\n @notice Used for setting the roles in the staking system."
                  },
                  "id": 545,
                  "members": [
                    {
                      "id": 542,
                      "name": "CHILLED",
                      "nameLocation": "7228:7:5",
                      "nodeType": "EnumValue",
                      "src": "7228:7:5"
                    },
                    {
                      "id": 543,
                      "name": "VALIDATOR",
                      "nameLocation": "7274:9:5",
                      "nodeType": "EnumValue",
                      "src": "7274:9:5"
                    },
                    {
                      "id": 544,
                      "name": "NOMINATOR",
                      "nameLocation": "7322:9:5",
                      "nodeType": "EnumValue",
                      "src": "7322:9:5"
                    }
                  ],
                  "name": "Roles",
                  "nameLocation": "7174:5:5",
                  "nodeType": "EnumDefinition",
                  "src": "7169:166:5"
                },
                {
                  "documentation": {
                    "id": 546,
                    "nodeType": "StructuredDocumentation",
                    "src": "7339:318:5",
                    "text": "@notice Declare the sender's intention to be a nominator, selecting `targets` as their preference.\n @dev Effects can be checked with `role` and `nominations`.\n @param targets An array of addresses to nominate.\n @return bonded True if the caller is bonded and therefore can nominate, false otherwise."
                  },
                  "functionSelector": "19f2fdad",
                  "id": 554,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nominate",
                  "nameLocation": "7669:8:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 550,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "targets",
                        "nameLocation": "7697:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "7678:26:5",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 547,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7678:7:5",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 548,
                          "nodeType": "ArrayTypeName",
                          "src": "7678:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7677:28:5"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 552,
                        "mutability": "mutable",
                        "name": "bonded",
                        "nameLocation": "7729:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "7724:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 551,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7724:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7723:13:5"
                  },
                  "scope": 613,
                  "src": "7660:77:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 555,
                    "nodeType": "StructuredDocumentation",
                    "src": "7741:335:5",
                    "text": "@notice Declare the sender's intention to be a validator, selecting `commission` as their preference.\n @dev Effects can be checked with `role` and `commission`.\n @param commission The commission rate for the validator.\n @return bonded Returns true if the caller is bonded and therefore can validate, false otherwise."
                  },
                  "functionSelector": "ac0d45e2",
                  "id": 562,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "validate",
                  "nameLocation": "8088:8:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 558,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 557,
                        "mutability": "mutable",
                        "name": "commission",
                        "nameLocation": "8104:10:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 562,
                        "src": "8097:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 556,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8097:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8096:19:5"
                  },
                  "returnParameters": {
                    "id": 561,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 560,
                        "mutability": "mutable",
                        "name": "bonded",
                        "nameLocation": "8139:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 562,
                        "src": "8134:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 559,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "8134:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8133:13:5"
                  },
                  "scope": 613,
                  "src": "8079:68:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 563,
                    "nodeType": "StructuredDocumentation",
                    "src": "8151:252:5",
                    "text": "@notice Nullifies the effect of `validate` or `nominate`.\n @dev Has to be called before `unbond` if the intention is to fully leave the staking system.\n @return bonded True if the caller is bonded and therefore can chill, false otherwise."
                  },
                  "functionSelector": "2b8a3ae6",
                  "id": 568,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "chill",
                  "nameLocation": "8415:5:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 564,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8420:2:5"
                  },
                  "returnParameters": {
                    "id": 567,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 566,
                        "mutability": "mutable",
                        "name": "bonded",
                        "nameLocation": "8446:6:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 568,
                        "src": "8441:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 565,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "8441:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8440:13:5"
                  },
                  "scope": 613,
                  "src": "8406:48:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 569,
                    "nodeType": "StructuredDocumentation",
                    "src": "8458:247:5",
                    "text": "@notice the maximum number of nomination targets that a staker can declare upon `bond`.\n @dev the upper bound of the size of the `targets` array in `nominate`. It might be dynamic based on the runtime, or even the caller's staked balance."
                  },
                  "functionSelector": "727f17f2",
                  "id": 574,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max_nominations",
                  "nameLocation": "8717:15:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 570,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8732:2:5"
                  },
                  "returnParameters": {
                    "id": 573,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 572,
                        "mutability": "mutable",
                        "name": "maxNominations",
                        "nameLocation": "8765:14:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 574,
                        "src": "8758:21:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 571,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8758:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8757:23:5"
                  },
                  "scope": 613,
                  "src": "8708:73:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 575,
                    "nodeType": "StructuredDocumentation",
                    "src": "8785:108:5",
                    "text": "@notice Returns the role of the caller.\n @return role The role of the caller from the `Roles` enum."
                  },
                  "functionSelector": "10055c1d",
                  "id": 581,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "role",
                  "nameLocation": "8905:4:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 576,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8909:2:5"
                  },
                  "returnParameters": {
                    "id": 580,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 579,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "8941:4:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 581,
                        "src": "8935:10:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$545",
                          "typeString": "enum IStakingRoles.Roles"
                        },
                        "typeName": {
                          "id": 578,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 577,
                            "name": "Roles",
                            "nameLocations": [
                              "8935:5:5"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 545,
                            "src": "8935:5:5"
                          },
                          "referencedDeclaration": 545,
                          "src": "8935:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8934:12:5"
                  },
                  "scope": 613,
                  "src": "8896:51:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 582,
                    "nodeType": "StructuredDocumentation",
                    "src": "8951:113:5",
                    "text": "@notice Returns the addresses that the caller is nominating.\n @return nominations An array of addresses."
                  },
                  "functionSelector": "d1d4d3e4",
                  "id": 588,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nominations",
                  "nameLocation": "9076:11:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 583,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9087:2:5"
                  },
                  "returnParameters": {
                    "id": 587,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 586,
                        "mutability": "mutable",
                        "name": "nominations",
                        "nameLocation": "9130:11:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 588,
                        "src": "9113:28:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 584,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9113:7:5",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 585,
                          "nodeType": "ArrayTypeName",
                          "src": "9113:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9112:30:5"
                  },
                  "scope": 613,
                  "src": "9067:76:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 589,
                    "nodeType": "StructuredDocumentation",
                    "src": "9147:130:5",
                    "text": "@notice Returns the commission rate of the caller, if they are a validator.\n @return commission The validator commission."
                  },
                  "functionSelector": "e1489191",
                  "id": 594,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "commission",
                  "nameLocation": "9289:10:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 590,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9299:2:5"
                  },
                  "returnParameters": {
                    "id": 593,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 592,
                        "mutability": "mutable",
                        "name": "commission",
                        "nameLocation": "9332:10:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 594,
                        "src": "9325:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 591,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9325:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9324:19:5"
                  },
                  "scope": 613,
                  "src": "9280:64:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 595,
                    "nodeType": "StructuredDocumentation",
                    "src": "9348:118:5",
                    "text": "@notice Returns the minimum bond required for validator\n @return uint128 The amount of minimum stake required"
                  },
                  "functionSelector": "b35ae446",
                  "id": 600,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_validator_bond",
                  "nameLocation": "9478:22:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 596,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9500:2:5"
                  },
                  "returnParameters": {
                    "id": 599,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 598,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 600,
                        "src": "9526:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 597,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "9526:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9525:9:5"
                  },
                  "scope": 613,
                  "src": "9469:66:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 601,
                    "nodeType": "StructuredDocumentation",
                    "src": "9539:118:5",
                    "text": "@notice Returns the minimum bond required for validator\n @return uint128 The amount of minimum stake required"
                  },
                  "functionSelector": "385496f7",
                  "id": 606,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_nominator_bond",
                  "nameLocation": "9669:22:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 602,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9691:2:5"
                  },
                  "returnParameters": {
                    "id": 605,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 604,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 606,
                        "src": "9717:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 603,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "9717:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9716:9:5"
                  },
                  "scope": 613,
                  "src": "9660:66:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 607,
                    "nodeType": "StructuredDocumentation",
                    "src": "9730:732:5",
                    "text": "@notice Return the last known value for the smallest nominator who managed to be actively receiving rewards.\n @dev If `0`, it means we don't have a guess. Otherwise, this value should be treated as a best effort estimate of the minimum \"reasonable\" amount that a nominator should have staked. Bonding a value less than this will likely cause the nominator to not be eligible for receiving rewards. In such cases, one should use `PoolStaking` instead. Please refer to `NPoS` section in the Polkadot wiki for more info, notably: <https://wiki.polkadot.network/learn/learn-nominator/#minimum-active-nomination-to-receive-staking-rewards>\n @return uint128 the estimate minimum staked value for a nominator to earn rewards."
                  },
                  "functionSelector": "17c19d5f",
                  "id": 612,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_active_nominator_bond",
                  "nameLocation": "10474:29:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 608,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10503:2:5"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 610,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 612,
                        "src": "10529:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 609,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "10529:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10528:9:5"
                  },
                  "scope": 613,
                  "src": "10465:73:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 635,
              "src": "7041:3499:5",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingRewards",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 614,
                "nodeType": "StructuredDocumentation",
                "src": "10542:371:5",
                "text": "@title StakingRewards Interface\n @notice not needed, just for demonstration purposes. Potentially for claiming staking rewards. Reading rewards is an expensive operation best done off-chain.\n @dev Claiming rewards is permissionless and can be done by any account. The payout pays the reward of (validator, era, page-of-nominators), not just a single nominator."
              },
              "fullyImplemented": false,
              "id": 627,
              "linearizedBaseContracts": [
                627
              ],
              "name": "IStakingRewards",
              "nameLocation": "10923:15:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 615,
                    "nodeType": "StructuredDocumentation",
                    "src": "10943:201:5",
                    "text": "@notice Payout rewards, is an expensive operation because of the large storage query, and thus it is recommended that this function is not used.\n @return rewards The amount of rewards paid out"
                  },
                  "functionSelector": "63bd1d4a",
                  "id": 620,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payout",
                  "nameLocation": "11156:6:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 616,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11162:2:5"
                  },
                  "returnParameters": {
                    "id": 619,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 618,
                        "mutability": "mutable",
                        "name": "rewards",
                        "nameLocation": "11191:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 620,
                        "src": "11183:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 617,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "11183:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11182:17:5"
                  },
                  "scope": 627,
                  "src": "11147:53:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 621,
                    "nodeType": "StructuredDocumentation",
                    "src": "11204:151:5",
                    "text": "@notice Get the number of the queue of stakers rewards are pending from, as this has an expensive storage query, it is recommended that is not use."
                  },
                  "functionSelector": "e20ccec3",
                  "id": 626,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pending",
                  "nameLocation": "11367:7:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 622,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11374:2:5"
                  },
                  "returnParameters": {
                    "id": 625,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 624,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 626,
                        "src": "11400:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 623,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "11400:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11399:9:5"
                  },
                  "scope": 627,
                  "src": "11358:51:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 635,
              "src": "10913:498:5",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 628,
                    "name": "IStakingBasic",
                    "nameLocations": [
                      "11437:13:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 539,
                    "src": "11437:13:5"
                  },
                  "id": 629,
                  "nodeType": "InheritanceSpecifier",
                  "src": "11437:13:5"
                },
                {
                  "baseName": {
                    "id": 630,
                    "name": "IStakingRoles",
                    "nameLocations": [
                      "11452:13:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 613,
                    "src": "11452:13:5"
                  },
                  "id": 631,
                  "nodeType": "InheritanceSpecifier",
                  "src": "11452:13:5"
                },
                {
                  "baseName": {
                    "id": 632,
                    "name": "IStakingRewards",
                    "nameLocations": [
                      "11467:15:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 627,
                    "src": "11467:15:5"
                  },
                  "id": 633,
                  "nodeType": "InheritanceSpecifier",
                  "src": "11467:15:5"
                }
              ],
              "canonicalName": "IStaking",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 634,
              "linearizedBaseContracts": [
                634,
                627,
                613,
                539
              ],
              "name": "IStaking",
              "nameLocation": "11425:8:5",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 635,
              "src": "11415:70:5",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "32:11453:5"
        }
      },
      "contracts/MockStaking.sol": {
        "id": 6,
        "ast": {
          "absolutePath": "contracts/MockStaking.sol",
          "exportedSymbols": {
            "IStaking": [
              634
            ],
            "MockStaking": [
              1213
            ]
          },
          "id": 1214,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 636,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".26"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:6"
            },
            {
              "absolutePath": "contracts/IStaking.sol",
              "file": "./IStaking.sol",
              "id": 638,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1214,
              "sourceUnit": 635,
              "src": "58:42:6",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 637,
                    "name": "IStaking",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 634,
                    "src": "67:8:6",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 639,
                    "name": "IStaking",
                    "nameLocations": [
                      "126:8:6"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 634,
                    "src": "126:8:6"
                  },
                  "id": 640,
                  "nodeType": "InheritanceSpecifier",
                  "src": "126:8:6"
                }
              ],
              "canonicalName": "MockStaking",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1213,
              "linearizedBaseContracts": [
                1213,
                634,
                627,
                613,
                539
              ],
              "name": "MockStaking",
              "nameLocation": "111:11:6",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 643,
                  "mutability": "mutable",
                  "name": "_era",
                  "nameLocation": "156:4:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1213,
                  "src": "141:25:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 641,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "141:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "value": {
                    "hexValue": "313030",
                    "id": 642,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "163:3:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_100_by_1",
                      "typeString": "int_const 100"
                    },
                    "value": "100"
                  },
                  "visibility": "private"
                },
                {
                  "canonicalName": "MockStaking.UserState",
                  "id": 661,
                  "members": [
                    {
                      "constant": false,
                      "id": 646,
                      "mutability": "mutable",
                      "name": "stake",
                      "nameLocation": "206:5:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "200:11:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                        "typeString": "struct IStakingBasic.Stake"
                      },
                      "typeName": {
                        "id": 645,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 644,
                          "name": "Stake",
                          "nameLocations": [
                            "200:5:6"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 452,
                          "src": "200:5:6"
                        },
                        "referencedDeclaration": 452,
                        "src": "200:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                          "typeString": "struct IStakingBasic.Stake"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 649,
                      "mutability": "mutable",
                      "name": "role",
                      "nameLocation": "227:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "221:10:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Roles_$545",
                        "typeString": "enum IStakingRoles.Roles"
                      },
                      "typeName": {
                        "id": 648,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 647,
                          "name": "Roles",
                          "nameLocations": [
                            "221:5:6"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 545,
                          "src": "221:5:6"
                        },
                        "referencedDeclaration": 545,
                        "src": "221:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$545",
                          "typeString": "enum IStakingRoles.Roles"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 651,
                      "mutability": "mutable",
                      "name": "payee",
                      "nameLocation": "249:5:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "241:13:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 650,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "241:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 654,
                      "mutability": "mutable",
                      "name": "nominations",
                      "nameLocation": "274:11:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "264:21:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 652,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "264:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 653,
                        "nodeType": "ArrayTypeName",
                        "src": "264:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 656,
                      "mutability": "mutable",
                      "name": "commission",
                      "nameLocation": "302:10:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "295:17:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 655,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "295:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 660,
                      "mutability": "mutable",
                      "name": "unbondingQueue",
                      "nameLocation": "334:14:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "322:26:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                        "typeString": "struct IStakingBasic.Unbonding[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 658,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 657,
                            "name": "Unbonding",
                            "nameLocations": [
                              "322:9:6"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 457,
                            "src": "322:9:6"
                          },
                          "referencedDeclaration": 457,
                          "src": "322:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Unbonding_$457_storage_ptr",
                            "typeString": "struct IStakingBasic.Unbonding"
                          }
                        },
                        "id": 659,
                        "nodeType": "ArrayTypeName",
                        "src": "322:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                          "typeString": "struct IStakingBasic.Unbonding[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserState",
                  "nameLocation": "180:9:6",
                  "nodeType": "StructDefinition",
                  "scope": 1213,
                  "src": "173:182:6",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 666,
                  "mutability": "mutable",
                  "name": "users",
                  "nameLocation": "399:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1213,
                  "src": "361:43:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                    "typeString": "mapping(address => struct MockStaking.UserState)"
                  },
                  "typeName": {
                    "id": 665,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 662,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "369:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "361:29:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                      "typeString": "mapping(address => struct MockStaking.UserState)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 664,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 663,
                        "name": "UserState",
                        "nameLocations": [
                          "380:9:6"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 661,
                        "src": "380:9:6"
                      },
                      "referencedDeclaration": 661,
                      "src": "380:9:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserState_$661_storage_ptr",
                        "typeString": "struct MockStaking.UserState"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "baseFunctions": [
                    463
                  ],
                  "body": {
                    "id": 704,
                    "nodeType": "Block",
                    "src": "478:165:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 683,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 672,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "488:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 675,
                                "indexExpression": {
                                  "expression": {
                                    "id": 673,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "494:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 674,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "498:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "494:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "488:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 676,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "506:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "488:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 677,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "512:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "488:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 680,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "530:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "534:5:6",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "530:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 679,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "522:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint128_$",
                                "typeString": "type(uint128)"
                              },
                              "typeName": {
                                "id": 678,
                                "name": "uint128",
                                "nodeType": "ElementaryTypeName",
                                "src": "522:7:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 682,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "522:18:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "488:52:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 684,
                        "nodeType": "ExpressionStatement",
                        "src": "488:52:6"
                      },
                      {
                        "expression": {
                          "id": 696,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 685,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "550:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 688,
                                "indexExpression": {
                                  "expression": {
                                    "id": 686,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "556:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 687,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "560:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "556:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "550:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 689,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "568:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "550:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 690,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "574:5:6",
                            "memberName": "total",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 451,
                            "src": "550:29:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 693,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "591:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 694,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "595:5:6",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "591:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 692,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "583:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint128_$",
                                "typeString": "type(uint128)"
                              },
                              "typeName": {
                                "id": 691,
                                "name": "uint128",
                                "nodeType": "ElementaryTypeName",
                                "src": "583:7:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 695,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "583:18:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "550:51:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 697,
                        "nodeType": "ExpressionStatement",
                        "src": "550:51:6"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 700,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "626:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 701,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "630:5:6",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "626:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 699,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "618:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint128_$",
                              "typeString": "type(uint128)"
                            },
                            "typeName": {
                              "id": 698,
                              "name": "uint128",
                              "nodeType": "ElementaryTypeName",
                              "src": "618:7:6",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 702,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "618:18:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 671,
                        "id": 703,
                        "nodeType": "Return",
                        "src": "611:25:6"
                      }
                    ]
                  },
                  "functionSelector": "64c9ec6f",
                  "id": 705,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "bond",
                  "nameLocation": "420:4:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 668,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "444:8:6"
                  },
                  "parameters": {
                    "id": 667,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "424:2:6"
                  },
                  "returnParameters": {
                    "id": 671,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 670,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "470:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 705,
                        "src": "462:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 669,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "462:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "461:16:6"
                  },
                  "scope": 1213,
                  "src": "411:232:6",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    471
                  ],
                  "body": {
                    "id": 754,
                    "nodeType": "Block",
                    "src": "723:247:6",
                    "statements": [
                      {
                        "assignments": [
                          715
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 715,
                            "mutability": "mutable",
                            "name": "s",
                            "nameLocation": "747:1:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 754,
                            "src": "733:15:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                              "typeString": "struct IStakingBasic.Stake"
                            },
                            "typeName": {
                              "id": 714,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 713,
                                "name": "Stake",
                                "nameLocations": [
                                  "733:5:6"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 452,
                                "src": "733:5:6"
                              },
                              "referencedDeclaration": 452,
                              "src": "733:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 721,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 716,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "751:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 719,
                            "indexExpression": {
                              "expression": {
                                "id": 717,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "757:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 718,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "761:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "757:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "751:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 720,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "769:5:6",
                          "memberName": "stake",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 646,
                          "src": "751:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Stake_$452_storage",
                            "typeString": "struct IStakingBasic.Stake storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "733:41:6"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 722,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 707,
                            "src": "788:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "expression": {
                              "id": 723,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 715,
                              "src": "796:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake storage pointer"
                              }
                            },
                            "id": 724,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "798:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "796:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "788:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 731,
                        "nodeType": "IfStatement",
                        "src": "784:38:6",
                        "trueBody": {
                          "expression": {
                            "id": 729,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 726,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 707,
                              "src": "806:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "expression": {
                                "id": 727,
                                "name": "s",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 715,
                                "src": "814:1:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                  "typeString": "struct IStakingBasic.Stake storage pointer"
                                }
                              },
                              "id": 728,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "816:6:6",
                              "memberName": "active",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 449,
                              "src": "814:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "src": "806:16:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "id": 730,
                          "nodeType": "ExpressionStatement",
                          "src": "806:16:6"
                        }
                      },
                      {
                        "expression": {
                          "id": 736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 732,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 715,
                              "src": "832:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake storage pointer"
                              }
                            },
                            "id": 734,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "834:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "832:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 735,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 707,
                            "src": "844:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "832:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 737,
                        "nodeType": "ExpressionStatement",
                        "src": "832:17:6"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "id": 747,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 745,
                                    "name": "_era",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 643,
                                    "src": "914:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "hexValue": "32",
                                    "id": 746,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "921:1:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "914:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                {
                                  "id": 748,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 707,
                                  "src": "932:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                ],
                                "id": 744,
                                "name": "Unbonding",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 457,
                                "src": "897:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Unbonding_$457_storage_ptr_$",
                                  "typeString": "type(struct IStakingBasic.Unbonding storage pointer)"
                                }
                              },
                              "id": 749,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "nameLocations": [
                                "909:3:6",
                                "924:6:6"
                              ],
                              "names": [
                                "era",
                                "amount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "897:43:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Unbonding_$457_memory_ptr",
                                "typeString": "struct IStakingBasic.Unbonding memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Unbonding_$457_memory_ptr",
                                "typeString": "struct IStakingBasic.Unbonding memory"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 738,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "859:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 741,
                                "indexExpression": {
                                  "expression": {
                                    "id": 739,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "865:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 740,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "869:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "865:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "859:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 742,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "877:14:6",
                              "memberName": "unbondingQueue",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 660,
                              "src": "859:32:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage",
                                "typeString": "struct IStakingBasic.Unbonding storage ref[] storage ref"
                              }
                            },
                            "id": 743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "892:4:6",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "859:37:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$_t_struct$_Unbonding_$457_storage_$returns$__$attached_to$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct IStakingBasic.Unbonding storage ref[] storage pointer,struct IStakingBasic.Unbonding storage ref)"
                            }
                          },
                          "id": 750,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "859:82:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 751,
                        "nodeType": "ExpressionStatement",
                        "src": "859:82:6"
                      },
                      {
                        "expression": {
                          "id": 752,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 707,
                          "src": "958:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 712,
                        "id": 753,
                        "nodeType": "Return",
                        "src": "951:12:6"
                      }
                    ]
                  },
                  "functionSelector": "e8111842",
                  "id": 755,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unbond",
                  "nameLocation": "658:6:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 709,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "689:8:6"
                  },
                  "parameters": {
                    "id": 708,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 707,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "673:5:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "665:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 706,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "665:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "664:15:6"
                  },
                  "returnParameters": {
                    "id": 712,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 711,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "715:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "707:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 710,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "707:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "706:16:6"
                  },
                  "scope": 1213,
                  "src": "649:321:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    477
                  ],
                  "body": {
                    "id": 797,
                    "nodeType": "Block",
                    "src": "1042:223:6",
                    "statements": [
                      {
                        "assignments": [
                          763
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 763,
                            "mutability": "mutable",
                            "name": "s",
                            "nameLocation": "1066:1:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 797,
                            "src": "1052:15:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                              "typeString": "struct IStakingBasic.Stake"
                            },
                            "typeName": {
                              "id": 762,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 761,
                                "name": "Stake",
                                "nameLocations": [
                                  "1052:5:6"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 452,
                                "src": "1052:5:6"
                              },
                              "referencedDeclaration": 452,
                              "src": "1052:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 769,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 764,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "1070:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 767,
                            "indexExpression": {
                              "expression": {
                                "id": 765,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1076:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 766,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1080:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1076:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1070:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 768,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1088:5:6",
                          "memberName": "stake",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 646,
                          "src": "1070:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Stake_$452_storage",
                            "typeString": "struct IStakingBasic.Stake storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1052:41:6"
                      },
                      {
                        "expression": {
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 770,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 759,
                            "src": "1103:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 771,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 763,
                              "src": "1112:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake storage pointer"
                              }
                            },
                            "id": 772,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1114:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "1112:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "1103:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 774,
                        "nodeType": "ExpressionStatement",
                        "src": "1103:17:6"
                      },
                      {
                        "expression": {
                          "id": 779,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 775,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 763,
                              "src": "1130:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                                "typeString": "struct IStakingBasic.Stake storage pointer"
                              }
                            },
                            "id": 777,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "1132:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "1130:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 778,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1141:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1130:12:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 780,
                        "nodeType": "ExpressionStatement",
                        "src": "1130:12:6"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 788,
                                    "name": "_era",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 643,
                                    "src": "1207:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "hexValue": "32",
                                    "id": 789,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1214:1:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "1207:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                {
                                  "id": 791,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 759,
                                  "src": "1225:6:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                ],
                                "id": 787,
                                "name": "Unbonding",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 457,
                                "src": "1190:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Unbonding_$457_storage_ptr_$",
                                  "typeString": "type(struct IStakingBasic.Unbonding storage pointer)"
                                }
                              },
                              "id": 792,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "nameLocations": [
                                "1202:3:6",
                                "1217:6:6"
                              ],
                              "names": [
                                "era",
                                "amount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1190:44:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Unbonding_$457_memory_ptr",
                                "typeString": "struct IStakingBasic.Unbonding memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Unbonding_$457_memory_ptr",
                                "typeString": "struct IStakingBasic.Unbonding memory"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 781,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "1152:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 784,
                                "indexExpression": {
                                  "expression": {
                                    "id": 782,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1158:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 783,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1162:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1158:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1152:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 785,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1170:14:6",
                              "memberName": "unbondingQueue",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 660,
                              "src": "1152:32:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage",
                                "typeString": "struct IStakingBasic.Unbonding storage ref[] storage ref"
                              }
                            },
                            "id": 786,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1185:4:6",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1152:37:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$_t_struct$_Unbonding_$457_storage_$returns$__$attached_to$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct IStakingBasic.Unbonding storage ref[] storage pointer,struct IStakingBasic.Unbonding storage ref)"
                            }
                          },
                          "id": 793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1152:83:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 794,
                        "nodeType": "ExpressionStatement",
                        "src": "1152:83:6"
                      },
                      {
                        "expression": {
                          "id": 795,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 759,
                          "src": "1252:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 760,
                        "id": 796,
                        "nodeType": "Return",
                        "src": "1245:13:6"
                      }
                    ]
                  },
                  "functionSelector": "22b223ed",
                  "id": 798,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "full_unbond",
                  "nameLocation": "985:11:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 757,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1008:8:6"
                  },
                  "parameters": {
                    "id": 756,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "996:2:6"
                  },
                  "returnParameters": {
                    "id": 760,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 759,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1034:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 798,
                        "src": "1026:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 758,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "1026:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1025:16:6"
                  },
                  "scope": 1213,
                  "src": "976:289:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    485
                  ],
                  "body": {
                    "id": 817,
                    "nodeType": "Block",
                    "src": "1354:78:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 806,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "1364:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 809,
                                "indexExpression": {
                                  "expression": {
                                    "id": 807,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1370:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 808,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1374:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1370:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1364:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 810,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1382:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "1364:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 811,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "1388:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "1364:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 812,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "1398:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "1364:39:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 814,
                        "nodeType": "ExpressionStatement",
                        "src": "1364:39:6"
                      },
                      {
                        "expression": {
                          "id": 815,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 800,
                          "src": "1420:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 805,
                        "id": 816,
                        "nodeType": "Return",
                        "src": "1413:12:6"
                      }
                    ]
                  },
                  "functionSelector": "efb073f0",
                  "id": 818,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "rebond_unbonded",
                  "nameLocation": "1280:15:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 802,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1320:8:6"
                  },
                  "parameters": {
                    "id": 801,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 800,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1304:5:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "1296:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 799,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "1296:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1295:15:6"
                  },
                  "returnParameters": {
                    "id": 805,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 804,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1346:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "1338:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 803,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "1338:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1337:16:6"
                  },
                  "scope": 1213,
                  "src": "1271:161:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    491
                  ],
                  "body": {
                    "id": 903,
                    "nodeType": "Block",
                    "src": "1510:563:6",
                    "statements": [
                      {
                        "assignments": [
                          828
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 828,
                            "mutability": "mutable",
                            "name": "queue",
                            "nameLocation": "1540:5:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 903,
                            "src": "1520:25:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                              "typeString": "struct IStakingBasic.Unbonding[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 826,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 825,
                                  "name": "Unbonding",
                                  "nameLocations": [
                                    "1520:9:6"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 457,
                                  "src": "1520:9:6"
                                },
                                "referencedDeclaration": 457,
                                "src": "1520:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Unbonding_$457_storage_ptr",
                                  "typeString": "struct IStakingBasic.Unbonding"
                                }
                              },
                              "id": 827,
                              "nodeType": "ArrayTypeName",
                              "src": "1520:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                "typeString": "struct IStakingBasic.Unbonding[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 834,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 829,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "1548:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 832,
                            "indexExpression": {
                              "expression": {
                                "id": 830,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1554:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 831,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1558:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1554:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1548:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 833,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1566:14:6",
                          "memberName": "unbondingQueue",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 660,
                          "src": "1548:32:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage",
                            "typeString": "struct IStakingBasic.Unbonding storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1520:60:6"
                      },
                      {
                        "assignments": [
                          836
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 836,
                            "mutability": "mutable",
                            "name": "withdrawable",
                            "nameLocation": "1598:12:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 903,
                            "src": "1590:20:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            },
                            "typeName": {
                              "id": 835,
                              "name": "uint128",
                              "nodeType": "ElementaryTypeName",
                              "src": "1590:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 838,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1613:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1590:24:6"
                      },
                      {
                        "assignments": [
                          840
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 840,
                            "mutability": "mutable",
                            "name": "newLength",
                            "nameLocation": "1629:9:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 903,
                            "src": "1624:14:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 839,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1624:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 842,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 841,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1641:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1624:18:6"
                      },
                      {
                        "body": {
                          "id": 879,
                          "nodeType": "Block",
                          "src": "1693:182:6",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 859,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 854,
                                      "name": "queue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 828,
                                      "src": "1711:5:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                        "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 856,
                                    "indexExpression": {
                                      "id": 855,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 844,
                                      "src": "1717:1:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1711:8:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Unbonding_$457_storage",
                                      "typeString": "struct IStakingBasic.Unbonding storage ref"
                                    }
                                  },
                                  "id": 857,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1720:3:6",
                                  "memberName": "era",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 454,
                                  "src": "1711:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "id": 858,
                                  "name": "_era",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 643,
                                  "src": "1727:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "src": "1711:20:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 877,
                                "nodeType": "Block",
                                "src": "1803:62:6",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 875,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 868,
                                          "name": "queue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 828,
                                          "src": "1821:5:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                            "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                                          }
                                        },
                                        "id": 871,
                                        "indexExpression": {
                                          "id": 870,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "++",
                                          "prefix": false,
                                          "src": "1827:11:6",
                                          "subExpression": {
                                            "id": 869,
                                            "name": "newLength",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 840,
                                            "src": "1827:9:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "1821:18:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Unbonding_$457_storage",
                                          "typeString": "struct IStakingBasic.Unbonding storage ref"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "baseExpression": {
                                          "id": 872,
                                          "name": "queue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 828,
                                          "src": "1842:5:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                            "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                                          }
                                        },
                                        "id": 874,
                                        "indexExpression": {
                                          "id": 873,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 844,
                                          "src": "1848:1:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "1842:8:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Unbonding_$457_storage",
                                          "typeString": "struct IStakingBasic.Unbonding storage ref"
                                        }
                                      },
                                      "src": "1821:29:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Unbonding_$457_storage",
                                        "typeString": "struct IStakingBasic.Unbonding storage ref"
                                      }
                                    },
                                    "id": 876,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1821:29:6"
                                  }
                                ]
                              },
                              "id": 878,
                              "nodeType": "IfStatement",
                              "src": "1707:158:6",
                              "trueBody": {
                                "id": 867,
                                "nodeType": "Block",
                                "src": "1733:64:6",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 865,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 860,
                                        "name": "withdrawable",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 836,
                                        "src": "1751:12:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint128",
                                          "typeString": "uint128"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 861,
                                            "name": "queue",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 828,
                                            "src": "1767:5:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                              "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                                            }
                                          },
                                          "id": 863,
                                          "indexExpression": {
                                            "id": 862,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 844,
                                            "src": "1773:1:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "1767:8:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Unbonding_$457_storage",
                                            "typeString": "struct IStakingBasic.Unbonding storage ref"
                                          }
                                        },
                                        "id": 864,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "1776:6:6",
                                        "memberName": "amount",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 456,
                                        "src": "1767:15:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint128",
                                          "typeString": "uint128"
                                        }
                                      },
                                      "src": "1751:31:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint128",
                                        "typeString": "uint128"
                                      }
                                    },
                                    "id": 866,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1751:31:6"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 850,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 847,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 844,
                            "src": "1670:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 848,
                              "name": "queue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 828,
                              "src": "1674:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                              }
                            },
                            "id": 849,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1680:6:6",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1674:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1670:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 880,
                        "initializationExpression": {
                          "assignments": [
                            844
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 844,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "1663:1:6",
                              "nodeType": "VariableDeclaration",
                              "scope": 880,
                              "src": "1658:6:6",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 843,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "1658:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 846,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 845,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1667:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1658:10:6"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 852,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1688:3:6",
                            "subExpression": {
                              "id": 851,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 844,
                              "src": "1688:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 853,
                          "nodeType": "ExpressionStatement",
                          "src": "1688:3:6"
                        },
                        "nodeType": "ForStatement",
                        "src": "1653:222:6"
                      },
                      {
                        "body": {
                          "id": 890,
                          "nodeType": "Block",
                          "src": "1946:36:6",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 885,
                                    "name": "queue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 828,
                                    "src": "1960:5:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                      "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 887,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1966:3:6",
                                  "memberName": "pop",
                                  "nodeType": "MemberAccess",
                                  "src": "1960:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr_$",
                                    "typeString": "function (struct IStakingBasic.Unbonding storage ref[] storage pointer)"
                                  }
                                },
                                "id": 888,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1960:11:6",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 889,
                              "nodeType": "ExpressionStatement",
                              "src": "1960:11:6"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 884,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 881,
                              "name": "queue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 828,
                              "src": "1920:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                                "typeString": "struct IStakingBasic.Unbonding storage ref[] storage pointer"
                              }
                            },
                            "id": 882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1926:6:6",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1920:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 883,
                            "name": "newLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 840,
                            "src": "1935:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1920:24:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 891,
                        "nodeType": "WhileStatement",
                        "src": "1913:69:6"
                      },
                      {
                        "expression": {
                          "id": 899,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 892,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "1992:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 895,
                                "indexExpression": {
                                  "expression": {
                                    "id": 893,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1998:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 894,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2002:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1998:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1992:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 896,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2010:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "1992:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 897,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2016:5:6",
                            "memberName": "total",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 451,
                            "src": "1992:29:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 898,
                            "name": "withdrawable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 836,
                            "src": "2025:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "1992:45:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 900,
                        "nodeType": "ExpressionStatement",
                        "src": "1992:45:6"
                      },
                      {
                        "expression": {
                          "id": 901,
                          "name": "withdrawable",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 836,
                          "src": "2054:12:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 823,
                        "id": 902,
                        "nodeType": "Return",
                        "src": "2047:19:6"
                      }
                    ]
                  },
                  "functionSelector": "77a0fe02",
                  "id": 904,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw_unbonded",
                  "nameLocation": "1447:17:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 820,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1476:8:6"
                  },
                  "parameters": {
                    "id": 819,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1464:2:6"
                  },
                  "returnParameters": {
                    "id": 823,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 822,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1502:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 904,
                        "src": "1494:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 821,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "1494:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1493:16:6"
                  },
                  "scope": 1213,
                  "src": "1438:635:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    499
                  ],
                  "body": {
                    "id": 929,
                    "nodeType": "Block",
                    "src": "2147:100:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 918,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 912,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "2157:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 915,
                              "indexExpression": {
                                "expression": {
                                  "id": 913,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2163:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 914,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2167:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2163:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2157:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 916,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2175:5:6",
                            "memberName": "payee",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 651,
                            "src": "2157:23:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 917,
                            "name": "payee_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 906,
                            "src": "2183:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2157:32:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 919,
                        "nodeType": "ExpressionStatement",
                        "src": "2157:32:6"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 927,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 920,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "2206:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 923,
                                "indexExpression": {
                                  "expression": {
                                    "id": 921,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2212:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 922,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2216:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2212:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2206:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 924,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2224:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "2206:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 925,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2230:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "2206:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 926,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2239:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2206:34:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 911,
                        "id": 928,
                        "nodeType": "Return",
                        "src": "2199:41:6"
                      }
                    ]
                  },
                  "functionSelector": "ec9b28f1",
                  "id": 930,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "set_payee",
                  "nameLocation": "2088:9:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 908,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2123:8:6"
                  },
                  "parameters": {
                    "id": 907,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 906,
                        "mutability": "mutable",
                        "name": "payee_",
                        "nameLocation": "2106:6:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "2098:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 905,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2098:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2097:16:6"
                  },
                  "returnParameters": {
                    "id": 911,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 910,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "2141:4:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 909,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2141:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2140:6:6"
                  },
                  "scope": 1213,
                  "src": "2079:168:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    505
                  ],
                  "body": {
                    "id": 938,
                    "nodeType": "Block",
                    "src": "2318:31:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "31",
                          "id": 936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2335:7:6",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "value": "1"
                        },
                        "functionReturnParameters": 935,
                        "id": 937,
                        "nodeType": "Return",
                        "src": "2328:14:6"
                      }
                    ]
                  },
                  "functionSelector": "3eb9776c",
                  "id": 939,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_bond",
                  "nameLocation": "2262:12:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 932,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2291:8:6"
                  },
                  "parameters": {
                    "id": 931,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2274:2:6"
                  },
                  "returnParameters": {
                    "id": 935,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 934,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 939,
                        "src": "2309:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 933,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "2309:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2308:9:6"
                  },
                  "scope": 1213,
                  "src": "2253:96:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    512
                  ],
                  "body": {
                    "id": 952,
                    "nodeType": "Block",
                    "src": "2421:47:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 946,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "2438:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 949,
                            "indexExpression": {
                              "expression": {
                                "id": 947,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2444:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 948,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2448:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2444:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2438:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 950,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2456:5:6",
                          "memberName": "stake",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 646,
                          "src": "2438:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Stake_$452_storage",
                            "typeString": "struct IStakingBasic.Stake storage ref"
                          }
                        },
                        "functionReturnParameters": 945,
                        "id": 951,
                        "nodeType": "Return",
                        "src": "2431:30:6"
                      }
                    ]
                  },
                  "functionSelector": "64e7b428",
                  "id": 953,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake_of",
                  "nameLocation": "2364:8:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 941,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2389:8:6"
                  },
                  "parameters": {
                    "id": 940,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2372:2:6"
                  },
                  "returnParameters": {
                    "id": 945,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 944,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 953,
                        "src": "2407:12:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Stake_$452_memory_ptr",
                          "typeString": "struct IStakingBasic.Stake"
                        },
                        "typeName": {
                          "id": 943,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 942,
                            "name": "Stake",
                            "nameLocations": [
                              "2407:5:6"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 452,
                            "src": "2407:5:6"
                          },
                          "referencedDeclaration": 452,
                          "src": "2407:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Stake_$452_storage_ptr",
                            "typeString": "struct IStakingBasic.Stake"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2406:14:6"
                  },
                  "scope": 1213,
                  "src": "2355:113:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    518
                  ],
                  "body": {
                    "id": 961,
                    "nodeType": "Block",
                    "src": "2537:39:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "315f3030305f303030",
                          "id": 959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2554:15:6",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000000000"
                          },
                          "value": "1_000_000"
                        },
                        "functionReturnParameters": 958,
                        "id": 960,
                        "nodeType": "Return",
                        "src": "2547:22:6"
                      }
                    ]
                  },
                  "functionSelector": "498aa0f1",
                  "id": 962,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake_able",
                  "nameLocation": "2483:10:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 955,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2510:8:6"
                  },
                  "parameters": {
                    "id": 954,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2493:2:6"
                  },
                  "returnParameters": {
                    "id": 958,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 957,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 962,
                        "src": "2528:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 956,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "2528:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2527:9:6"
                  },
                  "scope": 1213,
                  "src": "2474:102:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    524
                  ],
                  "body": {
                    "id": 974,
                    "nodeType": "Block",
                    "src": "2640:47:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 968,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "2657:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 971,
                            "indexExpression": {
                              "expression": {
                                "id": 969,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2663:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 970,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2667:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2663:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2657:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 972,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2675:5:6",
                          "memberName": "payee",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 651,
                          "src": "2657:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 967,
                        "id": 973,
                        "nodeType": "Return",
                        "src": "2650:30:6"
                      }
                    ]
                  },
                  "functionSelector": "ae90b213",
                  "id": 975,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payee",
                  "nameLocation": "2591:5:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 964,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2613:8:6"
                  },
                  "parameters": {
                    "id": 963,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2596:2:6"
                  },
                  "returnParameters": {
                    "id": 967,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 966,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 975,
                        "src": "2631:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 965,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2631:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2630:9:6"
                  },
                  "scope": 1213,
                  "src": "2582:105:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    530
                  ],
                  "body": {
                    "id": 983,
                    "nodeType": "Block",
                    "src": "2748:28:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 981,
                          "name": "_era",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 643,
                          "src": "2765:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 980,
                        "id": 982,
                        "nodeType": "Return",
                        "src": "2758:11:6"
                      }
                    ]
                  },
                  "functionSelector": "143e55e0",
                  "id": 984,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "era",
                  "nameLocation": "2702:3:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 977,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2722:8:6"
                  },
                  "parameters": {
                    "id": 976,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2705:2:6"
                  },
                  "returnParameters": {
                    "id": 980,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 979,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 984,
                        "src": "2740:6:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 978,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2740:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2739:8:6"
                  },
                  "scope": 1213,
                  "src": "2693:83:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    538
                  ],
                  "body": {
                    "id": 998,
                    "nodeType": "Block",
                    "src": "2861:56:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 992,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "2878:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 995,
                            "indexExpression": {
                              "expression": {
                                "id": 993,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2884:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 994,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2888:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2884:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2878:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 996,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2896:14:6",
                          "memberName": "unbondingQueue",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 660,
                          "src": "2878:32:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage",
                            "typeString": "struct IStakingBasic.Unbonding storage ref[] storage ref"
                          }
                        },
                        "functionReturnParameters": 991,
                        "id": 997,
                        "nodeType": "Return",
                        "src": "2871:39:6"
                      }
                    ]
                  },
                  "functionSelector": "262c5f0f",
                  "id": 999,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unbonding_queue",
                  "nameLocation": "2791:15:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 986,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2823:8:6"
                  },
                  "parameters": {
                    "id": 985,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2806:2:6"
                  },
                  "returnParameters": {
                    "id": 991,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 990,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 999,
                        "src": "2841:18:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IStakingBasic.Unbonding[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 988,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 987,
                              "name": "Unbonding",
                              "nameLocations": [
                                "2841:9:6"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 457,
                              "src": "2841:9:6"
                            },
                            "referencedDeclaration": 457,
                            "src": "2841:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Unbonding_$457_storage_ptr",
                              "typeString": "struct IStakingBasic.Unbonding"
                            }
                          },
                          "id": 989,
                          "nodeType": "ArrayTypeName",
                          "src": "2841:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Unbonding_$457_storage_$dyn_storage_ptr",
                            "typeString": "struct IStakingBasic.Unbonding[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2840:20:6"
                  },
                  "scope": 1213,
                  "src": "2782:135:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    554
                  ],
                  "body": {
                    "id": 1034,
                    "nodeType": "Block",
                    "src": "3002:157:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 1015,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1008,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3012:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1011,
                              "indexExpression": {
                                "expression": {
                                  "id": 1009,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3018:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1010,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3022:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3018:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3012:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1012,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3030:4:6",
                            "memberName": "role",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 649,
                            "src": "3012:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1013,
                              "name": "Roles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 545,
                              "src": "3037:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Roles_$545_$",
                                "typeString": "type(enum IStakingRoles.Roles)"
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3043:9:6",
                            "memberName": "NOMINATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 544,
                            "src": "3037:15:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "src": "3012:40:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "id": 1016,
                        "nodeType": "ExpressionStatement",
                        "src": "3012:40:6"
                      },
                      {
                        "expression": {
                          "id": 1023,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1017,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3062:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1020,
                              "indexExpression": {
                                "expression": {
                                  "id": 1018,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3068:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1019,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3072:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3068:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3062:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1021,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3080:11:6",
                            "memberName": "nominations",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 654,
                            "src": "3062:29:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1022,
                            "name": "targets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1002,
                            "src": "3094:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "src": "3062:39:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                            "typeString": "address[] storage ref"
                          }
                        },
                        "id": 1024,
                        "nodeType": "ExpressionStatement",
                        "src": "3062:39:6"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 1032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1025,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "3118:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 1028,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1026,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "3124:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1027,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3128:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "3124:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3118:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 1029,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3136:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "3118:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 1030,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3142:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "3118:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1031,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3151:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3118:34:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1007,
                        "id": 1033,
                        "nodeType": "Return",
                        "src": "3111:41:6"
                      }
                    ]
                  },
                  "functionSelector": "19f2fdad",
                  "id": 1035,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nominate",
                  "nameLocation": "2932:8:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1004,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2978:8:6"
                  },
                  "parameters": {
                    "id": 1003,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1002,
                        "mutability": "mutable",
                        "name": "targets",
                        "nameLocation": "2960:7:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1035,
                        "src": "2941:26:6",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1000,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2941:7:6",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1001,
                          "nodeType": "ArrayTypeName",
                          "src": "2941:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2940:28:6"
                  },
                  "returnParameters": {
                    "id": 1007,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1006,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1035,
                        "src": "2996:4:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1005,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2996:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2995:6:6"
                  },
                  "scope": 1213,
                  "src": "2923:236:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    562
                  ],
                  "body": {
                    "id": 1069,
                    "nodeType": "Block",
                    "src": "3236:160:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 1050,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1043,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3246:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1046,
                              "indexExpression": {
                                "expression": {
                                  "id": 1044,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3252:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1045,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3256:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3252:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3246:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1047,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3264:4:6",
                            "memberName": "role",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 649,
                            "src": "3246:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1048,
                              "name": "Roles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 545,
                              "src": "3271:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Roles_$545_$",
                                "typeString": "type(enum IStakingRoles.Roles)"
                              }
                            },
                            "id": 1049,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3277:9:6",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 543,
                            "src": "3271:15:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "src": "3246:40:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "id": 1051,
                        "nodeType": "ExpressionStatement",
                        "src": "3246:40:6"
                      },
                      {
                        "expression": {
                          "id": 1058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1052,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3296:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1055,
                              "indexExpression": {
                                "expression": {
                                  "id": 1053,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3302:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1054,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3306:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3302:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3296:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1056,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3314:10:6",
                            "memberName": "commission",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 656,
                            "src": "3296:28:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1057,
                            "name": "_commission",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1037,
                            "src": "3327:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "3296:42:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 1059,
                        "nodeType": "ExpressionStatement",
                        "src": "3296:42:6"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 1067,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1060,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "3355:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 1063,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1061,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "3361:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1062,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3365:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "3361:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3355:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 1064,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3373:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "3355:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 1065,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3379:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "3355:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1066,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3388:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3355:34:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1042,
                        "id": 1068,
                        "nodeType": "Return",
                        "src": "3348:41:6"
                      }
                    ]
                  },
                  "functionSelector": "ac0d45e2",
                  "id": 1070,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "validate",
                  "nameLocation": "3174:8:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1039,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3212:8:6"
                  },
                  "parameters": {
                    "id": 1038,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1037,
                        "mutability": "mutable",
                        "name": "_commission",
                        "nameLocation": "3190:11:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1070,
                        "src": "3183:18:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 1036,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3183:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3182:20:6"
                  },
                  "returnParameters": {
                    "id": 1042,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1041,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1070,
                        "src": "3230:4:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1040,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3230:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3229:6:6"
                  },
                  "scope": 1213,
                  "src": "3165:231:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    568
                  ],
                  "body": {
                    "id": 1109,
                    "nodeType": "Block",
                    "src": "3452:194:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 1083,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1076,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3462:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1079,
                              "indexExpression": {
                                "expression": {
                                  "id": 1077,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3468:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1078,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3472:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3468:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3462:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1080,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3480:4:6",
                            "memberName": "role",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 649,
                            "src": "3462:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1081,
                              "name": "Roles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 545,
                              "src": "3487:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Roles_$545_$",
                                "typeString": "type(enum IStakingRoles.Roles)"
                              }
                            },
                            "id": 1082,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3493:7:6",
                            "memberName": "CHILLED",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 542,
                            "src": "3487:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Roles_$545",
                              "typeString": "enum IStakingRoles.Roles"
                            }
                          },
                          "src": "3462:38:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "id": 1084,
                        "nodeType": "ExpressionStatement",
                        "src": "3462:38:6"
                      },
                      {
                        "expression": {
                          "id": 1090,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "3510:36:6",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 1085,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3517:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1088,
                              "indexExpression": {
                                "expression": {
                                  "id": 1086,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3523:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1087,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3527:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3523:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3517:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1089,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3535:11:6",
                            "memberName": "nominations",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 654,
                            "src": "3517:29:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1091,
                        "nodeType": "ExpressionStatement",
                        "src": "3510:36:6"
                      },
                      {
                        "expression": {
                          "id": 1098,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1092,
                                "name": "users",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "3556:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                  "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                }
                              },
                              "id": 1095,
                              "indexExpression": {
                                "expression": {
                                  "id": 1093,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3562:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1094,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3566:6:6",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3562:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3556:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserState_$661_storage",
                                "typeString": "struct MockStaking.UserState storage ref"
                              }
                            },
                            "id": 1096,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3574:10:6",
                            "memberName": "commission",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 656,
                            "src": "3556:28:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1097,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3587:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3556:32:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 1099,
                        "nodeType": "ExpressionStatement",
                        "src": "3556:32:6"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 1107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1100,
                                  "name": "users",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 666,
                                  "src": "3605:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                    "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                                  }
                                },
                                "id": 1103,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1101,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "3611:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1102,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3615:6:6",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "3611:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3605:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserState_$661_storage",
                                  "typeString": "struct MockStaking.UserState storage ref"
                                }
                              },
                              "id": 1104,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3623:5:6",
                              "memberName": "stake",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 646,
                              "src": "3605:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Stake_$452_storage",
                                "typeString": "struct IStakingBasic.Stake storage ref"
                              }
                            },
                            "id": 1105,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3629:6:6",
                            "memberName": "active",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 449,
                            "src": "3605:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3638:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3605:34:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1075,
                        "id": 1108,
                        "nodeType": "Return",
                        "src": "3598:41:6"
                      }
                    ]
                  },
                  "functionSelector": "2b8a3ae6",
                  "id": 1110,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "chill",
                  "nameLocation": "3411:5:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1072,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3428:8:6"
                  },
                  "parameters": {
                    "id": 1071,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3416:2:6"
                  },
                  "returnParameters": {
                    "id": 1075,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1074,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1110,
                        "src": "3446:4:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3446:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3445:6:6"
                  },
                  "scope": 1213,
                  "src": "3402:244:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    574
                  ],
                  "body": {
                    "id": 1118,
                    "nodeType": "Block",
                    "src": "3719:26:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3136",
                          "id": 1116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3736:2:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_16_by_1",
                            "typeString": "int_const 16"
                          },
                          "value": "16"
                        },
                        "functionReturnParameters": 1115,
                        "id": 1117,
                        "nodeType": "Return",
                        "src": "3729:9:6"
                      }
                    ]
                  },
                  "functionSelector": "727f17f2",
                  "id": 1119,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max_nominations",
                  "nameLocation": "3661:15:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1112,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3693:8:6"
                  },
                  "parameters": {
                    "id": 1111,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3676:2:6"
                  },
                  "returnParameters": {
                    "id": 1115,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1114,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1119,
                        "src": "3711:6:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 1113,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3711:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3710:8:6"
                  },
                  "scope": 1213,
                  "src": "3652:93:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    581
                  ],
                  "body": {
                    "id": 1132,
                    "nodeType": "Block",
                    "src": "3806:46:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 1126,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "3823:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 1129,
                            "indexExpression": {
                              "expression": {
                                "id": 1127,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3829:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1128,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3833:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3829:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3823:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 1130,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3841:4:6",
                          "memberName": "role",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 649,
                          "src": "3823:22:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "functionReturnParameters": 1125,
                        "id": 1131,
                        "nodeType": "Return",
                        "src": "3816:29:6"
                      }
                    ]
                  },
                  "functionSelector": "10055c1d",
                  "id": 1133,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "role",
                  "nameLocation": "3760:4:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1121,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3781:8:6"
                  },
                  "parameters": {
                    "id": 1120,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3764:2:6"
                  },
                  "returnParameters": {
                    "id": 1125,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1124,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1133,
                        "src": "3799:5:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$545",
                          "typeString": "enum IStakingRoles.Roles"
                        },
                        "typeName": {
                          "id": 1123,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1122,
                            "name": "Roles",
                            "nameLocations": [
                              "3799:5:6"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 545,
                            "src": "3799:5:6"
                          },
                          "referencedDeclaration": 545,
                          "src": "3799:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$545",
                            "typeString": "enum IStakingRoles.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3798:7:6"
                  },
                  "scope": 1213,
                  "src": "3751:101:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    588
                  ],
                  "body": {
                    "id": 1146,
                    "nodeType": "Block",
                    "src": "3931:53:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 1140,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "3948:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 1143,
                            "indexExpression": {
                              "expression": {
                                "id": 1141,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3954:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1142,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3958:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3954:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3948:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 1144,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3966:11:6",
                          "memberName": "nominations",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 654,
                          "src": "3948:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                            "typeString": "address[] storage ref"
                          }
                        },
                        "functionReturnParameters": 1139,
                        "id": 1145,
                        "nodeType": "Return",
                        "src": "3941:36:6"
                      }
                    ]
                  },
                  "functionSelector": "d1d4d3e4",
                  "id": 1147,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nominations",
                  "nameLocation": "3867:11:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1135,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3895:8:6"
                  },
                  "parameters": {
                    "id": 1134,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3878:2:6"
                  },
                  "returnParameters": {
                    "id": 1139,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1138,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1147,
                        "src": "3913:16:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1136,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3913:7:6",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1137,
                          "nodeType": "ArrayTypeName",
                          "src": "3913:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3912:18:6"
                  },
                  "scope": 1213,
                  "src": "3858:126:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    594
                  ],
                  "body": {
                    "id": 1159,
                    "nodeType": "Block",
                    "src": "4052:52:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 1153,
                              "name": "users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "4069:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserState_$661_storage_$",
                                "typeString": "mapping(address => struct MockStaking.UserState storage ref)"
                              }
                            },
                            "id": 1156,
                            "indexExpression": {
                              "expression": {
                                "id": 1154,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4075:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1155,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4079:6:6",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4075:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4069:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserState_$661_storage",
                              "typeString": "struct MockStaking.UserState storage ref"
                            }
                          },
                          "id": 1157,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4087:10:6",
                          "memberName": "commission",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 656,
                          "src": "4069:28:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 1152,
                        "id": 1158,
                        "nodeType": "Return",
                        "src": "4062:35:6"
                      }
                    ]
                  },
                  "functionSelector": "e1489191",
                  "id": 1160,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "commission",
                  "nameLocation": "3999:10:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1149,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4026:8:6"
                  },
                  "parameters": {
                    "id": 1148,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4009:2:6"
                  },
                  "returnParameters": {
                    "id": 1152,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1151,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1160,
                        "src": "4044:6:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 1150,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4044:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4043:8:6"
                  },
                  "scope": 1213,
                  "src": "3990:114:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    600
                  ],
                  "body": {
                    "id": 1168,
                    "nodeType": "Block",
                    "src": "4185:33:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "313030",
                          "id": 1166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4202:9:6",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100000000000000000000_by_1",
                            "typeString": "int_const 100000000000000000000"
                          },
                          "value": "100"
                        },
                        "functionReturnParameters": 1165,
                        "id": 1167,
                        "nodeType": "Return",
                        "src": "4195:16:6"
                      }
                    ]
                  },
                  "functionSelector": "b35ae446",
                  "id": 1169,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_validator_bond",
                  "nameLocation": "4119:22:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1162,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4158:8:6"
                  },
                  "parameters": {
                    "id": 1161,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4141:2:6"
                  },
                  "returnParameters": {
                    "id": 1165,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1164,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1169,
                        "src": "4176:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1163,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4176:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4175:9:6"
                  },
                  "scope": 1213,
                  "src": "4110:108:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    606
                  ],
                  "body": {
                    "id": 1177,
                    "nodeType": "Block",
                    "src": "4299:32:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3130",
                          "id": 1175,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4316:8:6",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000000_by_1",
                            "typeString": "int_const 10000000000000000000"
                          },
                          "value": "10"
                        },
                        "functionReturnParameters": 1174,
                        "id": 1176,
                        "nodeType": "Return",
                        "src": "4309:15:6"
                      }
                    ]
                  },
                  "functionSelector": "385496f7",
                  "id": 1178,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_nominator_bond",
                  "nameLocation": "4233:22:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1171,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4272:8:6"
                  },
                  "parameters": {
                    "id": 1170,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4255:2:6"
                  },
                  "returnParameters": {
                    "id": 1174,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1173,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "4290:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1172,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4290:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4289:9:6"
                  },
                  "scope": 1213,
                  "src": "4224:107:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    612
                  ],
                  "body": {
                    "id": 1186,
                    "nodeType": "Block",
                    "src": "4419:32:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3235",
                          "id": 1184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4436:8:6",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_25000000000000000000_by_1",
                            "typeString": "int_const 25000000000000000000"
                          },
                          "value": "25"
                        },
                        "functionReturnParameters": 1183,
                        "id": 1185,
                        "nodeType": "Return",
                        "src": "4429:15:6"
                      }
                    ]
                  },
                  "functionSelector": "17c19d5f",
                  "id": 1187,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "minimum_active_nominator_bond",
                  "nameLocation": "4346:29:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1180,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4392:8:6"
                  },
                  "parameters": {
                    "id": 1179,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4375:2:6"
                  },
                  "returnParameters": {
                    "id": 1183,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1182,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1187,
                        "src": "4410:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1181,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4410:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4409:9:6"
                  },
                  "scope": 1213,
                  "src": "4337:114:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    620
                  ],
                  "body": {
                    "id": 1195,
                    "nodeType": "Block",
                    "src": "4516:28:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "35303030",
                          "id": 1193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4533:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_5000_by_1",
                            "typeString": "int_const 5000"
                          },
                          "value": "5000"
                        },
                        "functionReturnParameters": 1192,
                        "id": 1194,
                        "nodeType": "Return",
                        "src": "4526:11:6"
                      }
                    ]
                  },
                  "functionSelector": "63bd1d4a",
                  "id": 1196,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payout",
                  "nameLocation": "4466:6:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1189,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4489:8:6"
                  },
                  "parameters": {
                    "id": 1188,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4472:2:6"
                  },
                  "returnParameters": {
                    "id": 1192,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1191,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "4507:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1190,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4507:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4506:9:6"
                  },
                  "scope": 1213,
                  "src": "4457:87:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    626
                  ],
                  "body": {
                    "id": 1204,
                    "nodeType": "Block",
                    "src": "4610:25:6",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "32",
                          "id": 1202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4627:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "functionReturnParameters": 1201,
                        "id": 1203,
                        "nodeType": "Return",
                        "src": "4620:8:6"
                      }
                    ]
                  },
                  "functionSelector": "e20ccec3",
                  "id": 1205,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pending",
                  "nameLocation": "4559:7:6",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1198,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4583:8:6"
                  },
                  "parameters": {
                    "id": 1197,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4566:2:6"
                  },
                  "returnParameters": {
                    "id": 1201,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1200,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1205,
                        "src": "4601:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1199,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4601:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4600:9:6"
                  },
                  "scope": 1213,
                  "src": "4550:85:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1211,
                    "nodeType": "Block",
                    "src": "4725:23:6",
                    "statements": [
                      {
                        "expression": {
                          "id": 1209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "4735:6:6",
                          "subExpression": {
                            "id": 1208,
                            "name": "_era",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 643,
                            "src": "4735:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 1210,
                        "nodeType": "ExpressionStatement",
                        "src": "4735:6:6"
                      }
                    ]
                  },
                  "functionSelector": "23e75f24",
                  "id": 1212,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "advanceEra",
                  "nameLocation": "4703:10:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4713:2:6"
                  },
                  "returnParameters": {
                    "id": 1207,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4725:0:6"
                  },
                  "scope": 1213,
                  "src": "4694:54:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1214,
              "src": "102:4648:6",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "32:4719:6"
        }
      },
      "contracts/SleepFine.sol": {
        "id": 7,
        "ast": {
          "absolutePath": "contracts/SleepFine.sol",
          "exportedSymbols": {
            "AccessControl": [
              295
            ],
            "Context": [
              408
            ],
            "ERC165": [
              432
            ],
            "IAccessControl": [
              378
            ],
            "IStaking": [
              634
            ],
            "IStakingRewards": [
              627
            ],
            "IStakingRoles": [
              613
            ],
            "SleepFine": [
              1626
            ]
          },
          "id": 1627,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1215,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".26"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:7"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
              "file": "@openzeppelin/contracts/access/AccessControl.sol",
              "id": 1216,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1627,
              "sourceUnit": 296,
              "src": "58:58:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/IStaking.sol",
              "file": "./IStaking.sol",
              "id": 1220,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1627,
              "sourceUnit": 635,
              "src": "118:74:7",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1217,
                    "name": "IStaking",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 634,
                    "src": "127:8:7",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                },
                {
                  "foreign": {
                    "id": 1218,
                    "name": "IStakingRoles",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 613,
                    "src": "137:13:7",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                },
                {
                  "foreign": {
                    "id": 1219,
                    "name": "IStakingRewards",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 627,
                    "src": "152:15:7",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1221,
                    "name": "AccessControl",
                    "nameLocations": [
                      "216:13:7"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 295,
                    "src": "216:13:7"
                  },
                  "id": 1222,
                  "nodeType": "InheritanceSpecifier",
                  "src": "216:13:7"
                }
              ],
              "canonicalName": "SleepFine",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1626,
              "linearizedBaseContracts": [
                1626,
                295,
                432,
                444,
                378,
                408
              ],
              "name": "SleepFine",
              "nameLocation": "203:9:7",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "functionSelector": "75b238fc",
                  "id": 1227,
                  "mutability": "constant",
                  "name": "ADMIN_ROLE",
                  "nameLocation": "260:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "236:60:7",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1223,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "236:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "arguments": [
                      {
                        "hexValue": "41444d494e5f524f4c45",
                        "id": 1225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "283:12:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
                          "typeString": "literal_string \"ADMIN_ROLE\""
                        },
                        "value": "ADMIN_ROLE"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
                          "typeString": "literal_string \"ADMIN_ROLE\""
                        }
                      ],
                      "id": 1224,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967288,
                      "src": "273:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1226,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "273:23:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "25b8e7eb",
                  "id": 1232,
                  "mutability": "constant",
                  "name": "AI_AGENT_ROLE",
                  "nameLocation": "327:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "303:66:7",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1228,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "303:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "arguments": [
                      {
                        "hexValue": "41495f4147454e545f524f4c45",
                        "id": 1230,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "353:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_faa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79",
                          "typeString": "literal_string \"AI_AGENT_ROLE\""
                        },
                        "value": "AI_AGENT_ROLE"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_faa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79",
                          "typeString": "literal_string \"AI_AGENT_ROLE\""
                        }
                      ],
                      "id": 1229,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967288,
                      "src": "343:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1231,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "343:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "canonicalName": "SleepFine.Challenge",
                  "id": 1250,
                  "members": [
                    {
                      "constant": false,
                      "id": 1234,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "458:4:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "450:12:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1233,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "450:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1236,
                      "mutability": "mutable",
                      "name": "app",
                      "nameLocation": "648:3:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "640:11:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1235,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "640:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1238,
                      "mutability": "mutable",
                      "name": "completed",
                      "nameLocation": "760:9:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "755:14:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1237,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "755:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1240,
                      "mutability": "mutable",
                      "name": "startDate",
                      "nameLocation": "833:9:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "826:16:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 1239,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "826:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1242,
                      "mutability": "mutable",
                      "name": "durationDays",
                      "nameLocation": "905:12:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "898:19:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 1241,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "898:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1244,
                      "mutability": "mutable",
                      "name": "missedDaysCount",
                      "nameLocation": "983:15:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "976:22:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 1243,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "976:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1247,
                      "mutability": "mutable",
                      "name": "missedDaysArray",
                      "nameLocation": "1057:15:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "1050:22:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                        "typeString": "bool[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1245,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1050:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1246,
                        "nodeType": "ArrayTypeName",
                        "src": "1050:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                          "typeString": "bool[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1249,
                      "mutability": "mutable",
                      "name": "deposit",
                      "nameLocation": "1175:7:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "1167:15:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1248,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "1167:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Challenge",
                  "nameLocation": "383:9:7",
                  "nodeType": "StructDefinition",
                  "scope": 1626,
                  "src": "376:813:7",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 1251,
                    "nodeType": "StructuredDocumentation",
                    "src": "1195:150:7",
                    "text": "@notice A challenge is uniquely identified by an incremental Challenge ID\n This simple structure enables users to start multiple challenges"
                  },
                  "functionSelector": "8f1d3776",
                  "id": 1255,
                  "mutability": "mutable",
                  "name": "challenges",
                  "nameLocation": "1369:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "1350:29:7",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                    "typeString": "struct SleepFine.Challenge[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1253,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 1252,
                        "name": "Challenge",
                        "nameLocations": [
                          "1350:9:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1250,
                        "src": "1350:9:7"
                      },
                      "referencedDeclaration": 1250,
                      "src": "1350:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                        "typeString": "struct SleepFine.Challenge"
                      }
                    },
                    "id": 1254,
                    "nodeType": "ArrayTypeName",
                    "src": "1350:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage_ptr",
                      "typeString": "struct SleepFine.Challenge[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "f845c5b3",
                  "id": 1258,
                  "mutability": "immutable",
                  "name": "stakingPrecompile",
                  "nameLocation": "1411:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1626,
                  "src": "1385:43:7",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStaking_$634",
                    "typeString": "contract IStaking"
                  },
                  "typeName": {
                    "id": 1257,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1256,
                      "name": "IStaking",
                      "nameLocations": [
                        "1385:8:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 634,
                      "src": "1385:8:7"
                    },
                    "referencedDeclaration": 634,
                    "src": "1385:8:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$634",
                      "typeString": "contract IStaking"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1274,
                    "nodeType": "Block",
                    "src": "1473:96:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1269,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 1263,
                                    "name": "challenges",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1255,
                                    "src": "1491:10:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                                      "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                                    }
                                  },
                                  "id": 1265,
                                  "indexExpression": {
                                    "id": 1264,
                                    "name": "challengeId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1260,
                                    "src": "1502:11:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1491:23:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                                    "typeString": "struct SleepFine.Challenge storage ref"
                                  }
                                },
                                "id": 1266,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1515:3:7",
                                "memberName": "app",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1236,
                                "src": "1491:27:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 1267,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1522:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1268,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1526:6:7",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1522:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1491:41:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617574686f72697a6564",
                              "id": 1270,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1534:16:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                                "typeString": "literal_string \"Not authorized\""
                              },
                              "value": "Not authorized"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                                "typeString": "literal_string \"Not authorized\""
                              }
                            ],
                            "id": 1262,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1483:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1483:68:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1272,
                        "nodeType": "ExpressionStatement",
                        "src": "1483:68:7"
                      },
                      {
                        "id": 1273,
                        "nodeType": "PlaceholderStatement",
                        "src": "1561:1:7"
                      }
                    ]
                  },
                  "id": 1275,
                  "name": "onlyApp",
                  "nameLocation": "1444:7:7",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1261,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1260,
                        "mutability": "mutable",
                        "name": "challengeId",
                        "nameLocation": "1460:11:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1275,
                        "src": "1452:19:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1259,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1452:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1451:21:7"
                  },
                  "src": "1435:134:7",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "eventSelector": "405bd78338cd4095fe6be4280019762282b9331e09f5123f4bedd1b93cbe4f1f",
                  "id": 1281,
                  "name": "NewChallenge",
                  "nameLocation": "1581:12:7",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1280,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1277,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "1619:4:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1281,
                        "src": "1603:20:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1276,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1603:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1279,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "challengeId",
                        "nameLocation": "1649:11:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1281,
                        "src": "1633:27:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1278,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1633:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1593:73:7"
                  },
                  "src": "1575:92:7"
                },
                {
                  "body": {
                    "id": 1297,
                    "nodeType": "Block",
                    "src": "1714:108:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 1289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1287,
                            "name": "stakingPrecompile",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1258,
                            "src": "1724:17:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStaking_$634",
                              "typeString": "contract IStaking"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1288,
                            "name": "_stakingPrecompile",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1284,
                            "src": "1744:18:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStaking_$634",
                              "typeString": "contract IStaking"
                            }
                          },
                          "src": "1724:38:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStaking_$634",
                            "typeString": "contract IStaking"
                          }
                        },
                        "id": 1290,
                        "nodeType": "ExpressionStatement",
                        "src": "1724:38:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1292,
                              "name": "DEFAULT_ADMIN_ROLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 29,
                              "src": "1784:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "expression": {
                                "id": 1293,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1804:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1808:6:7",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1804:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1291,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "1773:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 1295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1773:42:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1296,
                        "nodeType": "ExpressionStatement",
                        "src": "1773:42:7"
                      }
                    ]
                  },
                  "id": 1298,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1285,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1284,
                        "mutability": "mutable",
                        "name": "_stakingPrecompile",
                        "nameLocation": "1694:18:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1298,
                        "src": "1685:27:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$634",
                          "typeString": "contract IStaking"
                        },
                        "typeName": {
                          "id": 1283,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1282,
                            "name": "IStaking",
                            "nameLocations": [
                              "1685:8:7"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 634,
                            "src": "1685:8:7"
                          },
                          "referencedDeclaration": 634,
                          "src": "1685:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStaking_$634",
                            "typeString": "contract IStaking"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1684:29:7"
                  },
                  "returnParameters": {
                    "id": 1286,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1714:0:7"
                  },
                  "scope": 1626,
                  "src": "1673:149:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1311,
                    "nodeType": "Block",
                    "src": "1940:51:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1307,
                              "name": "AI_AGENT_ROLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1232,
                              "src": "1961:13:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1308,
                              "name": "aiAgent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1300,
                              "src": "1976:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1306,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "1950:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 1309,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1950:34:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1310,
                        "nodeType": "ExpressionStatement",
                        "src": "1950:34:7"
                      }
                    ]
                  },
                  "functionSelector": "36561c64",
                  "id": 1312,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1303,
                          "name": "ADMIN_ROLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1227,
                          "src": "1928:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 1304,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1302,
                        "name": "onlyRole",
                        "nameLocations": [
                          "1919:8:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "1919:8:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1919:20:7"
                    }
                  ],
                  "name": "grantAiAgentRole",
                  "nameLocation": "1876:16:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1301,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1300,
                        "mutability": "mutable",
                        "name": "aiAgent",
                        "nameLocation": "1901:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1312,
                        "src": "1893:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1299,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1893:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1892:17:7"
                  },
                  "returnParameters": {
                    "id": 1305,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1940:0:7"
                  },
                  "scope": 1626,
                  "src": "1867:124:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1325,
                    "nodeType": "Block",
                    "src": "2071:52:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1321,
                              "name": "AI_AGENT_ROLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1232,
                              "src": "2093:13:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1322,
                              "name": "aiAgent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1314,
                              "src": "2108:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1320,
                            "name": "_revokeRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "2081:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (bytes32,address) returns (bool)"
                            }
                          },
                          "id": 1323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2081:35:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1324,
                        "nodeType": "ExpressionStatement",
                        "src": "2081:35:7"
                      }
                    ]
                  },
                  "functionSelector": "916d9e53",
                  "id": 1326,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1317,
                          "name": "ADMIN_ROLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1227,
                          "src": "2059:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 1318,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1316,
                        "name": "onlyRole",
                        "nameLocations": [
                          "2050:8:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "2050:8:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2050:20:7"
                    }
                  ],
                  "name": "revokeAiAgentRole",
                  "nameLocation": "2006:17:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1315,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1314,
                        "mutability": "mutable",
                        "name": "aiAgent",
                        "nameLocation": "2032:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1326,
                        "src": "2024:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1313,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2024:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2023:17:7"
                  },
                  "returnParameters": {
                    "id": 1319,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2071:0:7"
                  },
                  "scope": 1626,
                  "src": "1997:126:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1427,
                    "nodeType": "Block",
                    "src": "2482:545:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1340,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1337,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2500:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1338,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2504:5:7",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "2500:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1339,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2512:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2500:13:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4465706f736974207265717569726564",
                              "id": 1341,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2515:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4f286d231f934c982046a9b4a8846cbedc1b5360f2bd875d6f758c4050f2eebf",
                                "typeString": "literal_string \"Deposit required\""
                              },
                              "value": "Deposit required"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4f286d231f934c982046a9b4a8846cbedc1b5360f2bd875d6f758c4050f2eebf",
                                "typeString": "literal_string \"Deposit required\""
                              }
                            ],
                            "id": 1336,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2492:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2492:42:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1343,
                        "nodeType": "ExpressionStatement",
                        "src": "2492:42:7"
                      },
                      {
                        "assignments": [
                          1345
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1345,
                            "mutability": "mutable",
                            "name": "challengeId",
                            "nameLocation": "2553:11:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1427,
                            "src": "2545:19:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1344,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2545:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1348,
                        "initialValue": {
                          "expression": {
                            "id": 1346,
                            "name": "challenges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1255,
                            "src": "2567:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                              "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                            }
                          },
                          "id": 1347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2578:6:7",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2567:17:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2545:39:7"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 1349,
                              "name": "challenges",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1255,
                              "src": "2594:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                                "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                              }
                            },
                            "id": 1351,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2605:4:7",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2594:15:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage_ptr_$returns$_t_struct$_Challenge_$1250_storage_$attached_to$_t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct SleepFine.Challenge storage ref[] storage pointer) returns (struct SleepFine.Challenge storage ref)"
                            }
                          },
                          "id": 1352,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2594:17:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                            "typeString": "struct SleepFine.Challenge storage ref"
                          }
                        },
                        "id": 1353,
                        "nodeType": "ExpressionStatement",
                        "src": "2594:17:7"
                      },
                      {
                        "assignments": [
                          1356
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1356,
                            "mutability": "mutable",
                            "name": "c",
                            "nameLocation": "2639:1:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1427,
                            "src": "2621:19:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                              "typeString": "struct SleepFine.Challenge"
                            },
                            "typeName": {
                              "id": 1355,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1354,
                                "name": "Challenge",
                                "nameLocations": [
                                  "2621:9:7"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1250,
                                "src": "2621:9:7"
                              },
                              "referencedDeclaration": 1250,
                              "src": "2621:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1360,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1357,
                            "name": "challenges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1255,
                            "src": "2643:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                              "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                            }
                          },
                          "id": 1359,
                          "indexExpression": {
                            "id": 1358,
                            "name": "challengeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1345,
                            "src": "2654:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2643:23:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                            "typeString": "struct SleepFine.Challenge storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2621:45:7"
                      },
                      {
                        "expression": {
                          "id": 1366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1361,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2676:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1363,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2678:4:7",
                            "memberName": "user",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1234,
                            "src": "2676:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1364,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2685:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1365,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2689:6:7",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2685:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2676:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1367,
                        "nodeType": "ExpressionStatement",
                        "src": "2676:19:7"
                      },
                      {
                        "expression": {
                          "id": 1372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1368,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2705:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1370,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2707:3:7",
                            "memberName": "app",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1236,
                            "src": "2705:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1371,
                            "name": "app",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1331,
                            "src": "2713:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2705:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1373,
                        "nodeType": "ExpressionStatement",
                        "src": "2705:11:7"
                      },
                      {
                        "expression": {
                          "id": 1379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1374,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2726:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1376,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2728:9:7",
                            "memberName": "startDate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1240,
                            "src": "2726:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1377,
                              "name": "getCurrentDate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1625,
                              "src": "2740:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                "typeString": "function () view returns (uint64)"
                              }
                            },
                            "id": 1378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2740:16:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "2726:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 1380,
                        "nodeType": "ExpressionStatement",
                        "src": "2726:30:7"
                      },
                      {
                        "expression": {
                          "id": 1385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1381,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2766:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1383,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2768:12:7",
                            "memberName": "durationDays",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1242,
                            "src": "2766:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1384,
                            "name": "numDays",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1329,
                            "src": "2783:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "2766:24:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 1386,
                        "nodeType": "ExpressionStatement",
                        "src": "2766:24:7"
                      },
                      {
                        "expression": {
                          "id": 1395,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1387,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2800:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1389,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2802:7:7",
                            "memberName": "deposit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1249,
                            "src": "2800:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1392,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2820:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1393,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2824:5:7",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "2820:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1391,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2812:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint128_$",
                                "typeString": "type(uint128)"
                              },
                              "typeName": {
                                "id": 1390,
                                "name": "uint128",
                                "nodeType": "ElementaryTypeName",
                                "src": "2812:7:7",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1394,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2812:18:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "2800:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 1396,
                        "nodeType": "ExpressionStatement",
                        "src": "2800:30:7"
                      },
                      {
                        "expression": {
                          "id": 1401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1397,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2840:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1399,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2842:15:7",
                            "memberName": "missedDaysCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1244,
                            "src": "2840:17:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1400,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2860:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2840:21:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 1402,
                        "nodeType": "ExpressionStatement",
                        "src": "2840:21:7"
                      },
                      {
                        "expression": {
                          "id": 1411,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1403,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2871:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1405,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2873:15:7",
                            "memberName": "missedDaysArray",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1247,
                            "src": "2871:17:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$dyn_storage",
                              "typeString": "bool[] storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1409,
                                "name": "numDays",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1329,
                                "src": "2902:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              ],
                              "id": 1408,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2891:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bool[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1406,
                                  "name": "bool",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2895:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 1407,
                                "nodeType": "ArrayTypeName",
                                "src": "2895:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                                  "typeString": "bool[]"
                                }
                              }
                            },
                            "id": 1410,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2891:19:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                              "typeString": "bool[] memory"
                            }
                          },
                          "src": "2871:39:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage",
                            "typeString": "bool[] storage ref"
                          }
                        },
                        "id": 1412,
                        "nodeType": "ExpressionStatement",
                        "src": "2871:39:7"
                      },
                      {
                        "expression": {
                          "id": 1417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1413,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "2920:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1415,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "2922:9:7",
                            "memberName": "completed",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1238,
                            "src": "2920:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 1416,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2934:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "2920:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1418,
                        "nodeType": "ExpressionStatement",
                        "src": "2920:19:7"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1420,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2968:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1421,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2972:6:7",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2968:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1422,
                              "name": "challengeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1345,
                              "src": "2980:11:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1419,
                            "name": "NewChallenge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1281,
                            "src": "2955:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2955:37:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1424,
                        "nodeType": "EmitStatement",
                        "src": "2950:42:7"
                      },
                      {
                        "expression": {
                          "id": 1425,
                          "name": "challengeId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1345,
                          "src": "3009:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1335,
                        "id": 1426,
                        "nodeType": "Return",
                        "src": "3002:18:7"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1327,
                    "nodeType": "StructuredDocumentation",
                    "src": "2167:222:7",
                    "text": "@notice User starts challenge by making a deposit from their wallet\n @param numDays Number of days for the challenge\n @param app iOS app scoped key from secure enclave, created when user installed the app"
                  },
                  "functionSelector": "69c498dc",
                  "id": 1428,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "startChallenge",
                  "nameLocation": "2403:14:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1332,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1329,
                        "mutability": "mutable",
                        "name": "numDays",
                        "nameLocation": "2425:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "2418:14:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 1328,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "2418:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1331,
                        "mutability": "mutable",
                        "name": "app",
                        "nameLocation": "2442:3:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "2434:11:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1330,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2434:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2417:29:7"
                  },
                  "returnParameters": {
                    "id": 1335,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1334,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "2473:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1333,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2473:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2472:9:7"
                  },
                  "scope": 1626,
                  "src": "2394:633:7",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1473,
                    "nodeType": "Block",
                    "src": "3657:253:7",
                    "statements": [
                      {
                        "assignments": [
                          1441
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1441,
                            "mutability": "mutable",
                            "name": "c",
                            "nameLocation": "3685:1:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1473,
                            "src": "3667:19:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                              "typeString": "struct SleepFine.Challenge"
                            },
                            "typeName": {
                              "id": 1440,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1439,
                                "name": "Challenge",
                                "nameLocations": [
                                  "3667:9:7"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1250,
                                "src": "3667:9:7"
                              },
                              "referencedDeclaration": 1250,
                              "src": "3667:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1445,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1442,
                            "name": "challenges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1255,
                            "src": "3689:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                              "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                            }
                          },
                          "id": 1444,
                          "indexExpression": {
                            "id": 1443,
                            "name": "challengeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1431,
                            "src": "3700:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3689:23:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                            "typeString": "struct SleepFine.Challenge storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3667:45:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1449,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "3730:12:7",
                              "subExpression": {
                                "expression": {
                                  "id": 1447,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1441,
                                  "src": "3731:1:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                    "typeString": "struct SleepFine.Challenge storage pointer"
                                  }
                                },
                                "id": 1448,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3733:9:7",
                                "memberName": "completed",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1238,
                                "src": "3731:11:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4368616c6c656e676520616c726561647920636f6d706c65746564",
                              "id": 1450,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3744:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_dfbf59479594aa44e127dddb9362b18dc9aa35d4eabb25733273c93547ba0aa1",
                                "typeString": "literal_string \"Challenge already completed\""
                              },
                              "value": "Challenge already completed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_dfbf59479594aa44e127dddb9362b18dc9aa35d4eabb25733273c93547ba0aa1",
                                "typeString": "literal_string \"Challenge already completed\""
                              }
                            ],
                            "id": 1446,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3722:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1451,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3722:52:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1452,
                        "nodeType": "ExpressionStatement",
                        "src": "3722:52:7"
                      },
                      {
                        "condition": {
                          "id": 1457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3788:25:7",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "id": 1453,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1441,
                                "src": "3789:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                  "typeString": "struct SleepFine.Challenge storage pointer"
                                }
                              },
                              "id": 1454,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3791:15:7",
                              "memberName": "missedDaysArray",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1247,
                              "src": "3789:17:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_storage",
                                "typeString": "bool[] storage ref"
                              }
                            },
                            "id": 1456,
                            "indexExpression": {
                              "id": 1455,
                              "name": "dayId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1433,
                              "src": "3807:5:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3789:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1472,
                        "nodeType": "IfStatement",
                        "src": "3784:120:7",
                        "trueBody": {
                          "id": 1471,
                          "nodeType": "Block",
                          "src": "3815:89:7",
                          "statements": [
                            {
                              "expression": {
                                "id": 1464,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 1458,
                                      "name": "c",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1441,
                                      "src": "3829:1:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                        "typeString": "struct SleepFine.Challenge storage pointer"
                                      }
                                    },
                                    "id": 1461,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3831:15:7",
                                    "memberName": "missedDaysArray",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1247,
                                    "src": "3829:17:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bool_$dyn_storage",
                                      "typeString": "bool[] storage ref"
                                    }
                                  },
                                  "id": 1462,
                                  "indexExpression": {
                                    "id": 1460,
                                    "name": "dayId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1433,
                                    "src": "3847:5:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "3829:24:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 1463,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3856:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "3829:31:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1465,
                              "nodeType": "ExpressionStatement",
                              "src": "3829:31:7"
                            },
                            {
                              "expression": {
                                "id": 1469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "3874:19:7",
                                "subExpression": {
                                  "expression": {
                                    "id": 1466,
                                    "name": "c",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1441,
                                    "src": "3874:1:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                      "typeString": "struct SleepFine.Challenge storage pointer"
                                    }
                                  },
                                  "id": 1468,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "3876:15:7",
                                  "memberName": "missedDaysCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1244,
                                  "src": "3874:17:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "id": 1470,
                              "nodeType": "ExpressionStatement",
                              "src": "3874:19:7"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1429,
                    "nodeType": "StructuredDocumentation",
                    "src": "3514:46:7",
                    "text": "@param challengeId The ID of the challenge"
                  },
                  "functionSelector": "11688c71",
                  "id": 1474,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1436,
                          "name": "challengeId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1431,
                          "src": "3644:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1437,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1435,
                        "name": "onlyApp",
                        "nameLocations": [
                          "3636:7:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1275,
                        "src": "3636:7:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3636:20:7"
                    }
                  ],
                  "name": "reportMissedSleep",
                  "nameLocation": "3574:17:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1434,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1431,
                        "mutability": "mutable",
                        "name": "challengeId",
                        "nameLocation": "3600:11:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1474,
                        "src": "3592:19:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1430,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3592:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1433,
                        "mutability": "mutable",
                        "name": "dayId",
                        "nameLocation": "3620:5:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1474,
                        "src": "3613:12:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 1432,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "3613:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3591:35:7"
                  },
                  "returnParameters": {
                    "id": 1438,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3657:0:7"
                  },
                  "scope": 1626,
                  "src": "3565:345:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1547,
                    "nodeType": "Block",
                    "src": "3994:467:7",
                    "statements": [
                      {
                        "assignments": [
                          1484
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1484,
                            "mutability": "mutable",
                            "name": "c",
                            "nameLocation": "4022:1:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1547,
                            "src": "4004:19:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                              "typeString": "struct SleepFine.Challenge"
                            },
                            "typeName": {
                              "id": 1483,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1482,
                                "name": "Challenge",
                                "nameLocations": [
                                  "4004:9:7"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1250,
                                "src": "4004:9:7"
                              },
                              "referencedDeclaration": 1250,
                              "src": "4004:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1488,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1485,
                            "name": "challenges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1255,
                            "src": "4026:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                              "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                            }
                          },
                          "id": 1487,
                          "indexExpression": {
                            "id": 1486,
                            "name": "challengeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1476,
                            "src": "4037:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4026:23:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                            "typeString": "struct SleepFine.Challenge storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4004:45:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1492,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "4067:12:7",
                              "subExpression": {
                                "expression": {
                                  "id": 1490,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1484,
                                  "src": "4068:1:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                    "typeString": "struct SleepFine.Challenge storage pointer"
                                  }
                                },
                                "id": 1491,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4070:9:7",
                                "memberName": "completed",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1238,
                                "src": "4068:11:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4368616c6c656e676520616c726561647920636f6d706c65746564",
                              "id": 1493,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4081:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_dfbf59479594aa44e127dddb9362b18dc9aa35d4eabb25733273c93547ba0aa1",
                                "typeString": "literal_string \"Challenge already completed\""
                              },
                              "value": "Challenge already completed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_dfbf59479594aa44e127dddb9362b18dc9aa35d4eabb25733273c93547ba0aa1",
                                "typeString": "literal_string \"Challenge already completed\""
                              }
                            ],
                            "id": 1489,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4059:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1494,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4059:52:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1495,
                        "nodeType": "ExpressionStatement",
                        "src": "4059:52:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              "id": 1504,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                "id": 1501,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1497,
                                    "name": "c",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1484,
                                    "src": "4129:1:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                      "typeString": "struct SleepFine.Challenge storage pointer"
                                    }
                                  },
                                  "id": 1498,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4131:9:7",
                                  "memberName": "startDate",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1240,
                                  "src": "4129:11:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1499,
                                    "name": "c",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1484,
                                    "src": "4143:1:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                      "typeString": "struct SleepFine.Challenge storage pointer"
                                    }
                                  },
                                  "id": 1500,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4145:12:7",
                                  "memberName": "durationDays",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1242,
                                  "src": "4143:14:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  }
                                },
                                "src": "4129:28:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 1502,
                                  "name": "getCurrentDate",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1625,
                                  "src": "4161:14:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint64_$",
                                    "typeString": "function () view returns (uint64)"
                                  }
                                },
                                "id": 1503,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4161:16:7",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "src": "4129:48:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4368616c6c656e67652074696d65206e6f7420636f6d706c6574656420796574",
                              "id": 1505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4179:34:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_daf3feb47ea1046b956e016ac28e7dcebb096ef6a254caaa0ce9ee6253b95b76",
                                "typeString": "literal_string \"Challenge time not completed yet\""
                              },
                              "value": "Challenge time not completed yet"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_daf3feb47ea1046b956e016ac28e7dcebb096ef6a254caaa0ce9ee6253b95b76",
                                "typeString": "literal_string \"Challenge time not completed yet\""
                              }
                            ],
                            "id": 1496,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4121:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4121:93:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1507,
                        "nodeType": "ExpressionStatement",
                        "src": "4121:93:7"
                      },
                      {
                        "expression": {
                          "id": 1512,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1508,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1484,
                              "src": "4224:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1510,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "4226:9:7",
                            "memberName": "completed",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1238,
                            "src": "4224:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 1511,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4238:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4224:18:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1513,
                        "nodeType": "ExpressionStatement",
                        "src": "4224:18:7"
                      },
                      {
                        "assignments": [
                          1515
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1515,
                            "mutability": "mutable",
                            "name": "refund",
                            "nameLocation": "4261:6:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1547,
                            "src": "4253:14:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            },
                            "typeName": {
                              "id": 1514,
                              "name": "uint128",
                              "nodeType": "ElementaryTypeName",
                              "src": "4253:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1528,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          },
                          "id": 1527,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            },
                            "id": 1524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1516,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1484,
                                "src": "4270:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                  "typeString": "struct SleepFine.Challenge storage pointer"
                                }
                              },
                              "id": 1517,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4272:7:7",
                              "memberName": "deposit",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1249,
                              "src": "4270:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  },
                                  "id": 1522,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1518,
                                      "name": "c",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1484,
                                      "src": "4283:1:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                        "typeString": "struct SleepFine.Challenge storage pointer"
                                      }
                                    },
                                    "id": 1519,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4285:12:7",
                                    "memberName": "durationDays",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1242,
                                    "src": "4283:14:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1520,
                                      "name": "c",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1484,
                                      "src": "4300:1:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                        "typeString": "struct SleepFine.Challenge storage pointer"
                                      }
                                    },
                                    "id": 1521,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4302:15:7",
                                    "memberName": "missedDaysCount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1244,
                                    "src": "4300:17:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "src": "4283:34:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint64",
                                    "typeString": "uint64"
                                  }
                                }
                              ],
                              "id": 1523,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4282:36:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "src": "4270:48:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "expression": {
                              "id": 1525,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1484,
                              "src": "4321:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                "typeString": "struct SleepFine.Challenge storage pointer"
                              }
                            },
                            "id": 1526,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4323:12:7",
                            "memberName": "durationDays",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1242,
                            "src": "4321:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "4270:65:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4253:82:7"
                      },
                      {
                        "assignments": [
                          1530,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1530,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "4356:7:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1547,
                            "src": "4351:12:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1529,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "4351:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1541,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4406:2:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1533,
                                      "name": "c",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1484,
                                      "src": "4378:1:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                                        "typeString": "struct SleepFine.Challenge storage pointer"
                                      }
                                    },
                                    "id": 1534,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4380:4:7",
                                    "memberName": "user",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1234,
                                    "src": "4378:6:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 1532,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4370:8:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_payable_$",
                                    "typeString": "type(address payable)"
                                  },
                                  "typeName": {
                                    "id": 1531,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4370:8:7",
                                    "stateMutability": "payable",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4370:15:7",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 1536,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4386:4:7",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "4370:20:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1538,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1537,
                                "name": "refund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1515,
                                "src": "4398:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              }
                            ],
                            "src": "4370:35:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4370:39:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4350:59:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1543,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1530,
                              "src": "4427:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5472616e73666572206661696c6564",
                              "id": 1544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4436:17:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                "typeString": "literal_string \"Transfer failed\""
                              },
                              "value": "Transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                "typeString": "literal_string \"Transfer failed\""
                              }
                            ],
                            "id": 1542,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4419:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4419:35:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1546,
                        "nodeType": "ExpressionStatement",
                        "src": "4419:35:7"
                      }
                    ]
                  },
                  "functionSelector": "a7817bbc",
                  "id": 1548,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1479,
                          "name": "challengeId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1476,
                          "src": "3981:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1480,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1478,
                        "name": "onlyApp",
                        "nameLocations": [
                          "3973:7:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1275,
                        "src": "3973:7:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3973:20:7"
                    }
                  ],
                  "name": "completeChallenge",
                  "nameLocation": "3925:17:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1477,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1476,
                        "mutability": "mutable",
                        "name": "challengeId",
                        "nameLocation": "3951:11:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1548,
                        "src": "3943:19:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1475,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3943:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3942:21:7"
                  },
                  "returnParameters": {
                    "id": 1481,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3994:0:7"
                  },
                  "scope": 1626,
                  "src": "3916:545:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1564,
                    "nodeType": "Block",
                    "src": "4603:59:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1561,
                              "name": "targets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1551,
                              "src": "4647:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            ],
                            "expression": {
                              "id": 1559,
                              "name": "stakingPrecompile",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1258,
                              "src": "4620:17:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStaking_$634",
                                "typeString": "contract IStaking"
                              }
                            },
                            "id": 1560,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4638:8:7",
                            "memberName": "nominate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 554,
                            "src": "4620:26:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_bool_$",
                              "typeString": "function (address[] memory) external returns (bool)"
                            }
                          },
                          "id": 1562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4620:35:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1558,
                        "id": 1563,
                        "nodeType": "Return",
                        "src": "4613:42:7"
                      }
                    ]
                  },
                  "functionSelector": "19f2fdad",
                  "id": 1565,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1554,
                          "name": "AI_AGENT_ROLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1232,
                          "src": "4573:13:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 1555,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1553,
                        "name": "onlyRole",
                        "nameLocations": [
                          "4564:8:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "4564:8:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4564:23:7"
                    }
                  ],
                  "name": "nominate",
                  "nameLocation": "4518:8:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1552,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1551,
                        "mutability": "mutable",
                        "name": "targets",
                        "nameLocation": "4546:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1565,
                        "src": "4527:26:7",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1549,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4527:7:7",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1550,
                          "nodeType": "ArrayTypeName",
                          "src": "4527:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4526:28:7"
                  },
                  "returnParameters": {
                    "id": 1558,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1557,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1565,
                        "src": "4597:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1556,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4597:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4596:6:7"
                  },
                  "scope": 1626,
                  "src": "4509:153:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1580,
                    "nodeType": "Block",
                    "src": "4731:58:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 1573,
                                "name": "stakingPrecompile",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1258,
                                "src": "4741:17:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStaking_$634",
                                  "typeString": "contract IStaking"
                                }
                              },
                              "id": 1575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4759:4:7",
                              "memberName": "bond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 463,
                              "src": "4741:22:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$__$returns$_t_uint128_$",
                                "typeString": "function () payable external returns (uint128)"
                              }
                            },
                            "id": 1577,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1576,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1567,
                                "src": "4772:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              }
                            ],
                            "src": "4741:39:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$__$returns$_t_uint128_$value",
                              "typeString": "function () payable external returns (uint128)"
                            }
                          },
                          "id": 1578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4741:41:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 1579,
                        "nodeType": "ExpressionStatement",
                        "src": "4741:41:7"
                      }
                    ]
                  },
                  "functionSelector": "defe4b12",
                  "id": 1581,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1570,
                          "name": "AI_AGENT_ROLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1232,
                          "src": "4716:13:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 1571,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1569,
                        "name": "onlyRole",
                        "nameLocations": [
                          "4707:8:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "4707:8:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4707:23:7"
                    }
                  ],
                  "name": "bond",
                  "nameLocation": "4677:4:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1568,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1567,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4690:6:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1581,
                        "src": "4682:14:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1566,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4682:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4681:16:7"
                  },
                  "returnParameters": {
                    "id": 1572,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4731:0:7"
                  },
                  "scope": 1626,
                  "src": "4668:121:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1595,
                    "nodeType": "Block",
                    "src": "4860:49:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1592,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "4895:6:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            ],
                            "expression": {
                              "id": 1589,
                              "name": "stakingPrecompile",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1258,
                              "src": "4870:17:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStaking_$634",
                                "typeString": "contract IStaking"
                              }
                            },
                            "id": 1591,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4888:6:7",
                            "memberName": "unbond",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 471,
                            "src": "4870:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint128_$returns$_t_uint128_$",
                              "typeString": "function (uint128) external returns (uint128)"
                            }
                          },
                          "id": 1593,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4870:32:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "id": 1594,
                        "nodeType": "ExpressionStatement",
                        "src": "4870:32:7"
                      }
                    ]
                  },
                  "functionSelector": "e8111842",
                  "id": 1596,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1586,
                          "name": "AI_AGENT_ROLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1232,
                          "src": "4845:13:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 1587,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1585,
                        "name": "onlyRole",
                        "nameLocations": [
                          "4836:8:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40,
                        "src": "4836:8:7"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4836:23:7"
                    }
                  ],
                  "name": "unbond",
                  "nameLocation": "4804:6:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1584,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1583,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4819:6:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1596,
                        "src": "4811:14:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        "typeName": {
                          "id": 1582,
                          "name": "uint128",
                          "nodeType": "ElementaryTypeName",
                          "src": "4811:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4810:16:7"
                  },
                  "returnParameters": {
                    "id": 1588,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4860:0:7"
                  },
                  "scope": 1626,
                  "src": "4795:114:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1608,
                    "nodeType": "Block",
                    "src": "5037:47:7",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 1604,
                            "name": "challenges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1255,
                            "src": "5054:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Challenge_$1250_storage_$dyn_storage",
                              "typeString": "struct SleepFine.Challenge storage ref[] storage ref"
                            }
                          },
                          "id": 1606,
                          "indexExpression": {
                            "id": 1605,
                            "name": "challengeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1598,
                            "src": "5065:11:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5054:23:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage",
                            "typeString": "struct SleepFine.Challenge storage ref"
                          }
                        },
                        "functionReturnParameters": 1603,
                        "id": 1607,
                        "nodeType": "Return",
                        "src": "5047:30:7"
                      }
                    ]
                  },
                  "functionSelector": "1bdd4b74",
                  "id": 1609,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getChallenge",
                  "nameLocation": "4962:12:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1599,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1598,
                        "mutability": "mutable",
                        "name": "challengeId",
                        "nameLocation": "4983:11:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1609,
                        "src": "4975:19:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1597,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4975:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4974:21:7"
                  },
                  "returnParameters": {
                    "id": 1603,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1602,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1609,
                        "src": "5019:16:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Challenge_$1250_memory_ptr",
                          "typeString": "struct SleepFine.Challenge"
                        },
                        "typeName": {
                          "id": 1601,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1600,
                            "name": "Challenge",
                            "nameLocations": [
                              "5019:9:7"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1250,
                            "src": "5019:9:7"
                          },
                          "referencedDeclaration": 1250,
                          "src": "5019:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Challenge_$1250_storage_ptr",
                            "typeString": "struct SleepFine.Challenge"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5018:18:7"
                  },
                  "scope": 1626,
                  "src": "4953:131:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1624,
                    "nodeType": "Block",
                    "src": "5145:63:7",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 1622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            "id": 1620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 1616,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "5169:5:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1617,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5175:9:7",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "5169:15:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1615,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5162:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint64_$",
                                  "typeString": "type(uint64)"
                                },
                                "typeName": {
                                  "id": 1614,
                                  "name": "uint64",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5162:6:7",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1618,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5162:23:7",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 1619,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5188:6:7",
                              "subdenomination": "days",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              },
                              "value": "1"
                            },
                            "src": "5162:32:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "31303030",
                            "id": 1621,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5197:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          },
                          "src": "5162:39:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "functionReturnParameters": 1613,
                        "id": 1623,
                        "nodeType": "Return",
                        "src": "5155:46:7"
                      }
                    ]
                  },
                  "functionSelector": "9254d772",
                  "id": 1625,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCurrentDate",
                  "nameLocation": "5099:14:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1610,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5113:2:7"
                  },
                  "returnParameters": {
                    "id": 1613,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1612,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1625,
                        "src": "5137:6:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 1611,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "5137:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5136:8:7"
                  },
                  "scope": 1626,
                  "src": "5090:118:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 1627,
              "src": "194:5016:7",
              "usedErrors": [
                305,
                308
              ],
              "usedEvents": [
                317,
                326,
                335,
                1281
              ]
            }
          ],
          "src": "32:5179:7"
        }
      }
    },
    "contracts": {
      "@openzeppelin/contracts/access/AccessControl.sol": {
        "AccessControl": {
          "abi": [
            {
              "inputs": [],
              "name": "AccessControlBadConfirmation",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "neededRole",
                  "type": "bytes32"
                }
              ],
              "name": "AccessControlUnauthorizedAccount",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "callerConfirmation",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/access/IAccessControl.sol": {
        "IAccessControl": {
          "abi": [
            {
              "inputs": [],
              "name": "AccessControlBadConfirmation",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "neededRole",
                  "type": "bytes32"
                }
              ],
              "name": "AccessControlUnauthorizedAccount",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "callerConfirmation",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "irOptimized": ""
        }
      },
      "contracts/IStaking.sol": {
        "IStaking": {
          "abi": [
            {
              "inputs": [],
              "name": "bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "chill",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "commission",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "commission",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "era",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "full_unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "max_nominations",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "maxNominations",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_active_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "minimumBond",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_validator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "targets",
                  "type": "address[]"
                }
              ],
              "name": "nominate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nominations",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "nominations",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "payee",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "payout",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "rewards",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pending",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "rebond_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "role",
              "outputs": [
                {
                  "internalType": "enum IStakingRoles.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ],
              "name": "set_payee",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_able",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "stakeable",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_of",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "active",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "total",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Stake",
                  "name": "stake",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unbonding_queue",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "era",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint128",
                      "name": "amount",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Unbonding[]",
                  "name": "unbondingQueue",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "commission",
                  "type": "uint32"
                }
              ],
              "name": "validate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdraw_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"commission\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"era\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"full_unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_nominations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxNominations\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_active_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"minimumBond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_validator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"nominate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"nominations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"rebond_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"role\",\"outputs\":[{\"internalType\":\"enum IStakingRoles.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"set_payee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_able\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakeable\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_of\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"active\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbonding_queue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"era\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Unbonding[]\",\"name\":\"unbondingQueue\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"commission\",\"type\":\"uint32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bond()\":{\"details\":\"At the moment, staking pallet only imposes `ED` as the minimum bond. A separate PR should parameterize this and use `ed.max(minimum_bond)` instead. This is a wrapper for `bond` and `bond_extra`.\",\"returns\":{\"amount\":\"The actual amount that was additionally bonded. Returns 0 on failure.\"}},\"chill()\":{\"details\":\"Has to be called before `unbond` if the intention is to fully leave the staking system.\",\"returns\":{\"bonded\":\"True if the caller is bonded and therefore can chill, false otherwise.\"}},\"commission()\":{\"returns\":{\"commission\":\"The validator commission.\"}},\"era()\":{\"details\":\"The era number is the unit of time in the staking system. It does not have a 100% fixed duration, but it aims to be at a parameterized value. For example, eras in Polkadot eras are aiming to be 24 hours. Implementation: `active_era.index`\",\"returns\":{\"_0\":\"era The current era number.\"}},\"full_unbond()\":{\"details\":\"A shorthand for `unbond(bond.active)`.\",\"returns\":{\"amount\":\"The actual amount that was unbonded.\"}},\"max_nominations()\":{\"details\":\"the upper bound of the size of the `targets` array in `nominate`. It might be dynamic based on the runtime, or even the caller's staked balance.\"},\"minimum_active_nominator_bond()\":{\"details\":\"If `0`, it means we don't have a guess. Otherwise, this value should be treated as a best effort estimate of the minimum \\\"reasonable\\\" amount that a nominator should have staked. Bonding a value less than this will likely cause the nominator to not be eligible for receiving rewards. In such cases, one should use `PoolStaking` instead. Please refer to `NPoS` section in the Polkadot wiki for more info, notably: <https://wiki.polkadot.network/learn/learn-nominator/#minimum-active-nomination-to-receive-staking-rewards>\",\"returns\":{\"_0\":\"uint128 the estimate minimum staked value for a nominator to earn rewards.\"}},\"minimum_bond()\":{\"details\":\"This is the minimum amount needed to be a `CHILLED` staker. Implementation: `ed.max(minimum_bond)`.\",\"returns\":{\"minimumBond\":\"The minimum bond amount.\"}},\"minimum_nominator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"minimum_validator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"nominate(address[])\":{\"details\":\"Effects can be checked with `role` and `nominations`.\",\"params\":{\"targets\":\"An array of addresses to nominate.\"},\"returns\":{\"bonded\":\"True if the caller is bonded and therefore can nominate, false otherwise.\"}},\"nominations()\":{\"returns\":{\"nominations\":\"An array of addresses.\"}},\"payee()\":{\"returns\":{\"payee\":\"The address that will receive rewards.\"}},\"payout()\":{\"returns\":{\"rewards\":\"The amount of rewards paid out\"}},\"rebond_unbonded(uint128)\":{\"details\":\"Essentially for \\\"I unbonded, but I have now changed my mind\\\" situation.\",\"params\":{\"value\":\"The amount of tokens to rebond.\"},\"returns\":{\"amount\":\"The actual amount that was rebonded.\"}},\"role()\":{\"returns\":{\"role\":\"The role of the caller from the `Roles` enum.\"}},\"set_payee(address)\":{\"params\":{\"payee\":\"The address to receive rewards. Where and how rewards come from is not in the scope of this interface. Upon declaring a `role`, an account might receive rewards.\"},\"returns\":{\"bonded\":\"`true` if the caller is bonded and can set the payee, `false` otherwise.\"}},\"stake_able()\":{\"details\":\"Ensures enough balance is left in the account for existence requirements, but does not leave anything for gas fee payment.\",\"returns\":{\"stakeable\":\"The maximum amount the caller can stake.\"}},\"stake_of()\":{\"details\":\"Implemented exactly as `StakingLedger`.\",\"returns\":{\"stake\":\"The `Stake`d amount of the caller.\"}},\"unbond(uint128)\":{\"details\":\"A staker cannot request an unbond such that their leftover bond is less than `minimum_bond()`, unless if the leftover is zero. For this you can also use `full_unbond()`.\",\"params\":{\"value\":\"The amount of tokens to unbond.\"},\"returns\":{\"amount\":\"The actual amount that was unbonded. Returns 0 on failure.\"}},\"unbonding_queue()\":{\"details\":\"a list of `(era, amount)`. Once any of the said eras are reached (check via `era`), the amount is withdraw-able via `withdraw_unbonded()`.\",\"returns\":{\"unbondingQueue\":\"An array of Unbonding structs containing the era and amount scheduled to be unbonded in that (probably future) era.\"}},\"validate(uint32)\":{\"details\":\"Effects can be checked with `role` and `commission`.\",\"params\":{\"commission\":\"The commission rate for the validator.\"},\"returns\":{\"bonded\":\"Returns true if the caller is bonded and therefore can validate, false otherwise.\"}},\"withdraw_unbonded()\":{\"returns\":{\"amount\":\"The actual amount withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bond()\":{\"notice\":\"Bonds the caller's account, increasing the bonded amount by up to `value` tokens. The caller's bonded amount after this call must be be greater than `minimum_bond()`.\"},\"chill()\":{\"notice\":\"Nullifies the effect of `validate` or `nominate`.\"},\"commission()\":{\"notice\":\"Returns the commission rate of the caller, if they are a validator.\"},\"era()\":{\"notice\":\"Returns the current `era` number of the staking system.\"},\"full_unbond()\":{\"notice\":\"Unbonds all tokens, preparing to leave the staking system with `withdraw_unbonded`.\"},\"max_nominations()\":{\"notice\":\"the maximum number of nomination targets that a staker can declare upon `bond`.\"},\"minimum_active_nominator_bond()\":{\"notice\":\"Return the last known value for the smallest nominator who managed to be actively receiving rewards.\"},\"minimum_bond()\":{\"notice\":\"Returns the minimum amount of tokens required to be bonded.\"},\"minimum_nominator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"minimum_validator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"nominate(address[])\":{\"notice\":\"Declare the sender's intention to be a nominator, selecting `targets` as their preference.\"},\"nominations()\":{\"notice\":\"Returns the addresses that the caller is nominating.\"},\"payee()\":{\"notice\":\"Returns the payee account for the contract address.\"},\"payout()\":{\"notice\":\"Payout rewards, is an expensive operation because of the large storage query, and thus it is recommended that this function is not used.\"},\"pending()\":{\"notice\":\"Get the number of the queue of stakers rewards are pending from, as this has an expensive storage query, it is recommended that is not use.\"},\"rebond_unbonded(uint128)\":{\"notice\":\"Rebonds up to `value` tokens from the caller's previously unbonded amount.\"},\"role()\":{\"notice\":\"Returns the role of the caller.\"},\"set_payee(address)\":{\"notice\":\"Sets the reward destination address for the caller.\"},\"stake_able()\":{\"notice\":\"Returns the total amount that the caller can further stake, considering balance and existence requirements.\"},\"stake_of()\":{\"notice\":\"Returns the current bonded stake of the caller\"},\"unbond(uint128)\":{\"notice\":\"Unbonds up to `value` tokens from the caller's account. Note that unbonding is a two step process, and should be followed by `withdraw_unbonded()` to actually withdraw the unbonded tokens. .\"},\"unbonding_queue()\":{\"notice\":\"Returns the unbonding queue of the caller.\"},\"validate(uint32)\":{\"notice\":\"Declare the sender's intention to be a validator, selecting `commission` as their preference.\"},\"withdraw_unbonded()\":{\"notice\":\"Withdraws any previously unbonded tokens that have passed the unbonding period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IStaking.sol\":\"IStaking\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "bond()": "64c9ec6f",
              "chill()": "2b8a3ae6",
              "commission()": "e1489191",
              "era()": "143e55e0",
              "full_unbond()": "22b223ed",
              "max_nominations()": "727f17f2",
              "minimum_active_nominator_bond()": "17c19d5f",
              "minimum_bond()": "3eb9776c",
              "minimum_nominator_bond()": "385496f7",
              "minimum_validator_bond()": "b35ae446",
              "nominate(address[])": "19f2fdad",
              "nominations()": "d1d4d3e4",
              "payee()": "ae90b213",
              "payout()": "63bd1d4a",
              "pending()": "e20ccec3",
              "rebond_unbonded(uint128)": "efb073f0",
              "role()": "10055c1d",
              "set_payee(address)": "ec9b28f1",
              "stake_able()": "498aa0f1",
              "stake_of()": "64e7b428",
              "unbond(uint128)": "e8111842",
              "unbonding_queue()": "262c5f0f",
              "validate(uint32)": "ac0d45e2",
              "withdraw_unbonded()": "77a0fe02"
            }
          },
          "irOptimized": ""
        },
        "IStakingBasic": {
          "abi": [
            {
              "inputs": [],
              "name": "bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "era",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "full_unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "minimumBond",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "payee",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "rebond_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ],
              "name": "set_payee",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_able",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "stakeable",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_of",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "active",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "total",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Stake",
                  "name": "stake",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unbonding_queue",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "era",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint128",
                      "name": "amount",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Unbonding[]",
                  "name": "unbondingQueue",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdraw_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"era\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"full_unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"minimumBond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"rebond_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"set_payee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_able\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakeable\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_of\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"active\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbonding_queue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"era\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Unbonding[]\",\"name\":\"unbondingQueue\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"kianenigma\",\"details\":\"Talks to the directly `pallet-staking-async`.\",\"kind\":\"dev\",\"methods\":{\"bond()\":{\"details\":\"At the moment, staking pallet only imposes `ED` as the minimum bond. A separate PR should parameterize this and use `ed.max(minimum_bond)` instead. This is a wrapper for `bond` and `bond_extra`.\",\"returns\":{\"amount\":\"The actual amount that was additionally bonded. Returns 0 on failure.\"}},\"era()\":{\"details\":\"The era number is the unit of time in the staking system. It does not have a 100% fixed duration, but it aims to be at a parameterized value. For example, eras in Polkadot eras are aiming to be 24 hours. Implementation: `active_era.index`\",\"returns\":{\"_0\":\"era The current era number.\"}},\"full_unbond()\":{\"details\":\"A shorthand for `unbond(bond.active)`.\",\"returns\":{\"amount\":\"The actual amount that was unbonded.\"}},\"minimum_bond()\":{\"details\":\"This is the minimum amount needed to be a `CHILLED` staker. Implementation: `ed.max(minimum_bond)`.\",\"returns\":{\"minimumBond\":\"The minimum bond amount.\"}},\"payee()\":{\"returns\":{\"payee\":\"The address that will receive rewards.\"}},\"rebond_unbonded(uint128)\":{\"details\":\"Essentially for \\\"I unbonded, but I have now changed my mind\\\" situation.\",\"params\":{\"value\":\"The amount of tokens to rebond.\"},\"returns\":{\"amount\":\"The actual amount that was rebonded.\"}},\"set_payee(address)\":{\"params\":{\"payee\":\"The address to receive rewards. Where and how rewards come from is not in the scope of this interface. Upon declaring a `role`, an account might receive rewards.\"},\"returns\":{\"bonded\":\"`true` if the caller is bonded and can set the payee, `false` otherwise.\"}},\"stake_able()\":{\"details\":\"Ensures enough balance is left in the account for existence requirements, but does not leave anything for gas fee payment.\",\"returns\":{\"stakeable\":\"The maximum amount the caller can stake.\"}},\"stake_of()\":{\"details\":\"Implemented exactly as `StakingLedger`.\",\"returns\":{\"stake\":\"The `Stake`d amount of the caller.\"}},\"unbond(uint128)\":{\"details\":\"A staker cannot request an unbond such that their leftover bond is less than `minimum_bond()`, unless if the leftover is zero. For this you can also use `full_unbond()`.\",\"params\":{\"value\":\"The amount of tokens to unbond.\"},\"returns\":{\"amount\":\"The actual amount that was unbonded. Returns 0 on failure.\"}},\"unbonding_queue()\":{\"details\":\"a list of `(era, amount)`. Once any of the said eras are reached (check via `era`), the amount is withdraw-able via `withdraw_unbonded()`.\",\"returns\":{\"unbondingQueue\":\"An array of Unbonding structs containing the era and amount scheduled to be unbonded in that (probably future) era.\"}},\"withdraw_unbonded()\":{\"returns\":{\"amount\":\"The actual amount withdrawn.\"}}},\"title\":\"Staking Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bond()\":{\"notice\":\"Bonds the caller's account, increasing the bonded amount by up to `value` tokens. The caller's bonded amount after this call must be be greater than `minimum_bond()`.\"},\"era()\":{\"notice\":\"Returns the current `era` number of the staking system.\"},\"full_unbond()\":{\"notice\":\"Unbonds all tokens, preparing to leave the staking system with `withdraw_unbonded`.\"},\"minimum_bond()\":{\"notice\":\"Returns the minimum amount of tokens required to be bonded.\"},\"payee()\":{\"notice\":\"Returns the payee account for the contract address.\"},\"rebond_unbonded(uint128)\":{\"notice\":\"Rebonds up to `value` tokens from the caller's previously unbonded amount.\"},\"set_payee(address)\":{\"notice\":\"Sets the reward destination address for the caller.\"},\"stake_able()\":{\"notice\":\"Returns the total amount that the caller can further stake, considering balance and existence requirements.\"},\"stake_of()\":{\"notice\":\"Returns the current bonded stake of the caller\"},\"unbond(uint128)\":{\"notice\":\"Unbonds up to `value` tokens from the caller's account. Note that unbonding is a two step process, and should be followed by `withdraw_unbonded()` to actually withdraw the unbonded tokens. .\"},\"unbonding_queue()\":{\"notice\":\"Returns the unbonding queue of the caller.\"},\"withdraw_unbonded()\":{\"notice\":\"Withdraws any previously unbonded tokens that have passed the unbonding period.\"}},\"notice\":\"Allows users to bond, unbond, and manage their bonded amounts in the staking system. For doing more interesting things, such as nomination, see `StakingRoles`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IStaking.sol\":\"IStakingBasic\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "bond()": "64c9ec6f",
              "era()": "143e55e0",
              "full_unbond()": "22b223ed",
              "minimum_bond()": "3eb9776c",
              "payee()": "ae90b213",
              "rebond_unbonded(uint128)": "efb073f0",
              "set_payee(address)": "ec9b28f1",
              "stake_able()": "498aa0f1",
              "stake_of()": "64e7b428",
              "unbond(uint128)": "e8111842",
              "unbonding_queue()": "262c5f0f",
              "withdraw_unbonded()": "77a0fe02"
            }
          },
          "irOptimized": ""
        },
        "IStakingRewards": {
          "abi": [
            {
              "inputs": [],
              "name": "payout",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "rewards",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pending",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Claiming rewards is permissionless and can be done by any account. The payout pays the reward of (validator, era, page-of-nominators), not just a single nominator.\",\"kind\":\"dev\",\"methods\":{\"payout()\":{\"returns\":{\"rewards\":\"The amount of rewards paid out\"}}},\"title\":\"StakingRewards Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"payout()\":{\"notice\":\"Payout rewards, is an expensive operation because of the large storage query, and thus it is recommended that this function is not used.\"},\"pending()\":{\"notice\":\"Get the number of the queue of stakers rewards are pending from, as this has an expensive storage query, it is recommended that is not use.\"}},\"notice\":\"not needed, just for demonstration purposes. Potentially for claiming staking rewards. Reading rewards is an expensive operation best done off-chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IStaking.sol\":\"IStakingRewards\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "payout()": "63bd1d4a",
              "pending()": "e20ccec3"
            }
          },
          "irOptimized": ""
        },
        "IStakingRoles": {
          "abi": [
            {
              "inputs": [],
              "name": "chill",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "commission",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "commission",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "max_nominations",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "maxNominations",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_active_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_validator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "targets",
                  "type": "address[]"
                }
              ],
              "name": "nominate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nominations",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "nominations",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "role",
              "outputs": [
                {
                  "internalType": "enum IStakingRoles.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "commission",
                  "type": "uint32"
                }
              ],
              "name": "validate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "bonded",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"chill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"commission\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_nominations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxNominations\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_active_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_validator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"nominate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"nominations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"role\",\"outputs\":[{\"internalType\":\"enum IStakingRoles.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"commission\",\"type\":\"uint32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"kianenigma\",\"kind\":\"dev\",\"methods\":{\"chill()\":{\"details\":\"Has to be called before `unbond` if the intention is to fully leave the staking system.\",\"returns\":{\"bonded\":\"True if the caller is bonded and therefore can chill, false otherwise.\"}},\"commission()\":{\"returns\":{\"commission\":\"The validator commission.\"}},\"max_nominations()\":{\"details\":\"the upper bound of the size of the `targets` array in `nominate`. It might be dynamic based on the runtime, or even the caller's staked balance.\"},\"minimum_active_nominator_bond()\":{\"details\":\"If `0`, it means we don't have a guess. Otherwise, this value should be treated as a best effort estimate of the minimum \\\"reasonable\\\" amount that a nominator should have staked. Bonding a value less than this will likely cause the nominator to not be eligible for receiving rewards. In such cases, one should use `PoolStaking` instead. Please refer to `NPoS` section in the Polkadot wiki for more info, notably: <https://wiki.polkadot.network/learn/learn-nominator/#minimum-active-nomination-to-receive-staking-rewards>\",\"returns\":{\"_0\":\"uint128 the estimate minimum staked value for a nominator to earn rewards.\"}},\"minimum_nominator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"minimum_validator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"nominate(address[])\":{\"details\":\"Effects can be checked with `role` and `nominations`.\",\"params\":{\"targets\":\"An array of addresses to nominate.\"},\"returns\":{\"bonded\":\"True if the caller is bonded and therefore can nominate, false otherwise.\"}},\"nominations()\":{\"returns\":{\"nominations\":\"An array of addresses.\"}},\"role()\":{\"returns\":{\"role\":\"The role of the caller from the `Roles` enum.\"}},\"validate(uint32)\":{\"details\":\"Effects can be checked with `role` and `commission`.\",\"params\":{\"commission\":\"The commission rate for the validator.\"},\"returns\":{\"bonded\":\"Returns true if the caller is bonded and therefore can validate, false otherwise.\"}}},\"title\":\"StakingRoles Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"chill()\":{\"notice\":\"Nullifies the effect of `validate` or `nominate`.\"},\"commission()\":{\"notice\":\"Returns the commission rate of the caller, if they are a validator.\"},\"max_nominations()\":{\"notice\":\"the maximum number of nomination targets that a staker can declare upon `bond`.\"},\"minimum_active_nominator_bond()\":{\"notice\":\"Return the last known value for the smallest nominator who managed to be actively receiving rewards.\"},\"minimum_nominator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"minimum_validator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"nominate(address[])\":{\"notice\":\"Declare the sender's intention to be a nominator, selecting `targets` as their preference.\"},\"nominations()\":{\"notice\":\"Returns the addresses that the caller is nominating.\"},\"role()\":{\"notice\":\"Returns the role of the caller.\"},\"validate(uint32)\":{\"notice\":\"Declare the sender's intention to be a validator, selecting `commission` as their preference.\"}},\"notice\":\"Allows setting roles in the Staking system for validators and nominators.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IStaking.sol\":\"IStakingRoles\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "chill()": "2b8a3ae6",
              "commission()": "e1489191",
              "max_nominations()": "727f17f2",
              "minimum_active_nominator_bond()": "17c19d5f",
              "minimum_nominator_bond()": "385496f7",
              "minimum_validator_bond()": "b35ae446",
              "nominate(address[])": "19f2fdad",
              "nominations()": "d1d4d3e4",
              "role()": "10055c1d",
              "validate(uint32)": "ac0d45e2"
            }
          },
          "irOptimized": ""
        }
      },
      "contracts/MockStaking.sol": {
        "MockStaking": {
          "abi": [
            {
              "inputs": [],
              "name": "advanceEra",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "chill",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "commission",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "era",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "full_unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "max_nominations",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_active_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_nominator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minimum_validator_bond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "targets",
                  "type": "address[]"
                }
              ],
              "name": "nominate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nominations",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "payee",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "payout",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pending",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "rebond_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "role",
              "outputs": [
                {
                  "internalType": "enum IStakingRoles.Roles",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "payee_",
                  "type": "address"
                }
              ],
              "name": "set_payee",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_able",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "",
                  "type": "uint128"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stake_of",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "active",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "total",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Stake",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "value",
                  "type": "uint128"
                }
              ],
              "name": "unbond",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unbonding_queue",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "era",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint128",
                      "name": "amount",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct IStakingBasic.Unbonding[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "_commission",
                  "type": "uint32"
                }
              ],
              "name": "validate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdraw_unbonded",
              "outputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"advanceEra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"era\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"full_unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_nominations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_active_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_nominator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_validator_bond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"nominate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"rebond_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"role\",\"outputs\":[{\"internalType\":\"enum IStakingRoles.Roles\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee_\",\"type\":\"address\"}],\"name\":\"set_payee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_able\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_of\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"active\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbonding_queue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"era\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingBasic.Unbonding[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_commission\",\"type\":\"uint32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_unbonded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bond()\":{\"details\":\"At the moment, staking pallet only imposes `ED` as the minimum bond. A separate PR should parameterize this and use `ed.max(minimum_bond)` instead. This is a wrapper for `bond` and `bond_extra`.\",\"returns\":{\"amount\":\"The actual amount that was additionally bonded. Returns 0 on failure.\"}},\"chill()\":{\"details\":\"Has to be called before `unbond` if the intention is to fully leave the staking system.\",\"returns\":{\"_0\":\"True if the caller is bonded and therefore can chill, false otherwise.\"}},\"commission()\":{\"returns\":{\"_0\":\"The validator commission.\"}},\"era()\":{\"details\":\"The era number is the unit of time in the staking system. It does not have a 100% fixed duration, but it aims to be at a parameterized value. For example, eras in Polkadot eras are aiming to be 24 hours. Implementation: `active_era.index`\",\"returns\":{\"_0\":\"era The current era number.\"}},\"full_unbond()\":{\"details\":\"A shorthand for `unbond(bond.active)`.\",\"returns\":{\"amount\":\"The actual amount that was unbonded.\"}},\"max_nominations()\":{\"details\":\"the upper bound of the size of the `targets` array in `nominate`. It might be dynamic based on the runtime, or even the caller's staked balance.\"},\"minimum_active_nominator_bond()\":{\"details\":\"If `0`, it means we don't have a guess. Otherwise, this value should be treated as a best effort estimate of the minimum \\\"reasonable\\\" amount that a nominator should have staked. Bonding a value less than this will likely cause the nominator to not be eligible for receiving rewards. In such cases, one should use `PoolStaking` instead. Please refer to `NPoS` section in the Polkadot wiki for more info, notably: <https://wiki.polkadot.network/learn/learn-nominator/#minimum-active-nomination-to-receive-staking-rewards>\",\"returns\":{\"_0\":\"uint128 the estimate minimum staked value for a nominator to earn rewards.\"}},\"minimum_bond()\":{\"details\":\"This is the minimum amount needed to be a `CHILLED` staker. Implementation: `ed.max(minimum_bond)`.\",\"returns\":{\"_0\":\"The minimum bond amount.\"}},\"minimum_nominator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"minimum_validator_bond()\":{\"returns\":{\"_0\":\"uint128 The amount of minimum stake required\"}},\"nominate(address[])\":{\"details\":\"Effects can be checked with `role` and `nominations`.\",\"params\":{\"targets\":\"An array of addresses to nominate.\"},\"returns\":{\"_0\":\"True if the caller is bonded and therefore can nominate, false otherwise.\"}},\"nominations()\":{\"returns\":{\"_0\":\"An array of addresses.\"}},\"payee()\":{\"returns\":{\"_0\":\"The address that will receive rewards.\"}},\"payout()\":{\"returns\":{\"_0\":\"The amount of rewards paid out\"}},\"rebond_unbonded(uint128)\":{\"details\":\"Essentially for \\\"I unbonded, but I have now changed my mind\\\" situation.\",\"params\":{\"value\":\"The amount of tokens to rebond.\"},\"returns\":{\"amount\":\"The actual amount that was rebonded.\"}},\"role()\":{\"returns\":{\"_0\":\"The role of the caller from the `Roles` enum.\"}},\"stake_able()\":{\"details\":\"Ensures enough balance is left in the account for existence requirements, but does not leave anything for gas fee payment.\",\"returns\":{\"_0\":\"The maximum amount the caller can stake.\"}},\"stake_of()\":{\"details\":\"Implemented exactly as `StakingLedger`.\",\"returns\":{\"_0\":\"The `Stake`d amount of the caller.\"}},\"unbond(uint128)\":{\"details\":\"A staker cannot request an unbond such that their leftover bond is less than `minimum_bond()`, unless if the leftover is zero. For this you can also use `full_unbond()`.\",\"params\":{\"value\":\"The amount of tokens to unbond.\"},\"returns\":{\"amount\":\"The actual amount that was unbonded. Returns 0 on failure.\"}},\"unbonding_queue()\":{\"details\":\"a list of `(era, amount)`. Once any of the said eras are reached (check via `era`), the amount is withdraw-able via `withdraw_unbonded()`.\",\"returns\":{\"_0\":\"An array of Unbonding structs containing the era and amount scheduled to be unbonded in that (probably future) era.\"}},\"withdraw_unbonded()\":{\"returns\":{\"amount\":\"The actual amount withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bond()\":{\"notice\":\"Bonds the caller's account, increasing the bonded amount by up to `value` tokens. The caller's bonded amount after this call must be be greater than `minimum_bond()`.\"},\"chill()\":{\"notice\":\"Nullifies the effect of `validate` or `nominate`.\"},\"commission()\":{\"notice\":\"Returns the commission rate of the caller, if they are a validator.\"},\"era()\":{\"notice\":\"Returns the current `era` number of the staking system.\"},\"full_unbond()\":{\"notice\":\"Unbonds all tokens, preparing to leave the staking system with `withdraw_unbonded`.\"},\"max_nominations()\":{\"notice\":\"the maximum number of nomination targets that a staker can declare upon `bond`.\"},\"minimum_active_nominator_bond()\":{\"notice\":\"Return the last known value for the smallest nominator who managed to be actively receiving rewards.\"},\"minimum_bond()\":{\"notice\":\"Returns the minimum amount of tokens required to be bonded.\"},\"minimum_nominator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"minimum_validator_bond()\":{\"notice\":\"Returns the minimum bond required for validator\"},\"nominate(address[])\":{\"notice\":\"Declare the sender's intention to be a nominator, selecting `targets` as their preference.\"},\"nominations()\":{\"notice\":\"Returns the addresses that the caller is nominating.\"},\"payee()\":{\"notice\":\"Returns the payee account for the contract address.\"},\"payout()\":{\"notice\":\"Payout rewards, is an expensive operation because of the large storage query, and thus it is recommended that this function is not used.\"},\"pending()\":{\"notice\":\"Get the number of the queue of stakers rewards are pending from, as this has an expensive storage query, it is recommended that is not use.\"},\"rebond_unbonded(uint128)\":{\"notice\":\"Rebonds up to `value` tokens from the caller's previously unbonded amount.\"},\"role()\":{\"notice\":\"Returns the role of the caller.\"},\"stake_able()\":{\"notice\":\"Returns the total amount that the caller can further stake, considering balance and existence requirements.\"},\"stake_of()\":{\"notice\":\"Returns the current bonded stake of the caller\"},\"unbond(uint128)\":{\"notice\":\"Unbonds up to `value` tokens from the caller's account. Note that unbonding is a two step process, and should be followed by `withdraw_unbonded()` to actually withdraw the unbonded tokens. .\"},\"unbonding_queue()\":{\"notice\":\"Returns the unbonding queue of the caller.\"},\"withdraw_unbonded()\":{\"notice\":\"Withdraws any previously unbonded tokens that have passed the unbonding period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockStaking.sol\":\"MockStaking\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]},\"contracts/MockStaking.sol\":{\"keccak256\":\"0x996f9b861cafc9559cea8cfe70da0bf6e63fad442c2f873950fb17e470012521\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca34781f438fd0eb41d608de97a72c72eb8a70f2a4a9543d351beacc1eddd162\",\"dweb:/ipfs/QmdXTJPiqjVekFC1wS9YnJTodqFt1snR4wddsrJMy1RGbK\"]}},\"version\":1}",
            "solc_version": "0.8.26+commit.8a97fa7a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 16/65600 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 7824\n// Code size = 27425 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20018]\n     5: jump @30 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30040\n    14: i32 a0 = a0 + 0\n    16: ecalli 7 // 'set_immutable_data'\n    18: jump @30\n      : @2 (gas: 8)\n    21: sp = sp + 0xfffffffffffffff0\n    24: u64 [sp + 0x8] = ra\n    27: u64 [sp] = s0\n    29: a2 = a1\n    31: s0 = a0\n    33: a1 = 0x20\n    36: a0 = a2\n    38: ra = 2, jump @11\n      : @3 [@dyn 1] (gas: 100)\n    43: a1 = u8 [a0 + 0x1]\n    46: a2 = u8 [a0]\n    48: a3 = u8 [a0 + 0x2]\n    51: a4 = u8 [a0 + 0x3]\n    54: a1 = a1 << 0x8\n    57: a1 = a1 | a2\n    60: a3 = a3 << 0x10\n    63: a4 = a4 << 0x18\n    66: a3 = a3 | a4\n    69: a1 = a1 | a3\n    72: a2 = u8 [a0 + 0x5]\n    75: a3 = u8 [a0 + 0x4]\n    78: a4 = u8 [a0 + 0x6]\n    81: a5 = u8 [a0 + 0x7]\n    84: a2 = a2 << 0x8\n    87: a2 = a2 | a3\n    90: a4 = a4 << 0x10\n    93: a5 = a5 << 0x18\n    96: a4 = a4 | a5\n    99: a2 = a2 | a4\n   102: a2 = a2 << 0x20\n   105: t0 = a2 | a1\n   108: a2 = u8 [a0 + 0x9]\n   111: a3 = u8 [a0 + 0x8]\n   114: a4 = u8 [a0 + 0xa]\n   117: a5 = u8 [a0 + 0xb]\n   120: a2 = a2 << 0x8\n   123: a2 = a2 | a3\n   126: a4 = a4 << 0x10\n   129: a5 = a5 << 0x18\n   132: a4 = a4 | a5\n   135: a2 = a2 | a4\n   138: a3 = u8 [a0 + 0xd]\n   141: a4 = u8 [a0 + 0xc]\n   144: a5 = u8 [a0 + 0xe]\n   147: a1 = u8 [a0 + 0xf]\n   150: a3 = a3 << 0x8\n   153: a3 = a3 | a4\n   156: a5 = a5 << 0x10\n   159: a1 = a1 << 0x18\n   162: a1 = a1 | a5\n   165: a1 = a1 | a3\n   168: a1 = a1 << 0x20\n   171: t1 = a1 | a2\n   174: a1 = u8 [a0 + 0x11]\n   177: a3 = u8 [a0 + 0x10]\n   180: a4 = u8 [a0 + 0x12]\n   183: a5 = u8 [a0 + 0x13]\n   186: a1 = a1 << 0x8\n   189: a1 = a1 | a3\n   192: a4 = a4 << 0x10\n   195: a5 = a5 << 0x18\n   198: a4 = a4 | a5\n   201: a1 = a1 | a4\n   204: a3 = u8 [a0 + 0x15]\n   207: a4 = u8 [a0 + 0x14]\n   210: a5 = u8 [a0 + 0x16]\n   213: a2 = u8 [a0 + 0x17]\n   216: a3 = a3 << 0x8\n   219: a3 = a3 | a4\n   222: a5 = a5 << 0x10\n   225: a2 = a2 << 0x18\n   228: a2 = a2 | a5\n   231: a2 = a2 | a3\n   234: a2 = a2 << 0x20\n   237: a3 = a2 | a1\n   240: a1 = u8 [a0 + 0x19]\n   243: a2 = u8 [a0 + 0x18]\n   246: a4 = u8 [a0 + 0x1a]\n   249: a5 = u8 [a0 + 0x1b]\n   252: a1 = a1 << 0x8\n   255: a1 = a1 | a2\n   258: a4 = a4 << 0x10\n   261: a5 = a5 << 0x18\n   264: a4 = a4 | a5\n   267: a1 = a1 | a4\n   270: a2 = u8 [a0 + 0x1d]\n   273: a4 = u8 [a0 + 0x1c]\n   276: a5 = u8 [a0 + 0x1e]\n   279: a0 = u8 [a0 + 0x1f]\n   282: a2 = a2 << 0x8\n   285: a2 = a2 | a4\n   288: a5 = a5 << 0x10\n   291: a0 = a0 << 0x18\n   294: a0 = a0 | a5\n   297: a0 = a0 | a2\n   300: a0 = a0 << 0x20\n   303: a0 = a0 | a1\n   306: a0 = reverse a0\n   308: a1 = reverse a3\n   310: a2 = reverse t1\n   312: a3 = reverse t0\n   314: u64 [s0 + 0x18] = a3\n   317: u64 [s0 + 0x10] = a2\n   320: u64 [s0 + 0x8] = a1\n   323: u64 [s0] = a0\n   325: ra = u64 [sp + 0x8]\n   328: s0 = u64 [sp]\n   330: sp = sp + 0x10\n   333: ret\n      : @4 (gas: 12)\n   335: sp = sp + 0xffffffffffffffd8\n   338: u64 [sp + 0x20] = ra\n   341: u64 [sp + 0x18] = s0\n   344: u64 [sp + 0x10] = s1\n   347: a2 = u64 [a1]\n   349: u64 [sp + 0x8] = a2\n   352: a2 = u64 [a1 + 0x8]\n   355: u64 [sp] = a2\n   357: s0 = u64 [a1 + 0x10]\n   360: s1 = u64 [a1 + 0x18]\n   363: a1 = 0x20\n   366: ra = 4, jump @11\n      : @5 [@dyn 2] (gas: 71)\n   371: a1 = reverse s1\n   373: a2 = reverse s0\n   375: a3 = u64 [sp]\n   377: a3 = reverse a3\n   379: a4 = u64 [sp + 0x8]\n   382: a4 = reverse a4\n   384: u8 [a0 + 0x18] = a4\n   387: u8 [a0 + 0x10] = a3\n   390: u8 [a0 + 0x8] = a2\n   393: u8 [a0] = a1\n   395: a5 = a4 >> 0x38\n   398: u8 [a0 + 0x1f] = a5\n   401: a5 = a4 >> 0x30\n   404: u8 [a0 + 0x1e] = a5\n   407: a5 = a4 >> 0x28\n   410: u8 [a0 + 0x1d] = a5\n   413: a5 = a4 >> 0x20\n   416: u8 [a0 + 0x1c] = a5\n   419: a5 = a4 >> 0x18\n   422: u8 [a0 + 0x1b] = a5\n   425: a5 = a4 >> 0x10\n   428: u8 [a0 + 0x1a] = a5\n   431: a4 = a4 >> 0x8\n   434: u8 [a0 + 0x19] = a4\n   437: a4 = a3 >> 0x38\n   440: u8 [a0 + 0x17] = a4\n   443: a4 = a3 >> 0x30\n   446: u8 [a0 + 0x16] = a4\n   449: a4 = a3 >> 0x28\n   452: u8 [a0 + 0x15] = a4\n   455: a4 = a3 >> 0x20\n   458: u8 [a0 + 0x14] = a4\n   461: a4 = a3 >> 0x18\n   464: u8 [a0 + 0x13] = a4\n   467: a4 = a3 >> 0x10\n   470: u8 [a0 + 0x12] = a4\n   473: a3 = a3 >> 0x8\n   476: u8 [a0 + 0x11] = a3\n   479: a3 = a2 >> 0x38\n   482: u8 [a0 + 0xf] = a3\n   485: a3 = a2 >> 0x30\n   488: u8 [a0 + 0xe] = a3\n   491: a3 = a2 >> 0x28\n   494: u8 [a0 + 0xd] = a3\n   497: a3 = a2 >> 0x20\n   500: u8 [a0 + 0xc] = a3\n   503: a3 = a2 >> 0x18\n   506: u8 [a0 + 0xb] = a3\n   509: a3 = a2 >> 0x10\n   512: u8 [a0 + 0xa] = a3\n   515: a2 = a2 >> 0x8\n   518: u8 [a0 + 0x9] = a2\n   521: a2 = a1 >> 0x38\n   524: u8 [a0 + 0x7] = a2\n   527: a2 = a1 >> 0x30\n   530: u8 [a0 + 0x6] = a2\n   533: a2 = a1 >> 0x28\n   536: u8 [a0 + 0x5] = a2\n   539: a2 = a1 >> 0x20\n   542: u8 [a0 + 0x4] = a2\n   545: a2 = a1 >> 0x18\n   548: u8 [a0 + 0x3] = a2\n   551: a2 = a1 >> 0x10\n   554: u8 [a0 + 0x2] = a2\n   557: a1 = a1 >> 0x8\n   560: u8 [a0 + 0x1] = a1\n   563: ra = u64 [sp + 0x20]\n   566: s0 = u64 [sp + 0x18]\n   569: s1 = u64 [sp + 0x10]\n   572: sp = sp + 0x28\n   575: ret\n      : @6 (gas: 32)\n   577: sp = sp + 0xffffffffffffffa0\n   580: u64 [sp + 0x58] = ra\n   583: u64 [sp + 0x50] = s0\n   586: u64 [sp + 0x48] = s1\n   589: s0 = sp + 0x60\n   592: sp = sp & 0xffffffffffffffe0\n   595: s1 = a0\n   597: a0 = u64 [a1 + 0x18]\n   600: a2 = u64 [a1 + 0x10]\n   603: a3 = u64 [a1 + 0x8]\n   606: a1 = u64 [a1]\n   608: a0 = reverse a0\n   610: a2 = reverse a2\n   612: a3 = reverse a3\n   614: a1 = reverse a1\n   616: u64 [sp + 0x18] = a1\n   619: u64 [sp + 0x10] = a3\n   622: u64 [sp + 0x8] = a2\n   625: u64 [sp] = a0\n   627: u64 [sp + 56] = 0\n   630: u64 [sp + 48] = 0\n   633: u64 [sp + 40] = 0\n   636: u64 [sp + 32] = 0\n   639: u32 [sp + 64] = 0x20\n   643: i32 a1 = sp + 0\n   645: i32 a3 = sp + 0x20\n   648: i32 a4 = sp + 0x40\n   651: a2 = 0xffffffffffffffff\n   654: a0 = 0\n   656: ra = 0x6\n   659: ecalli 4 // 'get_storage'\n   661: fallthrough\n      : @7 [@dyn 3] (gas: 5)\n   662: a0 = u64 [sp + 0x38]\n   665: a1 = u64 [sp + 0x30]\n   668: a2 = u64 [sp + 0x28]\n   671: a3 = u64 [sp + 0x20]\n   674: t0 = 8, jump @1077\n      : @8 [@dyn 4] (gas: 5)\n   679: u64 [s1 + 0x18] = a3\n   682: u64 [s1 + 0x10] = a2\n   685: u64 [s1 + 0x8] = a1\n   688: u64 [s1] = a0\n   690: t0 = 10, jump @1083\n      : @9 [@dyn 5] (gas: 1)\n   695: ret\n      : @10 (gas: 40)\n   697: sp = sp + 0xffffffffffffffa0\n   700: u64 [sp + 0x58] = ra\n   703: u64 [sp + 0x50] = s0\n   706: s0 = sp + 0x60\n   709: sp = sp & 0xffffffffffffffe0\n   712: t0 = u64 [a0]\n   714: a3 = u64 [a0 + 0x8]\n   717: a4 = u64 [a0 + 0x10]\n   720: a0 = u64 [a0 + 0x18]\n   723: t1 = u64 [a1]\n   725: a2 = u64 [a1 + 0x8]\n   728: a5 = u64 [a1 + 0x10]\n   731: a1 = u64 [a1 + 0x18]\n   734: t2 = reverse a0\n   736: a4 = reverse a4\n   738: a3 = reverse a3\n   740: a0 = reverse t0\n   742: t0 = reverse a1\n   744: a5 = reverse a5\n   746: a2 = reverse a2\n   748: a1 = reverse t1\n   750: u64 [sp + 0x18] = a0\n   753: u64 [sp + 0x10] = a3\n   756: u64 [sp + 0x8] = a4\n   759: u64 [sp] = t2\n   761: u64 [sp + 0x38] = a1\n   764: u64 [sp + 0x30] = a2\n   767: u64 [sp + 0x28] = a5\n   770: u64 [sp + 0x20] = t0\n   773: i32 a1 = sp + 0\n   775: i32 a3 = sp + 0x20\n   778: a2 = 0xffffffffffffffff\n   781: a4 = 0x20\n   784: a0 = 0\n   786: ecalli 8 // 'set_storage'\n   788: sp = s0 + 0xffffffffffffffa0\n   791: ra = u64 [sp + 0x58]\n   794: s0 = u64 [sp + 0x50]\n   797: sp = sp + 0x60\n   800: ret\n      : @11 (gas: 2)\n   802: i32 a2 = a0 >> 0x10\n   805: jump @16 if a2 != 0\n      : @12 (gas: 4)\n   808: a1 = a1 + a0\n   811: i32 a1 = a1 + 0x1f\n   814: a1 = a1 & 0xffffffffffffffe0\n   817: jump @16 if a1 >u 65536\n      : @13 (gas: 3)\n   823: a2 = 0x20014\n   828: a3 = i32 [0x20014]\n   833: jump @15 if a3 >=u a1\n      : @14 (gas: 2)\n   836: u32 [0x20014] = a1\n   841: fallthrough\n      : @15 (gas: 4)\n   842: a1 = 0x20020\n   847: i32 a0 = a0 + 0\n   849: a0 = a0 + a1\n   852: ret\n      : @16 (gas: 1)\n   854: trap\n      : @17 (gas: 6)\n   855: sp = sp + 0xfffffffffffffff0\n   858: u64 [sp + 0x8] = ra\n   861: u64 [sp] = s0\n   863: s0 = a0 & 0x1\n   866: ecalli 2 // 'call_data_size'\n   868: fallthrough\n      : @18 (gas: 2)\n   869: u32 [0x20010] = a0\n   874: jump @20 if s0 == 0\n      : @19 (gas: 1)\n   877: ra = 12, jump @21\n      : @20 [@dyn 6] (gas: 1)\n   881: ra = 14, jump @32\n      : @21 [@dyn 7] (gas: 12)\n   886: sp = sp + 0xffffffffffffff20\n   890: u64 [sp + 0xd8] = ra\n   894: u64 [sp + 0xd0] = s0\n   898: s0 = sp + 0xe0\n   902: sp = sp & 0xffffffffffffffe0\n   905: u64 [sp + 56] = 0\n   908: u64 [sp + 48] = 0\n   911: u64 [sp + 32] = 0x80\n   916: a0 = 0x40\n   919: a1 = sp + 0x20\n   922: u64 [sp + 40] = 0\n   925: ra = 16, jump @4\n      : @22 [@dyn 8] (gas: 7)\n   930: u64 [sp + 88] = 0\n   933: u64 [sp + 80] = 0\n   936: u64 [sp + 72] = 0\n   939: u64 [sp + 64] = 0\n   942: i32 a0 = sp + 0x40\n   945: ecalli 9 // 'value_transferred'\n   947: fallthrough\n      : @23 (gas: 8)\n   948: a0 = u64 [sp + 0x50]\n   951: a1 = u64 [sp + 0x58]\n   954: a2 = u64 [sp + 0x48]\n   957: a3 = u64 [sp + 0x40]\n   960: a1 = a1 | a2\n   963: a0 = a0 | a3\n   966: a0 = a0 | a1\n   969: jump @25 if a0 == 0\n      : @24 (gas: 7)\n   972: a1 = 0x20020\n   977: i32 a1 = a1 + 0\n   979: a0 = 0x1\n   982: a2 = 0\n   984: ra = 0x18\n   987: ecalli 6 // 'seal_return'\n   989: jump @32\n      : @25 (gas: 7)\n   992: u64 [sp + 120] = 0\n   995: u64 [sp + 112] = 0\n   998: u64 [sp + 104] = 0\n  1001: u64 [sp + 96] = 0\n  1004: a0 = sp\n  1006: a1 = sp + 0x60\n  1009: ra = 18, jump @6\n      : @26 [@dyn 9] (gas: 17)\n  1014: a0 = u32 [sp + 0x4]\n  1017: a0 = a0 << 0x20\n  1020: a1 = u64 [sp + 0x8]\n  1023: a2 = u64 [sp + 0x10]\n  1026: a3 = u64 [sp + 0x18]\n  1029: a0 = a0 + 0x64\n  1032: u64 [sp + 152] = 0\n  1036: u64 [sp + 144] = 0\n  1040: u64 [sp + 136] = 0\n  1044: u64 [sp + 128] = 0\n  1048: u64 [sp + 0xb8] = a3\n  1052: u64 [sp + 0xb0] = a2\n  1056: u64 [sp + 0xa8] = a1\n  1060: u64 [sp + 0xa0] = a0\n  1064: a0 = sp + 0x80\n  1068: a1 = sp + 0xa0\n  1072: ra = 20, jump @10\n      : @27 [@dyn 10] (gas: 2)\n  1077: a1 = i32 [0x20014]\n  1082: jump @29 if a1 >u 127\n      : @28 (gas: 2)\n  1086: u32 [0x20014] = 0x80\n  1093: fallthrough\n      : @29 (gas: 6)\n  1094: a0 = 0x20020\n  1099: i32 a0 = a0 + 0x80\n  1103: a1 = 0\n  1105: a2 = 0\n  1107: ecalli 0 // 'call_data_copy'\n  1108: jump @0\n      : @30 (gas: 3)\n  1111: a0 = 0x80\n  1115: a1 = 0\n  1117: ra = 22, jump @11\n      : @31 [@dyn 11] (gas: 6)\n  1122: i32 a1 = a0 + 0\n  1124: a0 = 0\n  1126: a2 = 0\n  1128: ra = 0x18\n  1131: ecalli 6 // 'seal_return'\n  1133: fallthrough\n      : @32 [@dyn 12] (gas: 16)\n  1134: sp = sp + 0xfffffffffffffe10\n  1138: u64 [sp + 0x1e8] = ra\n  1142: u64 [sp + 0x1e0] = s0\n  1146: u64 [sp + 0x1d8] = s1\n  1150: s0 = sp + 0x1f0\n  1154: sp = sp + 0xffffffffffffd970\n  1158: sp = sp & 0xffffffffffffffe0\n  1161: s1 = sp\n  1163: a2 = s1 + 0x1898\n  1167: u64 [a2 + 2016] = 0\n  1171: u64 [a2 + 2008] = 0\n  1175: u64 [a2 + 1992] = 0x80\n  1181: a0 = 0x40\n  1184: a1 = s1 + 0x2060\n  1188: u64 [a2 + 2000] = 0\n  1192: ra = 26, jump @4\n      : @33 [@dyn 13] (gas: 4)\n  1197: a0 = 0x20010\n  1202: u64 [s1 + 0x118] = a0\n  1206: a0 = i32 [0x20010]\n  1211: jump @35 if a0 >=u 4\n      : @34 (gas: 1)\n  1215: jump @918\n      : @35 (gas: 6)\n  1218: a0 = s1 + 0x2000\n  1222: i32 a0 = a0 + 0x80\n  1226: a1 = 0\n  1228: ra = 0x1c\n  1231: ecalli 1 // 'call_data_load'\n  1233: fallthrough\n      : @36 [@dyn 14] (gas: 3)\n  1234: a2 = s1 + 0x209c\n  1238: a0 = i32 [a2]\n  1240: jump @38 if a0 != 2886551010\n      : @37 (gas: 1)\n  1247: jump @696\n      : @38 (gas: 1)\n  1250: jump @40 if a0 != 2928718355\n      : @39 (gas: 1)\n  1257: jump @488\n      : @40 (gas: 1)\n  1260: jump @42 if a0 != 3009078342\n      : @41 (gas: 1)\n  1267: jump @511\n      : @42 (gas: 1)\n  1270: jump @44 if a0 != 3520386020\n      : @43 (gas: 1)\n  1277: jump @744\n      : @44 (gas: 1)\n  1280: jump @46 if a0 != 3779629457\n      : @45 (gas: 1)\n  1287: jump @572\n      : @46 (gas: 1)\n  1290: jump @48 if a0 != 3792490179\n      : @47 (gas: 1)\n  1297: jump @477\n      : @48 (gas: 1)\n  1300: jump @88 if a0 == 3893434434\n      : @49 (gas: 1)\n  1308: jump @51 if a0 != 3969591537\n      : @50 (gas: 1)\n  1315: jump @329\n      : @51 (gas: 1)\n  1318: jump @137 if a0 == 4021318640\n      : @52 (gas: 1)\n  1326: jump @54 if a0 != 339629536\n      : @53 (gas: 1)\n  1333: jump @535\n      : @54 (gas: 1)\n  1336: jump @56 if a0 != 398564703\n      : @55 (gas: 1)\n  1343: jump @227\n      : @56 (gas: 1)\n  1346: jump @166 if a0 == 435355053\n      : @57 (gas: 1)\n  1354: jump @59 if a0 != 582099949\n      : @58 (gas: 1)\n  1361: jump @595\n      : @59 (gas: 1)\n  1364: jump @61 if a0 != 640442127\n      : @60 (gas: 1)\n  1371: jump @239\n      : @61 (gas: 1)\n  1374: jump @63 if a0 != 730479334\n      : @62 (gas: 1)\n  1381: jump @637\n      : @63 (gas: 1)\n  1384: jump @65 if a0 != 945067767\n      : @64 (gas: 1)\n  1391: jump @400\n      : @65 (gas: 1)\n  1394: jump @67 if a0 != 1052342124\n      : @66 (gas: 1)\n  1401: jump @559\n      : @67 (gas: 1)\n  1404: jump @69 if a0 != 1233821937\n      : @68 (gas: 1)\n  1411: jump @522\n      : @69 (gas: 1)\n  1414: jump @71 if a0 != 1673338186\n      : @70 (gas: 1)\n  1421: jump @215\n      : @71 (gas: 1)\n  1424: jump @73 if a0 != 1690954863\n      : @72 (gas: 1)\n  1431: jump @368\n      : @73 (gas: 1)\n  1434: jump @75 if a0 != 1692906536\n      : @74 (gas: 1)\n  1441: jump @284\n      : @75 (gas: 1)\n  1444: jump @77 if a0 == 1920931826\n      : @76 (gas: 1)\n  1451: jump @413\n      : @77 (gas: 10)\n  1454: u64 [a2 + 1116] = 0\n  1458: u64 [a2 + 1108] = 0\n  1462: u64 [a2 + 1100] = 0\n  1466: u64 [a2 + 1092] = 0\n  1470: a0 = s1 + 0x2000\n  1474: i32 a0 = a0 + 0x4e0\n  1478: ra = 0x1e\n  1481: ecalli 9 // 'value_transferred'\n  1483: t0 = 0x20\n  1486: jump @1073\n      : @78 [@dyn 15] (gas: 1)\n  1489: t0 = 32, jump @1073\n      : @79 [@dyn 16] (gas: 8)\n  1494: a0 = u64 [a4 + 0x50]\n  1497: a1 = u64 [a4 + 0x58]\n  1500: a2 = u64 [a4 + 0x48]\n  1503: a3 = u64 [a4 + 0x40]\n  1506: a1 = a1 | a2\n  1509: a0 = a0 | a3\n  1512: a0 = a0 | a1\n  1515: jump @81 if a0 == 0\n      : @80 (gas: 1)\n  1518: jump @848\n      : @81 (gas: 3)\n  1521: a0 = u64 [s1 + 0x118]\n  1525: a0 = i32 [a0]\n  1527: jump @83 if a0 >u 3\n      : @82 (gas: 1)\n  1531: jump @849\n      : @83 (gas: 3)\n  1534: a0 = s1 + 0x10a0\n  1538: a1 = 0x40\n  1541: ra = 34, jump @2\n      : @84 [@dyn 17] (gas: 6)\n  1546: a3 = s1 + 0x1098\n  1550: a4 = u64 [a3 + 0x20]\n  1553: a1 = u64 [a3 + 0x18]\n  1556: a2 = u64 [a3 + 0x10]\n  1559: a0 = u64 [a3 + 0x8]\n  1562: t0 = 36, jump @1057\n      : @85 [@dyn 18] (gas: 1)\n  1567: jump @87 if a1 == 0\n      : @86 (gas: 1)\n  1570: jump @836\n      : @87 (gas: 8)\n  1573: u64 [a3 + 0] = 0\n  1575: u64 [a3 + 4294967288] = 0\n  1578: u64 [a3 + 4294967272] = 0x10\n  1582: a1 = s1 + 0x1080\n  1586: u64 [a3 + 4294967280] = 0\n  1589: u64 [s1 + 0x118] = a0\n  1593: ra = 0x35e\n  1597: jump @4\n      : @88 (gas: 10)\n  1600: u64 [a2 + 1660] = 0\n  1604: u64 [a2 + 1652] = 0\n  1608: u64 [a2 + 1644] = 0\n  1612: u64 [a2 + 1636] = 0\n  1616: a0 = s1 + 0x2000\n  1620: i32 a0 = a0 + 0x700\n  1624: ra = 0x26\n  1627: ecalli 9 // 'value_transferred'\n  1629: t0 = 0x28\n  1632: jump @1072\n      : @89 [@dyn 19] (gas: 1)\n  1635: t0 = 40, jump @1072\n      : @90 [@dyn 20] (gas: 1)\n  1640: t0 = 42, jump @1070\n      : @91 [@dyn 21] (gas: 1)\n  1645: jump @93 if a0 == 0\n      : @92 (gas: 1)\n  1648: jump @850\n      : @93 (gas: 3)\n  1651: a0 = u64 [s1 + 0x118]\n  1655: a0 = i32 [a0]\n  1657: jump @95 if a0 >u 35\n      : @94 (gas: 1)\n  1661: jump @851\n      : @95 (gas: 6)\n  1664: a0 = s1 + 0x2000\n  1668: i32 a0 = a0 + 0x720\n  1672: a1 = 0x4\n  1675: ra = 0x2c\n  1678: ecalli 1 // 'call_data_load'\n  1680: fallthrough\n      : @96 [@dyn 22] (gas: 4)\n  1681: a2 = s1 + 0x209c\n  1685: a1 = u64 [a2 + 0x694]\n  1689: a3 = u64 [a2 + 0x69c]\n  1693: t0 = 46, jump @1069\n      : @97 [@dyn 23] (gas: 1)\n  1698: jump @99 if a1 != 0\n      : @98 (gas: 1)\n  1701: jump @852\n      : @99 (gas: 13)\n  1704: a0 = u64 [a2 + 0x68c]\n  1708: u64 [s1 + 0x100] = a0\n  1712: a0 = u64 [a2 + 0x684]\n  1716: u64 [s1 + 0xf8] = a0\n  1720: a0 = 0x30020\n  1725: u64 [s1 + 0xf0] = a0\n  1729: i32 a0 = a0 + 0\n  1731: u64 [s1 + 0xe8] = a0\n  1735: ra = 0x30\n  1738: ecalli 3 // 'caller'\n  1740: a2 = u64 [s1 + 0xf0]\n  1744: t0 = 0x32\n  1747: jump @1050\n      : @100 [@dyn 24] (gas: 2)\n  1750: a2 = u64 [s1 + 0xf0]\n  1754: t0 = 50, jump @1050\n      : @101 [@dyn 25] (gas: 8)\n  1759: u64 [a2 + 1440] = 0\n  1763: a4 = a2 + 0x500\n  1767: u64 [a4 + 0x98] = a1\n  1771: u64 [a4 + 0x90] = a0\n  1775: a1 = s1 + 0x1e20\n  1779: u64 [a4 + 0x88] = a3\n  1783: a0 = 0\n  1785: ra = 52, jump @4\n      : @102 [@dyn 26] (gas: 9)\n  1790: a0 = s1 + 0x1898\n  1794: u64 [a0 + 1408] = 0\n  1798: u64 [a0 + 1400] = 0\n  1802: u64 [a0 + 1392] = 0\n  1806: a3 = a0\n  1808: a0 = 0x20\n  1811: a1 = s1 + 0x1e00\n  1815: u64 [a3 + 1384] = 0x1\n  1820: ra = 54, jump @4\n      : @103 [@dyn 27] (gas: 1)\n  1825: t0 = 56, jump @1064\n      : @104 [@dyn 28] (gas: 3)\n  1830: a1 = 0x20014\n  1835: a0 = i32 [0x20014]\n  1840: jump @106 if a0 >u 63\n      : @105 (gas: 2)\n  1844: u32 [0x20014] = 0x40\n  1850: fallthrough\n      : @106 (gas: 15)\n  1851: a0 = sp + 0xffffffffffffffe0\n  1854: a2 = a0 & 0xffffffffffffffe0\n  1857: u64 [s1 + 0xd0] = a2\n  1861: sp = a2\n  1863: a0 = 0x20020\n  1868: i32 a0 = a0 + 0\n  1870: i32 a2 = a2 + 0\n  1872: u64 [s1 + 0xe0] = a1\n  1876: a1 = 0x40\n  1879: u64 [s1 + 0xd8] = a0\n  1883: ra = 0x3a\n  1886: ecalli 5 // 'hash_keccak_256'\n  1888: a3 = u64 [s1 + 0xd0]\n  1892: t0 = 0x3c\n  1895: jump @1065\n      : @107 [@dyn 29] (gas: 2)\n  1898: a3 = u64 [s1 + 0xd0]\n  1902: t0 = 60, jump @1065\n      : @108 [@dyn 30] (gas: 3)\n  1907: i32 a0 = a0 + 0xfffffffffffffde0\n  1911: a0 = a0 + s1\n  1914: ra = 62, jump @6\n      : @109 [@dyn 31] (gas: 34)\n  1919: t1 = s1 + 0x1898\n  1923: a0 = u64 [t1 + 0x548]\n  1927: a1 = u64 [t1 + 0x550]\n  1931: a0 = a0 & 0xffffffffffffffff\n  1934: a1 = a1 & 0xffffffffffffffff\n  1937: a5 = u64 [s1 + 0x100]\n  1941: a2 = a5 ^ a1\n  1944: a3 = a1 <u a5\n  1947: t0 = u64 [s1 + 0xf8]\n  1951: a4 = a0 <u t0\n  1954: a4 = a3 if a2 != 0\n  1957: t0 = a0 if a4 != 0\n  1960: a5 = a1 if a4 != 0\n  1963: a3 = u64 [s1 + 0x108]\n  1967: a3 = 0 if a4 != 0\n  1969: a2 = u64 [s1 + 0x110]\n  1973: a2 = 0 if a4 != 0\n  1975: u64 [t1 + 1312] = 0\n  1979: u64 [t1 + 1304] = 0\n  1983: a4 = t1 + 0x500\n  1987: u64 [a4 + 0x10] = a1\n  1990: u64 [a4 + 0x8] = a0\n  1993: u64 [s1 + 0x110] = a2\n  1997: u64 [a4] = a2\n  1999: u64 [s1 + 0x108] = a3\n  2003: u64 [t1 + 0x4f8] = a3\n  2007: u64 [s1 + 0x100] = a5\n  2011: u64 [t1 + 0x4f0] = a5\n  2015: a0 = s1 + 0x1dc0\n  2019: a1 = s1 + 0x1da0\n  2023: a2 = s1 + 0x1d80\n  2027: u64 [s1 + 0xf8] = t0\n  2031: u64 [t1 + 0x4e8] = t0\n  2035: ra = 64, jump @1038\n      : @110 [@dyn 32] (gas: 13)\n  2040: a0 = s1 + 0x1898\n  2044: a2 = a0 + 0x500\n  2048: a1 = u64 [a2 + 0x28]\n  2051: u64 [s1 + 0xd0] = a1\n  2055: a1 = u64 [a2 + 0x30]\n  2058: u64 [s1 + 0xc8] = a1\n  2062: a1 = u64 [a2 + 0x40]\n  2065: u64 [s1 + 0xc0] = a1\n  2069: a1 = u64 [a2 + 0x38]\n  2072: u64 [s1 + 0xb8] = a1\n  2076: a0 = s1 + 0x1d60\n  2080: a1 = u64 [s1 + 0x118]\n  2084: ra = 66, jump @6\n      : @111 [@dyn 33] (gas: 18)\n  2089: a1 = s1 + 0x1898\n  2093: a0 = u64 [a1 + 0x4d8]\n  2097: a1 = u64 [a1 + 0x4e0]\n  2101: a2 = u64 [s1 + 0xb8]\n  2105: a0 = a0 | a2\n  2108: a2 = u64 [s1 + 0xc0]\n  2112: a1 = a1 | a2\n  2115: a2 = s1 + 0x209c\n  2119: a3 = u64 [s1 + 0xc8]\n  2123: a4 = a2 + 0x604\n  2127: u64 [a4 + 0xa8] = a3\n  2131: a3 = u64 [s1 + 0xd0]\n  2135: u64 [a4 + 0xa0] = a3\n  2139: u64 [a4 + 0xb8] = a1\n  2143: u64 [a4 + 0xb0] = a0\n  2147: a1 = s1 + 0x2740\n  2151: a0 = u64 [s1 + 0x118]\n  2155: ra = 68, jump @10\n      : @112 [@dyn 34] (gas: 6)\n  2160: a0 = u64 [s1 + 0xe8]\n  2164: ra = 0x46\n  2167: ecalli 3 // 'caller'\n  2169: a2 = u64 [s1 + 0xf0]\n  2173: t0 = 0x48\n  2176: jump @1050\n      : @113 [@dyn 35] (gas: 2)\n  2179: a2 = u64 [s1 + 0xf0]\n  2183: t0 = 72, jump @1050\n      : @114 [@dyn 36] (gas: 8)\n  2188: u64 [a2 + 1216] = 0\n  2192: a4 = a2 + 0x400\n  2196: u64 [a4 + 0xb8] = a1\n  2200: u64 [a4 + 0xb0] = a0\n  2204: a1 = s1 + 0x1d40\n  2208: u64 [a4 + 0xa8] = a3\n  2212: a0 = 0\n  2214: ra = 74, jump @4\n      : @115 [@dyn 37] (gas: 3)\n  2219: t0 = 0x4c\n  2222: a1 = s1 + 0x1898\n  2226: fallthrough\n      : @116 [@dyn 38] (gas: 8)\n  2227: u64 [a1 + 1184] = 0\n  2231: u64 [a1 + 1176] = 0\n  2235: u64 [a1 + 1160] = 0x1\n  2240: a2 = a1\n  2242: a0 = 0x20\n  2245: a1 = s1 + 0x1d20\n  2249: u64 [a2 + 1168] = 0\n  2253: ra = 78, jump @4\n      : @117 [@dyn 39] (gas: 3)\n  2258: a1 = u64 [s1 + 0xe0]\n  2262: a0 = i32 [a1]\n  2264: jump @119 if a0 >u 63\n      : @118 (gas: 3)\n  2268: u32 [a1 + 0] = 0x40\n  2271: t0 = 0x50\n  2274: jump @1058\n      : @119 (gas: 1)\n  2277: t0 = 80, jump @1058\n      : @120 [@dyn 40] (gas: 19)\n  2282: a0 = u64 [s1 + 0xd8]\n  2286: ecalli 5 // 'hash_keccak_256'\n  2288: a1 = u64 [s1 + 0x118]\n  2292: a0 = u64 [a1 + 0x18]\n  2295: u64 [s1 + 0xb8] = a0\n  2299: a0 = u64 [a1 + 0x10]\n  2302: u64 [s1 + 0xb0] = a0\n  2306: a0 = u64 [a1 + 0x8]\n  2309: u64 [s1 + 0xa8] = a0\n  2313: a0 = u64 [a1]\n  2315: u64 [s1 + 0xa0] = a0\n  2319: a0 = s1 + 0x209c\n  2323: u64 [a0 + 1756] = 0\n  2327: u64 [a0 + 1748] = 0\n  2331: u64 [a0 + 1740] = 0\n  2335: u64 [a0 + 1732] = 0\n  2339: a0 = s1 + 0x1d00\n  2343: a1 = s1 + 0x2760\n  2347: ra = 82, jump @6\n      : @121 [@dyn 41] (gas: 9)\n  2352: a2 = s1 + 0x1898\n  2356: a0 = u32 [a2 + 0x468]\n  2360: u64 [a2 + 1088] = 0\n  2364: u64 [a2 + 1080] = 0\n  2368: u64 [a2 + 0x428] = a0\n  2372: a0 = s1 + 0x1ce0\n  2376: a1 = s1 + 0x1cc0\n  2380: u64 [a2 + 1072] = 0\n  2384: ra = 84, jump @954\n      : @122 [@dyn 42] (gas: 3)\n  2389: t0 = 0x56\n  2392: a1 = s1 + 0x1898\n  2396: fallthrough\n      : @123 [@dyn 43] (gas: 12)\n  2397: a2 = a1 + 0x400\n  2401: a0 = u64 [a2 + 0x60]\n  2404: u64 [s1 + 0xd8] = a0\n  2408: a0 = u64 [a2 + 0x58]\n  2411: u64 [s1 + 0xd0] = a0\n  2415: a0 = u64 [a2 + 0x50]\n  2418: u64 [s1 + 0xc8] = a0\n  2422: a0 = u64 [a2 + 0x48]\n  2425: u64 [s1 + 0xc0] = a0\n  2429: a0 = s1 + 0x1ca0\n  2433: a1 = 0x40\n  2436: ra = 88, jump @2\n      : @124 [@dyn 44] (gas: 17)\n  2441: a0 = s1 + 0x1898\n  2445: a5 = a0 + 0x400\n  2449: a1 = u64 [a5 + 0x20]\n  2452: u64 [s1 + 0xe0] = a1\n  2456: a2 = u64 [a5 + 0x18]\n  2459: u64 [s1 + 0xe8] = a2\n  2463: a4 = u64 [a5 + 0x10]\n  2466: u64 [s1 + 0xf0] = a4\n  2470: a3 = u64 [a5 + 0x8]\n  2473: u64 [s1 + 0x118] = a3\n  2477: u64 [a5] = a1\n  2479: u64 [a0 + 0x3f8] = a2\n  2483: u64 [a0 + 0x3f0] = a4\n  2487: a1 = a0\n  2489: a0 = s1 + 0x1c80\n  2493: u64 [a1 + 0x3e8] = a3\n  2497: ra = 90, jump @963\n      : @125 [@dyn 45] (gas: 6)\n  2502: a0 = u64 [s1 + 0xe0]\n  2506: a1 = u64 [s1 + 0xf0]\n  2510: a0 = a0 | a1\n  2513: a2 = u64 [s1 + 0xe8]\n  2517: a1 = u64 [s1 + 0x118]\n  2521: t0 = 92, jump @1091\n      : @126 [@dyn 46] (gas: 1)\n  2526: jump @128 if a0 == 0\n      : @127 (gas: 1)\n  2529: jump @836\n      : @128 (gas: 13)\n  2532: a0 = s1 + 0x1898\n  2536: a1 = u64 [s1 + 0xc0]\n  2540: a3 = a0 + 0x300\n  2544: u64 [a3 + 0xc8] = a1\n  2548: a1 = u64 [s1 + 0xc8]\n  2552: u64 [a3 + 0xd0] = a1\n  2556: a1 = u64 [s1 + 0xd0]\n  2560: u64 [a3 + 0xd8] = a1\n  2564: a1 = s1 + 0x1c60\n  2568: a2 = u64 [s1 + 0xd8]\n  2572: u64 [a3 + 0xe0] = a2\n  2576: a0 = u64 [s1 + 0x118]\n  2580: ra = 94, jump @4\n      : @129 [@dyn 47] (gas: 10)\n  2585: a0 = u64 [s1 + 0xe8]\n  2589: a1 = u64 [s1 + 0xe0]\n  2593: a0 = a0 | a1\n  2596: a1 = 0xffffffe0\n  2606: a2 = u64 [s1 + 0x118]\n  2610: a1 = a2 <u a1\n  2613: a2 = u64 [s1 + 0xf0]\n  2617: a1 = 0 if a2 != 0\n  2619: a1 = 0 if a0 != 0\n  2621: jump @131 if a1 != 0\n      : @130 (gas: 1)\n  2624: jump @836\n      : @131 (gas: 34)\n  2627: a0 = u64 [s1 + 0xa0]\n  2631: a0 = reverse a0\n  2633: a1 = u64 [s1 + 0xa8]\n  2637: a1 = reverse a1\n  2639: a2 = u64 [s1 + 0xb0]\n  2643: a2 = reverse a2\n  2645: a3 = u64 [s1 + 0xb8]\n  2649: a3 = reverse a3\n  2651: a4 = a3 + 0x4\n  2654: u64 [s1 + 0xd8] = a4\n  2658: a3 = a4 <u a3\n  2661: a4 = a2 + a3\n  2664: u64 [s1 + 0xd0] = a4\n  2668: a2 = a4 <u a2\n  2671: a2 = a3 if a3 == 0\n  2674: a2 = a2 + a1\n  2677: u64 [s1 + 0xc8] = a2\n  2681: a1 = a2 <u a1\n  2684: a0 = a0 + a1\n  2687: u64 [s1 + 0xc0] = a0\n  2691: a0 = u64 [s1 + 0x118]\n  2695: i32 a0 = a0 + 0x20\n  2698: a3 = s1 + 0x1898\n  2702: a1 = u64 [s1 + 0xf8]\n  2706: a4 = a3 + 0x300\n  2710: u64 [a4 + 0xa8] = a1\n  2714: a1 = u64 [s1 + 0x100]\n  2718: u64 [a4 + 0xb0] = a1\n  2722: a1 = u64 [s1 + 0x108]\n  2726: u64 [a4 + 0xb8] = a1\n  2730: a1 = s1 + 0x1c40\n  2734: a2 = u64 [s1 + 0x110]\n  2738: u64 [a4 + 0xc0] = a2\n  2742: ra = 96, jump @4\n      : @132 [@dyn 48] (gas: 22)\n  2747: a0 = u64 [s1 + 0xe0]\n  2751: a1 = s1 + 0x1898\n  2755: a2 = a1 + 0x300\n  2759: u64 [a2 + 0x80] = a0\n  2763: a0 = u64 [s1 + 0xe8]\n  2767: u64 [a2 + 0x78] = a0\n  2770: a0 = u64 [s1 + 0xf0]\n  2774: u64 [a2 + 0x70] = a0\n  2777: a0 = u64 [s1 + 0x118]\n  2781: u64 [a2 + 0x68] = a0\n  2784: a0 = u64 [s1 + 0xc0]\n  2788: u64 [a2 + 0xa0] = a0\n  2792: a0 = u64 [s1 + 0xc8]\n  2796: u64 [a2 + 0x98] = a0\n  2800: a0 = u64 [s1 + 0xd0]\n  2804: u64 [a2 + 0x90] = a0\n  2808: a3 = a1\n  2810: a0 = s1 + 0x1c20\n  2814: a1 = s1 + 0x1c00\n  2818: a2 = u64 [s1 + 0xd8]\n  2822: u64 [a3 + 0x388] = a2\n  2826: ra = 98, jump @998\n      : @133 [@dyn 49] (gas: 3)\n  2831: a0 = s1 + 0x1be0\n  2835: a1 = 0x40\n  2838: ra = 100, jump @2\n      : @134 [@dyn 50] (gas: 14)\n  2843: a4 = s1 + 0x1898\n  2847: a5 = a4 + 0x300\n  2851: a0 = u64 [a5 + 0x60]\n  2854: a1 = u64 [a5 + 0x58]\n  2857: a2 = u64 [a5 + 0x50]\n  2860: a3 = u64 [a5 + 0x48]\n  2863: a0 = a0 | a2\n  2866: a2 = a3 | a1\n  2869: a2 = a2 | a0\n  2872: a2 = a2 >> 0x20\n  2875: a0 = a0 | a1\n  2878: a0 = a0 << 0x20\n  2881: a0 = a0 | a2\n  2884: jump @136 if a0 == 0\n      : @135 (gas: 1)\n  2887: jump @836\n      : @136 (gas: 15)\n  2890: a0 = u64 [s1 + 0xf8]\n  2894: a2 = a4 + 0x300\n  2898: u64 [a2 + 0x28] = a0\n  2901: a4 = s1 + 0x100\n  2905: a0 = u64 [a4]\n  2907: u64 [a2 + 0x30] = a0\n  2910: a0 = u64 [a4 + 0x8]\n  2913: u64 [a2 + 0x38] = a0\n  2916: a1 = s1 + 0x1bc0\n  2920: a0 = u64 [a4 + 0x10]\n  2923: u64 [a2 + 0x40] = a0\n  2926: a0 = a3\n  2928: u64 [s1 + 0x118] = a3\n  2932: ra = 0x35e\n  2936: jump @4\n      : @137 (gas: 9)\n  2939: u64 [a2 + 1916] = 0\n  2943: u64 [a2 + 1908] = 0\n  2947: u64 [a2 + 1900] = 0\n  2951: u64 [a2 + 1892] = 0\n  2955: a0 = s1 + 0x3000\n  2959: i32 a0 = a0 + 0xfffffffffffff800\n  2963: ra = 0x66\n  2966: ecalli 9 // 'value_transferred'\n  2968: fallthrough\n      : @138 [@dyn 51] (gas: 3)\n  2969: a3 = s1 + 0x209c\n  2973: a4 = a3 + 0x704\n  2977: t0 = 104, jump @1070\n      : @139 [@dyn 52] (gas: 1)\n  2982: jump @141 if a0 == 0\n      : @140 (gas: 1)\n  2985: jump @853\n      : @141 (gas: 3)\n  2988: a0 = u64 [s1 + 0x118]\n  2992: a0 = i32 [a0]\n  2994: jump @143 if a0 >u 35\n      : @142 (gas: 1)\n  2998: jump @854\n      : @143 (gas: 6)\n  3001: a0 = s1 + 0x3000\n  3005: i32 a0 = a0 + 0xfffffffffffff820\n  3009: a1 = 0x4\n  3012: ra = 0x6a\n  3015: ecalli 1 // 'call_data_load'\n  3017: fallthrough\n      : @144 [@dyn 53] (gas: 4)\n  3018: a2 = s1 + 0x209c\n  3022: a1 = u64 [a2 + 0x794]\n  3026: a3 = u64 [a2 + 0x79c]\n  3030: t0 = 108, jump @1069\n      : @145 [@dyn 54] (gas: 1)\n  3035: jump @147 if a1 != 0\n      : @146 (gas: 1)\n  3038: jump @855\n      : @147 (gas: 12)\n  3041: a0 = u64 [a2 + 0x78c]\n  3045: u64 [s1 + 0x100] = a0\n  3049: a0 = u64 [a2 + 0x784]\n  3053: u64 [s1 + 0xf8] = a0\n  3057: a0 = 0x30020\n  3062: u64 [s1 + 0x118] = a0\n  3066: i32 a0 = a0 + 0\n  3068: ra = 0x6e\n  3071: ecalli 3 // 'caller'\n  3073: a2 = u64 [s1 + 0x118]\n  3077: t0 = 0x70\n  3080: jump @1050\n      : @148 [@dyn 55] (gas: 2)\n  3083: a2 = u64 [s1 + 0x118]\n  3087: t0 = 112, jump @1050\n      : @149 [@dyn 56] (gas: 8)\n  3092: u64 [a2 + 1984] = 0\n  3096: a4 = a2 + 0x700\n  3100: u64 [a4 + 0xb8] = a1\n  3104: u64 [a4 + 0xb0] = a0\n  3108: a1 = s1 + 0x2040\n  3112: u64 [a4 + 0xa8] = a3\n  3116: a0 = 0\n  3118: ra = 114, jump @4\n      : @150 [@dyn 57] (gas: 3)\n  3123: t0 = 0x74\n  3126: a1 = s1 + 0x1898\n  3130: fallthrough\n      : @151 [@dyn 58] (gas: 8)\n  3131: u64 [a1 + 1952] = 0\n  3135: u64 [a1 + 1944] = 0\n  3139: u64 [a1 + 1928] = 0x1\n  3144: a2 = a1\n  3146: a0 = 0x20\n  3149: a1 = s1 + 0x2020\n  3153: u64 [a2 + 1936] = 0\n  3157: ra = 118, jump @4\n      : @152 [@dyn 59] (gas: 1)\n  3162: t0 = 120, jump @1064\n      : @153 [@dyn 60] (gas: 2)\n  3167: a1 = i32 [0x20014]\n  3172: jump @155 if a1 >u 63\n      : @154 (gas: 2)\n  3176: u32 [0x20014] = 0x40\n  3182: fallthrough\n      : @155 (gas: 13)\n  3183: a0 = sp + 0xffffffffffffffe0\n  3186: a2 = a0 & 0xffffffffffffffe0\n  3189: u64 [s1 + 0xf0] = a2\n  3193: sp = a2\n  3195: a0 = 0x20020\n  3200: i32 a0 = a0 + 0\n  3202: i32 a2 = a2 + 0\n  3204: a1 = 0x40\n  3207: ra = 0x7a\n  3210: ecalli 5 // 'hash_keccak_256'\n  3212: a3 = u64 [s1 + 0xf0]\n  3216: t0 = 0x7c\n  3219: jump @1065\n      : @156 [@dyn 61] (gas: 2)\n  3222: a3 = u64 [s1 + 0xf0]\n  3226: t0 = 124, jump @1065\n      : @157 [@dyn 62] (gas: 2)\n  3231: a0 = a0 + s1\n  3234: ra = 126, jump @6\n      : @158 [@dyn 63] (gas: 20)\n  3239: a3 = s1 + 0x1898\n  3243: a4 = a3 + 0x700\n  3247: a0 = u64 [a4 + 0x68]\n  3250: a1 = u64 [a4 + 0x70]\n  3253: a2 = u64 [s1 + 0x110]\n  3257: u64 [a4 + 0x20] = a2\n  3260: a2 = u64 [s1 + 0x108]\n  3264: u64 [a4 + 0x18] = a2\n  3267: a2 = u64 [s1 + 0x100]\n  3271: u64 [a4 + 0x10] = a2\n  3274: a2 = u64 [s1 + 0xf8]\n  3278: u64 [a4 + 0x8] = a2\n  3281: u64 [a3 + 1856] = 0\n  3285: u64 [a4 + 0x30] = a1\n  3288: u64 [a4 + 0x28] = a0\n  3291: a0 = s1 + 0x1fe0\n  3295: a1 = s1 + 0x1fc0\n  3299: a2 = s1 + 0x1fa0\n  3303: u64 [a3 + 1848] = 0\n  3307: ra = 128, jump @1024\n      : @159 [@dyn 64] (gas: 13)\n  3313: a0 = s1 + 0x1898\n  3317: a2 = a0 + 0x700\n  3321: a1 = u64 [a2 + 0x48]\n  3324: u64 [s1 + 0xf0] = a1\n  3328: a1 = u64 [a2 + 0x50]\n  3331: u64 [s1 + 0xe8] = a1\n  3335: a1 = u64 [a2 + 0x60]\n  3338: u64 [s1 + 0xe0] = a1\n  3342: a1 = u64 [a2 + 0x58]\n  3345: u64 [s1 + 0xd8] = a1\n  3349: a0 = s1 + 0x1f80\n  3353: a1 = u64 [s1 + 0x118]\n  3357: ra = 130, jump @6\n      : @160 [@dyn 65] (gas: 18)\n  3363: a1 = s1 + 0x1898\n  3367: a0 = u64 [a1 + 0x6f8]\n  3371: a1 = u64 [a1 + 0x700]\n  3375: a2 = u64 [s1 + 0xd8]\n  3379: a0 = a0 | a2\n  3382: a2 = u64 [s1 + 0xe0]\n  3386: a1 = a1 | a2\n  3389: a2 = s1 + 0x209c\n  3393: a3 = u64 [s1 + 0xe8]\n  3397: a4 = a2 + 0x704\n  3401: u64 [a4 + 0xa8] = a3\n  3405: a3 = u64 [s1 + 0xf0]\n  3409: u64 [a4 + 0xa0] = a3\n  3413: u64 [a4 + 0xb8] = a1\n  3417: u64 [a4 + 0xb0] = a0\n  3421: a1 = s1 + 0x2840\n  3425: a0 = u64 [s1 + 0x118]\n  3429: ra = 132, jump @10\n      : @161 [@dyn 66] (gas: 3)\n  3435: a0 = s1 + 0x1f60\n  3439: a1 = 0x40\n  3442: ra = 134, jump @2\n      : @162 [@dyn 67] (gas: 7)\n  3448: a3 = s1 + 0x1898\n  3452: a5 = a3 + 0x600\n  3456: a0 = u64 [a5 + 0xe0]\n  3460: a1 = u64 [a5 + 0xd8]\n  3464: a2 = u64 [a5 + 0xd0]\n  3468: a4 = u64 [a5 + 0xc8]\n  3472: t0 = 136, jump @1063\n      : @163 [@dyn 68] (gas: 1)\n  3478: jump @165 if a0 == 0\n      : @164 (gas: 1)\n  3481: jump @836\n      : @165 (gas: 15)\n  3484: a0 = u64 [s1 + 0xf8]\n  3488: a2 = a3 + 0x600\n  3492: u64 [a2 + 0xa8] = a0\n  3496: a3 = s1 + 0x100\n  3500: a0 = u64 [a3]\n  3502: u64 [a2 + 0xb0] = a0\n  3506: a0 = u64 [a3 + 0x8]\n  3509: u64 [a2 + 0xb8] = a0\n  3513: a1 = s1 + 0x1f40\n  3517: a0 = u64 [a3 + 0x10]\n  3520: u64 [a2 + 0xc0] = a0\n  3524: a0 = a4\n  3526: u64 [s1 + 0x118] = a4\n  3530: ra = 0x35e\n  3534: jump @4\n      : @166 (gas: 10)\n  3537: u64 [a2 + 188] = 0\n  3541: u64 [a2 + 180] = 0\n  3545: u64 [a2 + 172] = 0\n  3549: u64 [a2 + 164] = 0\n  3553: a0 = s1 + 0x2000\n  3557: i32 a0 = a0 + 0x140\n  3561: ra = 0x8a\n  3565: ecalli 9 // 'value_transferred'\n  3567: t0 = 0x8c\n  3571: jump @1094\n      : @167 [@dyn 69] (gas: 1)\n  3574: t0 = 140, jump @1094\n      : @168 [@dyn 70] (gas: 1)\n  3580: t0 = 142, jump @1074\n      : @169 [@dyn 71] (gas: 1)\n  3586: jump @171 if a0 == 0\n      : @170 (gas: 1)\n  3589: jump @856\n      : @171 (gas: 3)\n  3592: a0 = u64 [s1 + 0x118]\n  3596: a0 = i32 [a0]\n  3598: jump @173 if a0 >u 35\n      : @172 (gas: 1)\n  3602: jump @857\n      : @173 (gas: 5)\n  3605: a0 = s1 + 0x2000\n  3609: i32 a0 = a0 + 0x160\n  3613: a1 = 0x4\n  3616: ecalli 1 // 'call_data_load'\n  3618: fallthrough\n      : @174 (gas: 9)\n  3619: a2 = s1 + 0x209c\n  3623: a0 = a2 + 0x4\n  3626: a5 = u64 [a0 + 0xd8]\n  3630: a3 = u64 [a0 + 0xd0]\n  3634: a4 = u64 [a0 + 0xc8]\n  3638: a0 = a3 | a5\n  3641: a1 = a4 <u 0x1\n  3644: a1 = 0 if a0 != 0\n  3646: jump @176 if a1 != 0\n      : @175 (gas: 1)\n  3649: jump @858\n      : @176 (gas: 19)\n  3652: a1 = u64 [a2 + 0xc4]\n  3656: a0 = u64 [s1 + 0x118]\n  3660: t2 = u32 [a0]\n  3662: a0 = a1 + 0x23\n  3665: a2 = a0 <u a1\n  3668: t1 = a4 + a2\n  3671: u64 [s1 + 0xe8] = a4\n  3675: a4 = t1 <u a4\n  3678: a4 = a2 if a2 == 0\n  3681: a4 = a4 + a3\n  3684: u64 [s1 + 0xf0] = a3\n  3688: a2 = a4 <u a3\n  3691: u64 [s1 + 0x108] = a5\n  3695: a2 = a2 + a5\n  3698: a2 = a2 | a4\n  3701: a0 = a0 <u t2\n  3704: a0 = 0 if t1 != 0\n  3706: a0 = 0 if a2 != 0\n  3708: jump @178 if a0 != 0\n      : @177 (gas: 1)\n  3711: jump @859\n      : @178 (gas: 10)\n  3714: a0 = sp + 0xffffffffffffffe0\n  3717: a0 = a0 & 0xffffffffffffffe0\n  3720: u64 [s1 + 0xf8] = a0\n  3724: sp = a0\n  3726: u64 [s1 + 0x110] = a1\n  3730: i32 a1 = a1 + 0x4\n  3733: a0 = s1 + 0x2000\n  3737: i32 a0 = a0 + 0x180\n  3741: ecalli 1 // 'call_data_load'\n  3743: fallthrough\n      : @179 (gas: 15)\n  3744: a0 = s1 + 0x209c\n  3748: a1 = a0 + 0x4\n  3751: a5 = u64 [a1 + 0xf8]\n  3755: ra = u64 [a0 + 0xf4]\n  3759: a2 = u64 [a1 + 0xe8]\n  3763: a4 = u64 [a1 + 0xe0]\n  3767: a0 = u64 [s1 + 0xf8]\n  3771: u64 [a0 + 0x18] = a5\n  3774: u64 [a0 + 0x10] = ra\n  3777: u64 [a0 + 0x8] = a2\n  3780: a3 = ra | a5\n  3783: a1 = a2 <u 0x1\n  3786: a1 = 0 if a3 != 0\n  3788: u64 [a0] = a4\n  3790: jump @181 if a1 != 0\n      : @180 (gas: 1)\n  3793: jump @860\n      : @181 (gas: 58)\n  3796: a3 = a4 >> 0x3b\n  3799: a1 = a2 << 0x5\n  3802: a0 = a1 | a3\n  3805: u64 [s1 + 0x98] = a4\n  3809: a1 = a4 << 0x5\n  3812: a3 = u64 [s1 + 0x110]\n  3816: a4 = a3 + 0x24\n  3819: t2 = a4 <u a3\n  3822: t0 = u64 [s1 + 0xe8]\n  3826: a3 = t0 + t2\n  3829: a0 = a0 + a3\n  3832: a1 = a1 + a4\n  3835: u64 [s1 + 0xd8] = a1\n  3839: u64 [s1 + 0x110] = a4\n  3843: a4 = a1 <u a4\n  3846: t1 = a0 + a4\n  3849: a1 = t1 ^ a3\n  3852: a0 = t1 <u a3\n  3855: a0 = a4 if a1 == 0\n  3858: a4 = ra >> 0x3b\n  3861: u64 [s1 + 0xb0] = a5\n  3865: a5 = a5 << 0x5\n  3868: a4 = a4 | a5\n  3871: u64 [s1 + 0xa0] = a2\n  3875: a5 = a2 >> 0x3b\n  3878: u64 [s1 + 0xa8] = ra\n  3882: a1 = ra << 0x5\n  3885: a1 = a1 | a5\n  3888: u64 [s1 + 0x100] = a3\n  3892: a5 = a3 <u t0\n  3895: a5 = t2 if t2 == 0\n  3898: a2 = u64 [s1 + 0xf0]\n  3902: a5 = a5 + a2\n  3905: a2 = a5 <u a2\n  3908: a3 = u64 [s1 + 0x108]\n  3912: a2 = a2 + a3\n  3915: a1 = a1 + a5\n  3918: u64 [s1 + 0x108] = a2\n  3922: a4 = a4 + a2\n  3925: u64 [s1 + 0xe0] = a5\n  3929: a2 = a1 <u a5\n  3932: a2 = a2 + a4\n  3935: a4 = u64 [s1 + 0x118]\n  3939: a4 = u32 [a4]\n  3941: a3 = a1 + a0\n  3944: a1 = a3 <u a1\n  3947: a1 = a1 + a2\n  3950: a0 = u64 [s1 + 0xd8]\n  3954: a2 = a4 <u a0\n  3957: a4 = t1 <u 0x1\n  3960: a2 = a2 ^ 0x1\n  3963: a2 = a4 if t1 != 0\n  3966: a0 = a1 <u 0x1\n  3969: a4 = a3 <u 0x1\n  3972: a4 = a0 if a1 != 0\n  3975: a1 = a1 | a3\n  3978: a2 = a4 if a1 != 0\n  3981: jump @183 if a2 != 0\n      : @182 (gas: 1)\n  3984: jump @861\n      : @183 (gas: 9)\n  3987: a0 = 0x30020\n  3992: u64 [s1 + 0x58] = a0\n  3995: i32 a0 = a0 + 0\n  3997: u64 [s1 + 0x50] = a0\n  4000: ra = 0x90\n  4004: ecalli 3 // 'caller'\n  4006: a2 = u64 [s1 + 0x58]\n  4009: t0 = 0x92\n  4013: jump @1053\n      : @184 [@dyn 72] (gas: 2)\n  4016: a2 = u64 [s1 + 0x58]\n  4019: t0 = 146, jump @1053\n      : @185 [@dyn 73] (gas: 8)\n  4025: u64 [s1 + 1048] = 0\n  4029: a2 = s1 + 0x400\n  4033: u64 [a2 + 0x10] = a1\n  4036: u64 [a2 + 0x8] = a0\n  4039: a1 = s1 + 0x400\n  4043: u64 [a2] = a3\n  4045: a0 = 0\n  4047: ra = 148, jump @4\n      : @186 [@dyn 74] (gas: 7)\n  4053: u64 [s1 + 1016] = 0\n  4057: u64 [s1 + 1008] = 0\n  4061: u64 [s1 + 1000] = 0\n  4065: a0 = 0x20\n  4068: a1 = s1 + 0x3e0\n  4072: u64 [s1 + 992] = 0x1\n  4077: ra = 150, jump @4\n      : @187 [@dyn 75] (gas: 1)\n  4083: t0 = 152, jump @1064\n      : @188 [@dyn 76] (gas: 3)\n  4089: a1 = 0x20014\n  4094: a0 = i32 [0x20014]\n  4099: jump @190 if a0 >u 63\n      : @189 (gas: 2)\n  4103: u32 [0x20014] = 0x40\n  4109: fallthrough\n      : @190 (gas: 15)\n  4110: a0 = sp + 0xffffffffffffffe0\n  4113: a2 = a0 & 0xffffffffffffffe0\n  4116: u64 [s1 + 0xf0] = a2\n  4120: sp = a2\n  4122: a0 = 0x20020\n  4127: i32 a0 = a0 + 0\n  4129: u64 [s1 + 0x60] = a1\n  4132: i32 a2 = a2 + 0\n  4134: a1 = 0x40\n  4137: u64 [s1 + 0x68] = a0\n  4140: ra = 0x9a\n  4144: ecalli 5 // 'hash_keccak_256'\n  4146: a3 = u64 [s1 + 0xf0]\n  4150: t0 = 0x9c\n  4154: jump @1059\n      : @191 [@dyn 77] (gas: 2)\n  4157: a3 = u64 [s1 + 0xf0]\n  4161: t0 = 156, jump @1059\n      : @192 [@dyn 78] (gas: 2)\n  4167: a0 = s1 + 0x3c0\n  4171: ra = 158, jump @6\n      : @193 [@dyn 79] (gas: 15)\n  4177: a0 = u64 [s1 + 0x3c0]\n  4181: a1 = u64 [s1 + 0x3c8]\n  4185: a2 = u64 [s1 + 0x3d8]\n  4189: a3 = u64 [s1 + 0x3d0]\n  4193: a0 = a0 & 0xffffffffffffff00\n  4197: a0 = a0 | 0x2\n  4200: a4 = s1 + 0x209c\n  4204: a5 = a4 + 0x104\n  4208: u64 [a5 + 0x18] = a2\n  4211: u64 [a5 + 0x10] = a3\n  4214: u64 [a5 + 0x8] = a1\n  4217: u64 [a5] = a0\n  4219: a1 = s1 + 0x21a0\n  4223: a0 = u64 [s1 + 0x118]\n  4227: ra = 160, jump @10\n      : @194 [@dyn 80] (gas: 6)\n  4233: a0 = u64 [s1 + 0x50]\n  4236: ra = 0xa2\n  4240: ecalli 3 // 'caller'\n  4242: a2 = u64 [s1 + 0x58]\n  4245: t0 = 0xa4\n  4249: jump @1053\n      : @195 [@dyn 81] (gas: 2)\n  4252: a2 = u64 [s1 + 0x58]\n  4255: t0 = 164, jump @1053\n      : @196 [@dyn 82] (gas: 7)\n  4261: u64 [s1 + 952] = 0\n  4265: u64 [s1 + 0x3b0] = a1\n  4269: u64 [s1 + 0x3a8] = a0\n  4273: a1 = s1 + 0x3a0\n  4277: u64 [s1 + 0x3a0] = a3\n  4281: a0 = 0\n  4283: ra = 166, jump @4\n      : @197 [@dyn 83] (gas: 7)\n  4289: u64 [s1 + 920] = 0\n  4293: u64 [s1 + 912] = 0\n  4297: u64 [s1 + 896] = 0x1\n  4302: a0 = 0x20\n  4305: a1 = s1 + 0x380\n  4309: u64 [s1 + 904] = 0\n  4313: ra = 168, jump @4\n      : @198 [@dyn 84] (gas: 7)\n  4319: a1 = u64 [s1 + 0x60]\n  4322: a0 = sp + 0xffffffffffffffe0\n  4325: a0 = a0 & 0xffffffffffffffe0\n  4328: u64 [s1 + 0x118] = a0\n  4332: sp = a0\n  4334: a0 = i32 [a1]\n  4336: jump @200 if a0 >u 63\n      : @199 (gas: 2)\n  4340: u32 [a1 + 0] = 0x40\n  4343: fallthrough\n      : @200 (gas: 12)\n  4344: a0 = sp + 0xffffffffffffffe0\n  4347: a0 = a0 & 0xffffffffffffffe0\n  4350: u64 [s1 + 0xf0] = a0\n  4354: sp = a0\n  4356: i32 a2 = a0 + 0\n  4358: a1 = 0x40\n  4361: a0 = u64 [s1 + 0x68]\n  4364: ra = 0xaa\n  4368: ecalli 5 // 'hash_keccak_256'\n  4370: a3 = u64 [s1 + 0xf0]\n  4374: t0 = 0xac\n  4378: jump @1055\n      : @201 [@dyn 85] (gas: 2)\n  4381: a3 = u64 [s1 + 0xf0]\n  4385: t0 = 172, jump @1055\n      : @202 [@dyn 86] (gas: 11)\n  4391: u64 [s1 + 0x90] = a4\n  4395: a1 = u64 [s1 + 0x118]\n  4399: u64 [a1] = a4\n  4401: u64 [s1 + 0x80] = a5\n  4405: u64 [a1 + 0x8] = a5\n  4408: u64 [s1 + 0x78] = a2\n  4411: u64 [a1 + 0x10] = a2\n  4414: u64 [s1 + 0x88] = a0\n  4418: u64 [a1 + 0x18] = a0\n  4421: a0 = s1 + 0x360\n  4425: ra = 174, jump @6\n      : @203 [@dyn 87] (gas: 12)\n  4431: a1 = s1 + 0x300\n  4435: a0 = u64 [a1 + 0x78]\n  4438: u64 [s1 + 0xf0] = a0\n  4442: a0 = u64 [a1 + 0x70]\n  4445: u64 [s1 + 0xe8] = a0\n  4449: a0 = u64 [a1 + 0x68]\n  4452: u64 [s1 + 0xd0] = a0\n  4456: a0 = u64 [a1 + 0x60]\n  4459: u64 [s1 + 0xd8] = a0\n  4463: a0 = u64 [s1 + 0x118]\n  4467: a1 = u64 [s1 + 0xf8]\n  4471: ra = 176, jump @10\n      : @204 [@dyn 88] (gas: 20)\n  4477: a4 = u64 [s1 + 0xb0]\n  4481: a5 = u64 [s1 + 0xf0]\n  4485: a0 = a4 ^ a5\n  4488: a2 = u64 [s1 + 0xa0]\n  4492: a1 = u64 [s1 + 0xd0]\n  4496: t0 = a2 ^ a1\n  4499: a2 = a2 <u a1\n  4502: a3 = u64 [s1 + 0x98]\n  4506: a1 = u64 [s1 + 0xd8]\n  4510: a3 = a3 <u a1\n  4513: a3 = a2 if t0 != 0\n  4516: a1 = a4 <u a5\n  4519: a4 = u64 [s1 + 0xa8]\n  4523: a5 = u64 [s1 + 0xe8]\n  4527: a2 = a4 <u a5\n  4530: a2 = a1 if a0 != 0\n  4533: a1 = a4 ^ a5\n  4536: a0 = a0 | a1\n  4539: a3 = a2 if a0 != 0\n  4542: jump @206 if a3 != 0\n      : @205 (gas: 1)\n  4545: jump @546\n      : @206 (gas: 12)\n  4548: a0 = u64 [s1 + 0x90]\n  4552: a2 = s1 + 0x300\n  4556: u64 [a2 + 0x40] = a0\n  4559: a0 = u64 [s1 + 0x80]\n  4563: u64 [a2 + 0x48] = a0\n  4566: a0 = u64 [s1 + 0x78]\n  4569: u64 [a2 + 0x50] = a0\n  4572: a1 = s1 + 0x340\n  4576: a0 = u64 [s1 + 0x88]\n  4580: u64 [a2 + 0x58] = a0\n  4583: a0 = 0\n  4585: ra = 178, jump @4\n      : @207 [@dyn 89] (gas: 3)\n  4591: a2 = u64 [s1 + 0x60]\n  4594: a0 = i32 [a2]\n  4596: jump @209 if a0 >u 31\n      : @208 (gas: 3)\n  4600: u32 [a2 + 0] = 0x20\n  4603: t0 = 0xb4\n  4607: jump @1085\n      : @209 (gas: 1)\n  4610: t0 = 180, jump @1085\n      : @210 [@dyn 90] (gas: 56)\n  4616: a0 = u64 [s1 + 0x68]\n  4619: ecalli 5 // 'hash_keccak_256'\n  4621: a1 = u64 [s1 + 0x118]\n  4625: a0 = u64 [a1 + 0x18]\n  4628: a2 = u64 [a1 + 0x10]\n  4631: t0 = u64 [a1 + 0x8]\n  4634: a3 = u64 [a1]\n  4636: a1 = reverse a0\n  4638: a0 = reverse a2\n  4640: a2 = u64 [s1 + 0xd0]\n  4644: a2 = a2 + a0\n  4647: a4 = u64 [s1 + 0xd8]\n  4651: a4 = a4 + a1\n  4654: u64 [s1 + 0xd8] = a4\n  4658: a5 = a4 <u a1\n  4661: a4 = a2 + a5\n  4664: a2 = a4 ^ a0\n  4667: u64 [s1 + 0xd0] = a4\n  4671: a4 = a4 <u a0\n  4674: a4 = a5 if a2 == 0\n  4677: t1 = reverse a3\n  4679: a3 = reverse t0\n  4681: a5 = u64 [s1 + 0xe8]\n  4685: a5 = a5 + a3\n  4688: t0 = u64 [s1 + 0xf0]\n  4692: t0 = t0 + t1\n  4695: a2 = a5 <u a3\n  4698: a2 = a2 + t0\n  4701: a4 = a4 + a5\n  4704: u64 [s1 + 0xc8] = a4\n  4708: a4 = a4 <u a5\n  4711: a2 = a2 + a4\n  4714: u64 [s1 + 0xc0] = a2\n  4718: a2 = sp + 0xffffffffffffffe0\n  4721: t0 = a2 & 0xffffffffffffffe0\n  4724: sp = t0\n  4726: a2 = u64 [s1 + 0xa0]\n  4730: a2 = a2 + a0\n  4733: a4 = u64 [s1 + 0x98]\n  4737: t2 = a1 + a4\n  4740: a1 = t2 <u a1\n  4743: ra = a2 + a1\n  4746: a2 = ra ^ a0\n  4749: a0 = ra <u a0\n  4752: a0 = a1 if a2 == 0\n  4755: a1 = u64 [s1 + 0xa8]\n  4759: a1 = a1 + a3\n  4762: a2 = u64 [s1 + 0xb0]\n  4766: t1 = t1 + a2\n  4769: a2 = a1 <u a3\n  4772: a2 = a2 + t1\n  4775: t1 = a1 + a0\n  4778: a0 = t1 <u a1\n  4781: a5 = a2 + a0\n  4784: u64 [s1 + 0xb8] = t0\n  4788: fallthrough\n      : @211 (gas: 21)\n  4789: a0 = u64 [s1 + 0xd8]\n  4793: a0 = t2 <u a0\n  4796: a2 = u64 [s1 + 0xd0]\n  4800: a1 = ra ^ a2\n  4803: a2 = ra <u a2\n  4806: a2 = a0 if a1 == 0\n  4809: a4 = u64 [s1 + 0xc8]\n  4813: a0 = t1 <u a4\n  4816: a3 = u64 [s1 + 0xc0]\n  4820: a1 = a5 ^ a3\n  4823: a3 = a5 <u a3\n  4826: a3 = a0 if a1 == 0\n  4829: a0 = t1 ^ a4\n  4832: a0 = a0 | a1\n  4835: a3 = a2 if a0 == 0\n  4838: u64 [t0] = t2\n  4840: u64 [t0 + 0x8] = ra\n  4843: u64 [t0 + 0x10] = t1\n  4846: u64 [t0 + 0x18] = a5\n  4849: a0 = s1 + 0x209c\n  4853: jump @213 if a3 != 0\n      : @212 (gas: 1)\n  4856: jump @546\n      : @213 (gas: 11)\n  4859: u64 [a0 + 316] = 0\n  4863: u64 [a0 + 308] = 0\n  4867: u64 [a0 + 300] = 0\n  4871: u64 [a0 + 292] = 0\n  4875: a1 = s1 + 0x21c0\n  4879: a0 = t0\n  4881: u64 [s1 + 0x118] = t2\n  4885: u64 [s1 + 0xf8] = ra\n  4889: u64 [s1 + 0xf0] = a5\n  4893: u64 [s1 + 0xe8] = t1\n  4897: ra = 182, jump @10\n      : @214 [@dyn 91] (gas: 15)\n  4903: a5 = u64 [s1 + 0xf0]\n  4907: ra = u64 [s1 + 0xf8]\n  4911: t2 = u64 [s1 + 0x118]\n  4915: t0 = u64 [s1 + 0xb8]\n  4919: t2 = t2 + 0x1\n  4922: a0 = t2 <u 0x1\n  4925: ra = ra + a0\n  4928: a0 = t2 | ra\n  4931: a0 = a0 <u 0x1\n  4934: a1 = u64 [s1 + 0xe8]\n  4938: a0 = a0 + a1\n  4941: a1 = a0 <u a1\n  4944: a5 = a5 + a1\n  4947: t1 = a0\n  4949: jump @211\n      : @215 (gas: 10)\n  4952: u64 [a2 + 988] = 0\n  4956: u64 [a2 + 980] = 0\n  4960: u64 [a2 + 972] = 0\n  4964: u64 [a2 + 964] = 0\n  4968: a0 = s1 + 0x2000\n  4972: i32 a0 = a0 + 0x460\n  4976: ra = 0xb8\n  4980: ecalli 9 // 'value_transferred'\n  4982: t0 = 0xba\n  4986: jump @1071\n      : @216 [@dyn 92] (gas: 1)\n  4989: t0 = 186, jump @1071\n      : @217 [@dyn 93] (gas: 8)\n  4995: a0 = u64 [a4 + 0xd0]\n  4999: a1 = u64 [a4 + 0xd8]\n  5003: a2 = u64 [a4 + 0xc8]\n  5007: a3 = u64 [a4 + 0xc0]\n  5011: a1 = a1 | a2\n  5014: a0 = a0 | a3\n  5017: a0 = a0 | a1\n  5020: jump @219 if a0 == 0\n      : @218 (gas: 1)\n  5023: jump @862\n      : @219 (gas: 3)\n  5026: a0 = u64 [s1 + 0x118]\n  5030: a0 = i32 [a0]\n  5032: jump @221 if a0 >u 3\n      : @220 (gas: 1)\n  5036: jump @863\n      : @221 (gas: 4)\n  5039: a0 = s1 + 0x7ff\n  5043: a0 = a0 + 0x461\n  5047: a1 = 0x40\n  5050: ra = 188, jump @2\n      : @222 [@dyn 94] (gas: 1)\n  5056: t0 = 190, jump @1082\n      : @223 [@dyn 95] (gas: 5)\n  5062: a4 = u64 [a5 + 0xe0]\n  5066: a1 = u64 [a5 + 0xd8]\n  5070: a2 = u64 [a5 + 0xd0]\n  5074: a0 = u64 [a5 + 0xc8]\n  5078: t0 = 192, jump @1057\n      : @224 [@dyn 96] (gas: 1)\n  5084: jump @226 if a1 == 0\n      : @225 (gas: 1)\n  5087: jump @836\n      : @226 (gas: 9)\n  5090: u64 [a3 + 960] = 0\n  5094: u64 [a3 + 952] = 0\n  5098: u64 [a3 + 936] = 0x1388\n  5104: a1 = s1 + 0x7ff\n  5108: a1 = a1 + 0x441\n  5112: u64 [a3 + 944] = 0\n  5116: u64 [s1 + 0x118] = a0\n  5120: ra = 0x35e\n  5124: jump @4\n      : @227 (gas: 10)\n  5127: u64 [a2 + 156] = 0\n  5131: u64 [a2 + 148] = 0\n  5135: u64 [a2 + 140] = 0\n  5139: u64 [a2 + 132] = 0\n  5143: a0 = s1 + 0x2000\n  5147: i32 a0 = a0 + 0x120\n  5151: ra = 0xc2\n  5155: ecalli 9 // 'value_transferred'\n  5157: t0 = 0xc4\n  5161: jump @1094\n      : @228 [@dyn 97] (gas: 1)\n  5164: t0 = 196, jump @1094\n      : @229 [@dyn 98] (gas: 1)\n  5170: t0 = 198, jump @1068\n      : @230 [@dyn 99] (gas: 1)\n  5176: jump @232 if a0 == 0\n      : @231 (gas: 1)\n  5179: jump @864\n      : @232 (gas: 3)\n  5182: a0 = u64 [s1 + 0x118]\n  5186: a0 = i32 [a0]\n  5188: jump @234 if a0 >u 3\n      : @233 (gas: 1)\n  5192: jump @865\n      : @234 (gas: 3)\n  5195: a0 = s1 + 0x260\n  5199: a1 = 0x40\n  5202: ra = 200, jump @2\n      : @235 [@dyn 100] (gas: 6)\n  5208: a4 = s1 + 0x200\n  5212: a3 = u64 [a4 + 0x78]\n  5215: a1 = u64 [a4 + 0x70]\n  5218: a2 = u64 [a4 + 0x68]\n  5221: a0 = u64 [a4 + 0x60]\n  5224: t0 = 202, jump @1076\n      : @236 [@dyn 101] (gas: 1)\n  5230: jump @238 if a1 == 0\n      : @237 (gas: 1)\n  5233: jump @836\n      : @238 (gas: 9)\n  5236: u64 [s1 + 600] = 0\n  5240: u64 [s1 + 592] = 0\n  5244: a2 = u64 [0x20008]\n  5249: u64 [s1 + 584] = 0x1\n  5254: a1 = s1 + 0x240\n  5258: u64 [s1 + 0x240] = a2\n  5262: u64 [s1 + 0x118] = a0\n  5266: ra = 0x35e\n  5270: jump @4\n      : @239 (gas: 10)\n  5273: u64 [a2 + 668] = 0\n  5277: u64 [a2 + 660] = 0\n  5281: u64 [a2 + 652] = 0\n  5285: u64 [a2 + 644] = 0\n  5289: a0 = s1 + 0x2000\n  5293: i32 a0 = a0 + 0x320\n  5297: ra = 0xcc\n  5301: ecalli 9 // 'value_transferred'\n  5303: t0 = 0xce\n  5307: jump @1093\n      : @240 [@dyn 102] (gas: 1)\n  5310: t0 = 206, jump @1093\n      : @241 [@dyn 103] (gas: 1)\n  5316: t0 = 208, jump @1068\n      : @242 [@dyn 104] (gas: 1)\n  5322: jump @244 if a0 == 0\n      : @243 (gas: 1)\n  5325: jump @866\n      : @244 (gas: 3)\n  5328: a0 = u64 [s1 + 0x118]\n  5332: a0 = i32 [a0]\n  5334: jump @246 if a0 >u 3\n      : @245 (gas: 1)\n  5338: jump @867\n      : @246 (gas: 8)\n  5341: a0 = 0x30020\n  5346: u64 [s1 + 0x118] = a0\n  5350: i32 a0 = a0 + 0\n  5352: ra = 0xd2\n  5356: ecalli 3 // 'caller'\n  5358: a2 = u64 [s1 + 0x118]\n  5362: t0 = 0xd4\n  5366: jump @1051\n      : @247 [@dyn 105] (gas: 2)\n  5369: a2 = u64 [s1 + 0x118]\n  5373: t0 = 212, jump @1051\n      : @248 [@dyn 106] (gas: 8)\n  5379: u64 [a2 + 256] = 0\n  5383: u64 [a2 + 0xf8] = a1\n  5387: u64 [a2 + 0xf0] = a0\n  5391: a1 = s1 + 0x7ff\n  5395: a1 = a1 + 0x181\n  5399: u64 [a2 + 0xe8] = a3\n  5403: a0 = 0\n  5405: ra = 214, jump @4\n      : @249 [@dyn 107] (gas: 11)\n  5411: a1 = s1 + 0x7ff\n  5415: a1 = a1 + 0x99\n  5419: u64 [a1 + 224] = 0\n  5423: u64 [a1 + 216] = 0\n  5427: u64 [a1 + 200] = 0x1\n  5432: a2 = a1\n  5434: a0 = 0x20\n  5437: a1 = s1 + 0x7ff\n  5441: a1 = a1 + 0x161\n  5445: u64 [a2 + 208] = 0\n  5449: ra = 216, jump @4\n      : @250 [@dyn 108] (gas: 1)\n  5455: t0 = 218, jump @1064\n      : @251 [@dyn 109] (gas: 4)\n  5461: a2 = 0x20014\n  5466: a0 = i32 [0x20014]\n  5471: a1 = 0x3f\n  5474: jump @253 if a1 <u a0\n      : @252 (gas: 4)\n  5477: u32 [0x20014] = 0x40\n  5483: u64 [s1 + 0xf8] = a2\n  5487: t0 = 0xdc\n  5491: jump @1086\n      : @253 (gas: 2)\n  5494: u64 [s1 + 0xf8] = a2\n  5498: t0 = 220, jump @1086\n      : @254 [@dyn 110] (gas: 8)\n  5504: a0 = 0x20020\n  5509: i32 a0 = a0 + 0\n  5511: i32 a2 = a2 + 0\n  5513: a1 = 0x40\n  5516: u64 [s1 + 0x100] = a0\n  5520: ra = 0xde\n  5524: ecalli 5 // 'hash_keccak_256'\n  5526: fallthrough\n      : @255 [@dyn 111] (gas: 6)\n  5527: a3 = u64 [s1 + 0x110]\n  5531: a0 = u64 [a3]\n  5533: a1 = u64 [a3 + 0x8]\n  5536: a2 = u64 [a3 + 0x10]\n  5539: a3 = u64 [a3 + 0x18]\n  5542: t0 = 224, jump @1077\n      : @256 [@dyn 112] (gas: 20)\n  5548: a4 = a3 + 0x4\n  5551: a3 = a4 <u a3\n  5554: a5 = a2 + a3\n  5557: a2 = a5 <u a2\n  5560: a2 = a3 if a3 == 0\n  5563: a2 = a2 + a1\n  5566: a1 = a2 <u a1\n  5569: a0 = a0 + a1\n  5572: u64 [s1 + 0xf0] = a4\n  5576: a1 = u64 [s1 + 0x118]\n  5580: u64 [a1] = a4\n  5582: u64 [s1 + 0xe8] = a5\n  5586: u64 [a1 + 0x8] = a5\n  5589: u64 [s1 + 0xe0] = a2\n  5593: u64 [a1 + 0x10] = a2\n  5596: u64 [s1 + 0xd8] = a0\n  5600: u64 [a1 + 0x18] = a0\n  5603: a0 = s1 + 0x7ff\n  5607: a0 = a0 + 0x141\n  5611: ra = 226, jump @6\n      : @257 [@dyn 113] (gas: 15)\n  5617: a3 = s1 + 0x7ff\n  5621: a3 = a3 + 0x99\n  5625: a2 = u64 [a3 + 0xc0]\n  5629: a4 = u64 [a3 + 0xb8]\n  5633: a5 = u64 [a3 + 0xb0]\n  5637: a0 = a2 >u 0\n  5639: a1 = a4 >u 0\n  5641: a1 = a0 if a2 != 0\n  5644: u64 [s1 + 0x70] = a2\n  5647: u64 [s1 + 0x68] = a4\n  5650: a0 = a4 | a2\n  5653: u64 [s1 + 0x60] = a5\n  5656: a2 = a5 >u 0\n  5658: a2 = a1 if a0 != 0\n  5661: jump @259 if a2 == 0\n      : @258 (gas: 1)\n  5664: jump @868\n      : @259 (gas: 6)\n  5667: a0 = u64 [a3 + 0xa8]\n  5671: u64 [s1 + 0x58] = a0\n  5674: a0 = s1 + 0x7ff\n  5678: a0 = a0 + 0x121\n  5682: a1 = 0x40\n  5685: ra = 228, jump @2\n      : @260 [@dyn 114] (gas: 48)\n  5691: ra = s1 + 0x7ff\n  5695: ra = ra + 0x99\n  5699: t1 = u64 [ra + 0xa0]\n  5703: u64 [s1 + 0x118] = t1\n  5707: t0 = u64 [ra + 0x98]\n  5711: u64 [s1 + 0x110] = t0\n  5715: t2 = u64 [ra + 0x90]\n  5719: u64 [s1 + 0x108] = t2\n  5723: a2 = u64 [s1 + 0x68]\n  5726: a0 = a2 >> 0x3b\n  5729: a1 = u64 [s1 + 0x70]\n  5732: a1 = a1 << 0x5\n  5735: a0 = a0 | a1\n  5738: a3 = u64 [s1 + 0x60]\n  5741: a1 = a3 >> 0x3b\n  5744: a2 = a2 << 0x5\n  5747: a1 = a1 | a2\n  5750: a4 = u64 [s1 + 0x58]\n  5753: a2 = a4 >> 0x3b\n  5756: a3 = a3 << 0x5\n  5759: a2 = a2 | a3\n  5762: a3 = a4 << 0x5\n  5765: a4 = a3 + 0x20\n  5768: a3 = a4 <u a3\n  5771: a5 = a2 + a3\n  5774: a2 = a5 <u a2\n  5777: a2 = a3 if a3 == 0\n  5780: a3 = u64 [ra + 0x88]\n  5784: u64 [s1 + 0x28] = a3\n  5787: a2 = a2 + a1\n  5790: a1 = a2 <u a1\n  5793: ra = a0 + a1\n  5796: a0 = s1 + 0x7ff\n  5800: a0 = a0 + 0x99\n  5804: u64 [a0 + 0x48] = a4\n  5807: u64 [a0 + 0x80] = t1\n  5811: u64 [a0 + 0x78] = t0\n  5814: u64 [a0 + 0x70] = t2\n  5817: u64 [a0 + 0x68] = a3\n  5820: u64 [a0 + 0x50] = a5\n  5823: u64 [a0 + 0x58] = a2\n  5826: a2 = a0\n  5828: a0 = s1 + 0x7ff\n  5832: a0 = a0 + 0x101\n  5836: a1 = s1 + 0x7ff\n  5840: a1 = a1 + 0xe1\n  5844: u64 [a2 + 0x60] = ra\n  5847: ra = 230, jump @972\n      : @261 [@dyn 115] (gas: 13)\n  5853: a0 = u64 [s1 + 0x28]\n  5856: a4 = s1 + 0x100\n  5860: a1 = u64 [a4 + 0x18]\n  5863: a2 = u64 [a4 + 0x8]\n  5866: a2 = a2 | a1\n  5869: a3 = u64 [a4 + 0x10]\n  5872: a1 = a0 | a3\n  5875: a1 = a1 | a2\n  5878: a1 = a1 >> 0x20\n  5881: a2 = a2 | a3\n  5884: a2 = a2 << 0x20\n  5887: a1 = a1 | a2\n  5890: jump @263 if a1 == 0\n      : @262 (gas: 1)\n  5893: jump @836\n      : @263 (gas: 13)\n  5896: a3 = s1 + 0x7ff\n  5900: a3 = a3 + 0x99\n  5904: a1 = u64 [s1 + 0x58]\n  5907: u64 [a3 + 0x28] = a1\n  5910: a1 = u64 [s1 + 0x60]\n  5913: u64 [a3 + 0x30] = a1\n  5916: a1 = u64 [s1 + 0x68]\n  5919: u64 [a3 + 0x38] = a1\n  5922: a1 = s1 + 0x7ff\n  5926: a1 = a1 + 0xc1\n  5930: a2 = u64 [s1 + 0x70]\n  5933: u64 [a3 + 0x40] = a2\n  5936: ra = 232, jump @4\n      : @264 [@dyn 116] (gas: 30)\n  5942: a1 = u64 [s1 + 0x28]\n  5945: a0 = a1 + 0x20\n  5948: u64 [s1 + 0x48] = a0\n  5951: a0 = a0 <u a1\n  5954: a3 = s1 + 0x100\n  5958: a2 = u64 [a3 + 0x8]\n  5961: a1 = a2 + a0\n  5964: u64 [s1 + 0x40] = a1\n  5967: a1 = a1 <u a2\n  5970: a1 = a0 if a0 == 0\n  5973: a0 = u64 [a3 + 0x10]\n  5976: a1 = a1 + a0\n  5979: u64 [s1 + 0x38] = a1\n  5982: a0 = a1 <u a0\n  5985: u64 [a3 + 0x10] = a0\n  5988: a0 = u64 [s1 + 0xd8]\n  5992: a1 = s1 + 0x7ff\n  5996: a1 = a1 + 0x99\n  6000: u64 [a1 + 0x20] = a0\n  6003: a0 = u64 [s1 + 0xe0]\n  6007: u64 [a1 + 0x18] = a0\n  6010: a0 = u64 [s1 + 0xe8]\n  6014: u64 [a1 + 0x10] = a0\n  6017: a2 = a1\n  6019: a1 = s1 + 0x7ff\n  6023: a1 = a1 + 0xa1\n  6027: a0 = u64 [s1 + 0xf0]\n  6031: u64 [a2 + 0x8] = a0\n  6034: a0 = 0\n  6036: ra = 234, jump @4\n      : @265 [@dyn 117] (gas: 7)\n  6042: a0 = sp + 0xffffffffffffffe0\n  6045: a0 = a0 & 0xffffffffffffffe0\n  6048: u64 [s1 + 0xd0] = a0\n  6052: sp = a0\n  6054: a2 = u64 [s1 + 0xf8]\n  6058: a0 = i32 [a2]\n  6060: jump @267 if a0 >u 31\n      : @266 (gas: 2)\n  6064: u32 [a2 + 0] = 0x20\n  6067: fallthrough\n      : @267 (gas: 7)\n  6068: a0 = u64 [s1 + 0x118]\n  6072: a1 = u64 [s1 + 0x110]\n  6076: a0 = a0 + a1\n  6079: u64 [s1 + 0x30] = a0\n  6082: a0 = 0xffffffff\n  6092: u64 [s1 + 0x78] = a0\n  6095: t0 = 236, jump @1075\n      : @268 [@dyn 118] (gas: 31)\n  6101: ecalli 5 // 'hash_keccak_256'\n  6103: a2 = 0\n  6105: a1 = 0\n  6107: a5 = 0\n  6109: t2 = 0\n  6111: a3 = u64 [s1 + 0x118]\n  6115: a0 = u64 [a3 + 0x18]\n  6118: a4 = u64 [a3 + 0x10]\n  6121: t0 = u64 [a3 + 0x8]\n  6124: t1 = u64 [a3]\n  6126: ra = reverse a0\n  6128: a3 = reverse a4\n  6130: a4 = reverse t0\n  6132: t0 = reverse t1\n  6134: a0 = u64 [s1 + 0xd0]\n  6138: u64 [a0 + 0x18] = t0\n  6141: u64 [s1 + 0xb8] = a4\n  6145: u64 [a0 + 0x10] = a4\n  6148: u64 [a0 + 0x8] = a3\n  6151: u64 [a0] = ra\n  6153: a0 = 0xffffffe0\n  6163: u64 [s1 + 0x50] = a0\n  6166: a0 = u64 [s1 + 0x48]\n  6169: u64 [s1 + 0xf0] = a0\n  6173: a0 = u64 [s1 + 0x40]\n  6176: u64 [s1 + 0xe8] = a0\n  6180: a0 = u64 [s1 + 0x38]\n  6183: u64 [s1 + 0xf8] = a0\n  6187: a0 = u64 [s1 + 0x30]\n  6190: u64 [s1 + 0x100] = a0\n  6194: fallthrough\n      : @269 (gas: 27)\n  6195: u64 [s1 + 0x90] = t0\n  6199: u64 [s1 + 0x118] = a3\n  6203: u64 [s1 + 0x98] = ra\n  6207: a0 = u64 [s1 + 0x58]\n  6210: u64 [s1 + 0xb0] = a2\n  6214: a0 = a2 <u a0\n  6217: a2 = u64 [s1 + 0x60]\n  6220: a3 = a1 ^ a2\n  6223: u64 [s1 + 0xa8] = a1\n  6227: a2 = a1 <u a2\n  6230: a2 = a0 if a3 == 0\n  6233: a4 = u64 [s1 + 0x68]\n  6236: a0 = a5 <u a4\n  6239: a3 = u64 [s1 + 0x70]\n  6242: a1 = t2 ^ a3\n  6245: u64 [s1 + 0xa0] = t2\n  6249: a3 = t2 <u a3\n  6252: a3 = a0 if a1 == 0\n  6255: u64 [s1 + 0x88] = a5\n  6259: a0 = a5 ^ a4\n  6262: a0 = a0 | a1\n  6265: a3 = a2 if a0 == 0\n  6268: u64 [s1 + 0xc8] = a3\n  6272: a0 = s1 + 0x7ff\n  6276: a0 = a0 + 0x81\n  6280: a1 = 0x40\n  6283: ra = 238, jump @2\n      : @270 [@dyn 119] (gas: 16)\n  6289: a0 = s1 + 0x7ff\n  6293: a0 = a0 + 0x99\n  6297: t2 = u64 [a0]\n  6299: a1 = u64 [a0 + 0xfffffffffffffff8]\n  6302: a0 = s1 + 0x1000\n  6306: a2 = u64 [a0 + 0xfffffffffffff880]\n  6310: a0 = s1 + 0x1000\n  6314: a4 = u64 [a0 + 0xfffffffffffff888]\n  6318: a0 = a2 | a1\n  6321: a3 = a4 | t2\n  6324: a5 = u64 [s1 + 0xc8]\n  6328: u64 [s1 + 0x108] = a2\n  6332: u64 [s1 + 0xe0] = t2\n  6336: u64 [s1 + 0xd8] = a4\n  6340: u64 [s1 + 0x110] = a1\n  6344: jump @272 if a5 != 0\n      : @271 (gas: 1)\n  6347: jump @815\n      : @272 (gas: 9)\n  6350: a5 = s1 + 0x700\n  6354: u64 [a5 + 0x60] = a2\n  6357: u64 [a5 + 0x68] = a4\n  6360: u64 [a5 + 0x70] = a1\n  6363: u64 [s1 + 0xc8] = a0\n  6367: a0 = s1 + 0x760\n  6371: u64 [s1 + 0x778] = t2\n  6375: u64 [s1 + 0xc0] = a3\n  6379: ra = 240, jump @963\n      : @273 [@dyn 120] (gas: 3)\n  6385: a0 = s1 + 0x740\n  6389: a1 = u64 [s1 + 0xd0]\n  6393: ra = 242, jump @6\n      : @274 [@dyn 121] (gas: 9)\n  6399: a0 = u64 [s1 + 0xc8]\n  6403: a2 = u64 [s1 + 0xc0]\n  6407: a0 = a0 | a2\n  6410: a0 = a0 >> 0x20\n  6413: a1 = u64 [s1 + 0x110]\n  6417: a1 = a1 | a2\n  6420: a1 = a1 << 0x20\n  6423: a0 = a0 | a1\n  6426: jump @276 if a0 == 0\n      : @275 (gas: 1)\n  6429: jump @836\n      : @276 (gas: 16)\n  6432: a2 = s1 + 0x700\n  6436: a0 = u64 [a2 + 0x50]\n  6439: u64 [s1 + 0xc8] = a0\n  6443: a1 = u64 [a2 + 0x40]\n  6446: a0 = u64 [a2 + 0x48]\n  6449: u64 [s1 + 0xc0] = a0\n  6453: a0 = u64 [s1 + 0x78]\n  6456: u64 [s1 + 0x80] = a1\n  6460: a0 = a0 & a1\n  6463: u64 [s1 + 1848] = 0\n  6467: u64 [s1 + 1840] = 0\n  6471: u64 [s1 + 1832] = 0\n  6475: a1 = s1 + 0x720\n  6479: u64 [a2 + 0x20] = a0\n  6482: a0 = u64 [s1 + 0x108]\n  6486: ra = 244, jump @4\n      : @277 [@dyn 122] (gas: 10)\n  6492: a0 = u64 [s1 + 0xe0]\n  6496: a1 = u64 [s1 + 0x110]\n  6500: a0 = a0 | a1\n  6503: a1 = u64 [s1 + 0x50]\n  6506: a4 = u64 [s1 + 0x108]\n  6510: a1 = a4 <u a1\n  6513: a2 = u64 [s1 + 0xd8]\n  6517: a1 = 0 if a2 != 0\n  6519: a1 = 0 if a0 != 0\n  6521: jump @279 if a1 != 0\n      : @278 (gas: 1)\n  6524: jump @836\n      : @279 (gas: 18)\n  6527: a0 = u64 [s1 + 0x80]\n  6531: a0 = a0 >> 0x20\n  6534: a2 = u64 [s1 + 0xc0]\n  6538: a1 = a2 << 0x20\n  6541: a0 = a0 | a1\n  6544: a1 = a2 >> 0x20\n  6547: a2 = u64 [s1 + 0xc8]\n  6551: a2 = a2 << 0x20\n  6554: a1 = a1 | a2\n  6557: a2 = a1 & 0xffffffffffffffff\n  6560: a1 = a0 & 0xffffffffffffffff\n  6563: i32 a0 = a4 + 0x20\n  6566: u64 [s1 + 1816] = 0\n  6570: u64 [s1 + 1808] = 0\n  6574: u64 [s1 + 0x700] = a1\n  6578: a1 = s1 + 0x700\n  6582: u64 [s1 + 0x708] = a2\n  6586: ra = 246, jump @4\n      : @280 [@dyn 123] (gas: 12)\n  6592: a3 = u64 [s1 + 0xf8]\n  6596: a4 = u64 [s1 + 0xf0]\n  6600: a0 = a4 | a3\n  6603: a2 = u64 [s1 + 0x100]\n  6607: a5 = u64 [s1 + 0xe8]\n  6611: a1 = a5 | a2\n  6614: a0 = a0 | a1\n  6617: a0 = a0 >> 0x20\n  6620: a1 = a1 | a3\n  6623: a1 = a1 << 0x20\n  6626: a0 = a0 | a1\n  6629: jump @282 if a0 == 0\n      : @281 (gas: 1)\n  6632: jump @836\n      : @282 (gas: 15)\n  6635: a0 = u64 [s1 + 0x108]\n  6639: u64 [s1 + 0x6e0] = a0\n  6643: a0 = u64 [s1 + 0xd8]\n  6647: u64 [s1 + 0x6e8] = a0\n  6651: a0 = u64 [s1 + 0x110]\n  6655: u64 [s1 + 0x6f0] = a0\n  6659: a1 = s1 + 0x6e0\n  6663: a0 = u64 [s1 + 0xe0]\n  6667: u64 [s1 + 0x6f8] = a0\n  6671: a0 = a4\n  6673: u64 [s1 + 0x100] = a2\n  6677: u64 [s1 + 0xf8] = a3\n  6681: u64 [s1 + 0xf0] = a4\n  6685: u64 [s1 + 0xe8] = a5\n  6689: ra = 248, jump @4\n      : @283 [@dyn 124] (gas: 58)\n  6695: ra = u64 [s1 + 0x98]\n  6699: a1 = u64 [s1 + 0xf0]\n  6703: a0 = a1 + 0x20\n  6706: u64 [s1 + 0x110] = a0\n  6710: a2 = a0 <u a1\n  6713: a1 = u64 [s1 + 0xe8]\n  6717: a0 = a1 + a2\n  6720: u64 [s1 + 0x108] = a0\n  6724: a3 = a0 <u a1\n  6727: a3 = a2 if a2 == 0\n  6730: a0 = u64 [s1 + 0xf8]\n  6734: t1 = a0 + a3\n  6737: a3 = t1 <u a0\n  6740: a0 = u64 [s1 + 0x100]\n  6744: a0 = a0 + a3\n  6747: u64 [s1 + 0x100] = a0\n  6751: ra = ra + 0x1\n  6754: a3 = ra <u 0x1\n  6757: a1 = u64 [s1 + 0x118]\n  6761: a1 = a1 + a3\n  6764: u64 [s1 + 0x118] = a1\n  6768: a1 = u64 [s1 + 0x118]\n  6772: a3 = ra | a1\n  6775: a3 = a3 <u 0x1\n  6778: a1 = u64 [s1 + 0xb8]\n  6782: a3 = a3 + a1\n  6785: a4 = a3 <u a1\n  6788: a0 = u64 [s1 + 0x90]\n  6792: a0 = a0 + a4\n  6795: a2 = u64 [s1 + 0xb0]\n  6799: a2 = a2 + 0x1\n  6802: a4 = a2 <u 0x1\n  6805: a1 = u64 [s1 + 0xa8]\n  6809: a1 = a1 + a4\n  6812: a4 = a2 | a1\n  6815: a4 = a4 <u 0x1\n  6818: a5 = u64 [s1 + 0x88]\n  6822: a4 = a4 + a5\n  6825: a5 = a4 <u a5\n  6828: t2 = u64 [s1 + 0xa0]\n  6832: t2 = t2 + a5\n  6835: a5 = u64 [s1 + 0xd0]\n  6839: t0 = u64 [s1 + 0x118]\n  6843: u64 [a5 + 0x8] = t0\n  6846: t0 = a0\n  6848: u64 [a5] = ra\n  6850: u64 [a5 + 0x10] = a3\n  6853: u64 [a5 + 0x18] = a0\n  6856: u64 [s1 + 0xb8] = a3\n  6860: a5 = s1 + 0x100\n  6864: a0 = u64 [a5 + 0x10]\n  6867: u64 [s1 + 0xf0] = a0\n  6871: a0 = u64 [a5 + 0x8]\n  6874: u64 [s1 + 0xe8] = a0\n  6878: a3 = u64 [a5 + 0x18]\n  6881: u64 [s1 + 0xf8] = t1\n  6885: a5 = a4\n  6887: jump @269\n      : @284 (gas: 10)\n  6890: u64 [a2 + 1084] = 0\n  6894: u64 [a2 + 1076] = 0\n  6898: u64 [a2 + 1068] = 0\n  6902: u64 [a2 + 1060] = 0\n  6906: a0 = s1 + 0x2000\n  6910: i32 a0 = a0 + 0x4c0\n  6914: ra = 0xfa\n  6918: ecalli 9 // 'value_transferred'\n  6920: t0 = 0xfc\n  6924: jump @1073\n      : @285 [@dyn 125] (gas: 1)\n  6927: t0 = 252, jump @1073\n      : @286 [@dyn 126] (gas: 8)\n  6933: a0 = u64 [a4 + 0x30]\n  6936: a1 = u64 [a4 + 0x38]\n  6939: a2 = u64 [a4 + 0x28]\n  6942: a3 = u64 [a4 + 0x20]\n  6945: a1 = a1 | a2\n  6948: a0 = a0 | a3\n  6951: a0 = a0 | a1\n  6954: jump @288 if a0 == 0\n      : @287 (gas: 1)\n  6957: jump @873\n      : @288 (gas: 3)\n  6960: a0 = u64 [s1 + 0x118]\n  6964: a0 = i32 [a0]\n  6966: jump @290 if a0 >u 3\n      : @289 (gas: 1)\n  6970: jump @874\n      : @290 (gas: 3)\n  6973: a0 = s1 + 0x1060\n  6977: a1 = 0x40\n  6980: ra = 254, jump @2\n      : @291 [@dyn 127] (gas: 17)\n  6986: a1 = s1 + 0x7ff\n  6990: a1 = a1 + 0x99\n  6994: a5 = a1 + 0x700\n  6998: a0 = u64 [a5 + 0xe0]\n  7002: u64 [s1 + 0x108] = a0\n  7006: a2 = u64 [a5 + 0xd8]\n  7010: u64 [s1 + 0x100] = a2\n  7014: a4 = u64 [a5 + 0xd0]\n  7018: u64 [s1 + 0x110] = a4\n  7022: a3 = u64 [a5 + 0xc8]\n  7026: u64 [s1 + 0x118] = a3\n  7030: u64 [a5 + 0xc0] = a0\n  7034: u64 [a5 + 0xb8] = a2\n  7038: u64 [a5 + 0xb0] = a4\n  7042: a0 = s1 + 0x1040\n  7046: u64 [a5 + 0xa8] = a3\n  7050: ra = 256, jump @963\n      : @292 [@dyn 128] (gas: 7)\n  7056: a3 = s1 + 0x100\n  7060: a0 = u64 [a3 + 0x8]\n  7063: a1 = u64 [a3 + 0x10]\n  7066: a0 = a0 | a1\n  7069: a2 = u64 [a3]\n  7071: a1 = u64 [a3 + 0x18]\n  7074: t0 = 258, jump @1091\n      : @293 [@dyn 129] (gas: 1)\n  7080: jump @295 if a0 == 0\n      : @294 (gas: 1)\n  7083: jump @836\n      : @295 (gas: 9)\n  7086: a0 = s1 + 0x7ff\n  7090: a0 = a0 + 0x99\n  7094: u64 [a0 + 1952] = 0\n  7098: u64 [a0 + 1944] = 0\n  7102: u64 [a0 + 1936] = 0\n  7106: a1 = s1 + 0x1020\n  7110: u64 [a0 + 1928] = 0\n  7114: a0 = u64 [s1 + 0x118]\n  7118: ra = 260, jump @4\n      : @296 [@dyn 130] (gas: 5)\n  7124: a3 = s1 + 0x100\n  7128: a0 = u64 [a3 + 0x8]\n  7131: a1 = u64 [a3]\n  7133: a0 = a0 | a1\n  7136: t0 = 262, jump @1081\n      : @297 [@dyn 131] (gas: 1)\n  7142: jump @299 if a1 != 0\n      : @298 (gas: 1)\n  7145: jump @836\n      : @299 (gas: 10)\n  7148: a0 = u64 [s1 + 0x118]\n  7152: i32 a0 = a0 + 0x20\n  7155: a2 = s1 + 0x7ff\n  7159: a2 = a2 + 0x99\n  7163: u64 [a2 + 1920] = 0\n  7167: u64 [a2 + 1912] = 0\n  7171: u64 [a2 + 1904] = 0\n  7175: a1 = s1 + 0x1000\n  7179: u64 [a2 + 1896] = 0\n  7183: ra = 264, jump @4\n      : @300 [@dyn 132] (gas: 8)\n  7189: a0 = 0x30020\n  7194: u64 [s1 + 0x118] = a0\n  7198: i32 a0 = a0 + 0\n  7200: ra = 0x10a\n  7204: ecalli 3 // 'caller'\n  7206: a2 = u64 [s1 + 0x118]\n  7210: t0 = 0x10c\n  7214: jump @1051\n      : @301 [@dyn 133] (gas: 2)\n  7217: a2 = u64 [s1 + 0x118]\n  7221: t0 = 268, jump @1051\n      : @302 [@dyn 134] (gas: 9)\n  7227: u64 [a2 + 1888] = 0\n  7231: a4 = a2 + 0x700\n  7235: u64 [a4 + 0x58] = a1\n  7238: u64 [a4 + 0x50] = a0\n  7241: a1 = s1 + 0x7ff\n  7245: a1 = a1 + 0x7e1\n  7249: u64 [a4 + 0x48] = a3\n  7252: a0 = 0\n  7254: ra = 270, jump @4\n      : @303 [@dyn 135] (gas: 11)\n  7260: a1 = s1 + 0x7ff\n  7264: a1 = a1 + 0x99\n  7268: u64 [a1 + 1856] = 0\n  7272: u64 [a1 + 1848] = 0\n  7276: u64 [a1 + 1832] = 0x1\n  7281: a2 = a1\n  7283: a0 = 0x20\n  7286: a1 = s1 + 0x7ff\n  7290: a1 = a1 + 0x7c1\n  7294: u64 [a2 + 1840] = 0\n  7298: ra = 272, jump @4\n      : @304 [@dyn 136] (gas: 6)\n  7304: a0 = sp + 0xffffffffffffffe0\n  7307: a0 = a0 & 0xffffffffffffffe0\n  7310: u64 [s1 + 0x110] = a0\n  7314: sp = a0\n  7316: a1 = i32 [0x20014]\n  7321: jump @306 if a1 >u 63\n      : @305 (gas: 4)\n  7325: a1 = 0x40\n  7328: u32 [0x20014] = a1\n  7333: t0 = 0x112\n  7337: jump @1087\n      : @306 (gas: 1)\n  7340: t0 = 274, jump @1087\n      : @307 [@dyn 137] (gas: 7)\n  7346: a0 = 0x20020\n  7351: i32 a0 = a0 + 0\n  7353: i32 a2 = a2 + 0\n  7355: a1 = 0x40\n  7358: ra = 0x114\n  7362: ecalli 5 // 'hash_keccak_256'\n  7364: fallthrough\n      : @308 [@dyn 138] (gas: 6)\n  7365: a3 = u64 [s1 + 0x118]\n  7369: a0 = u64 [a3 + 0x18]\n  7372: a1 = u64 [a3 + 0x10]\n  7375: a2 = u64 [a3 + 0x8]\n  7378: a3 = u64 [a3]\n  7380: t0 = 278, jump @1077\n      : @309 [@dyn 139] (gas: 9)\n  7386: a4 = u64 [s1 + 0x110]\n  7390: u64 [a4 + 0x18] = a3\n  7393: u64 [a4 + 0x10] = a2\n  7396: u64 [a4 + 0x8] = a1\n  7399: u64 [a4] = a0\n  7401: a0 = s1 + 0x7ff\n  7405: a0 = a0 + 0x7a1\n  7409: a1 = 0x40\n  7412: ra = 280, jump @2\n      : @310 [@dyn 140] (gas: 19)\n  7418: a1 = s1 + 0x7ff\n  7422: a1 = a1 + 0x99\n  7426: a5 = a1 + 0x700\n  7430: a0 = u64 [a5 + 0x20]\n  7433: u64 [s1 + 0x100] = a0\n  7437: a2 = u64 [a5 + 0x18]\n  7440: u64 [s1 + 0xf8] = a2\n  7444: a4 = u64 [a5 + 0x10]\n  7447: u64 [s1 + 0x108] = a4\n  7451: a3 = u64 [a5 + 0x8]\n  7454: u64 [s1 + 0x118] = a3\n  7458: u64 [a5] = a0\n  7460: a5 = a1 + 0x600\n  7464: u64 [a5 + 0xf8] = a2\n  7468: u64 [a5 + 0xf0] = a4\n  7472: a0 = s1 + 0x7ff\n  7476: a0 = a0 + 0x781\n  7480: u64 [a5 + 0xe8] = a3\n  7484: ra = 282, jump @963\n      : @311 [@dyn 141] (gas: 4)\n  7490: a0 = s1 + 0x7ff\n  7494: a0 = a0 + 0x761\n  7498: a1 = u64 [s1 + 0x110]\n  7502: ra = 284, jump @6\n      : @312 [@dyn 142] (gas: 7)\n  7508: a3 = s1 + 0x100\n  7512: a0 = u64 [a3]\n  7514: a1 = u64 [a3 + 0x8]\n  7517: a0 = a0 | a1\n  7520: a2 = u64 [s1 + 0xf8]\n  7524: a1 = u64 [a3 + 0x18]\n  7527: t0 = 286, jump @1091\n      : @313 [@dyn 143] (gas: 1)\n  7533: jump @315 if a0 == 0\n      : @314 (gas: 1)\n  7536: jump @836\n      : @315 (gas: 19)\n  7539: a0 = s1 + 0x7ff\n  7543: a0 = a0 + 0x99\n  7547: a3 = a0 + 0x600\n  7551: a1 = u64 [a3 + 0xe0]\n  7555: u64 [s1 + 0x110] = a1\n  7559: a1 = u64 [a3 + 0xd8]\n  7563: u64 [s1 + 0xf0] = a1\n  7567: a2 = u64 [a3 + 0xd0]\n  7571: a1 = u64 [a3 + 0xc8]\n  7575: u64 [a0 + 1728] = 0\n  7579: u64 [a0 + 1720] = 0\n  7583: u64 [s1 + 0xe0] = a1\n  7587: u64 [a3 + 0xa8] = a1\n  7591: a1 = s1 + 0x7ff\n  7595: a1 = a1 + 0x741\n  7599: u64 [s1 + 0xe8] = a2\n  7603: u64 [a3 + 0xb0] = a2\n  7607: a0 = u64 [s1 + 0x118]\n  7611: ra = 288, jump @4\n      : @316 [@dyn 144] (gas: 11)\n  7617: a3 = s1 + 0x100\n  7621: a0 = u64 [a3]\n  7623: a1 = u64 [s1 + 0xf8]\n  7627: a0 = a0 | a1\n  7630: a1 = 0xffffffe0\n  7640: a2 = u64 [a3 + 0x18]\n  7643: a1 = a2 <u a1\n  7646: a2 = u64 [a3 + 0x8]\n  7649: a1 = 0 if a2 != 0\n  7651: a1 = 0 if a0 != 0\n  7653: jump @318 if a1 != 0\n      : @317 (gas: 1)\n  7656: jump @836\n      : @318 (gas: 16)\n  7659: a4 = s1 + 0x100\n  7663: a0 = u64 [a4 + 0x18]\n  7666: i32 a2 = a0 + 0x20\n  7669: a3 = s1 + 0x7ff\n  7673: a3 = a3 + 0x99\n  7677: u64 [a3 + 1696] = 0\n  7681: u64 [a3 + 1688] = 0\n  7685: a0 = u64 [s1 + 0xf0]\n  7689: u64 [a3 + 0x688] = a0\n  7693: a1 = s1 + 0x7ff\n  7697: a1 = a1 + 0x721\n  7701: a0 = u64 [a4 + 0x10]\n  7704: u64 [a3 + 0x690] = a0\n  7708: u64 [a4 + 0x18] = a2\n  7711: a0 = a2\n  7713: ra = 290, jump @4\n      : @319 [@dyn 145] (gas: 4)\n  7719: a0 = s1 + 0x7ff\n  7723: a0 = a0 + 0x701\n  7727: a1 = 0x40\n  7730: ra = 292, jump @2\n      : @320 [@dyn 146] (gas: 15)\n  7736: t0 = s1 + 0x7ff\n  7740: t0 = t0 + 0x99\n  7744: a0 = t0 + 0x600\n  7748: a5 = u64 [a0 + 0x80]\n  7752: a2 = u64 [a0 + 0x78]\n  7755: a4 = u64 [a0 + 0x70]\n  7758: a3 = u64 [a0 + 0x68]\n  7761: a0 = a4 | a5\n  7764: a1 = a3 | a2\n  7767: a1 = a1 | a0\n  7770: a1 = a1 >> 0x20\n  7773: a0 = a0 | a2\n  7776: a0 = a0 << 0x20\n  7779: a0 = a0 | a1\n  7782: jump @322 if a0 == 0\n      : @321 (gas: 1)\n  7785: jump @836\n      : @322 (gas: 14)\n  7788: u64 [t0 + 1632] = 0\n  7792: u64 [t0 + 1624] = 0\n  7796: a0 = u64 [s1 + 0xe0]\n  7800: u64 [t0 + 0x648] = a0\n  7804: a1 = s1 + 0x7ff\n  7808: a1 = a1 + 0x6e1\n  7812: a0 = u64 [s1 + 0xe8]\n  7816: u64 [t0 + 0x650] = a0\n  7820: a0 = a3\n  7822: u64 [s1 + 0x110] = a3\n  7826: u64 [s1 + 0x108] = a4\n  7830: u64 [s1 + 0x100] = a5\n  7834: u64 [s1 + 0xf8] = a2\n  7838: ra = 294, jump @4\n      : @323 [@dyn 147] (gas: 4)\n  7844: a0 = s1 + 0x7ff\n  7848: a0 = a0 + 0x6c1\n  7852: a1 = u64 [s1 + 0x118]\n  7856: ra = 296, jump @2\n      : @324 [@dyn 148] (gas: 11)\n  7862: a3 = s1 + 0x100\n  7866: a4 = u64 [a3 + 0x10]\n  7869: a0 = u64 [a3]\n  7871: a1 = u64 [s1 + 0xf8]\n  7875: a0 = a0 | a1\n  7878: a1 = 0xffffffe0\n  7888: a1 = a4 <u a1\n  7891: a2 = u64 [a3 + 0x8]\n  7894: a1 = 0 if a2 != 0\n  7896: a1 = 0 if a0 != 0\n  7898: jump @326 if a1 != 0\n      : @325 (gas: 1)\n  7901: jump @836\n      : @326 (gas: 14)\n  7904: a5 = s1 + 0x7ff\n  7908: a5 = a5 + 0x99\n  7912: a0 = u64 [a5 + 0x630]\n  7916: a1 = u64 [a5 + 0x628]\n  7920: a3 = a0 & 0xffffffffffffffff\n  7923: a1 = a1 & 0xffffffffffffffff\n  7926: i32 a0 = a4 + 0x20\n  7929: u64 [a5 + 1568] = 0\n  7933: u64 [a5 + 1560] = 0\n  7937: u64 [a5 + 0x608] = a1\n  7941: a1 = s1 + 0x7ff\n  7945: a1 = a1 + 0x6a1\n  7949: u64 [a5 + 0x610] = a3\n  7953: ra = 298, jump @4\n      : @327 [@dyn 149] (gas: 3)\n  7959: a1 = 0x40\n  7962: a0 = u64 [s1 + 0x110]\n  7966: ra = 300, jump @11\n      : @328 [@dyn 150] (gas: 5)\n  7972: i32 a1 = a0 + 0\n  7974: a2 = 0x40\n  7977: a0 = 0\n  7979: ecalli 6 // 'seal_return'\n  7981: jump @801\n      : @329 (gas: 10)\n  7984: u64 [a2 + 1788] = 0\n  7988: u64 [a2 + 1780] = 0\n  7992: u64 [a2 + 1772] = 0\n  7996: u64 [a2 + 1764] = 0\n  8000: a0 = s1 + 0x2000\n  8004: i32 a0 = a0 + 0x780\n  8008: ra = 0x12e\n  8012: ecalli 9 // 'value_transferred'\n  8014: t0 = 0x130\n  8018: jump @1072\n      : @330 [@dyn 151] (gas: 1)\n  8021: t0 = 304, jump @1072\n      : @331 [@dyn 152] (gas: 1)\n  8027: t0 = 306, jump @1089\n      : @332 [@dyn 153] (gas: 1)\n  8033: jump @334 if a0 == 0\n      : @333 (gas: 1)\n  8036: jump @875\n      : @334 (gas: 3)\n  8039: a0 = u64 [s1 + 0x118]\n  8043: a0 = i32 [a0]\n  8045: jump @336 if a0 >u 35\n      : @335 (gas: 1)\n  8049: jump @876\n      : @336 (gas: 5)\n  8052: a0 = s1 + 0x2000\n  8056: i32 a0 = a0 + 0x7a0\n  8060: a1 = 0x4\n  8063: ecalli 1 // 'call_data_load'\n  8065: fallthrough\n      : @337 (gas: 13)\n  8066: a2 = s1 + 0x209c\n  8070: a1 = u64 [a2 + 0x714]\n  8074: a3 = u64 [a2 + 0x71c]\n  8078: a0 = 0x100000000\n  8088: a0 = a0 ^ a1\n  8091: a0 = a0 | a3\n  8094: u64 [s1 + 0x100] = a1\n  8098: a1 = a1 >> 0x20\n  8101: a1 = a1 <u 0x1\n  8104: u64 [s1 + 0xf0] = a3\n  8108: a1 = 0 if a3 != 0\n  8110: a1 = 0 if a0 == 0\n  8112: jump @339 if a1 != 0\n      : @338 (gas: 1)\n  8115: jump @877\n      : @339 (gas: 13)\n  8118: a0 = u64 [a2 + 0x70c]\n  8122: u64 [s1 + 0xd8] = a0\n  8126: a0 = u64 [a2 + 0x704]\n  8130: u64 [s1 + 0xe0] = a0\n  8134: a0 = 0x30020\n  8139: u64 [s1 + 0x118] = a0\n  8143: i32 a0 = a0 + 0\n  8145: u64 [s1 + 0x108] = a0\n  8149: ra = 0x134\n  8153: ecalli 3 // 'caller'\n  8155: a2 = u64 [s1 + 0x118]\n  8159: t0 = 0x136\n  8163: jump @1050\n      : @340 [@dyn 154] (gas: 2)\n  8166: a2 = u64 [s1 + 0x118]\n  8170: t0 = 310, jump @1050\n      : @341 [@dyn 155] (gas: 8)\n  8176: u64 [a2 + 1696] = 0\n  8180: a4 = a2 + 0x600\n  8184: u64 [a4 + 0x98] = a1\n  8188: u64 [a4 + 0x90] = a0\n  8192: a1 = s1 + 0x1f20\n  8196: u64 [a4 + 0x88] = a3\n  8200: a0 = 0\n  8202: ra = 312, jump @4\n      : @342 [@dyn 156] (gas: 2)\n  8208: a1 = s1 + 0x1898\n  8212: t0 = 314, jump @1088\n      : @343 [@dyn 157] (gas: 3)\n  8218: a1 = s1 + 0x1f00\n  8222: u64 [a2 + 1648] = 0\n  8226: ra = 316, jump @4\n      : @344 [@dyn 158] (gas: 7)\n  8232: a0 = sp + 0xffffffffffffffe0\n  8235: a0 = a0 & 0xffffffffffffffe0\n  8238: u64 [s1 + 0x110] = a0\n  8242: sp = a0\n  8244: a1 = 0x20014\n  8249: a0 = i32 [0x20014]\n  8254: jump @346 if a0 >u 63\n      : @345 (gas: 2)\n  8258: u32 [0x20014] = 0x40\n  8264: fallthrough\n      : @346 (gas: 14)\n  8265: a0 = sp + 0xffffffffffffffe0\n  8268: a2 = a0 & 0xffffffffffffffe0\n  8271: u64 [s1 + 0xd0] = a2\n  8275: sp = a2\n  8277: a0 = 0x20020\n  8282: i32 a0 = a0 + 0\n  8284: i32 a2 = a2 + 0\n  8286: u64 [s1 + 0xf8] = a1\n  8290: a1 = 0x40\n  8293: u64 [s1 + 0xe8] = a0\n  8297: ra = 0x13e\n  8301: ecalli 5 // 'hash_keccak_256'\n  8303: t0 = 0x140\n  8307: jump @1062\n      : @347 [@dyn 159] (gas: 1)\n  8310: t0 = 320, jump @1062\n      : @348 [@dyn 160] (gas: 7)\n  8316: a1 = u64 [s1 + 0x110]\n  8320: u64 [a1] = a3\n  8322: u64 [a1 + 0x8] = a2\n  8325: u64 [a1 + 0x10] = a4\n  8328: u64 [a1 + 0x18] = a0\n  8331: a0 = s1 + 0x1ee0\n  8335: ra = 322, jump @6\n      : @349 [@dyn 161] (gas: 32)\n  8341: a0 = s1 + 0x1898\n  8345: t1 = u64 [a0 + 0x660]\n  8349: a1 = u64 [s1 + 0xe0]\n  8353: a3 = a1 >> 0x38\n  8356: a4 = u64 [s1 + 0xd8]\n  8360: a2 = a4 << 0x8\n  8363: t0 = a2 | a3\n  8366: a5 = u64 [s1 + 0x100]\n  8370: a2 = a5 >> 0x38\n  8373: a3 = u64 [s1 + 0xf0]\n  8377: a3 = a3 << 0x8\n  8380: a2 = a2 | a3\n  8383: a3 = u64 [a0 + 0x658]\n  8387: a4 = a4 >> 0x38\n  8390: a5 = a5 << 0x8\n  8393: a4 = a4 | a5\n  8396: a5 = u8 [a0 + 0x648]\n  8400: a3 = a3 >> 0x28\n  8403: a3 = a3 << 0x28\n  8406: a3 = a3 | a4\n  8409: a4 = a1 << 0x8\n  8412: a4 = a4 | a5\n  8415: a0 = t1 | a2\n  8418: a2 = s1 + 0x209c\n  8422: u64 [a2 + 0x72c] = t0\n  8426: a1 = a2 + 0x704\n  8430: u64 [a1 + 0x38] = a0\n  8433: u64 [a1 + 0x20] = a4\n  8436: u64 [a1 + 0x30] = a3\n  8439: a1 = s1 + 0x27c0\n  8443: a0 = u64 [s1 + 0x110]\n  8447: ra = 324, jump @10\n      : @350 [@dyn 162] (gas: 6)\n  8453: a0 = u64 [s1 + 0x108]\n  8457: ra = 0x146\n  8461: ecalli 3 // 'caller'\n  8463: a2 = u64 [s1 + 0x118]\n  8467: t0 = 0x148\n  8471: jump @1050\n      : @351 [@dyn 163] (gas: 2)\n  8474: a2 = u64 [s1 + 0x118]\n  8478: t0 = 328, jump @1050\n      : @352 [@dyn 164] (gas: 8)\n  8484: u64 [a2 + 1600] = 0\n  8488: a4 = a2 + 0x600\n  8492: u64 [a4 + 0x38] = a1\n  8495: u64 [a4 + 0x30] = a0\n  8498: a1 = s1 + 0x1ec0\n  8502: u64 [a4 + 0x28] = a3\n  8505: a0 = 0\n  8507: ra = 330, jump @4\n      : @353 [@dyn 165] (gas: 3)\n  8513: t0 = 0x14c\n  8517: a1 = s1 + 0x1898\n  8521: fallthrough\n      : @354 [@dyn 166] (gas: 8)\n  8522: u64 [a1 + 1568] = 0\n  8526: u64 [a1 + 1560] = 0\n  8530: u64 [a1 + 1544] = 0x1\n  8535: a2 = a1\n  8537: a0 = 0x20\n  8540: a1 = s1 + 0x1ea0\n  8544: u64 [a2 + 1552] = 0\n  8548: ra = 334, jump @4\n      : @355 [@dyn 167] (gas: 3)\n  8554: a1 = u64 [s1 + 0xf8]\n  8558: a0 = i32 [a1]\n  8560: jump @357 if a0 >u 63\n      : @356 (gas: 3)\n  8564: u32 [a1 + 0] = 0x40\n  8567: t0 = 0x150\n  8571: jump @1080\n      : @357 (gas: 1)\n  8574: t0 = 336, jump @1080\n      : @358 [@dyn 168] (gas: 4)\n  8580: ra = 0x152\n  8584: ecalli 5 // 'hash_keccak_256'\n  8586: t0 = 0x154\n  8590: jump @1056\n      : @359 [@dyn 169] (gas: 1)\n  8593: t0 = 340, jump @1056\n      : @360 [@dyn 170] (gas: 8)\n  8599: a5 = a4 + 0x704\n  8603: u64 [a5 + 0x58] = a3\n  8606: u64 [a5 + 0x50] = a2\n  8609: u64 [a5 + 0x48] = a1\n  8612: u64 [a5 + 0x40] = a0\n  8615: a0 = s1 + 0x1e80\n  8619: a1 = s1 + 0x27e0\n  8623: ra = 342, jump @6\n      : @361 [@dyn 171] (gas: 3)\n  8629: t0 = 0x158\n  8633: a1 = s1 + 0x1898\n  8637: fallthrough\n      : @362 [@dyn 172] (gas: 7)\n  8638: a0 = u64 [a1 + 0x5f0]\n  8642: u64 [s1 + 0x118] = a0\n  8646: a0 = u64 [a1 + 0x5e8]\n  8650: u64 [s1 + 0x110] = a0\n  8654: a0 = s1 + 0x1e60\n  8658: a1 = 0x40\n  8661: ra = 346, jump @2\n      : @363 [@dyn 173] (gas: 7)\n  8667: a3 = s1 + 0x1898\n  8671: a5 = a3 + 0x500\n  8675: a4 = u64 [a5 + 0xe0]\n  8679: a1 = u64 [a5 + 0xd8]\n  8683: a2 = u64 [a5 + 0xd0]\n  8687: a0 = u64 [a5 + 0xc8]\n  8691: t0 = 348, jump @1057\n      : @364 [@dyn 174] (gas: 1)\n  8697: jump @366 if a1 == 0\n      : @365 (gas: 1)\n  8700: jump @836\n      : @366 (gas: 1)\n  8703: t0 = 350, jump @1084\n      : @367 [@dyn 175] (gas: 8)\n  8709: u64 [a3 + 1472] = 0\n  8713: u64 [a3 + 1464] = 0\n  8717: u64 [a3 + 0x5a8] = a1\n  8721: a1 = s1 + 0x1e40\n  8725: u64 [a3 + 1456] = 0\n  8729: u64 [s1 + 0x118] = a0\n  8733: ra = 0x35e\n  8737: jump @4\n      : @368 (gas: 3)\n  8740: a0 = u64 [s1 + 0x118]\n  8744: a0 = i32 [a0]\n  8746: jump @370 if a0 >u 3\n      : @369 (gas: 1)\n  8750: jump @878\n      : @370 (gas: 21)\n  8753: u64 [a2 + 1020] = 0\n  8757: u64 [a2 + 1012] = 0\n  8761: u64 [a2 + 1004] = 0\n  8765: u64 [a2 + 996] = 0\n  8769: a0 = s1 + 0x2000\n  8773: i32 a0 = a0 + 0x480\n  8777: ecalli 9 // 'value_transferred'\n  8779: a1 = s1 + 0x209c\n  8783: a0 = u64 [a1 + 0x3ec]\n  8787: u64 [s1 + 0x110] = a0\n  8791: a0 = u64 [a1 + 0x3e4]\n  8795: u64 [s1 + 0x108] = a0\n  8799: a0 = 0x30020\n  8804: u64 [s1 + 0x100] = a0\n  8808: i32 a0 = a0 + 0\n  8810: u64 [s1 + 0xf0] = a0\n  8814: ra = 0x160\n  8818: ecalli 3 // 'caller'\n  8820: a2 = u64 [s1 + 0x100]\n  8824: t0 = 0x162\n  8828: jump @1051\n      : @371 [@dyn 176] (gas: 2)\n  8831: a2 = u64 [s1 + 0x100]\n  8835: t0 = 354, jump @1051\n      : @372 [@dyn 177] (gas: 9)\n  8841: u64 [a2 + 1536] = 0\n  8845: a4 = a2 + 0x500\n  8849: u64 [a4 + 0xf8] = a1\n  8853: u64 [a4 + 0xf0] = a0\n  8857: a1 = s1 + 0x7ff\n  8861: a1 = a1 + 0x681\n  8865: u64 [a4 + 0xe8] = a3\n  8869: a0 = 0\n  8871: ra = 356, jump @4\n      : @373 [@dyn 178] (gas: 11)\n  8877: a0 = s1 + 0x7ff\n  8881: a0 = a0 + 0x99\n  8885: u64 [a0 + 1504] = 0\n  8889: u64 [a0 + 1496] = 0\n  8893: u64 [a0 + 1488] = 0\n  8897: a3 = a0\n  8899: a0 = 0x20\n  8902: a1 = s1 + 0x7ff\n  8906: a1 = a1 + 0x661\n  8910: u64 [a3 + 1480] = 0x1\n  8915: ra = 358, jump @4\n      : @374 [@dyn 179] (gas: 1)\n  8921: t0 = 360, jump @1064\n      : @375 [@dyn 180] (gas: 3)\n  8927: a1 = 0x20014\n  8932: a0 = i32 [0x20014]\n  8937: jump @377 if a0 >u 63\n      : @376 (gas: 2)\n  8941: u32 [0x20014] = 0x40\n  8947: fallthrough\n      : @377 (gas: 15)\n  8948: a0 = sp + 0xffffffffffffffe0\n  8951: a2 = a0 & 0xffffffffffffffe0\n  8954: u64 [s1 + 0xe0] = a2\n  8958: sp = a2\n  8960: a0 = 0x20020\n  8965: i32 a0 = a0 + 0\n  8967: i32 a2 = a2 + 0\n  8969: u64 [s1 + 0xf8] = a1\n  8973: a1 = 0x40\n  8976: u64 [s1 + 0xe8] = a0\n  8980: ra = 0x16a\n  8984: ecalli 5 // 'hash_keccak_256'\n  8986: a3 = u64 [s1 + 0xe0]\n  8990: t0 = 0x16c\n  8994: jump @1066\n      : @378 [@dyn 181] (gas: 2)\n  8997: a3 = u64 [s1 + 0xe0]\n  9001: t0 = 364, jump @1066\n      : @379 [@dyn 182] (gas: 3)\n  9007: a0 = s1 + 0x7ff\n  9011: a0 = a0 + 0x641\n  9015: ra = 366, jump @6\n      : @380 [@dyn 183] (gas: 24)\n  9021: a3 = s1 + 0x7ff\n  9025: a3 = a3 + 0x99\n  9029: a4 = a3 + 0x500\n  9033: a0 = u64 [a4 + 0xa8]\n  9037: a1 = u64 [a4 + 0xb0]\n  9041: a0 = a0 & 0xffffffffffffffff\n  9044: a1 = a1 & 0xffffffffffffffff\n  9047: u64 [a3 + 1376] = 0\n  9051: u64 [a3 + 1368] = 0\n  9055: a2 = u64 [s1 + 0x110]\n  9059: u64 [a4 + 0x50] = a2\n  9062: a2 = u64 [s1 + 0x108]\n  9066: u64 [a4 + 0x48] = a2\n  9069: u64 [a3 + 1408] = 0\n  9073: u64 [a4 + 0x70] = a1\n  9076: u64 [a4 + 0x68] = a0\n  9079: a0 = s1 + 0x7ff\n  9083: a0 = a0 + 0x621\n  9087: a1 = s1 + 0x7ff\n  9091: a1 = a1 + 0x601\n  9095: a2 = s1 + 0x7ff\n  9099: a2 = a2 + 0x5e1\n  9103: u64 [a3 + 1400] = 0\n  9107: ra = 368, jump @1024\n      : @381 [@dyn 184] (gas: 15)\n  9113: a0 = s1 + 0x7ff\n  9117: a0 = a0 + 0x99\n  9121: a2 = a0 + 0x500\n  9125: a1 = u64 [a2 + 0x88]\n  9129: u64 [s1 + 0xe0] = a1\n  9133: a1 = u64 [a2 + 0x90]\n  9137: u64 [s1 + 0xd8] = a1\n  9141: a1 = u64 [a2 + 0xa0]\n  9145: u64 [s1 + 0xd0] = a1\n  9149: a1 = u64 [a2 + 0x98]\n  9153: u64 [s1 + 0xc8] = a1\n  9157: a0 = s1 + 0x7ff\n  9161: a0 = a0 + 0x5c1\n  9165: a1 = u64 [s1 + 0x118]\n  9169: ra = 370, jump @6\n      : @382 [@dyn 185] (gas: 19)\n  9175: a1 = s1 + 0x7ff\n  9179: a1 = a1 + 0x99\n  9183: a0 = u64 [a1 + 0x538]\n  9187: a1 = u64 [a1 + 0x540]\n  9191: a2 = u64 [s1 + 0xc8]\n  9195: a0 = a0 | a2\n  9198: a2 = u64 [s1 + 0xd0]\n  9202: a1 = a1 | a2\n  9205: a2 = s1 + 0x209c\n  9209: a3 = u64 [s1 + 0xd8]\n  9213: a4 = a2 + 0x404\n  9217: u64 [a4 + 0x8] = a3\n  9220: a3 = u64 [s1 + 0xe0]\n  9224: u64 [a4] = a3\n  9226: u64 [a4 + 0x18] = a1\n  9229: u64 [a4 + 0x10] = a0\n  9232: a1 = s1 + 0x24a0\n  9236: a0 = u64 [s1 + 0x118]\n  9240: ra = 372, jump @10\n      : @383 [@dyn 186] (gas: 6)\n  9246: a0 = u64 [s1 + 0xf0]\n  9250: ra = 0x176\n  9254: ecalli 3 // 'caller'\n  9256: a2 = u64 [s1 + 0x100]\n  9260: t0 = 0x178\n  9264: jump @1051\n      : @384 [@dyn 187] (gas: 2)\n  9267: a2 = u64 [s1 + 0x100]\n  9271: t0 = 376, jump @1051\n      : @385 [@dyn 188] (gas: 9)\n  9277: u64 [a2 + 1312] = 0\n  9281: a4 = a2 + 0x500\n  9285: u64 [a4 + 0x18] = a1\n  9288: u64 [a4 + 0x10] = a0\n  9291: a1 = s1 + 0x7ff\n  9295: a1 = a1 + 0x5a1\n  9299: u64 [a4 + 0x8] = a3\n  9302: a0 = 0\n  9304: ra = 378, jump @4\n      : @386 [@dyn 189] (gas: 11)\n  9310: a1 = s1 + 0x7ff\n  9314: a1 = a1 + 0x99\n  9318: u64 [a1 + 1280] = 0\n  9322: u64 [a1 + 1272] = 0\n  9326: u64 [a1 + 1256] = 0x1\n  9331: a2 = a1\n  9333: a0 = 0x20\n  9336: a1 = s1 + 0x7ff\n  9340: a1 = a1 + 0x581\n  9344: u64 [a2 + 1264] = 0\n  9348: ra = 380, jump @4\n      : @387 [@dyn 190] (gas: 7)\n  9354: a1 = u64 [s1 + 0xf8]\n  9358: a0 = sp + 0xffffffffffffffe0\n  9361: a0 = a0 & 0xffffffffffffffe0\n  9364: u64 [s1 + 0x100] = a0\n  9368: sp = a0\n  9370: a0 = i32 [a1]\n  9372: jump @389 if a0 >u 63\n      : @388 (gas: 3)\n  9376: u32 [a1 + 0] = 0x40\n  9379: t0 = 0x17e\n  9383: jump @1080\n      : @389 (gas: 1)\n  9386: t0 = 382, jump @1080\n      : @390 [@dyn 191] (gas: 4)\n  9392: ra = 0x180\n  9396: ecalli 5 // 'hash_keccak_256'\n  9398: t0 = 0x182\n  9402: jump @1078\n      : @391 [@dyn 192] (gas: 1)\n  9405: t0 = 386, jump @1078\n      : @392 [@dyn 193] (gas: 13)\n  9411: u64 [s1 + 0xf8] = a4\n  9415: a2 = reverse a2\n  9417: u64 [s1 + 0xf0] = a2\n  9421: a3 = reverse a3\n  9423: u64 [s1 + 0xe8] = a3\n  9427: a1 = u64 [s1 + 0x100]\n  9431: u64 [a1 + 0x18] = a3\n  9434: u64 [a1 + 0x10] = a2\n  9437: u64 [a1 + 0x8] = a4\n  9440: u64 [a1] = a0\n  9442: a0 = s1 + 0x7ff\n  9446: a0 = a0 + 0x561\n  9450: ra = 388, jump @6\n      : @393 [@dyn 194] (gas: 22)\n  9456: a3 = s1 + 0x7ff\n  9460: a3 = a3 + 0x99\n  9464: a4 = a3 + 0x400\n  9468: a0 = u64 [a4 + 0xd8]\n  9472: a1 = u64 [a4 + 0xe0]\n  9476: u64 [a3 + 1152] = 0\n  9480: u64 [a3 + 1144] = 0\n  9484: a2 = u64 [s1 + 0x110]\n  9488: u64 [a4 + 0x70] = a2\n  9491: a2 = u64 [s1 + 0x108]\n  9495: u64 [a4 + 0x68] = a2\n  9498: u64 [a3 + 1184] = 0\n  9502: u64 [a4 + 0x90] = a1\n  9506: u64 [a4 + 0x88] = a0\n  9510: a0 = s1 + 0x7ff\n  9514: a0 = a0 + 0x541\n  9518: a1 = s1 + 0x7ff\n  9522: a1 = a1 + 0x521\n  9526: a2 = s1 + 0x7ff\n  9530: a2 = a2 + 0x501\n  9534: u64 [a3 + 1176] = 0\n  9538: ra = 390, jump @1024\n      : @394 [@dyn 195] (gas: 26)\n  9544: a4 = s1 + 0x7ff\n  9548: a4 = a4 + 0x99\n  9552: a5 = a4 + 0x400\n  9556: a0 = u64 [a5 + 0xa8]\n  9560: a1 = u64 [a5 + 0xb0]\n  9564: a2 = u64 [a5 + 0xb8]\n  9568: a3 = u64 [a5 + 0xc0]\n  9572: u64 [a5 + 0x40] = a3\n  9575: u64 [a5 + 0x38] = a2\n  9578: u64 [a5 + 0x30] = a1\n  9581: u64 [a5 + 0x28] = a0\n  9584: a0 = u64 [s1 + 0xe8]\n  9588: u64 [a5 + 0x60] = a0\n  9591: a0 = u64 [s1 + 0xf0]\n  9595: u64 [a5 + 0x58] = a0\n  9598: a0 = u64 [s1 + 0xf8]\n  9602: u64 [a5 + 0x50] = a0\n  9605: a0 = s1 + 0x7ff\n  9609: a0 = a0 + 0x4e1\n  9613: a1 = s1 + 0x7ff\n  9617: a1 = a1 + 0x4c1\n  9621: a2 = u64 [s1 + 0x118]\n  9625: u64 [a5 + 0x48] = a2\n  9628: ra = 0x188\n  9632: t0 = 0x40e\n  9636: jump @1097\n      : @395 [@dyn 196] (gas: 4)\n  9639: a0 = s1 + 0x7ff\n  9643: a0 = a0 + 0x4a1\n  9647: a1 = 0x40\n  9650: ra = 394, jump @2\n      : @396 [@dyn 197] (gas: 8)\n  9656: a3 = s1 + 0x7ff\n  9660: a3 = a3 + 0x99\n  9664: a5 = a3 + 0x400\n  9668: a0 = u64 [a5 + 0x20]\n  9671: a1 = u64 [a5 + 0x18]\n  9674: a2 = u64 [a5 + 0x10]\n  9677: a4 = u64 [a5 + 0x8]\n  9680: t0 = 396, jump @1063\n      : @397 [@dyn 198] (gas: 1)\n  9686: jump @399 if a0 == 0\n      : @398 (gas: 1)\n  9689: jump @836\n      : @399 (gas: 12)\n  9692: u64 [a3 + 1024] = 0\n  9696: u64 [a3 + 1016] = 0\n  9700: a0 = u64 [s1 + 0x108]\n  9704: u64 [a3 + 0x3e8] = a0\n  9708: a1 = s1 + 0x7ff\n  9712: a1 = a1 + 0x481\n  9716: a0 = u64 [s1 + 0x110]\n  9720: u64 [a3 + 0x3f0] = a0\n  9724: a0 = a4\n  9726: u64 [s1 + 0x118] = a4\n  9730: ra = 0x35e\n  9734: jump @4\n      : @400 (gas: 10)\n  9737: u64 [a2 + 892] = 0\n  9741: u64 [a2 + 884] = 0\n  9745: u64 [a2 + 876] = 0\n  9749: u64 [a2 + 868] = 0\n  9753: a0 = s1 + 0x2000\n  9757: i32 a0 = a0 + 0x400\n  9761: ra = 0x18e\n  9765: ecalli 9 // 'value_transferred'\n  9767: t0 = 0x190\n  9771: jump @1071\n      : @401 [@dyn 199] (gas: 1)\n  9774: t0 = 400, jump @1071\n      : @402 [@dyn 200] (gas: 1)\n  9780: t0 = 402, jump @1070\n      : @403 [@dyn 201] (gas: 1)\n  9786: jump @405 if a0 == 0\n      : @404 (gas: 1)\n  9789: jump @879\n      : @405 (gas: 3)\n  9792: a0 = u64 [s1 + 0x118]\n  9796: a0 = i32 [a0]\n  9798: jump @407 if a0 >u 3\n      : @406 (gas: 1)\n  9802: jump @880\n      : @407 (gas: 4)\n  9805: a0 = s1 + 0x7ff\n  9809: a0 = a0 + 0x3a1\n  9813: a1 = 0x40\n  9816: ra = 404, jump @2\n      : @408 [@dyn 202] (gas: 1)\n  9822: t0 = 406, jump @1082\n      : @409 [@dyn 203] (gas: 5)\n  9828: a4 = u64 [a5 + 0x20]\n  9831: a1 = u64 [a5 + 0x18]\n  9834: a2 = u64 [a5 + 0x10]\n  9837: a0 = u64 [a5 + 0x8]\n  9840: t0 = 408, jump @1057\n      : @410 [@dyn 204] (gas: 1)\n  9846: jump @412 if a1 == 0\n      : @411 (gas: 1)\n  9849: jump @836\n      : @412 (gas: 10)\n  9852: a1 = u64 [0x20000]\n  9857: u64 [a3 + 768] = 0\n  9861: u64 [a3 + 760] = 0\n  9865: u64 [a3 + 0x2e8] = a1\n  9869: a1 = s1 + 0x7ff\n  9873: a1 = a1 + 0x381\n  9877: u64 [a3 + 752] = 0\n  9881: u64 [s1 + 0x118] = a0\n  9885: ra = 0x35e\n  9889: jump @4\n      : @413 (gas: 1)\n  9892: jump @415 if a0 == 2007039490\n      : @414 (gas: 1)\n  9899: jump @881\n      : @415 (gas: 10)\n  9902: u64 [a2 + 1148] = 0\n  9906: u64 [a2 + 1140] = 0\n  9910: u64 [a2 + 1132] = 0\n  9914: u64 [a2 + 1124] = 0\n  9918: a0 = s1 + 0x2000\n  9922: i32 a0 = a0 + 0x500\n  9926: ra = 0x19a\n  9930: ecalli 9 // 'value_transferred'\n  9932: t0 = 0x19c\n  9936: jump @1073\n      : @416 [@dyn 205] (gas: 1)\n  9939: t0 = 412, jump @1073\n      : @417 [@dyn 206] (gas: 1)\n  9945: t0 = 414, jump @1070\n      : @418 [@dyn 207] (gas: 1)\n  9951: jump @420 if a0 == 0\n      : @419 (gas: 1)\n  9954: jump @887\n      : @420 (gas: 3)\n  9957: a0 = u64 [s1 + 0x118]\n  9961: a0 = i32 [a0]\n  9963: jump @422 if a0 >u 3\n      : @421 (gas: 1)\n  9967: jump @888\n      : @422 (gas: 9)\n  9970: a0 = 0x30020\n  9975: u64 [s1 + 0x30] = a0\n  9978: i32 a0 = a0 + 0\n  9980: u64 [s1 + 0x18] = a0\n  9983: ra = 0x1a0\n  9987: ecalli 3 // 'caller'\n  9989: a2 = u64 [s1 + 0x30]\n  9992: t0 = 0x1a2\n  9996: jump @1052\n      : @423 [@dyn 208] (gas: 2)\n  9999: a2 = u64 [s1 + 0x30]\n 10002: t0 = 418, jump @1052\n      : @424 [@dyn 209] (gas: 8)\n 10008: u64 [a2 + 1536] = 0\n 10012: a4 = a2 + 0x500\n 10016: u64 [a4 + 0xf8] = a1\n 10020: u64 [a4 + 0xf0] = a0\n 10024: a1 = s1 + 0x1680\n 10028: u64 [a4 + 0xe8] = a3\n 10032: a0 = 0\n 10034: ra = 420, jump @4\n      : @425 [@dyn 210] (gas: 3)\n 10040: t0 = 0x1a6\n 10044: a1 = s1 + 0x1098\n 10048: fallthrough\n      : @426 [@dyn 211] (gas: 8)\n 10049: u64 [a1 + 1504] = 0\n 10053: u64 [a1 + 1496] = 0\n 10057: u64 [a1 + 1480] = 0x1\n 10062: a2 = a1\n 10064: a0 = 0x20\n 10067: a1 = s1 + 0x1660\n 10071: u64 [a2 + 1488] = 0\n 10075: ra = 424, jump @4\n      : @427 [@dyn 212] (gas: 7)\n 10081: a0 = sp + 0xffffffffffffffe0\n 10084: a0 = a0 & 0xffffffffffffffe0\n 10087: u64 [s1 + 0xb8] = a0\n 10091: sp = a0\n 10093: a2 = 0x20014\n 10098: a0 = i32 [0x20014]\n 10103: jump @429 if a0 >u 63\n      : @428 (gas: 2)\n 10107: u32 [0x20014] = 0x40\n 10113: fallthrough\n      : @429 (gas: 55)\n 10114: u64 [s1 + 0x28] = a2\n 10117: a1 = 0xffffffff00000000\n 10127: u64 [s1 + 0x38] = a1\n 10130: a0 = 0xffffffff\n 10140: u64 [s1 + 0xa8] = a0\n 10144: a0 = sp + 0xffffffffffffffe0\n 10147: a2 = a0 & 0xffffffffffffffe0\n 10150: u64 [s1 + 0xf8] = a2\n 10154: sp = a2\n 10156: a0 = 0x20020\n 10161: i32 a0 = a0 + 0\n 10163: i32 a2 = a2 + 0\n 10165: a1 = 0x40\n 10168: u64 [s1 + 0x20] = a0\n 10171: ecalli 5 // 'hash_keccak_256'\n 10173: u64 [s1 + 216] = 0\n 10177: u64 [s1 + 208] = 0\n 10181: u64 [s1 + 200] = 0\n 10185: u64 [s1 + 192] = 0\n 10189: u64 [s1 + 160] = 0\n 10193: u64 [s1 + 152] = 0\n 10197: u64 [s1 + 128] = 0\n 10201: u64 [s1 + 120] = 0\n 10204: u64 [s1 + 280] = 0\n 10208: u64 [s1 + 272] = 0\n 10212: u64 [s1 + 256] = 0\n 10216: u64 [s1 + 264] = 0\n 10220: a3 = u64 [s1 + 0xf8]\n 10224: a0 = u64 [a3 + 0x10]\n 10227: a1 = u64 [a3 + 0x18]\n 10230: a2 = u64 [a3 + 0x8]\n 10233: a3 = u64 [a3]\n 10235: a0 = reverse a0\n 10237: a1 = reverse a1\n 10239: a4 = a1 + 0x4\n 10242: a1 = a4 <u a1\n 10245: a5 = a0 + a1\n 10248: a0 = a5 <u a0\n 10251: a0 = a1 if a1 == 0\n 10254: a1 = reverse a3\n 10256: a2 = reverse a2\n 10258: a3 = a2 + a0\n 10261: a0 = a3 <u a2\n 10264: a0 = a0 + a1\n 10267: a1 = u64 [s1 + 0xb8]\n 10271: u64 [s1 + 0xf8] = a4\n 10275: u64 [a1] = a4\n 10277: u64 [s1 + 0xf0] = a5\n 10281: u64 [a1 + 0x8] = a5\n 10284: u64 [s1 + 0xe8] = a3\n 10288: u64 [a1 + 0x10] = a3\n 10291: u64 [s1 + 0xe0] = a0\n 10295: u64 [a1 + 0x18] = a0\n 10298: a0 = s1 + 0x1640\n 10302: ra = 426, jump @6\n      : @430 [@dyn 213] (gas: 22)\n 10308: a5 = s1 + 0x1098\n 10312: a3 = a5 + 0x500\n 10316: a0 = u64 [a3 + 0xb0]\n 10320: a1 = u64 [a3 + 0xc0]\n 10324: a2 = u64 [a3 + 0xa8]\n 10328: t2 = u64 [a5 + 0x5b8]\n 10332: ra = u64 [s1 + 0x110]\n 10336: t1 = ra ^ a0\n 10339: a0 = ra <u a0\n 10342: t0 = u64 [s1 + 0x118]\n 10346: a2 = t0 <u a2\n 10349: a2 = a0 if t1 != 0\n 10352: t1 = u64 [s1 + 0x100]\n 10356: a0 = t1 <u t2\n 10359: a4 = u64 [s1 + 0x108]\n 10363: a3 = a4 ^ a1\n 10366: a1 = a4 <u a1\n 10369: a1 = a0 if a3 == 0\n 10372: a0 = t1 ^ t2\n 10375: a0 = a0 | a3\n 10378: a1 = a2 if a0 == 0\n 10381: jump @457 if a1 == 0\n      : @431 (gas: 24)\n 10385: a0 = sp + 0xffffffffffffffe0\n 10388: a0 = a0 & 0xffffffffffffffe0\n 10391: u64 [s1 + 0xb0] = a0\n 10395: sp = a0\n 10397: u64 [a5 + 0x320] = a4\n 10401: u64 [a5 + 0x318] = t1\n 10405: u64 [a5 + 0x310] = ra\n 10409: u64 [a5 + 0x308] = t0\n 10413: a0 = u64 [s1 + 0xe0]\n 10417: u64 [a5 + 0x340] = a0\n 10421: a0 = u64 [s1 + 0xe8]\n 10425: u64 [a5 + 0x338] = a0\n 10429: a0 = u64 [s1 + 0xf0]\n 10433: u64 [a5 + 0x330] = a0\n 10437: a0 = s1 + 0x13e0\n 10441: a1 = s1 + 0x13c0\n 10445: a2 = s1 + 0x13a0\n 10449: a3 = u64 [s1 + 0xf8]\n 10453: u64 [a5 + 0x328] = a3\n 10457: u64 [s1 + 0x118] = t0\n 10461: u64 [s1 + 0x110] = ra\n 10465: u64 [s1 + 0x108] = a4\n 10469: u64 [s1 + 0x100] = t1\n 10473: ra = 428, jump @981\n      : @432 [@dyn 214] (gas: 16)\n 10479: a0 = s1 + 0x1098\n 10483: a0 = u64 [a0 + 0x358]\n 10487: a1 = s1 + 0x1098\n 10491: a1 = u64 [a1 + 0x360]\n 10495: a2 = s1 + 0x1098\n 10499: a2 = u64 [a2 + 0x348]\n 10503: a3 = s1 + 0x1098\n 10507: a3 = u64 [a3 + 0x350]\n 10511: a4 = u64 [s1 + 0xb0]\n 10515: u64 [a4 + 0x10] = a0\n 10518: u64 [a4 + 0x18] = a1\n 10521: u64 [a4] = a2\n 10523: u64 [a4 + 0x8] = a3\n 10526: a1 = a4\n 10528: a0 = s1 + 0x1380\n 10532: ra = 430, jump @6\n      : @433 [@dyn 215] (gas: 13)\n 10538: a0 = s1 + 0x1098\n 10542: a0 = u64 [a0 + 0x2e8]\n 10546: a1 = u64 [s1 + 0xa8]\n 10550: a0 = a0 & a1\n 10553: u64 [s1 + 0x90] = a0\n 10557: a0 = s1 + 0x209c\n 10561: u64 [a0 + 1180] = 0\n 10565: u64 [a0 + 1172] = 0\n 10569: u64 [a0 + 1164] = 0\n 10573: u64 [a0 + 1156] = 0\n 10577: a0 = s1 + 0x1360\n 10581: a1 = s1 + 0x2520\n 10585: ra = 432, jump @6\n      : @434 [@dyn 216] (gas: 38)\n 10591: a0 = s1 + 0x1098\n 10595: a0 = u64 [a0 + 0x2c8]\n 10599: a1 = u64 [s1 + 0xa8]\n 10603: a0 = a0 & a1\n 10606: u64 [s1 + 0x88] = a0\n 10610: a0 = sp + 0xffffffffffffffe0\n 10613: a0 = a0 & 0xffffffffffffffe0\n 10616: u64 [s1 + 0xb0] = a0\n 10620: sp = a0\n 10622: a0 = s1 + 0x1098\n 10626: a2 = s1 + 0x100\n 10630: a1 = u64 [a2 + 0x8]\n 10633: u64 [a0 + 0x260] = a1\n 10637: a0 = s1 + 0x1098\n 10641: a1 = u64 [a2]\n 10643: u64 [a0 + 0x258] = a1\n 10647: a0 = s1 + 0x1098\n 10651: a1 = u64 [a2 + 0x10]\n 10654: u64 [a0 + 0x250] = a1\n 10658: a0 = s1 + 0x1098\n 10662: a1 = u64 [a2 + 0x18]\n 10665: u64 [a0 + 0x248] = a1\n 10669: a0 = s1 + 0x1098\n 10673: a1 = u64 [s1 + 0xe0]\n 10677: u64 [a0 + 0x280] = a1\n 10681: a0 = s1 + 0x1098\n 10685: a1 = u64 [s1 + 0xe8]\n 10689: u64 [a0 + 0x278] = a1\n 10693: a0 = s1 + 0x1098\n 10697: a1 = u64 [s1 + 0xf0]\n 10701: u64 [a0 + 0x270] = a1\n 10705: a0 = s1 + 0x1320\n 10709: a1 = s1 + 0x1300\n 10713: a2 = s1 + 0x12e0\n 10717: a3 = s1 + 0x1098\n 10721: a4 = u64 [s1 + 0xf8]\n 10725: u64 [a3 + 0x268] = a4\n 10729: ra = 434, jump @981\n      : @435 [@dyn 217] (gas: 14)\n 10735: a1 = u64 [s1 + 0xb0]\n 10739: t1 = s1 + 0x1098\n 10743: t0 = u64 [t1 + 0x298]\n 10747: a2 = t1 + 0x200\n 10751: a0 = u64 [a2 + 0xa0]\n 10755: a4 = u64 [a2 + 0x88]\n 10759: a3 = u64 [a2 + 0x90]\n 10763: u64 [a1 + 0x10] = t0\n 10766: u64 [a1 + 0x18] = a0\n 10769: u64 [a1] = a4\n 10771: u64 [a1 + 0x8] = a3\n 10774: a5 = u64 [s1 + 0x90]\n 10778: a2 = u64 [s1 + 0x88]\n 10782: jump @448 if a2 >=u a5\n      : @436 (gas: 24)\n 10786: u64 [s1 + 0x40] = a4\n 10789: u64 [s1 + 0x48] = a3\n 10792: u64 [s1 + 0x50] = t0\n 10795: u64 [s1 + 0x58] = a0\n 10798: t0 = u64 [s1 + 0xd8]\n 10802: a1 = t0 + 0x1\n 10805: a0 = a1 <u 0x1\n 10808: t2 = u64 [s1 + 0xd0]\n 10812: a4 = t2 + a0\n 10815: a0 = a1 | a4\n 10818: a0 = a0 <u 0x1\n 10821: a5 = u64 [s1 + 0xc8]\n 10825: a3 = a5 + a0\n 10828: a0 = a3 <u a5\n 10831: a2 = u64 [s1 + 0xc0]\n 10835: a0 = a0 + a2\n 10838: u64 [s1 + 0x70] = a4\n 10841: u64 [s1 + 0x60] = a0\n 10844: a0 = a0 | a4\n 10847: u64 [s1 + 0x88] = a1\n 10851: u64 [s1 + 0x68] = a3\n 10854: a1 = a1 | a3\n 10857: a0 = a0 | a1\n 10860: jump @438 if a0 != 0\n      : @437 (gas: 1)\n 10863: jump @840\n      : @438 (gas: 21)\n 10866: a0 = sp + 0xffffffffffffffe0\n 10869: a0 = a0 & 0xffffffffffffffe0\n 10872: u64 [s1 + 0x90] = a0\n 10876: sp = a0\n 10878: a3 = t1 + 0x100\n 10882: u64 [a3 + 0x60] = a2\n 10885: u64 [a3 + 0x58] = a5\n 10888: u64 [t1 + 0x150] = t2\n 10892: u64 [t1 + 0x148] = t0\n 10896: a0 = u64 [s1 + 0xe0]\n 10900: u64 [a3 + 0x80] = a0\n 10904: a0 = u64 [s1 + 0xe8]\n 10908: u64 [a3 + 0x78] = a0\n 10911: a0 = u64 [s1 + 0xf0]\n 10915: u64 [a3 + 0x70] = a0\n 10918: a0 = s1 + 0x1220\n 10922: a1 = s1 + 0x1200\n 10926: a2 = s1 + 0x11e0\n 10930: a4 = u64 [s1 + 0xf8]\n 10934: u64 [a3 + 0x68] = a4\n 10937: ra = 436, jump @981\n      : @439 [@dyn 218] (gas: 19)\n 10943: a2 = s1 + 0x1098\n 10947: t0 = u64 [a2 + 0x1b8]\n 10951: t1 = u64 [a2 + 0x1a8]\n 10955: ra = u64 [a2 + 0x1c0]\n 10959: a1 = a2 + 0x100\n 10963: a0 = u64 [a1 + 0xb0]\n 10967: t2 = u64 [a2 + 0x198]\n 10971: a3 = u64 [a1 + 0xa0]\n 10975: a5 = u64 [a1 + 0x88]\n 10979: a4 = u64 [a1 + 0x90]\n 10983: a1 = u64 [s1 + 0x90]\n 10987: u64 [a1 + 0x10] = t2\n 10990: u64 [a1 + 0x18] = a3\n 10993: u64 [a1] = a5\n 10995: ra = a0 | ra\n 10998: a0 = t1 | t0\n 11001: a0 = a0 | ra\n 11004: u64 [a1 + 0x8] = a4\n 11007: jump @441 if a0 == 0\n      : @440 (gas: 1)\n 11010: jump @843\n      : @441 (gas: 12)\n 11013: a0 = u64 [s1 + 0x40]\n 11016: a0 = a0 ^ a5\n 11019: a1 = u64 [s1 + 0x50]\n 11022: a1 = t2 ^ a1\n 11025: a0 = a0 | a1\n 11028: a1 = u64 [s1 + 0x48]\n 11031: a1 = a1 ^ a4\n 11034: a2 = u64 [s1 + 0x58]\n 11037: a2 = a2 ^ a3\n 11040: a1 = a1 | a2\n 11043: a0 = a0 | a1\n 11046: jump @447 if a0 == 0\n      : @442 (gas: 7)\n 11050: a0 = s1 + 0x1180\n 11054: a1 = u64 [s1 + 0xb0]\n 11058: u64 [s1 + 0xd8] = a5\n 11062: u64 [s1 + 0xc8] = t2\n 11066: u64 [s1 + 0xd0] = a4\n 11070: u64 [s1 + 0xc0] = a3\n 11074: ra = 438, jump @6\n      : @443 [@dyn 219] (gas: 8)\n 11080: a0 = s1 + 0x1098\n 11084: a0 = u64 [a0 + 0xe8]\n 11088: a1 = u64 [s1 + 0xa8]\n 11092: a0 = a0 & a1\n 11095: u64 [s1 + 0x58] = a0\n 11098: a0 = s1 + 0x1160\n 11102: a1 = u64 [s1 + 0x90]\n 11106: ra = 440, jump @6\n      : @444 [@dyn 220] (gas: 21)\n 11112: a3 = s1 + 0x1098\n 11116: a0 = u64 [a3 + 0xd0]\n 11120: a1 = u64 [a3 + 0xd8]\n 11124: a2 = u64 [a3 + 0xe0]\n 11128: a3 = u64 [a3 + 0xc8]\n 11132: a0 = a0 & 0xffffffffffffffff\n 11135: a1 = a1 & 0xffffffffffffffff\n 11138: a2 = a2 & 0xffffffffffffffff\n 11141: a4 = u64 [s1 + 0x38]\n 11144: a3 = a3 & a4\n 11147: a4 = u64 [s1 + 0x58]\n 11150: a3 = a3 | a4\n 11153: a4 = s1 + 0x209c\n 11157: a5 = a4 + 0x404\n 11161: u64 [a5 + 0xb8] = a2\n 11165: u64 [a5 + 0xb0] = a1\n 11169: u64 [a5 + 0xa8] = a0\n 11173: u64 [a5 + 0xa0] = a3\n 11177: a1 = s1 + 0x2540\n 11181: a0 = u64 [s1 + 0x90]\n 11185: ra = 442, jump @10\n      : @445 [@dyn 221] (gas: 3)\n 11191: a0 = s1 + 0x1140\n 11195: a1 = u64 [s1 + 0xb0]\n 11199: ra = 444, jump @6\n      : @446 [@dyn 222] (gas: 28)\n 11205: a4 = s1 + 0x1098\n 11209: a0 = u64 [a4 + 0xb8]\n 11213: a1 = u64 [a4 + 0xb0]\n 11217: a2 = u32 [a4 + 0xac]\n 11221: a0 = a0 << 0x20\n 11224: a3 = a1 >> 0x20\n 11227: a0 = a0 | a3\n 11230: a1 = a1 << 0x20\n 11233: a1 = a1 | a2\n 11236: a2 = a1 & 0xffffffffffffffff\n 11239: a0 = a0 & 0xffffffffffffffff\n 11242: u64 [a4 + 128] = 0\n 11246: u64 [a4 + 120] = 0\n 11249: a3 = u64 [s1 + 0xc0]\n 11253: u64 [a4 + 0xa0] = a3\n 11257: a3 = u64 [s1 + 0xc8]\n 11261: u64 [a4 + 0x98] = a3\n 11265: a3 = u64 [s1 + 0xd0]\n 11269: u64 [a4 + 0x90] = a3\n 11273: a3 = u64 [s1 + 0xd8]\n 11277: u64 [a4 + 0x88] = a3\n 11281: u64 [a4 + 0x70] = a0\n 11284: a0 = s1 + 0x1120\n 11288: a1 = s1 + 0x1100\n 11292: u64 [a4 + 0x68] = a2\n 11295: ra = 0x1be\n 11299: t0 = 0x3e0\n 11303: jump @1097\n      : @447 [@dyn 223] (gas: 11)\n 11306: a0 = u64 [s1 + 0xa0]\n 11310: a1 = u64 [s1 + 0x98]\n 11314: a2 = u64 [s1 + 0x118]\n 11318: a3 = u64 [s1 + 0x110]\n 11322: a4 = u64 [s1 + 0x108]\n 11326: a5 = u64 [s1 + 0x100]\n 11330: t0 = u64 [s1 + 0x88]\n 11334: t1 = u64 [s1 + 0x70]\n 11337: t2 = u64 [s1 + 0x68]\n 11340: ra = u64 [s1 + 0x60]\n 11343: jump @451\n      : @448 (gas: 2)\n 11346: a0 = s1 + 0x12c0\n 11350: ra = 448, jump @6\n      : @449 [@dyn 224] (gas: 29)\n 11356: a4 = s1 + 0x1098\n 11360: a5 = a4 + 0x200\n 11364: a0 = u64 [a5 + 0x38]\n 11367: a1 = u64 [a5 + 0x30]\n 11370: a2 = u32 [a4 + 0x22c]\n 11374: a0 = a0 << 0x20\n 11377: a3 = a1 >> 0x20\n 11380: a0 = a0 | a3\n 11383: a1 = a1 << 0x20\n 11386: a1 = a1 | a2\n 11389: a3 = a1 & 0xffffffffffffffff\n 11392: a0 = a0 & 0xffffffffffffffff\n 11395: u64 [a4 + 480] = 0\n 11399: u64 [a4 + 472] = 0\n 11403: a1 = u64 [s1 + 0x78]\n 11406: u64 [a5] = a1\n 11408: a1 = u64 [s1 + 0x80]\n 11412: a5 = a4 + 0x100\n 11416: u64 [a5 + 0xf8] = a1\n 11420: a1 = u64 [s1 + 0x98]\n 11424: u64 [a5 + 0xf0] = a1\n 11428: a1 = u64 [s1 + 0xa0]\n 11432: u64 [a5 + 0xe8] = a1\n 11436: u64 [a5 + 0xd0] = a0\n 11440: a0 = s1 + 0x12a0\n 11444: a1 = s1 + 0x1280\n 11448: a2 = s1 + 0x1260\n 11452: u64 [a5 + 0xc8] = a3\n 11456: ra = 450, jump @1024\n      : @450 [@dyn 225] (gas: 17)\n 11462: a2 = s1 + 0x1098\n 11466: a3 = a2 + 0x200\n 11470: a0 = u64 [a3 + 0x20]\n 11473: u64 [s1 + 0x78] = a0\n 11476: a0 = u64 [a3 + 0x18]\n 11479: u64 [s1 + 0x80] = a0\n 11483: a1 = u64 [a3 + 0x10]\n 11486: a0 = u64 [a3 + 0x8]\n 11489: t0 = u64 [s1 + 0xd8]\n 11493: t1 = u64 [s1 + 0xd0]\n 11497: t2 = u64 [s1 + 0xc8]\n 11501: ra = u64 [s1 + 0xc0]\n 11505: a2 = u64 [s1 + 0x118]\n 11509: a3 = u64 [s1 + 0x110]\n 11513: a4 = u64 [s1 + 0x108]\n 11517: a5 = u64 [s1 + 0x100]\n 11521: fallthrough\n      : @451 (gas: 22)\n 11522: u64 [s1 + 0x98] = a1\n 11526: u64 [s1 + 0xa0] = a0\n 11530: a2 = a2 + 0x1\n 11533: u64 [s1 + 0x118] = a2\n 11537: a0 = a2 <u 0x1\n 11540: a3 = a3 + a0\n 11543: u64 [s1 + 0x110] = a3\n 11547: a0 = a2 | a3\n 11550: a0 = a0 <u 0x1\n 11553: a0 = a0 + a5\n 11556: a1 = a0 <u a5\n 11559: a4 = a4 + a1\n 11562: u64 [s1 + 0x108] = a4\n 11566: u64 [s1 + 0xd8] = t0\n 11570: u64 [s1 + 0xd0] = t1\n 11574: u64 [s1 + 0xc8] = t2\n 11578: u64 [s1 + 0xc0] = ra\n 11582: u64 [s1 + 0x100] = a0\n 11586: a1 = u64 [s1 + 0xb8]\n 11590: a0 = s1 + 0x1640\n 11594: ra = 0x1aa\n 11598: jump @6\n      : @452 (gas: 37)\n 11601: a1 = sp + 0xffffffffffffffe0\n 11604: a5 = a1 & 0xffffffffffffffe0\n 11607: sp = a5\n 11609: a1 = a0 <u 0x1\n 11612: a1 = a2 - a1\n 11615: a2 = a2 | a0\n 11618: a2 = a2 <u 0x1\n 11621: a4 = a3 - a2\n 11624: a2 = a3 <u a2\n 11627: a2 = t2 - a2\n 11630: a0 = a0 + 0xffffffffffffffff\n 11633: u64 [a5 + 0x18] = a2\n 11636: u64 [a5 + 0x10] = a4\n 11639: u64 [a5 + 0x8] = a1\n 11642: u64 [s1 + 0x118] = a5\n 11646: u64 [a5] = a0\n 11648: a3 = sp + 0xffffffffffffffe0\n 11651: a3 = a3 & 0xffffffffffffffe0\n 11654: u64 [s1 + 0x110] = a3\n 11658: sp = a3\n 11660: a5 = ra + 0x300\n 11664: u64 [a5 + 0xe0] = a2\n 11668: u64 [a5 + 0xd8] = a4\n 11672: u64 [a5 + 0xd0] = a1\n 11676: u64 [a5 + 0xc8] = a0\n 11680: a0 = u64 [s1 + 0xe0]\n 11684: u64 [ra + 0x400] = a0\n 11688: a0 = u64 [s1 + 0xe8]\n 11692: u64 [a5 + 0xf8] = a0\n 11696: a0 = u64 [s1 + 0xf0]\n 11700: u64 [a5 + 0xf0] = a0\n 11704: a0 = s1 + 0x14a0\n 11708: a1 = s1 + 0x1480\n 11712: a2 = s1 + 0x1460\n 11716: a3 = u64 [s1 + 0xf8]\n 11720: u64 [a5 + 0xe8] = a3\n 11724: ra = 452, jump @981\n      : @453 [@dyn 226] (gas: 19)\n 11730: a0 = s1 + 0x1098\n 11734: t0 = u64 [a0 + 0x438]\n 11738: t1 = u64 [a0 + 0x428]\n 11742: t2 = u64 [a0 + 0x440]\n 11746: a3 = u64 [a0 + 0x430]\n 11750: a4 = u64 [a0 + 0x418]\n 11754: a5 = u64 [a0 + 0x420]\n 11758: a2 = u64 [a0 + 0x408]\n 11762: a1 = u64 [a0 + 0x410]\n 11766: a0 = u64 [s1 + 0x110]\n 11770: u64 [a0 + 0x10] = a4\n 11773: u64 [a0 + 0x18] = a5\n 11776: u64 [a0] = a2\n 11778: a2 = a3 | t2\n 11781: a3 = a0\n 11783: a0 = t1 | t0\n 11786: a0 = a0 | a2\n 11789: u64 [a3 + 0x8] = a1\n 11792: jump @455 if a0 == 0\n      : @454 (gas: 1)\n 11795: jump @837\n      : @455 (gas: 8)\n 11798: a0 = s1 + 0x209c\n 11802: u64 [a0 + 1244] = 0\n 11806: u64 [a0 + 1236] = 0\n 11810: u64 [a0 + 1228] = 0\n 11814: u64 [a0 + 1220] = 0\n 11818: a1 = s1 + 0x2560\n 11822: a0 = a3\n 11824: ra = 454, jump @10\n      : @456 [@dyn 227] (gas: 3)\n 11830: a0 = u64 [s1 + 0xb8]\n 11834: a1 = u64 [s1 + 0x118]\n 11838: ra = 456, jump @10\n      : @457 [@dyn 228] (gas: 3)\n 11844: a1 = u64 [s1 + 0xb8]\n 11848: a0 = s1 + 0x1620\n 11852: ra = 458, jump @6\n      : @458 [@dyn 229] (gas: 22)\n 11858: ra = s1 + 0x1098\n 11862: a1 = ra + 0x500\n 11866: a2 = u64 [a1 + 0x90]\n 11870: t2 = u64 [ra + 0x5a0]\n 11874: a0 = u64 [a1 + 0x88]\n 11878: a3 = u64 [a1 + 0x98]\n 11882: a1 = u64 [s1 + 0xd0]\n 11886: t0 = a2 ^ a1\n 11889: a5 = a1 <u a2\n 11892: a1 = u64 [s1 + 0xd8]\n 11896: a4 = a1 <u a0\n 11899: a4 = a5 if t0 != 0\n 11902: a1 = u64 [s1 + 0xc8]\n 11906: t0 = a1 <u a3\n 11909: a5 = u64 [s1 + 0xc0]\n 11913: t1 = t2 ^ a5\n 11916: a5 = a5 <u t2\n 11919: a5 = t0 if t1 == 0\n 11922: a1 = a1 ^ a3\n 11925: a1 = a1 | t1\n 11928: a5 = a4 if a1 == 0\n 11931: jump @452 if a5 != 0\n      : @459 (gas: 6)\n 11935: a0 = u64 [s1 + 0x18]\n 11938: ra = 0x1cc\n 11942: ecalli 3 // 'caller'\n 11944: a2 = u64 [s1 + 0x30]\n 11947: t0 = 0x1ce\n 11951: jump @1052\n      : @460 [@dyn 230] (gas: 2)\n 11954: a2 = u64 [s1 + 0x30]\n 11957: t0 = 462, jump @1052\n      : @461 [@dyn 231] (gas: 8)\n 11963: u64 [a2 + 1408] = 0\n 11967: a4 = a2 + 0x500\n 11971: u64 [a4 + 0x78] = a1\n 11974: u64 [a4 + 0x70] = a0\n 11977: a1 = s1 + 0x1600\n 11981: u64 [a4 + 0x68] = a3\n 11984: a0 = 0\n 11986: ra = 464, jump @4\n      : @462 [@dyn 232] (gas: 3)\n 11992: t0 = 0x1d2\n 11996: a1 = s1 + 0x1098\n 12000: fallthrough\n      : @463 [@dyn 233] (gas: 8)\n 12001: u64 [a1 + 1376] = 0\n 12005: u64 [a1 + 1368] = 0\n 12009: u64 [a1 + 1352] = 0x1\n 12014: a2 = a1\n 12016: a0 = 0x20\n 12019: a1 = s1 + 0x15e0\n 12023: u64 [a2 + 1360] = 0\n 12027: ra = 468, jump @4\n      : @464 [@dyn 234] (gas: 7)\n 12033: a0 = sp + 0xffffffffffffffe0\n 12036: a0 = a0 & 0xffffffffffffffe0\n 12039: u64 [s1 + 0x110] = a0\n 12043: sp = a0\n 12045: a2 = u64 [s1 + 0x28]\n 12048: a0 = i32 [a2]\n 12050: jump @466 if a0 >u 63\n      : @465 (gas: 3)\n 12054: u32 [a2 + 0] = 0x40\n 12057: t0 = 0x1d6\n 12061: jump @1058\n      : @466 (gas: 1)\n 12064: t0 = 470, jump @1058\n      : @467 [@dyn 235] (gas: 5)\n 12070: a0 = u64 [s1 + 0x20]\n 12073: ra = 0x1d8\n 12077: ecalli 5 // 'hash_keccak_256'\n 12079: t0 = 0x1da\n 12083: jump @1078\n      : @468 [@dyn 236] (gas: 1)\n 12086: t0 = 474, jump @1078\n      : @469 [@dyn 237] (gas: 12)\n 12092: u64 [s1 + 0x108] = a4\n 12096: a2 = reverse a2\n 12098: u64 [s1 + 0x100] = a2\n 12102: a3 = reverse a3\n 12104: u64 [s1 + 0xf8] = a3\n 12108: a1 = u64 [s1 + 0x110]\n 12112: u64 [a1 + 0x18] = a3\n 12115: u64 [a1 + 0x10] = a2\n 12118: u64 [a1 + 0x8] = a4\n 12121: u64 [a1] = a0\n 12123: a0 = s1 + 0x15c0\n 12127: ra = 476, jump @6\n      : @470 [@dyn 238] (gas: 21)\n 12133: a2 = s1 + 0x1098\n 12137: a3 = u64 [a2 + 0x538]\n 12141: a0 = u64 [a2 + 0x540]\n 12145: a1 = u64 [s1 + 0x78]\n 12148: a4 = a2 + 0x400\n 12152: u64 [a4 + 0xe0] = a1\n 12156: a1 = u64 [s1 + 0x80]\n 12160: u64 [a4 + 0xd8] = a1\n 12164: a1 = u64 [s1 + 0x98]\n 12168: u64 [a4 + 0xd0] = a1\n 12172: a1 = u64 [s1 + 0xa0]\n 12176: u64 [a4 + 0xc8] = a1\n 12180: u64 [a2 + 1280] = 0\n 12184: u64 [a2 + 1272] = 0\n 12188: u64 [a4 + 0xf0] = a0\n 12192: a4 = a2\n 12194: a0 = s1 + 0x15a0\n 12198: a1 = s1 + 0x1580\n 12202: a2 = s1 + 0x1560\n 12206: u64 [a4 + 0x4e8] = a3\n 12210: ra = 478, jump @1038\n      : @471 [@dyn 239] (gas: 25)\n 12216: a4 = s1 + 0x1098\n 12220: a5 = a4 + 0x500\n 12224: a0 = u64 [a5 + 0x8]\n 12227: a1 = u64 [a5 + 0x10]\n 12230: a2 = u64 [a5 + 0x18]\n 12233: a3 = u64 [a5 + 0x20]\n 12236: a5 = a4 + 0x400\n 12240: u64 [a5 + 0xa0] = a3\n 12244: u64 [a5 + 0x98] = a2\n 12248: u64 [a5 + 0x90] = a1\n 12252: u64 [a5 + 0x88] = a0\n 12256: a0 = u64 [s1 + 0xf8]\n 12260: u64 [a5 + 0xc0] = a0\n 12264: a3 = s1 + 0x100\n 12268: a0 = u64 [a3]\n 12270: u64 [a5 + 0xb8] = a0\n 12274: a0 = u64 [a3 + 0x8]\n 12277: u64 [a5 + 0xb0] = a0\n 12281: a0 = s1 + 0x1540\n 12285: a1 = s1 + 0x1520\n 12289: a2 = u64 [a3 + 0x18]\n 12292: u64 [a5 + 0xa8] = a2\n 12296: ra = 0x1e0\n 12300: t0 = 0x40e\n 12304: jump @1097\n      : @472 [@dyn 240] (gas: 3)\n 12307: a0 = s1 + 0x1500\n 12311: a1 = 0x40\n 12314: ra = 482, jump @2\n      : @473 [@dyn 241] (gas: 7)\n 12320: a3 = s1 + 0x1098\n 12324: a5 = a3 + 0x400\n 12328: a0 = u64 [a5 + 0x80]\n 12332: a1 = u64 [a5 + 0x78]\n 12335: a2 = u64 [a5 + 0x70]\n 12338: a4 = u64 [a5 + 0x68]\n 12341: t0 = 484, jump @1063\n      : @474 [@dyn 242] (gas: 1)\n 12347: jump @476 if a0 == 0\n      : @475 (gas: 1)\n 12350: jump @836\n      : @476 (gas: 13)\n 12353: a0 = u64 [s1 + 0x98]\n 12357: a0 = a0 & 0xffffffffffffffff\n 12360: a2 = u64 [s1 + 0xa0]\n 12364: a1 = a2 & 0xffffffffffffffff\n 12367: u64 [a3 + 1120] = 0\n 12371: u64 [a3 + 1112] = 0\n 12375: u64 [a3 + 0x448] = a1\n 12379: a1 = s1 + 0x14e0\n 12383: u64 [a3 + 0x450] = a0\n 12387: a0 = a4\n 12389: u64 [s1 + 0x118] = a4\n 12393: ra = 0x35e\n 12397: jump @4\n      : @477 (gas: 10)\n 12400: u64 [a2 + 1628] = 0\n 12404: u64 [a2 + 1620] = 0\n 12408: u64 [a2 + 1612] = 0\n 12412: u64 [a2 + 1604] = 0\n 12416: a0 = s1 + 0x2000\n 12420: i32 a0 = a0 + 0x6e0\n 12424: ra = 0x1e6\n 12428: ecalli 9 // 'value_transferred'\n 12430: t0 = 0x1e8\n 12434: jump @1072\n      : @478 [@dyn 243] (gas: 1)\n 12437: t0 = 488, jump @1072\n      : @479 [@dyn 244] (gas: 8)\n 12443: a0 = u64 [a4 + 0x50]\n 12446: a1 = u64 [a4 + 0x58]\n 12449: a2 = u64 [a4 + 0x48]\n 12452: a3 = u64 [a4 + 0x40]\n 12455: a1 = a1 | a2\n 12458: a0 = a0 | a3\n 12461: a0 = a0 | a1\n 12464: jump @481 if a0 == 0\n      : @480 (gas: 1)\n 12467: jump @889\n      : @481 (gas: 3)\n 12470: a0 = u64 [s1 + 0x118]\n 12474: a0 = i32 [a0]\n 12476: jump @483 if a0 >u 3\n      : @482 (gas: 1)\n 12480: jump @890\n      : @483 (gas: 3)\n 12483: a0 = s1 + 0x1ba0\n 12487: a1 = 0x40\n 12490: ra = 490, jump @2\n      : @484 [@dyn 245] (gas: 7)\n 12496: a3 = s1 + 0x1898\n 12500: a5 = a3 + 0x300\n 12504: a4 = u64 [a5 + 0x20]\n 12507: a1 = u64 [a5 + 0x18]\n 12510: a2 = u64 [a5 + 0x10]\n 12513: a0 = u64 [a5 + 0x8]\n 12516: t0 = 492, jump @1057\n      : @485 [@dyn 246] (gas: 1)\n 12522: jump @487 if a1 == 0\n      : @486 (gas: 1)\n 12525: jump @836\n      : @487 (gas: 8)\n 12528: u64 [a3 + 768] = 0\n 12532: u64 [a3 + 760] = 0\n 12536: u64 [a3 + 744] = 0x2\n 12541: a1 = s1 + 0x1b80\n 12545: u64 [a3 + 752] = 0\n 12549: u64 [s1 + 0x118] = a0\n 12553: ra = 0x35e\n 12557: jump @4\n      : @488 (gas: 10)\n 12560: u64 [a2 + 1436] = 0\n 12564: u64 [a2 + 1428] = 0\n 12568: u64 [a2 + 1420] = 0\n 12572: u64 [a2 + 1412] = 0\n 12576: a0 = s1 + 0x2000\n 12580: i32 a0 = a0 + 0x620\n 12584: ra = 0x1ee\n 12588: ecalli 9 // 'value_transferred'\n 12590: t0 = 0x1f0\n 12594: jump @1092\n      : @489 [@dyn 247] (gas: 1)\n 12597: t0 = 496, jump @1092\n      : @490 [@dyn 248] (gas: 1)\n 12603: t0 = 498, jump @1068\n      : @491 [@dyn 249] (gas: 1)\n 12609: jump @493 if a0 == 0\n      : @492 (gas: 1)\n 12612: jump @891\n      : @493 (gas: 3)\n 12615: a0 = u64 [s1 + 0x118]\n 12619: a0 = i32 [a0]\n 12621: jump @495 if a0 >u 3\n      : @494 (gas: 1)\n 12625: jump @892\n      : @495 (gas: 8)\n 12628: a0 = 0x30020\n 12633: u64 [s1 + 0x118] = a0\n 12637: i32 a0 = a0 + 0\n 12639: ra = 0x1f4\n 12643: ecalli 3 // 'caller'\n 12645: a2 = u64 [s1 + 0x118]\n 12649: t0 = 0x1f6\n 12653: jump @1050\n      : @496 [@dyn 250] (gas: 2)\n 12656: a2 = u64 [s1 + 0x118]\n 12660: t0 = 502, jump @1050\n      : @497 [@dyn 251] (gas: 8)\n 12666: u64 [a2 + 0] = 0\n 12668: a4 = a2 + 0xffffffffffffff00\n 12672: u64 [a4 + 0xf8] = a1\n 12676: u64 [a4 + 0xf0] = a0\n 12680: a1 = s1 + 0x1880\n 12684: u64 [a4 + 0xe8] = a3\n 12688: a0 = 0\n 12690: ra = 504, jump @4\n      : @498 [@dyn 252] (gas: 8)\n 12696: a2 = s1 + 0x1098\n 12700: u64 [a2 + 2016] = 0\n 12704: u64 [a2 + 2008] = 0\n 12708: u64 [a2 + 1992] = 0x1\n 12713: a0 = 0x20\n 12716: a1 = s1 + 0x1860\n 12720: u64 [a2 + 2000] = 0\n 12724: ra = 506, jump @4\n      : @499 [@dyn 253] (gas: 2)\n 12730: a1 = i32 [0x20014]\n 12735: jump @501 if a1 >u 63\n      : @500 (gas: 4)\n 12739: a1 = 0x40\n 12742: u32 [0x20014] = a1\n 12747: t0 = 0x1fc\n 12751: jump @1087\n      : @501 (gas: 1)\n 12754: t0 = 508, jump @1087\n      : @502 [@dyn 254] (gas: 9)\n 12760: a0 = 0x20020\n 12765: i32 a0 = a0 + 0\n 12767: i32 a2 = a2 + 0\n 12769: a1 = 0x40\n 12772: ra = 0x1fe\n 12776: ecalli 5 // 'hash_keccak_256'\n 12778: a3 = u64 [s1 + 0x118]\n 12782: t0 = 0x200\n 12786: jump @1060\n      : @503 [@dyn 255] (gas: 2)\n 12789: a3 = u64 [s1 + 0x118]\n 12793: t0 = 512, jump @1060\n      : @504 [@dyn 256] (gas: 8)\n 12799: a5 = a1 + 0x504\n 12803: u64 [a5 + 0xa0] = a3\n 12807: u64 [a5 + 0xa8] = a2\n 12811: u64 [a5 + 0xb0] = a4\n 12815: u64 [a5 + 0xb8] = a0\n 12819: a0 = s1 + 0x1840\n 12823: a1 = s1 + 0x2640\n 12827: ra = 514, jump @6\n      : @505 [@dyn 257] (gas: 3)\n 12833: t0 = 0x204\n 12837: a1 = s1 + 0x1098\n 12841: fallthrough\n      : @506 [@dyn 258] (gas: 11)\n 12842: a2 = a1 + 0x700\n 12846: a0 = u64 [a2 + 0xb8]\n 12850: a1 = s1 + 0x100\n 12854: u64 [a1 + 0x18] = a0\n 12857: a0 = u64 [a2 + 0xb0]\n 12861: u64 [a1 + 0x10] = a0\n 12864: a0 = u64 [a2 + 0xa8]\n 12868: u64 [a1 + 0x8] = a0\n 12871: a0 = s1 + 0x1820\n 12875: a1 = 0x40\n 12878: ra = 518, jump @2\n      : @507 [@dyn 259] (gas: 7)\n 12884: a3 = s1 + 0x1098\n 12888: a5 = a3 + 0x700\n 12892: a4 = u64 [a5 + 0xa0]\n 12896: a1 = u64 [a5 + 0x98]\n 12900: a2 = u64 [a5 + 0x90]\n 12904: a0 = u64 [a5 + 0x88]\n 12908: t0 = 520, jump @1057\n      : @508 [@dyn 260] (gas: 1)\n 12914: jump @510 if a1 == 0\n      : @509 (gas: 1)\n 12917: jump @836\n      : @510 (gas: 20)\n 12920: a2 = u64 [s1 + 0x110]\n 12924: a4 = a2 >> 0x8\n 12927: a5 = u64 [s1 + 0x118]\n 12931: a1 = a5 << 0x38\n 12934: a4 = a4 | a1\n 12937: a1 = u64 [s1 + 0x108]\n 12941: a1 = a1 >> 0x8\n 12944: a2 = a2 << 0x38\n 12947: a1 = a1 | a2\n 12950: a2 = a5 << 0x18\n 12953: a2 = a2 >> 0x20\n 12956: u64 [a3 + 1920] = 0\n 12960: a5 = a3 + 0x700\n 12964: u64 [a5 + 0x68] = a1\n 12967: u64 [a5 + 0x78] = a2\n 12970: a1 = s1 + 0x1800\n 12974: u64 [a5 + 0x70] = a4\n 12977: u64 [s1 + 0x118] = a0\n 12981: ra = 0x35e\n 12985: jump @4\n      : @511 (gas: 10)\n 12988: u64 [a2 + 1500] = 0\n 12992: u64 [a2 + 1492] = 0\n 12996: u64 [a2 + 1484] = 0\n 13000: u64 [a2 + 1476] = 0\n 13004: a0 = s1 + 0x2000\n 13008: i32 a0 = a0 + 0x660\n 13012: ra = 0x20a\n 13016: ecalli 9 // 'value_transferred'\n 13018: t0 = 0x20c\n 13022: jump @1092\n      : @512 [@dyn 261] (gas: 1)\n 13025: t0 = 524, jump @1092\n      : @513 [@dyn 262] (gas: 8)\n 13031: a0 = u64 [a4 + 0xd0]\n 13035: a1 = u64 [a4 + 0xd8]\n 13039: a2 = u64 [a4 + 0xc8]\n 13043: a3 = u64 [a4 + 0xc0]\n 13047: a1 = a1 | a2\n 13050: a0 = a0 | a3\n 13053: a0 = a0 | a1\n 13056: jump @515 if a0 == 0\n      : @514 (gas: 1)\n 13059: jump @893\n      : @515 (gas: 3)\n 13062: a0 = u64 [s1 + 0x118]\n 13066: a0 = i32 [a0]\n 13068: jump @517 if a0 >u 3\n      : @516 (gas: 1)\n 13072: jump @894\n      : @517 (gas: 3)\n 13075: a0 = s1 + 0x18c0\n 13079: a1 = 0x40\n 13082: ra = 526, jump @2\n      : @518 [@dyn 263] (gas: 6)\n 13088: a3 = s1 + 0x1898\n 13092: a0 = u64 [a3 + 0x40]\n 13095: a1 = u64 [a3 + 0x38]\n 13098: a2 = u64 [a3 + 0x30]\n 13101: a4 = u64 [a3 + 0x28]\n 13104: t0 = 528, jump @1063\n      : @519 [@dyn 264] (gas: 1)\n 13110: jump @521 if a0 == 0\n      : @520 (gas: 1)\n 13113: jump @836\n      : @521 (gas: 10)\n 13116: u64 [a3 + 32] = 0\n 13119: u64 [a3 + 16] = 0x5\n 13123: a0 = 0x6bc75e2d63100000\n 13133: u64 [a3 + 0x8] = a0\n 13136: a1 = s1 + 0x18a0\n 13140: u64 [a3 + 24] = 0\n 13143: a0 = a4\n 13145: u64 [s1 + 0x118] = a4\n 13149: ra = 0x35e\n 13153: jump @4\n      : @522 (gas: 10)\n 13156: u64 [a2 + 956] = 0\n 13160: u64 [a2 + 948] = 0\n 13164: u64 [a2 + 940] = 0\n 13168: u64 [a2 + 932] = 0\n 13172: a0 = s1 + 0x2000\n 13176: i32 a0 = a0 + 0x440\n 13180: ra = 0x212\n 13184: ecalli 9 // 'value_transferred'\n 13186: t0 = 0x214\n 13190: jump @1071\n      : @523 [@dyn 265] (gas: 1)\n 13193: t0 = 532, jump @1071\n      : @524 [@dyn 266] (gas: 1)\n 13199: t0 = 534, jump @1074\n      : @525 [@dyn 267] (gas: 1)\n 13205: jump @527 if a0 == 0\n      : @526 (gas: 1)\n 13208: jump @895\n      : @527 (gas: 3)\n 13211: a0 = u64 [s1 + 0x118]\n 13215: a0 = i32 [a0]\n 13217: jump @529 if a0 >u 3\n      : @528 (gas: 1)\n 13221: jump @896\n      : @529 (gas: 4)\n 13224: a0 = s1 + 0x7ff\n 13228: a0 = a0 + 0x421\n 13232: a1 = 0x40\n 13235: ra = 536, jump @2\n      : @530 [@dyn 268] (gas: 1)\n 13241: t0 = 538, jump @1082\n      : @531 [@dyn 269] (gas: 5)\n 13247: a0 = u64 [a5 + 0xa0]\n 13251: a1 = u64 [a5 + 0x98]\n 13255: a2 = u64 [a5 + 0x90]\n 13259: a4 = u64 [a5 + 0x88]\n 13263: t0 = 540, jump @1063\n      : @532 [@dyn 270] (gas: 1)\n 13269: jump @534 if a0 == 0\n      : @533 (gas: 1)\n 13272: jump @836\n      : @534 (gas: 11)\n 13275: u64 [a3 + 896] = 0\n 13279: u64 [a3 + 880] = 0xd3c2\n 13286: a0 = 0x1bcecceda1000000\n 13296: u64 [a3 + 0x368] = a0\n 13300: a1 = s1 + 0x7ff\n 13304: a1 = a1 + 0x401\n 13308: u64 [a3 + 888] = 0\n 13312: a0 = a4\n 13314: u64 [s1 + 0x118] = a4\n 13318: ra = 0x35e\n 13322: jump @4\n      : @535 (gas: 8)\n 13325: u64 [a2 + 92] = 0\n 13328: u64 [a2 + 84] = 0\n 13331: u64 [a2 + 76] = 0\n 13334: u64 [a2 + 68] = 0\n 13337: a0 = s1 + 0x2000\n 13341: i32 a0 = a0 + 0xe0\n 13345: ecalli 9 // 'value_transferred'\n 13347: fallthrough\n      : @536 (gas: 10)\n 13348: a4 = s1 + 0x209c\n 13352: a5 = a4 + 0x4\n 13355: a0 = u64 [a5 + 0x50]\n 13358: a1 = u64 [a5 + 0x58]\n 13361: a2 = u64 [a5 + 0x48]\n 13364: a3 = u64 [a5 + 0x40]\n 13367: a1 = a1 | a2\n 13370: a0 = a0 | a3\n 13373: a0 = a0 | a1\n 13376: jump @538 if a0 == 0\n      : @537 (gas: 1)\n 13379: jump @897\n      : @538 (gas: 3)\n 13382: a0 = u64 [s1 + 0x118]\n 13386: a0 = i32 [a0]\n 13388: jump @540 if a0 >u 3\n      : @539 (gas: 1)\n 13392: jump @898\n      : @540 (gas: 7)\n 13395: u64 [a4 + 124] = 0\n 13398: u64 [a4 + 116] = 0\n 13401: u64 [a4 + 108] = 0\n 13404: u64 [a4 + 100] = 0\n 13407: a0 = s1 + 0x220\n 13411: a1 = s1 + 0x2100\n 13415: ra = 542, jump @6\n      : @541 [@dyn 271] (gas: 5)\n 13421: a0 = u64 [s1 + 0x220]\n 13425: u64 [s1 + 0x118] = a0\n 13429: a0 = s1 + 0x200\n 13433: a1 = 0x40\n 13436: ra = 544, jump @2\n      : @542 [@dyn 272] (gas: 6)\n 13442: a4 = s1 + 0x200\n 13446: a3 = u64 [a4 + 0x18]\n 13449: a1 = u64 [a4 + 0x10]\n 13452: a2 = u64 [a4 + 0x8]\n 13455: a0 = u64 [a4]\n 13457: t0 = 546, jump @1076\n      : @543 [@dyn 273] (gas: 1)\n 13463: jump @545 if a1 == 0\n      : @544 (gas: 1)\n 13466: jump @836\n      : @545 (gas: 11)\n 13469: a1 = u64 [s1 + 0x118]\n 13473: a1 = a1 << 0x20\n 13476: a2 = a1 >> 0x20\n 13479: u64 [s1 + 504] = 0\n 13483: u64 [s1 + 496] = 0\n 13487: u64 [s1 + 488] = 0\n 13491: a1 = s1 + 0x1e0\n 13495: u64 [s1 + 0x1e0] = a2\n 13499: u64 [s1 + 0x118] = a0\n 13503: ra = 0x35e\n 13507: jump @4\n      : @546 (gas: 12)\n 13510: a0 = u64 [s1 + 0x90]\n 13514: a2 = s1 + 0x300\n 13518: u64 [a2 + 0x20] = a0\n 13521: a0 = u64 [s1 + 0x80]\n 13525: u64 [a2 + 0x28] = a0\n 13528: a0 = u64 [s1 + 0x78]\n 13531: u64 [a2 + 0x30] = a0\n 13534: a1 = s1 + 0x320\n 13538: a0 = u64 [s1 + 0x88]\n 13542: u64 [a2 + 0x38] = a0\n 13545: a0 = 0\n 13547: ra = 548, jump @4\n      : @547 [@dyn 274] (gas: 3)\n 13553: a2 = u64 [s1 + 0x60]\n 13556: a0 = i32 [a2]\n 13558: jump @549 if a0 >u 31\n      : @548 (gas: 2)\n 13562: u32 [a2 + 0] = 0x20\n 13565: fallthrough\n      : @549 (gas: 32)\n 13566: a0 = sp + 0xffffffffffffffe0\n 13569: a0 = a0 & 0xffffffffffffffe0\n 13572: u64 [s1 + 0xf8] = a0\n 13576: sp = a0\n 13578: i32 a2 = a0 + 0\n 13580: a1 = 0x20\n 13583: a0 = u64 [s1 + 0x68]\n 13586: ecalli 5 // 'hash_keccak_256'\n 13588: ra = 0\n 13590: a5 = 0\n 13592: u64 [s1 + 280] = 0\n 13596: a3 = u64 [s1 + 0xf8]\n 13600: a0 = u64 [a3]\n 13602: a1 = u64 [a3 + 0x8]\n 13605: a2 = u64 [a3 + 0x10]\n 13608: a3 = u64 [a3 + 0x18]\n 13611: a0 = reverse a0\n 13613: u64 [s1 + 0xb8] = a0\n 13617: a0 = reverse a1\n 13619: u64 [s1 + 0x90] = a0\n 13623: a0 = reverse a2\n 13625: u64 [s1 + 0x88] = a0\n 13629: a0 = reverse a3\n 13631: u64 [s1 + 0x80] = a0\n 13635: a3 = 0\n 13637: a0 = s1 + 0x2000\n 13641: i32 a0 = a0 + 0x1e0\n 13645: u64 [s1 + 0x78] = a0\n 13648: a0 = 0xffffffff\n 13658: u64 [s1 + 0x70] = a0\n 13661: t2 = u64 [s1 + 0xe0]\n 13665: fallthrough\n      : @550 (gas: 19)\n 13666: a0 = u64 [s1 + 0x98]\n 13670: a0 = ra <u a0\n 13673: a2 = u64 [s1 + 0xa0]\n 13677: a1 = a5 ^ a2\n 13680: a2 = a5 <u a2\n 13683: a2 = a0 if a1 == 0\n 13686: a4 = u64 [s1 + 0xa8]\n 13690: t0 = a3 <u a4\n 13693: a0 = a3\n 13695: a3 = u64 [s1 + 0xb0]\n 13699: a1 = u64 [s1 + 0x118]\n 13703: t1 = a1 ^ a3\n 13706: a3 = a1 <u a3\n 13709: a3 = t0 if t1 == 0\n 13712: u64 [s1 + 0xf8] = a0\n 13716: a0 = a0 ^ a4\n 13719: a0 = a0 | t1\n 13722: a3 = a2 if a0 == 0\n 13725: jump @552 if a3 != 0\n      : @551 (gas: 1)\n 13728: jump @784\n      : @552 (gas: 16)\n 13731: a0 = sp + 0xffffffffffffffe0\n 13734: a0 = a0 & 0xffffffffffffffe0\n 13737: u64 [s1 + 0xd8] = a0\n 13741: sp = a0\n 13743: a4 = s1 + 0x100\n 13747: a2 = u64 [a4 + 0x10]\n 13750: a0 = a2 | t2\n 13753: a1 = u64 [a4 + 0x8]\n 13756: a3 = u64 [a4]\n 13758: a1 = a1 | a3\n 13761: a0 = a0 | a1\n 13764: a0 = a0 >> 0x20\n 13767: a1 = a1 | t2\n 13770: a1 = a1 << 0x20\n 13773: a0 = a0 | a1\n 13776: jump @554 if a0 == 0\n      : @553 (gas: 1)\n 13779: jump @836\n      : @554 (gas: 8)\n 13782: u64 [s1 + 0xe8] = a5\n 13786: u64 [s1 + 0xf0] = ra\n 13790: u64 [s1 + 0xe0] = t2\n 13794: i32 a1 = a2 + 0\n 13796: a0 = u64 [s1 + 0x78]\n 13799: u64 [s1 + 0x110] = a2\n 13803: ecalli 1 // 'call_data_load'\n 13805: fallthrough\n      : @555 (gas: 21)\n 13806: t0 = s1 + 0x209c\n 13810: a4 = t0 + 0x104\n 13814: a0 = u64 [a4 + 0x48]\n 13817: a1 = u64 [a4 + 0x58]\n 13820: a2 = u64 [a4 + 0x50]\n 13823: t1 = u64 [s1 + 0xd8]\n 13827: a5 = t1\n 13829: u64 [a5 + 0x8] = a0\n 13832: a0 = a1 >u 0\n 13834: a3 = a2 >> 0x20\n 13837: a3 = a3 >u 0\n 13839: a3 = a0 if a1 != 0\n 13842: a0 = u64 [a4 + 0x40]\n 13845: u64 [a5 + 0x18] = a1\n 13848: u64 [a5 + 0x10] = a2\n 13851: a4 = u64 [s1 + 0x70]\n 13854: a2 = a2 ^ a4\n 13857: a1 = a1 | a2\n 13860: a3 = 0 if a1 == 0\n 13862: u64 [a5] = a0\n 13864: jump @557 if a3 == 0\n      : @556 (gas: 1)\n 13867: jump @839\n      : @557 (gas: 46)\n 13870: a1 = u64 [s1 + 0x110]\n 13874: a0 = a1 + 0x20\n 13877: u64 [s1 + 0xd0] = a0\n 13881: a0 = a0 <u a1\n 13884: a1 = u64 [s1 + 0x100]\n 13888: a2 = a1 + a0\n 13891: u64 [s1 + 0xc8] = a2\n 13895: a1 = a2 <u a1\n 13898: a1 = a0 if a0 == 0\n 13901: a0 = u64 [s1 + 0xe0]\n 13905: a1 = a1 + a0\n 13908: u64 [s1 + 0xc0] = a1\n 13912: a0 = a1 <u a0\n 13915: a1 = u64 [s1 + 0x108]\n 13919: a1 = a1 + a0\n 13922: u64 [s1 + 0x108] = a1\n 13926: a1 = u64 [s1 + 0xf0]\n 13930: a0 = u64 [s1 + 0x80]\n 13934: t2 = a1 + a0\n 13937: a1 = t2 <u a1\n 13940: a0 = u64 [s1 + 0xe8]\n 13944: a2 = u64 [s1 + 0x88]\n 13948: a2 = a2 + a0\n 13951: a2 = a2 + a1\n 13954: a3 = a2 ^ a0\n 13957: a4 = a2 <u a0\n 13960: a4 = a1 if a3 == 0\n 13963: a1 = u64 [s1 + 0x90]\n 13967: a0 = u64 [s1 + 0xf8]\n 13971: a1 = a1 + a0\n 13974: a3 = a1 <u a0\n 13977: a5 = u64 [s1 + 0xb8]\n 13981: a0 = u64 [s1 + 0x118]\n 13985: a5 = a5 + a0\n 13988: a3 = a3 + a5\n 13991: a4 = a4 + a1\n 13994: a1 = a4 <u a1\n 13997: a1 = a1 + a3\n 14000: u64 [t0 + 0x164] = t2\n 14004: a0 = t0 + 0x104\n 14008: u64 [a0 + 0x68] = a2\n 14011: u64 [a0 + 0x70] = a4\n 14014: u64 [a0 + 0x78] = a1\n 14017: a0 = s1 + 0x2200\n 14021: a1 = t1\n 14023: ra = 550, jump @10\n      : @558 [@dyn 275] (gas: 21)\n 14029: a5 = u64 [s1 + 0xe8]\n 14033: ra = u64 [s1 + 0xf0]\n 14037: ra = ra + 0x1\n 14040: a0 = ra <u 0x1\n 14043: a5 = a5 + a0\n 14046: a0 = ra | a5\n 14049: a0 = a0 <u 0x1\n 14052: a1 = u64 [s1 + 0xf8]\n 14056: a0 = a0 + a1\n 14059: a1 = a0 <u a1\n 14062: a3 = s1 + 0x100\n 14066: a2 = u64 [a3 + 0x18]\n 14069: a2 = a2 + a1\n 14072: u64 [a3 + 0x18] = a2\n 14075: a1 = u64 [s1 + 0xd0]\n 14079: u64 [a3 + 0x10] = a1\n 14082: a1 = u64 [s1 + 0xc8]\n 14086: u64 [a3] = a1\n 14088: t2 = u64 [s1 + 0xc0]\n 14092: a3 = a0\n 14094: jump @550\n      : @559 (gas: 10)\n 14097: u64 [a2 + 924] = 0\n 14101: u64 [a2 + 916] = 0\n 14105: u64 [a2 + 908] = 0\n 14109: u64 [a2 + 900] = 0\n 14113: a0 = s1 + 0x2000\n 14117: i32 a0 = a0 + 0x420\n 14121: ra = 0x228\n 14125: ecalli 9 // 'value_transferred'\n 14127: t0 = 0x22a\n 14131: jump @1071\n      : @560 [@dyn 276] (gas: 1)\n 14134: t0 = 554, jump @1071\n      : @561 [@dyn 277] (gas: 1)\n 14140: t0 = 556, jump @1068\n      : @562 [@dyn 278] (gas: 1)\n 14146: jump @564 if a0 == 0\n      : @563 (gas: 1)\n 14149: jump @899\n      : @564 (gas: 3)\n 14152: a0 = u64 [s1 + 0x118]\n 14156: a0 = i32 [a0]\n 14158: jump @566 if a0 >u 3\n      : @565 (gas: 1)\n 14162: jump @900\n      : @566 (gas: 4)\n 14165: a0 = s1 + 0x7ff\n 14169: a0 = a0 + 0x3e1\n 14173: a1 = 0x40\n 14176: ra = 558, jump @2\n      : @567 [@dyn 279] (gas: 1)\n 14182: t0 = 560, jump @1082\n      : @568 [@dyn 280] (gas: 5)\n 14188: a0 = u64 [a5 + 0x60]\n 14191: a1 = u64 [a5 + 0x58]\n 14194: a2 = u64 [a5 + 0x50]\n 14197: a4 = u64 [a5 + 0x48]\n 14200: t0 = 562, jump @1063\n      : @569 [@dyn 281] (gas: 1)\n 14206: jump @571 if a0 == 0\n      : @570 (gas: 1)\n 14209: jump @836\n      : @571 (gas: 11)\n 14212: u64 [a3 + 832] = 0\n 14216: u64 [a3 + 824] = 0\n 14220: a0 = 0xde0b6b3a7640000\n 14230: u64 [a3 + 0x328] = a0\n 14234: a1 = s1 + 0x7ff\n 14238: a1 = a1 + 0x3c1\n 14242: u64 [a3 + 816] = 0\n 14246: a0 = a4\n 14248: u64 [s1 + 0x118] = a4\n 14252: ra = 0x35e\n 14256: jump @4\n      : @572 (gas: 10)\n 14259: u64 [a2 + 1564] = 0\n 14263: u64 [a2 + 1556] = 0\n 14267: u64 [a2 + 1548] = 0\n 14271: u64 [a2 + 1540] = 0\n 14275: a0 = s1 + 0x2000\n 14279: i32 a0 = a0 + 0x6a0\n 14283: ra = 0x234\n 14287: ecalli 9 // 'value_transferred'\n 14289: t0 = 0x236\n 14293: jump @1072\n      : @573 [@dyn 282] (gas: 1)\n 14296: t0 = 566, jump @1072\n      : @574 [@dyn 283] (gas: 1)\n 14302: t0 = 568, jump @1096\n      : @575 [@dyn 284] (gas: 1)\n 14308: jump @577 if a0 == 0\n      : @576 (gas: 1)\n 14311: jump @901\n      : @577 (gas: 3)\n 14314: a0 = u64 [s1 + 0x118]\n 14318: a0 = i32 [a0]\n 14320: jump @579 if a0 >u 3\n      : @578 (gas: 1)\n 14324: jump @902\n      : @579 (gas: 8)\n 14327: a0 = 0x30020\n 14332: u64 [s1 + 0x118] = a0\n 14336: i32 a0 = a0 + 0\n 14338: ra = 0x23a\n 14342: ecalli 3 // 'caller'\n 14344: a2 = u64 [s1 + 0x118]\n 14348: t0 = 0x23c\n 14352: jump @1050\n      : @580 [@dyn 285] (gas: 2)\n 14355: a2 = u64 [s1 + 0x118]\n 14359: t0 = 572, jump @1050\n      : @581 [@dyn 286] (gas: 8)\n 14365: u64 [a2 + 736] = 0\n 14369: a4 = a2 + 0x200\n 14373: u64 [a4 + 0xd8] = a1\n 14377: u64 [a4 + 0xd0] = a0\n 14381: a1 = s1 + 0x1b60\n 14385: u64 [a4 + 0xc8] = a3\n 14389: a0 = 0\n 14391: ra = 574, jump @4\n      : @582 [@dyn 287] (gas: 3)\n 14397: t0 = 0x240\n 14401: a1 = s1 + 0x1898\n 14405: fallthrough\n      : @583 [@dyn 288] (gas: 8)\n 14406: u64 [a1 + 704] = 0\n 14410: u64 [a1 + 696] = 0\n 14414: u64 [a1 + 680] = 0x1\n 14419: a2 = a1\n 14421: a0 = 0x20\n 14424: a1 = s1 + 0x1b40\n 14428: u64 [a2 + 688] = 0\n 14432: ra = 578, jump @4\n      : @584 [@dyn 289] (gas: 2)\n 14438: a1 = i32 [0x20014]\n 14443: jump @586 if a1 >u 63\n      : @585 (gas: 4)\n 14447: a1 = 0x40\n 14450: u32 [0x20014] = a1\n 14455: t0 = 0x244\n 14459: jump @1087\n      : @586 (gas: 1)\n 14462: t0 = 580, jump @1087\n      : @587 [@dyn 290] (gas: 9)\n 14468: a0 = 0x20020\n 14473: i32 a0 = a0 + 0\n 14475: i32 a2 = a2 + 0\n 14477: a1 = 0x40\n 14480: ra = 0x246\n 14484: ecalli 5 // 'hash_keccak_256'\n 14486: a3 = u64 [s1 + 0x118]\n 14490: t0 = 0x248\n 14494: jump @1054\n      : @588 [@dyn 291] (gas: 2)\n 14497: a3 = u64 [s1 + 0x118]\n 14501: t0 = 584, jump @1054\n      : @589 [@dyn 292] (gas: 9)\n 14507: a1 = s1 + 0x209c\n 14511: a3 = a1 + 0x604\n 14515: u64 [a3 + 0x20] = a4\n 14518: u64 [a3 + 0x28] = a5\n 14521: u64 [a3 + 0x30] = a2\n 14524: u64 [a3 + 0x38] = a0\n 14527: a0 = s1 + 0x1b20\n 14531: a1 = s1 + 0x26c0\n 14535: ra = 586, jump @6\n      : @590 [@dyn 293] (gas: 6)\n 14541: a0 = s1 + 0x1898\n 14545: a0 = u64 [a0 + 0x288]\n 14549: u64 [s1 + 0x118] = a0\n 14553: a0 = s1 + 0x1b00\n 14557: a1 = 0x40\n 14560: ra = 588, jump @2\n      : @591 [@dyn 294] (gas: 7)\n 14566: a3 = s1 + 0x1898\n 14570: a5 = a3 + 0x200\n 14574: a4 = u64 [a5 + 0x80]\n 14578: a1 = u64 [a5 + 0x78]\n 14581: a2 = u64 [a5 + 0x70]\n 14584: a0 = u64 [a5 + 0x68]\n 14587: t0 = 590, jump @1057\n      : @592 [@dyn 295] (gas: 1)\n 14593: jump @594 if a1 == 0\n      : @593 (gas: 1)\n 14596: jump @836\n      : @594 (gas: 11)\n 14599: a1 = u64 [s1 + 0x118]\n 14603: a1 = a1 << 0x20\n 14606: a1 = a1 >> 0x20\n 14609: u64 [a3 + 608] = 0\n 14613: u64 [a3 + 600] = 0\n 14617: u64 [a3 + 0x248] = a1\n 14621: a1 = s1 + 0x1ae0\n 14625: u64 [a3 + 592] = 0\n 14629: u64 [s1 + 0x118] = a0\n 14633: ra = 0x35e\n 14637: jump @4\n      : @595 (gas: 9)\n 14640: u64 [a2 + 444] = 0\n 14644: u64 [a2 + 436] = 0\n 14648: u64 [a2 + 428] = 0\n 14652: u64 [a2 + 420] = 0\n 14656: a0 = s1 + 0x2000\n 14660: i32 a0 = a0 + 0x240\n 14664: ra = 0x250\n 14668: ecalli 9 // 'value_transferred'\n 14670: fallthrough\n      : @596 [@dyn 296] (gas: 3)\n 14671: a3 = s1 + 0x209c\n 14675: a4 = a3 + 0x104\n 14679: t0 = 594, jump @1074\n      : @597 [@dyn 297] (gas: 1)\n 14685: jump @599 if a0 == 0\n      : @598 (gas: 1)\n 14688: jump @903\n      : @599 (gas: 3)\n 14691: a0 = u64 [s1 + 0x118]\n 14695: a0 = i32 [a0]\n 14697: jump @601 if a0 >u 3\n      : @600 (gas: 1)\n 14701: jump @904\n      : @601 (gas: 9)\n 14704: a0 = 0x30020\n 14709: u64 [s1 + 0x110] = a0\n 14713: i32 a0 = a0 + 0\n 14715: u64 [s1 + 0x108] = a0\n 14719: ra = 0x254\n 14723: ecalli 3 // 'caller'\n 14725: a2 = u64 [s1 + 0x110]\n 14729: t0 = 0x256\n 14733: jump @1053\n      : @602 [@dyn 298] (gas: 2)\n 14736: a2 = u64 [s1 + 0x110]\n 14740: t0 = 598, jump @1053\n      : @603 [@dyn 299] (gas: 7)\n 14746: u64 [s1 + 1592] = 0\n 14750: u64 [s1 + 0x630] = a1\n 14754: u64 [s1 + 0x628] = a0\n 14758: a1 = s1 + 0x620\n 14762: u64 [s1 + 0x620] = a3\n 14766: a0 = 0\n 14768: ra = 600, jump @4\n      : @604 [@dyn 300] (gas: 7)\n 14774: u64 [s1 + 1560] = 0\n 14778: u64 [s1 + 1552] = 0\n 14782: u64 [s1 + 1544] = 0\n 14786: a0 = 0x20\n 14789: a1 = s1 + 0x600\n 14793: u64 [s1 + 1536] = 0x1\n 14798: ra = 602, jump @4\n      : @605 [@dyn 301] (gas: 1)\n 14804: t0 = 604, jump @1064\n      : @606 [@dyn 302] (gas: 3)\n 14810: a1 = 0x20014\n 14815: a0 = i32 [0x20014]\n 14820: jump @608 if a0 >u 63\n      : @607 (gas: 2)\n 14824: u32 [0x20014] = 0x40\n 14830: fallthrough\n      : @608 (gas: 15)\n 14831: a0 = sp + 0xffffffffffffffe0\n 14834: a2 = a0 & 0xffffffffffffffe0\n 14837: u64 [s1 + 0xf0] = a2\n 14841: sp = a2\n 14843: a0 = 0x20020\n 14848: i32 a0 = a0 + 0\n 14850: i32 a2 = a2 + 0\n 14852: u64 [s1 + 0x100] = a1\n 14856: a1 = 0x40\n 14859: u64 [s1 + 0xf8] = a0\n 14863: ra = 0x25e\n 14867: ecalli 5 // 'hash_keccak_256'\n 14869: a3 = u64 [s1 + 0xf0]\n 14873: t0 = 0x260\n 14877: jump @1066\n      : @609 [@dyn 303] (gas: 2)\n 14880: a3 = u64 [s1 + 0xf0]\n 14884: t0 = 608, jump @1066\n      : @610 [@dyn 304] (gas: 2)\n 14890: a0 = s1 + 0x5e0\n 14894: ra = 610, jump @6\n      : @611 [@dyn 305] (gas: 7)\n 14900: a0 = u64 [s1 + 0x5e8]\n 14904: u64 [s1 + 0xd8] = a0\n 14908: a0 = u64 [s1 + 0x5e0]\n 14912: u64 [s1 + 0xd0] = a0\n 14916: a0 = s1 + 0x5c0\n 14920: a1 = u64 [s1 + 0x118]\n 14924: ra = 612, jump @6\n      : @612 [@dyn 306] (gas: 10)\n 14930: a0 = u64 [s1 + 0x5d8]\n 14934: a1 = u64 [s1 + 0x5d0]\n 14938: a2 = s1 + 0x209c\n 14942: u64 [a2 + 460] = 0\n 14946: u64 [a2 + 452] = 0\n 14950: u64 [a2 + 0x1dc] = a0\n 14954: u64 [a2 + 0x1d4] = a1\n 14958: a1 = s1 + 0x2260\n 14962: a0 = u64 [s1 + 0x118]\n 14966: ra = 614, jump @10\n      : @613 [@dyn 307] (gas: 6)\n 14972: a0 = u64 [s1 + 0x108]\n 14976: ra = 0x268\n 14980: ecalli 3 // 'caller'\n 14982: a2 = u64 [s1 + 0x110]\n 14986: t0 = 0x26a\n 14990: jump @1053\n      : @614 [@dyn 308] (gas: 2)\n 14993: a2 = u64 [s1 + 0x110]\n 14997: t0 = 618, jump @1053\n      : @615 [@dyn 309] (gas: 7)\n 15003: u64 [s1 + 1464] = 0\n 15007: u64 [s1 + 0x5b0] = a1\n 15011: u64 [s1 + 0x5a8] = a0\n 15015: a1 = s1 + 0x5a0\n 15019: u64 [s1 + 0x5a0] = a3\n 15023: a0 = 0\n 15025: ra = 620, jump @4\n      : @616 [@dyn 310] (gas: 7)\n 15031: u64 [s1 + 1432] = 0\n 15035: u64 [s1 + 1424] = 0\n 15039: u64 [s1 + 1408] = 0x1\n 15044: a0 = 0x20\n 15047: a1 = s1 + 0x580\n 15051: u64 [s1 + 1416] = 0\n 15055: ra = 622, jump @4\n      : @617 [@dyn 311] (gas: 3)\n 15061: a1 = u64 [s1 + 0x100]\n 15065: a0 = i32 [a1]\n 15067: jump @619 if a0 >u 63\n      : @618 (gas: 3)\n 15071: u32 [a1 + 0] = 0x40\n 15074: t0 = 0x270\n 15078: jump @1058\n      : @619 (gas: 1)\n 15081: t0 = 624, jump @1058\n      : @620 [@dyn 312] (gas: 19)\n 15087: a0 = u64 [s1 + 0xf8]\n 15091: ecalli 5 // 'hash_keccak_256'\n 15093: a1 = u64 [s1 + 0x118]\n 15097: a0 = u64 [a1 + 0x18]\n 15100: u64 [s1 + 0xc8] = a0\n 15104: a0 = u64 [a1 + 0x10]\n 15107: u64 [s1 + 0xc0] = a0\n 15111: a0 = u64 [a1 + 0x8]\n 15114: u64 [s1 + 0xb8] = a0\n 15118: a0 = u64 [a1]\n 15120: u64 [s1 + 0xb0] = a0\n 15124: a0 = s1 + 0x209c\n 15128: u64 [a0 + 508] = 0\n 15132: u64 [a0 + 500] = 0\n 15136: u64 [a0 + 492] = 0\n 15140: u64 [a0 + 484] = 0\n 15144: a0 = s1 + 0x560\n 15148: a1 = s1 + 0x2280\n 15152: ra = 626, jump @6\n      : @621 [@dyn 313] (gas: 8)\n 15158: a0 = u32 [s1 + 0x560]\n 15162: u64 [s1 + 1336] = 0\n 15166: u64 [s1 + 1328] = 0\n 15170: u64 [s1 + 0x520] = a0\n 15174: a0 = s1 + 0x540\n 15178: a1 = s1 + 0x520\n 15182: u64 [s1 + 1320] = 0\n 15186: ra = 628, jump @954\n      : @622 [@dyn 314] (gas: 11)\n 15192: a0 = u64 [s1 + 0x558]\n 15196: u64 [s1 + 0xf8] = a0\n 15200: a0 = u64 [s1 + 0x550]\n 15204: u64 [s1 + 0xf0] = a0\n 15208: a0 = u64 [s1 + 0x548]\n 15212: u64 [s1 + 0xe8] = a0\n 15216: a0 = u64 [s1 + 0x540]\n 15220: u64 [s1 + 0xe0] = a0\n 15224: a0 = s1 + 0x500\n 15228: a1 = 0x40\n 15231: ra = 630, jump @2\n      : @623 [@dyn 315] (gas: 16)\n 15237: a4 = s1 + 0x500\n 15241: a0 = u64 [a4 + 0x18]\n 15244: u64 [s1 + 0x100] = a0\n 15248: a1 = u64 [a4 + 0x10]\n 15251: u64 [s1 + 0x108] = a1\n 15255: a3 = u64 [a4 + 0x8]\n 15258: u64 [s1 + 0x110] = a3\n 15262: a2 = u64 [a4]\n 15264: u64 [s1 + 0x118] = a2\n 15268: a4 = s1 + 0x400\n 15272: u64 [a4 + 0xf8] = a0\n 15276: u64 [a4 + 0xf0] = a1\n 15280: u64 [a4 + 0xe8] = a3\n 15284: a0 = s1 + 0x4e0\n 15288: u64 [a4 + 0xe0] = a2\n 15292: ra = 632, jump @963\n      : @624 [@dyn 316] (gas: 7)\n 15298: a3 = s1 + 0x100\n 15302: a0 = u64 [a3]\n 15304: a1 = u64 [a3 + 0x10]\n 15307: a0 = a0 | a1\n 15310: a2 = u64 [a3 + 0x8]\n 15313: a1 = u64 [a3 + 0x18]\n 15316: t0 = 634, jump @1091\n      : @625 [@dyn 317] (gas: 1)\n 15322: jump @627 if a0 == 0\n      : @626 (gas: 1)\n 15325: jump @836\n      : @627 (gas: 12)\n 15328: a0 = u64 [s1 + 0xe0]\n 15332: a2 = s1 + 0x400\n 15336: u64 [a2 + 0xc0] = a0\n 15340: a0 = u64 [s1 + 0xe8]\n 15344: u64 [a2 + 0xc8] = a0\n 15348: a0 = u64 [s1 + 0xf0]\n 15352: u64 [a2 + 0xd0] = a0\n 15356: a1 = s1 + 0x4c0\n 15360: a0 = u64 [s1 + 0xf8]\n 15364: u64 [a2 + 0xd8] = a0\n 15368: a0 = u64 [s1 + 0x118]\n 15372: ra = 636, jump @4\n      : @628 [@dyn 318] (gas: 5)\n 15378: a3 = s1 + 0x100\n 15382: a0 = u64 [a3 + 0x8]\n 15385: a1 = u64 [a3]\n 15387: a0 = a0 | a1\n 15390: t0 = 638, jump @1081\n      : @629 [@dyn 319] (gas: 1)\n 15396: jump @631 if a1 != 0\n      : @630 (gas: 1)\n 15399: jump @836\n      : @631 (gas: 30)\n 15402: a0 = u64 [s1 + 0xb0]\n 15406: a0 = reverse a0\n 15408: a1 = u64 [s1 + 0xb8]\n 15412: a1 = reverse a1\n 15414: a2 = u64 [s1 + 0xc0]\n 15418: a2 = reverse a2\n 15420: a3 = u64 [s1 + 0xc8]\n 15424: a3 = reverse a3\n 15426: a4 = a3 + 0x4\n 15429: u64 [s1 + 0xf8] = a4\n 15433: a3 = a4 <u a3\n 15436: a4 = a2 + a3\n 15439: u64 [s1 + 0xf0] = a4\n 15443: a2 = a4 <u a2\n 15446: a2 = a3 if a3 == 0\n 15449: a2 = a2 + a1\n 15452: u64 [s1 + 0xe8] = a2\n 15456: a1 = a2 <u a1\n 15459: a0 = a0 + a1\n 15462: u64 [s1 + 0xe0] = a0\n 15466: a0 = u64 [s1 + 0x118]\n 15470: i32 a0 = a0 + 0x20\n 15473: u64 [s1 + 1208] = 0\n 15477: u64 [s1 + 1200] = 0\n 15481: a1 = u64 [s1 + 0xd0]\n 15485: u64 [s1 + 0x4a0] = a1\n 15489: a1 = s1 + 0x4a0\n 15493: a2 = u64 [s1 + 0xd8]\n 15497: u64 [s1 + 0x4a8] = a2\n 15501: ra = 640, jump @4\n      : @632 [@dyn 320] (gas: 20)\n 15507: a1 = s1 + 0x100\n 15511: a0 = u64 [a1]\n 15513: u64 [s1 + 0x478] = a0\n 15517: a0 = u64 [a1 + 0x8]\n 15520: u64 [s1 + 0x470] = a0\n 15524: a0 = u64 [a1 + 0x10]\n 15527: u64 [s1 + 0x468] = a0\n 15531: a0 = u64 [a1 + 0x18]\n 15534: u64 [s1 + 0x460] = a0\n 15538: a0 = u64 [s1 + 0xe0]\n 15542: u64 [s1 + 0x498] = a0\n 15546: a0 = u64 [s1 + 0xe8]\n 15550: u64 [s1 + 0x490] = a0\n 15554: a0 = u64 [s1 + 0xf0]\n 15558: u64 [s1 + 0x488] = a0\n 15562: a0 = s1 + 0x480\n 15566: a1 = s1 + 0x460\n 15570: a2 = u64 [s1 + 0xf8]\n 15574: u64 [s1 + 0x480] = a2\n 15578: ra = 642, jump @998\n      : @633 [@dyn 321] (gas: 3)\n 15584: a0 = s1 + 0x440\n 15588: a1 = 0x40\n 15591: ra = 644, jump @2\n      : @634 [@dyn 322] (gas: 13)\n 15597: a4 = s1 + 0x400\n 15601: a0 = u64 [a4 + 0x58]\n 15604: a1 = u64 [a4 + 0x50]\n 15607: a2 = u64 [a4 + 0x48]\n 15610: a3 = u64 [a4 + 0x40]\n 15613: a0 = a0 | a2\n 15616: a2 = a3 | a1\n 15619: a2 = a2 | a0\n 15622: a2 = a2 >> 0x20\n 15625: a0 = a0 | a1\n 15628: a0 = a0 << 0x20\n 15631: a0 = a0 | a2\n 15634: jump @636 if a0 == 0\n      : @635 (gas: 1)\n 15637: jump @836\n      : @636 (gas: 11)\n 15640: u64 [s1 + 1080] = 0\n 15644: u64 [s1 + 1072] = 0\n 15648: a0 = u64 [s1 + 0xd0]\n 15652: u64 [s1 + 0x420] = a0\n 15656: a1 = s1 + 0x420\n 15660: a0 = u64 [s1 + 0xd8]\n 15664: u64 [s1 + 0x428] = a0\n 15668: a0 = a3\n 15670: u64 [s1 + 0x118] = a3\n 15674: ra = 0x35e\n 15678: jump @4\n      : @637 (gas: 10)\n 15681: u64 [a2 + 700] = 0\n 15685: u64 [a2 + 692] = 0\n 15689: u64 [a2 + 684] = 0\n 15693: u64 [a2 + 676] = 0\n 15697: a0 = s1 + 0x2000\n 15701: i32 a0 = a0 + 0x340\n 15705: ra = 0x286\n 15709: ecalli 9 // 'value_transferred'\n 15711: t0 = 0x288\n 15715: jump @1093\n      : @638 [@dyn 323] (gas: 1)\n 15718: t0 = 648, jump @1093\n      : @639 [@dyn 324] (gas: 1)\n 15724: t0 = 650, jump @1074\n      : @640 [@dyn 325] (gas: 1)\n 15730: jump @642 if a0 == 0\n      : @641 (gas: 1)\n 15733: jump @905\n      : @642 (gas: 3)\n 15736: a0 = u64 [s1 + 0x118]\n 15740: a0 = i32 [a0]\n 15742: jump @644 if a0 >u 3\n      : @643 (gas: 1)\n 15746: jump @906\n      : @644 (gas: 9)\n 15749: a0 = 0x30020\n 15754: u64 [s1 + 0xd0] = a0\n 15758: i32 a0 = a0 + 0\n 15760: u64 [s1 + 0xb8] = a0\n 15764: ra = 0x28c\n 15768: ecalli 3 // 'caller'\n 15770: a2 = u64 [s1 + 0xd0]\n 15774: t0 = 0x28e\n 15778: jump @1051\n      : @645 [@dyn 326] (gas: 2)\n 15781: a2 = u64 [s1 + 0xd0]\n 15785: t0 = 654, jump @1051\n      : @646 [@dyn 327] (gas: 9)\n 15791: u64 [a2 + 736] = 0\n 15795: a4 = a2 + 0x200\n 15799: u64 [a4 + 0xd8] = a1\n 15803: u64 [a4 + 0xd0] = a0\n 15807: a1 = s1 + 0x7ff\n 15811: a1 = a1 + 0x361\n 15815: u64 [a4 + 0xc8] = a3\n 15819: a0 = 0\n 15821: ra = 656, jump @4\n      : @647 [@dyn 328] (gas: 11)\n 15827: a0 = s1 + 0x7ff\n 15831: a0 = a0 + 0x99\n 15835: u64 [a0 + 704] = 0\n 15839: u64 [a0 + 696] = 0\n 15843: u64 [a0 + 688] = 0\n 15847: a3 = a0\n 15849: a0 = 0x20\n 15852: a1 = s1 + 0x7ff\n 15856: a1 = a1 + 0x341\n 15860: u64 [a3 + 680] = 0x1\n 15865: ra = 658, jump @4\n      : @648 [@dyn 329] (gas: 1)\n 15871: t0 = 660, jump @1064\n      : @649 [@dyn 330] (gas: 3)\n 15877: a1 = 0x20014\n 15882: a0 = i32 [0x20014]\n 15887: jump @651 if a0 >u 63\n      : @650 (gas: 3)\n 15891: u32 [0x20014] = 0x40\n 15897: t0 = 0x296\n 15901: jump @1086\n      : @651 (gas: 1)\n 15904: t0 = 662, jump @1086\n      : @652 [@dyn 331] (gas: 11)\n 15910: a0 = 0x20020\n 15915: i32 a0 = a0 + 0\n 15917: u64 [s1 + 0xc8] = a1\n 15921: i32 a2 = a2 + 0\n 15923: a1 = 0x40\n 15926: u64 [s1 + 0xc0] = a0\n 15930: ra = 0x298\n 15934: ecalli 5 // 'hash_keccak_256'\n 15936: a3 = u64 [s1 + 0x110]\n 15940: t0 = 0x29a\n 15944: jump @1059\n      : @653 [@dyn 332] (gas: 2)\n 15947: a3 = u64 [s1 + 0x110]\n 15951: t0 = 666, jump @1059\n      : @654 [@dyn 333] (gas: 3)\n 15957: a0 = s1 + 0x7ff\n 15961: a0 = a0 + 0x321\n 15965: ra = 668, jump @6\n      : @655 [@dyn 334] (gas: 17)\n 15971: a3 = s1 + 0x7ff\n 15975: a3 = a3 + 0x99\n 15979: a4 = a3 + 0x200\n 15983: a0 = u64 [a4 + 0x88]\n 15987: a1 = u64 [a4 + 0xa0]\n 15991: a2 = u64 [a4 + 0x98]\n 15995: a3 = u64 [a4 + 0x90]\n 15999: a0 = a0 & 0xffffffffffffff00\n 16003: a4 = s1 + 0x209c\n 16007: a5 = a4 + 0x204\n 16011: u64 [a5 + 0xd8] = a1\n 16015: u64 [a5 + 0xd0] = a2\n 16019: u64 [a5 + 0xc8] = a3\n 16023: u64 [a5 + 0xc0] = a0\n 16027: a1 = s1 + 0x2360\n 16031: a0 = u64 [s1 + 0x118]\n 16035: ra = 670, jump @10\n      : @656 [@dyn 335] (gas: 6)\n 16041: a0 = u64 [s1 + 0xb8]\n 16045: ra = 0x2a0\n 16049: ecalli 3 // 'caller'\n 16051: a2 = u64 [s1 + 0xd0]\n 16055: t0 = 0x2a2\n 16059: jump @1051\n      : @657 [@dyn 336] (gas: 2)\n 16062: a2 = u64 [s1 + 0xd0]\n 16066: t0 = 674, jump @1051\n      : @658 [@dyn 337] (gas: 9)\n 16072: u64 [a2 + 640] = 0\n 16076: a4 = a2 + 0x200\n 16080: u64 [a4 + 0x78] = a1\n 16083: u64 [a4 + 0x70] = a0\n 16086: a1 = s1 + 0x7ff\n 16090: a1 = a1 + 0x301\n 16094: u64 [a4 + 0x68] = a3\n 16097: a0 = 0\n 16099: ra = 676, jump @4\n      : @659 [@dyn 338] (gas: 11)\n 16105: a1 = s1 + 0x7ff\n 16109: a1 = a1 + 0x99\n 16113: u64 [a1 + 608] = 0\n 16117: u64 [a1 + 600] = 0\n 16121: u64 [a1 + 584] = 0x1\n 16126: a2 = a1\n 16128: a0 = 0x20\n 16131: a1 = s1 + 0x7ff\n 16135: a1 = a1 + 0x2e1\n 16139: u64 [a2 + 592] = 0\n 16143: ra = 678, jump @4\n      : @660 [@dyn 339] (gas: 7)\n 16149: a1 = u64 [s1 + 0xc8]\n 16153: a0 = sp + 0xffffffffffffffe0\n 16156: a0 = a0 & 0xffffffffffffffe0\n 16159: u64 [s1 + 0x118] = a0\n 16163: sp = a0\n 16165: a0 = i32 [a1]\n 16167: jump @662 if a0 >u 63\n      : @661 (gas: 3)\n 16171: u32 [a1 + 0] = 0x40\n 16174: t0 = 0x2a8\n 16178: jump @1079\n      : @662 (gas: 1)\n 16181: t0 = 680, jump @1079\n      : @663 [@dyn 340] (gas: 5)\n 16187: ra = 0x2aa\n 16191: ecalli 5 // 'hash_keccak_256'\n 16193: a3 = u64 [s1 + 0x110]\n 16197: t0 = 0x2ac\n 16201: jump @1055\n      : @664 [@dyn 341] (gas: 2)\n 16204: a3 = u64 [s1 + 0x110]\n 16208: t0 = 684, jump @1055\n      : @665 [@dyn 342] (gas: 12)\n 16214: a1 = u64 [s1 + 0x118]\n 16218: u64 [s1 + 0xf0] = a4\n 16222: u64 [a1] = a4\n 16224: u64 [s1 + 0xe0] = a5\n 16228: u64 [a1 + 0x8] = a5\n 16231: u64 [s1 + 0xd8] = a2\n 16235: u64 [a1 + 0x10] = a2\n 16238: u64 [s1 + 0xe8] = a0\n 16242: u64 [a1 + 0x18] = a0\n 16245: a0 = s1 + 0x7ff\n 16249: a0 = a0 + 0x2c1\n 16253: ra = 686, jump @6\n      : @666 [@dyn 343] (gas: 19)\n 16259: a0 = s1 + 0x7ff\n 16263: a0 = a0 + 0x99\n 16267: a2 = a0 + 0x200\n 16271: a1 = u64 [a2 + 0x40]\n 16274: u64 [s1 + 0x110] = a1\n 16278: a1 = u64 [a2 + 0x38]\n 16281: u64 [s1 + 0x108] = a1\n 16285: a1 = u64 [a2 + 0x30]\n 16288: u64 [s1 + 0xf8] = a1\n 16292: a0 = u64 [a2 + 0x28]\n 16295: u64 [s1 + 0x100] = a0\n 16299: a0 = s1 + 0x209c\n 16303: u64 [a0 + 764] = 0\n 16307: u64 [a0 + 756] = 0\n 16311: u64 [a0 + 748] = 0\n 16315: u64 [a0 + 740] = 0\n 16319: a1 = s1 + 0x2380\n 16323: a0 = u64 [s1 + 0x118]\n 16327: ra = 688, jump @10\n      : @667 [@dyn 344] (gas: 9)\n 16333: a3 = s1 + 0x100\n 16337: a0 = u64 [a3 + 0x10]\n 16340: a1 = u64 [s1 + 0xf8]\n 16344: a0 = a0 | a1\n 16347: a1 = u64 [a3 + 0x8]\n 16350: a2 = u64 [a3]\n 16352: a1 = a1 | a2\n 16355: a0 = a0 | a1\n 16358: jump @776 if a0 != 0\n      : @668 (gas: 6)\n 16362: a0 = u64 [s1 + 0xb8]\n 16366: ra = 0x2b2\n 16370: ecalli 3 // 'caller'\n 16372: a2 = u64 [s1 + 0xd0]\n 16376: t0 = 0x2b4\n 16380: jump @1051\n      : @669 [@dyn 345] (gas: 2)\n 16383: a2 = u64 [s1 + 0xd0]\n 16387: t0 = 692, jump @1051\n      : @670 [@dyn 346] (gas: 9)\n 16393: u64 [a2 + 512] = 0\n 16397: a4 = a2 + 0x100\n 16401: u64 [a4 + 0xf8] = a1\n 16405: u64 [a4 + 0xf0] = a0\n 16409: a1 = s1 + 0x7ff\n 16413: a1 = a1 + 0x281\n 16417: u64 [a4 + 0xe8] = a3\n 16421: a0 = 0\n 16423: ra = 694, jump @4\n      : @671 [@dyn 347] (gas: 11)\n 16429: a0 = s1 + 0x7ff\n 16433: a0 = a0 + 0x99\n 16437: u64 [a0 + 480] = 0\n 16441: u64 [a0 + 472] = 0\n 16445: u64 [a0 + 464] = 0\n 16449: a3 = a0\n 16451: a0 = 0x20\n 16454: a1 = s1 + 0x7ff\n 16458: a1 = a1 + 0x261\n 16462: u64 [a3 + 456] = 0x1\n 16467: ra = 696, jump @4\n      : @672 [@dyn 348] (gas: 1)\n 16473: t0 = 698, jump @1064\n      : @673 [@dyn 349] (gas: 3)\n 16479: a1 = u64 [s1 + 0xc8]\n 16483: a0 = i32 [a1]\n 16485: jump @675 if a0 >u 63\n      : @674 (gas: 3)\n 16489: u32 [a1 + 0] = 0x40\n 16492: t0 = 0x2bc\n 16496: jump @1079\n      : @675 (gas: 1)\n 16499: t0 = 700, jump @1079\n      : @676 [@dyn 350] (gas: 5)\n 16505: ra = 0x2be\n 16509: ecalli 5 // 'hash_keccak_256'\n 16511: a3 = u64 [s1 + 0x110]\n 16515: t0 = 0x2c0\n 16519: jump @1054\n      : @677 [@dyn 351] (gas: 2)\n 16522: a3 = u64 [s1 + 0x110]\n 16526: t0 = 704, jump @1054\n      : @678 [@dyn 352] (gas: 8)\n 16532: a1 = u64 [s1 + 0x118]\n 16536: u64 [a1] = a4\n 16538: u64 [a1 + 0x8] = a5\n 16541: u64 [a1 + 0x10] = a2\n 16544: u64 [a1 + 0x18] = a0\n 16547: a0 = s1 + 0x7ff\n 16551: a0 = a0 + 0x241\n 16555: ra = 706, jump @6\n      : @679 [@dyn 353] (gas: 17)\n 16561: a3 = s1 + 0x7ff\n 16565: a3 = a3 + 0x99\n 16569: a0 = u32 [a3 + 0x1ac]\n 16573: a4 = a3 + 0x100\n 16577: a1 = u64 [a4 + 0xc0]\n 16581: a2 = u64 [a4 + 0xb8]\n 16585: a3 = u64 [a4 + 0xb0]\n 16589: a0 = a0 << 0x20\n 16592: a4 = s1 + 0x209c\n 16596: a5 = a4 + 0x304\n 16600: u64 [a5 + 0x38] = a1\n 16603: u64 [a5 + 0x30] = a2\n 16606: u64 [a5 + 0x28] = a3\n 16609: u64 [a5 + 0x20] = a0\n 16612: a1 = s1 + 0x23c0\n 16616: a0 = u64 [s1 + 0x118]\n 16620: ra = 708, jump @10\n      : @680 [@dyn 354] (gas: 6)\n 16626: a0 = u64 [s1 + 0xb8]\n 16630: ra = 0x2c6\n 16634: ecalli 3 // 'caller'\n 16636: a2 = u64 [s1 + 0xd0]\n 16640: t0 = 0x2c8\n 16644: jump @1051\n      : @681 [@dyn 355] (gas: 2)\n 16647: a2 = u64 [s1 + 0xd0]\n 16651: t0 = 712, jump @1051\n      : @682 [@dyn 356] (gas: 9)\n 16657: u64 [a2 + 416] = 0\n 16661: a4 = a2 + 0x100\n 16665: u64 [a4 + 0x98] = a1\n 16669: u64 [a4 + 0x90] = a0\n 16673: a1 = s1 + 0x7ff\n 16677: a1 = a1 + 0x221\n 16681: u64 [a4 + 0x88] = a3\n 16685: a0 = 0\n 16687: ra = 714, jump @4\n      : @683 [@dyn 357] (gas: 11)\n 16693: a1 = s1 + 0x7ff\n 16697: a1 = a1 + 0x99\n 16701: u64 [a1 + 384] = 0\n 16705: u64 [a1 + 376] = 0\n 16709: u64 [a1 + 360] = 0x1\n 16714: a2 = a1\n 16716: a0 = 0x20\n 16719: a1 = s1 + 0x7ff\n 16723: a1 = a1 + 0x201\n 16727: u64 [a2 + 368] = 0\n 16731: ra = 716, jump @4\n      : @684 [@dyn 358] (gas: 3)\n 16737: a1 = u64 [s1 + 0xc8]\n 16741: a0 = i32 [a1]\n 16743: jump @686 if a0 >u 63\n      : @685 (gas: 3)\n 16747: u32 [a1 + 0] = 0x40\n 16750: t0 = 0x2ce\n 16754: jump @1058\n      : @686 (gas: 1)\n 16757: t0 = 718, jump @1058\n      : @687 [@dyn 359] (gas: 5)\n 16763: a0 = u64 [s1 + 0xc0]\n 16767: ra = 0x2d0\n 16771: ecalli 5 // 'hash_keccak_256'\n 16773: t0 = 0x2d2\n 16777: jump @1056\n      : @688 [@dyn 360] (gas: 1)\n 16780: t0 = 722, jump @1056\n      : @689 [@dyn 361] (gas: 9)\n 16786: a5 = a4 + 0x304\n 16790: u64 [a5 + 0x58] = a3\n 16793: u64 [a5 + 0x50] = a2\n 16796: u64 [a5 + 0x48] = a1\n 16799: u64 [a5 + 0x40] = a0\n 16802: a0 = s1 + 0x7ff\n 16806: a0 = a0 + 0x1e1\n 16810: a1 = s1 + 0x23e0\n 16814: ra = 724, jump @6\n      : @690 [@dyn 362] (gas: 10)\n 16820: a1 = s1 + 0x7ff\n 16824: a1 = a1 + 0x99\n 16828: a0 = u64 [a1 + 0x150]\n 16832: u64 [s1 + 0x118] = a0\n 16836: a0 = u64 [a1 + 0x148]\n 16840: u64 [s1 + 0x110] = a0\n 16844: a0 = s1 + 0x7ff\n 16848: a0 = a0 + 0x1c1\n 16852: a1 = 0x40\n 16855: ra = 726, jump @2\n      : @691 [@dyn 363] (gas: 8)\n 16861: a3 = s1 + 0x7ff\n 16865: a3 = a3 + 0x99\n 16869: a5 = a3 + 0x100\n 16873: a4 = u64 [a5 + 0x40]\n 16876: a1 = u64 [a5 + 0x38]\n 16879: a2 = u64 [a5 + 0x30]\n 16882: a0 = u64 [a5 + 0x28]\n 16885: t0 = 728, jump @1057\n      : @692 [@dyn 364] (gas: 1)\n 16891: jump @694 if a1 == 0\n      : @693 (gas: 1)\n 16894: jump @836\n      : @694 (gas: 1)\n 16897: t0 = 730, jump @1084\n      : @695 [@dyn 365] (gas: 9)\n 16903: u64 [a3 + 288] = 0\n 16907: u64 [a3 + 280] = 0\n 16911: u64 [a3 + 0x108] = a1\n 16915: a1 = s1 + 0x7ff\n 16919: a1 = a1 + 0x1a1\n 16923: u64 [a3 + 272] = 0\n 16927: u64 [s1 + 0x118] = a0\n 16931: ra = 0x35e\n 16935: jump @4\n      : @696 (gas: 10)\n 16938: u64 [a2 + 1276] = 0\n 16942: u64 [a2 + 1268] = 0\n 16946: u64 [a2 + 1260] = 0\n 16950: u64 [a2 + 1252] = 0\n 16954: a0 = s1 + 0x2000\n 16958: i32 a0 = a0 + 0x580\n 16962: ra = 0x2dc\n 16966: ecalli 9 // 'value_transferred'\n 16968: t0 = 0x2de\n 16972: jump @1073\n      : @697 [@dyn 366] (gas: 1)\n 16975: t0 = 734, jump @1073\n      : @698 [@dyn 367] (gas: 1)\n 16981: t0 = 736, jump @1089\n      : @699 [@dyn 368] (gas: 1)\n 16987: jump @701 if a0 == 0\n      : @700 (gas: 1)\n 16990: jump @907\n      : @701 (gas: 3)\n 16993: a0 = u64 [s1 + 0x118]\n 16997: a0 = i32 [a0]\n 16999: jump @703 if a0 >u 35\n      : @702 (gas: 1)\n 17003: jump @908\n      : @703 (gas: 5)\n 17006: a0 = s1 + 0x2000\n 17010: i32 a0 = a0 + 0x5a0\n 17014: a1 = 0x4\n 17017: ecalli 1 // 'call_data_load'\n 17019: fallthrough\n      : @704 (gas: 18)\n 17020: a0 = s1 + 0x209c\n 17024: a5 = a0 + 0x504\n 17028: a1 = u64 [a5 + 0x18]\n 17031: a2 = u64 [a5 + 0x10]\n 17034: a3 = u64 [a5 + 0x8]\n 17037: a4 = u64 [a5]\n 17039: u64 [s1 + 0xf0] = a1\n 17043: u64 [s1 + 0xe0] = a3\n 17047: a0 = a3 | a1\n 17050: u64 [s1 + 0xd8] = a4\n 17054: a1 = a4 | a2\n 17057: a1 = a1 | a0\n 17060: a1 = a1 >> 0x20\n 17063: u64 [s1 + 0xe8] = a2\n 17067: a0 = a0 | a2\n 17070: a0 = a0 << 0x20\n 17073: a0 = a0 | a1\n 17076: jump @706 if a0 == 0\n      : @705 (gas: 1)\n 17079: jump @909\n      : @706 (gas: 9)\n 17082: a0 = 0x30020\n 17087: u64 [s1 + 0x118] = a0\n 17091: i32 a0 = a0 + 0\n 17093: u64 [s1 + 0x110] = a0\n 17097: ra = 0x2e2\n 17101: ecalli 3 // 'caller'\n 17103: a2 = u64 [s1 + 0x118]\n 17107: t0 = 0x2e4\n 17111: jump @1052\n      : @707 [@dyn 369] (gas: 2)\n 17114: a2 = u64 [s1 + 0x118]\n 17118: t0 = 740, jump @1052\n      : @708 [@dyn 370] (gas: 8)\n 17124: u64 [a2 + 1888] = 0\n 17128: a4 = a2 + 0x700\n 17132: u64 [a4 + 0x58] = a1\n 17135: u64 [a4 + 0x50] = a0\n 17138: a1 = s1 + 0x17e0\n 17142: u64 [a4 + 0x48] = a3\n 17145: a0 = 0\n 17147: ra = 742, jump @4\n      : @709 [@dyn 371] (gas: 9)\n 17153: a0 = s1 + 0x1098\n 17157: u64 [a0 + 1856] = 0\n 17161: u64 [a0 + 1848] = 0\n 17165: u64 [a0 + 1840] = 0\n 17169: a3 = a0\n 17171: a0 = 0x20\n 17174: a1 = s1 + 0x17c0\n 17178: u64 [a3 + 1832] = 0x1\n 17183: ra = 744, jump @4\n      : @710 [@dyn 372] (gas: 7)\n 17189: a0 = sp + 0xffffffffffffffe0\n 17192: a0 = a0 & 0xffffffffffffffe0\n 17195: u64 [s1 + 0xf8] = a0\n 17199: sp = a0\n 17201: a1 = 0x20014\n 17206: a0 = i32 [0x20014]\n 17211: jump @712 if a0 >u 63\n      : @711 (gas: 2)\n 17215: u32 [0x20014] = 0x40\n 17221: fallthrough\n      : @712 (gas: 14)\n 17222: a0 = sp + 0xffffffffffffffe0\n 17225: a2 = a0 & 0xffffffffffffffe0\n 17228: u64 [s1 + 0xd0] = a2\n 17232: sp = a2\n 17234: a0 = 0x20020\n 17239: i32 a0 = a0 + 0\n 17241: i32 a2 = a2 + 0\n 17243: u64 [s1 + 0x108] = a1\n 17247: a1 = 0x40\n 17250: u64 [s1 + 0x100] = a0\n 17254: ra = 0x2ea\n 17258: ecalli 5 // 'hash_keccak_256'\n 17260: t0 = 0x2ec\n 17264: jump @1062\n      : @713 [@dyn 373] (gas: 1)\n 17267: t0 = 748, jump @1062\n      : @714 [@dyn 374] (gas: 7)\n 17273: a1 = u64 [s1 + 0xf8]\n 17277: u64 [a1] = a3\n 17279: u64 [a1 + 0x8] = a2\n 17282: u64 [a1 + 0x10] = a4\n 17285: u64 [a1 + 0x18] = a0\n 17288: a0 = s1 + 0x17a0\n 17292: ra = 750, jump @6\n      : @715 [@dyn 375] (gas: 17)\n 17298: a3 = s1 + 0x1098\n 17302: a4 = a3 + 0x700\n 17306: a0 = u64 [a4 + 0x8]\n 17309: a1 = u64 [a4 + 0x10]\n 17312: a2 = u64 [a4 + 0x20]\n 17315: a3 = u64 [a4 + 0x18]\n 17318: a0 = a0 & 0xffffffffffffff00\n 17322: a0 = a0 | 0x1\n 17325: a4 = s1 + 0x209c\n 17329: a5 = a4 + 0x504\n 17333: u64 [a5 + 0x38] = a2\n 17336: u64 [a5 + 0x30] = a3\n 17339: u64 [a5 + 0x28] = a1\n 17342: u64 [a5 + 0x20] = a0\n 17345: a1 = s1 + 0x25c0\n 17349: a0 = u64 [s1 + 0xf8]\n 17353: ra = 752, jump @10\n      : @716 [@dyn 376] (gas: 6)\n 17359: a0 = u64 [s1 + 0x110]\n 17363: ra = 0x2f2\n 17367: ecalli 3 // 'caller'\n 17369: a2 = u64 [s1 + 0x118]\n 17373: t0 = 0x2f4\n 17377: jump @1052\n      : @717 [@dyn 377] (gas: 2)\n 17380: a2 = u64 [s1 + 0x118]\n 17384: t0 = 756, jump @1052\n      : @718 [@dyn 378] (gas: 8)\n 17390: u64 [a2 + 1792] = 0\n 17394: a4 = a2 + 0x600\n 17398: u64 [a4 + 0xf8] = a1\n 17402: u64 [a4 + 0xf0] = a0\n 17406: a1 = s1 + 0x1780\n 17410: u64 [a4 + 0xe8] = a3\n 17414: a0 = 0\n 17416: ra = 758, jump @4\n      : @719 [@dyn 379] (gas: 3)\n 17422: t0 = 0x2f8\n 17426: a1 = s1 + 0x1098\n 17430: fallthrough\n      : @720 [@dyn 380] (gas: 8)\n 17431: u64 [a1 + 1760] = 0\n 17435: u64 [a1 + 1752] = 0\n 17439: u64 [a1 + 1736] = 0x1\n 17444: a2 = a1\n 17446: a0 = 0x20\n 17449: a1 = s1 + 0x1760\n 17453: u64 [a2 + 1744] = 0\n 17457: ra = 762, jump @4\n      : @721 [@dyn 381] (gas: 7)\n 17463: a1 = u64 [s1 + 0x108]\n 17467: a0 = sp + 0xffffffffffffffe0\n 17470: a0 = a0 & 0xffffffffffffffe0\n 17473: u64 [s1 + 0xf8] = a0\n 17477: sp = a0\n 17479: a0 = i32 [a1]\n 17481: jump @723 if a0 >u 63\n      : @722 (gas: 2)\n 17485: u32 [a1 + 0] = 0x40\n 17488: fallthrough\n      : @723 (gas: 12)\n 17489: a0 = sp + 0xffffffffffffffe0\n 17492: a0 = a0 & 0xffffffffffffffe0\n 17495: u64 [s1 + 0xd0] = a0\n 17499: sp = a0\n 17501: i32 a2 = a0 + 0\n 17503: a1 = 0x40\n 17506: a0 = u64 [s1 + 0x100]\n 17510: ra = 0x2fc\n 17514: ecalli 5 // 'hash_keccak_256'\n 17516: a3 = u64 [s1 + 0xd0]\n 17520: t0 = 0x2fe\n 17524: jump @1054\n      : @724 [@dyn 382] (gas: 2)\n 17527: a3 = u64 [s1 + 0xd0]\n 17531: t0 = 766, jump @1054\n      : @725 [@dyn 383] (gas: 7)\n 17537: a1 = u64 [s1 + 0xf8]\n 17541: u64 [a1] = a4\n 17543: u64 [a1 + 0x8] = a5\n 17546: u64 [a1 + 0x10] = a2\n 17549: u64 [a1 + 0x18] = a0\n 17552: a0 = s1 + 0x1740\n 17556: ra = 768, jump @6\n      : @726 [@dyn 384] (gas: 24)\n 17562: a3 = s1 + 0x1098\n 17566: a0 = u32 [a3 + 0x6ac]\n 17570: a0 = a0 << 0x20\n 17573: a4 = a3 + 0x600\n 17577: a1 = u64 [a4 + 0xb0]\n 17581: a2 = u64 [a4 + 0xb8]\n 17585: a3 = u64 [a4 + 0xc0]\n 17589: a4 = u64 [s1 + 0xd8]\n 17593: a0 = a0 | a4\n 17596: a4 = u64 [s1 + 0xe0]\n 17600: a1 = a1 | a4\n 17603: a4 = u64 [s1 + 0xe8]\n 17607: a2 = a2 | a4\n 17610: a4 = u64 [s1 + 0xf0]\n 17614: a3 = a3 | a4\n 17617: a4 = s1 + 0x209c\n 17621: a5 = a4 + 0x504\n 17625: u64 [a5 + 0x58] = a3\n 17628: u64 [a5 + 0x50] = a2\n 17631: u64 [a5 + 0x48] = a1\n 17634: u64 [a5 + 0x40] = a0\n 17637: a1 = s1 + 0x25e0\n 17641: a0 = u64 [s1 + 0xf8]\n 17645: ra = 770, jump @10\n      : @727 [@dyn 385] (gas: 6)\n 17651: a0 = u64 [s1 + 0x110]\n 17655: ra = 0x304\n 17659: ecalli 3 // 'caller'\n 17661: a2 = u64 [s1 + 0x118]\n 17665: t0 = 0x306\n 17669: jump @1052\n      : @728 [@dyn 386] (gas: 2)\n 17672: a2 = u64 [s1 + 0x118]\n 17676: t0 = 774, jump @1052\n      : @729 [@dyn 387] (gas: 8)\n 17682: u64 [a2 + 1696] = 0\n 17686: a4 = a2 + 0x600\n 17690: u64 [a4 + 0x98] = a1\n 17694: u64 [a4 + 0x90] = a0\n 17698: a1 = s1 + 0x1720\n 17702: u64 [a4 + 0x88] = a3\n 17706: a0 = 0\n 17708: ra = 776, jump @4\n      : @730 [@dyn 388] (gas: 2)\n 17714: a1 = s1 + 0x1098\n 17718: t0 = 778, jump @1088\n      : @731 [@dyn 389] (gas: 3)\n 17724: a1 = s1 + 0x1700\n 17728: u64 [a2 + 1648] = 0\n 17732: ra = 780, jump @4\n      : @732 [@dyn 390] (gas: 3)\n 17738: a1 = u64 [s1 + 0x108]\n 17742: a0 = i32 [a1]\n 17744: jump @734 if a0 >=u 64\n      : @733 (gas: 3)\n 17748: u32 [a1 + 0] = 0x40\n 17751: t0 = 0x30e\n 17755: jump @1058\n      : @734 (gas: 1)\n 17758: t0 = 782, jump @1058\n      : @735 [@dyn 391] (gas: 5)\n 17764: a0 = u64 [s1 + 0x100]\n 17768: ra = 0x310\n 17772: ecalli 5 // 'hash_keccak_256'\n 17774: t0 = 0x312\n 17778: jump @1056\n      : @736 [@dyn 392] (gas: 1)\n 17781: t0 = 786, jump @1056\n      : @737 [@dyn 393] (gas: 8)\n 17787: a5 = a4 + 0x504\n 17791: u64 [a5 + 0x78] = a3\n 17794: u64 [a5 + 0x70] = a2\n 17797: u64 [a5 + 0x68] = a1\n 17800: u64 [a5 + 0x60] = a0\n 17803: a0 = s1 + 0x16e0\n 17807: a1 = s1 + 0x2600\n 17811: ra = 788, jump @6\n      : @738 [@dyn 394] (gas: 3)\n 17817: t0 = 0x316\n 17821: a1 = s1 + 0x1098\n 17825: fallthrough\n      : @739 [@dyn 395] (gas: 7)\n 17826: a0 = u64 [a1 + 0x650]\n 17830: u64 [s1 + 0x118] = a0\n 17834: a0 = u64 [a1 + 0x648]\n 17838: u64 [s1 + 0x110] = a0\n 17842: a0 = s1 + 0x16c0\n 17846: a1 = 0x40\n 17849: ra = 792, jump @2\n      : @740 [@dyn 396] (gas: 7)\n 17855: a3 = s1 + 0x1098\n 17859: a5 = a3 + 0x600\n 17863: a4 = u64 [a5 + 0x40]\n 17866: a1 = u64 [a5 + 0x38]\n 17869: a2 = u64 [a5 + 0x30]\n 17872: a0 = u64 [a5 + 0x28]\n 17875: t0 = 794, jump @1057\n      : @741 [@dyn 397] (gas: 1)\n 17881: jump @836 if a1 != 0\n      : @742 (gas: 1)\n 17885: t0 = 796, jump @1084\n      : @743 [@dyn 398] (gas: 8)\n 17891: u64 [a3 + 1568] = 0\n 17895: u64 [a3 + 1560] = 0\n 17899: u64 [a3 + 0x608] = a1\n 17903: a1 = s1 + 0x16a0\n 17907: u64 [a3 + 1552] = 0\n 17911: u64 [s1 + 0x118] = a0\n 17915: ra = 0x35e\n 17919: jump @4\n      : @744 (gas: 10)\n 17922: u64 [a2 + 1532] = 0\n 17926: u64 [a2 + 1524] = 0\n 17930: u64 [a2 + 1516] = 0\n 17934: u64 [a2 + 1508] = 0\n 17938: a0 = s1 + 0x2000\n 17942: i32 a0 = a0 + 0x680\n 17946: ra = 0x31e\n 17950: ecalli 9 // 'value_transferred'\n 17952: t0 = 0x320\n 17956: jump @1092\n      : @745 [@dyn 399] (gas: 1)\n 17959: t0 = 800, jump @1092\n      : @746 [@dyn 400] (gas: 1)\n 17965: t0 = 802, jump @1089\n      : @747 [@dyn 401] (gas: 1)\n 17971: jump @749 if a0 == 0\n      : @748 (gas: 1)\n 17974: jump @910\n      : @749 (gas: 3)\n 17977: a0 = u64 [s1 + 0x118]\n 17981: a0 = i32 [a0]\n 17983: jump @751 if a0 >u 3\n      : @750 (gas: 1)\n 17987: jump @911\n      : @751 (gas: 8)\n 17990: a0 = 0x30020\n 17995: u64 [s1 + 0x118] = a0\n 17999: i32 a0 = a0 + 0\n 18001: ra = 0x324\n 18005: ecalli 3 // 'caller'\n 18007: a2 = u64 [s1 + 0x118]\n 18011: t0 = 0x326\n 18015: jump @1050\n      : @752 [@dyn 402] (gas: 2)\n 18018: a2 = u64 [s1 + 0x118]\n 18022: t0 = 806, jump @1050\n      : @753 [@dyn 403] (gas: 8)\n 18028: u64 [a2 + 576] = 0\n 18032: a4 = a2 + 0x200\n 18036: u64 [a4 + 0x38] = a1\n 18039: u64 [a4 + 0x30] = a0\n 18042: a1 = s1 + 0x1ac0\n 18046: u64 [a4 + 0x28] = a3\n 18049: a0 = 0\n 18051: ra = 808, jump @4\n      : @754 [@dyn 404] (gas: 3)\n 18057: t0 = 0x32a\n 18061: a1 = s1 + 0x1898\n 18065: fallthrough\n      : @755 [@dyn 405] (gas: 8)\n 18066: u64 [a1 + 544] = 0\n 18070: u64 [a1 + 536] = 0\n 18074: u64 [a1 + 520] = 0x1\n 18079: a2 = a1\n 18081: a0 = 0x20\n 18084: a1 = s1 + 0x1aa0\n 18088: u64 [a2 + 528] = 0\n 18092: ra = 812, jump @4\n      : @756 [@dyn 406] (gas: 1)\n 18098: t0 = 814, jump @1064\n      : @757 [@dyn 407] (gas: 4)\n 18104: a2 = 0x20014\n 18109: a0 = i32 [0x20014]\n 18114: a1 = 0x3f\n 18117: jump @759 if a1 <u a0\n      : @758 (gas: 4)\n 18120: u32 [0x20014] = 0x40\n 18126: u64 [s1 + 0x108] = a2\n 18130: t0 = 0x330\n 18134: jump @1086\n      : @759 (gas: 2)\n 18137: u64 [s1 + 0x108] = a2\n 18141: t0 = 816, jump @1086\n      : @760 [@dyn 408] (gas: 10)\n 18147: a0 = 0x20020\n 18152: i32 a0 = a0 + 0\n 18154: i32 a2 = a2 + 0\n 18156: a1 = 0x40\n 18159: u64 [s1 + 0x100] = a0\n 18163: ra = 0x332\n 18167: ecalli 5 // 'hash_keccak_256'\n 18169: a3 = u64 [s1 + 0x110]\n 18173: t0 = 0x334\n 18177: jump @1055\n      : @761 [@dyn 409] (gas: 2)\n 18180: a3 = u64 [s1 + 0x110]\n 18184: t0 = 820, jump @1055\n      : @762 [@dyn 410] (gas: 12)\n 18190: u64 [s1 + 0x110] = a4\n 18194: a1 = u64 [s1 + 0x118]\n 18198: u64 [a1] = a4\n 18200: u64 [s1 + 0xf8] = a5\n 18204: u64 [a1 + 0x8] = a5\n 18207: u64 [s1 + 0xf0] = a2\n 18211: u64 [a1 + 0x10] = a2\n 18214: u64 [s1 + 0xe8] = a0\n 18218: u64 [a1 + 0x18] = a0\n 18221: a0 = s1 + 0x1a80\n 18225: a1 = 0x40\n 18228: ra = 822, jump @2\n      : @763 [@dyn 411] (gas: 13)\n 18234: a0 = s1 + 0x1898\n 18238: a1 = u64 [a0 + 0x200]\n 18242: u64 [s1 + 0x50] = a1\n 18245: a2 = a0 + 0x100\n 18249: a1 = u64 [a2 + 0xf8]\n 18253: u64 [s1 + 0x48] = a1\n 18256: a1 = u64 [a2 + 0xf0]\n 18260: u64 [s1 + 0x40] = a1\n 18263: a0 = u64 [a2 + 0xe8]\n 18267: u64 [s1 + 0x58] = a0\n 18270: a0 = s1 + 0x1a60\n 18274: a1 = u64 [s1 + 0x118]\n 18278: ra = 824, jump @6\n      : @764 [@dyn 412] (gas: 12)\n 18284: a4 = u64 [s1 + 0x40]\n 18287: a3 = u64 [s1 + 0x48]\n 18290: a0 = u64 [s1 + 0x58]\n 18293: a2 = u64 [s1 + 0x50]\n 18296: a2 = a2 | a4\n 18299: a1 = a0 | a3\n 18302: a1 = a1 | a2\n 18305: a1 = a1 >> 0x20\n 18308: a2 = a2 | a3\n 18311: a2 = a2 << 0x20\n 18314: a1 = a1 | a2\n 18317: jump @836 if a1 != 0\n      : @765 (gas: 17)\n 18321: a1 = s1 + 0x1898\n 18325: t0 = u64 [a1 + 0x1e0]\n 18329: t1 = u64 [a1 + 0x1d8]\n 18333: a3 = a1 + 0x100\n 18337: a5 = u64 [a3 + 0xd0]\n 18341: a2 = u64 [a3 + 0xc8]\n 18345: u64 [s1 + 0x80] = a2\n 18349: u64 [a3 + 0xa8] = a2\n 18353: u64 [s1 + 0x88] = a5\n 18357: u64 [a3 + 0xb0] = a5\n 18361: u64 [s1 + 0x90] = t1\n 18365: u64 [a1 + 0x1b8] = t1\n 18369: a2 = a1\n 18371: a1 = s1 + 0x1a40\n 18375: u64 [s1 + 0x98] = t0\n 18379: u64 [a2 + 0x1c0] = t0\n 18383: ra = 826, jump @4\n      : @766 [@dyn 413] (gas: 28)\n 18389: a1 = u64 [s1 + 0x58]\n 18392: a0 = a1 + 0x20\n 18395: u64 [s1 + 0x68] = a0\n 18398: a0 = a0 <u a1\n 18401: a2 = u64 [s1 + 0x40]\n 18404: a1 = a2 + a0\n 18407: u64 [s1 + 0x78] = a1\n 18410: a1 = a1 <u a2\n 18413: a1 = a0 if a0 == 0\n 18416: a0 = u64 [s1 + 0x48]\n 18419: a1 = a1 + a0\n 18422: u64 [s1 + 0x60] = a1\n 18425: a0 = a1 <u a0\n 18428: u64 [s1 + 0x118] = a0\n 18432: a0 = u64 [s1 + 0xe8]\n 18436: a1 = s1 + 0x1898\n 18440: a2 = a1 + 0x100\n 18444: u64 [a2 + 0xa0] = a0\n 18448: a0 = u64 [s1 + 0xf0]\n 18452: u64 [a2 + 0x98] = a0\n 18456: a0 = u64 [s1 + 0xf8]\n 18460: u64 [a2 + 0x90] = a0\n 18464: a2 = a1\n 18466: a1 = s1 + 0x1a20\n 18470: a0 = u64 [s1 + 0x110]\n 18474: u64 [a2 + 0x188] = a0\n 18478: a0 = 0\n 18480: ra = 828, jump @4\n      : @767 [@dyn 414] (gas: 7)\n 18486: a0 = sp + 0xffffffffffffffe0\n 18489: a0 = a0 & 0xffffffffffffffe0\n 18492: u64 [s1 + 0xa0] = a0\n 18496: sp = a0\n 18498: a2 = u64 [s1 + 0x108]\n 18502: a0 = i32 [a2]\n 18504: jump @769 if a0 >u 31\n      : @768 (gas: 2)\n 18508: u32 [a2 + 0] = 0x20\n 18511: fallthrough\n      : @769 (gas: 7)\n 18512: a0 = u64 [s1 + 0x50]\n 18515: a1 = u64 [s1 + 0x118]\n 18519: a0 = a0 + a1\n 18522: u64 [s1 + 0x70] = a0\n 18525: a0 = 0xffffffff\n 18535: u64 [s1 + 0xa8] = a0\n 18539: t0 = 830, jump @1075\n      : @770 [@dyn 415] (gas: 34)\n 18545: ecalli 5 // 'hash_keccak_256'\n 18547: t0 = 0\n 18549: t1 = 0\n 18551: ra = 0\n 18553: u64 [s1 + 248] = 0\n 18557: a3 = u64 [s1 + 0x118]\n 18561: a0 = u64 [a3 + 0x18]\n 18564: a1 = u64 [a3 + 0x10]\n 18567: a2 = u64 [a3 + 0x8]\n 18570: a5 = u64 [a3]\n 18572: t2 = reverse a0\n 18574: a4 = reverse a1\n 18576: a3 = reverse a2\n 18578: a2 = reverse a5\n 18580: a1 = u64 [s1 + 0xa0]\n 18584: a0 = a2\n 18586: u64 [a1 + 0x18] = a2\n 18589: u64 [s1 + 0xd8] = a3\n 18593: u64 [a1 + 0x10] = a3\n 18596: a5 = a4\n 18598: u64 [a1 + 0x8] = a4\n 18601: a2 = t2\n 18603: u64 [s1 + 0xe0] = a2\n 18607: u64 [a1] = a2\n 18609: a2 = u64 [s1 + 0x68]\n 18612: a3 = s1 + 0x100\n 18616: u64 [a3 + 0x18] = a2\n 18619: a2 = u64 [s1 + 0x78]\n 18622: u64 [a3 + 0x8] = a2\n 18625: a2 = u64 [s1 + 0x60]\n 18628: u64 [a3] = a2\n 18630: a2 = u64 [s1 + 0x70]\n 18633: u64 [a3 + 0x10] = a2\n 18636: fallthrough\n      : @771 (gas: 19)\n 18637: u64 [s1 + 0xe8] = a0\n 18641: u64 [s1 + 0xf0] = a5\n 18645: a0 = u64 [s1 + 0x80]\n 18649: a0 = t0 <u a0\n 18652: a2 = u64 [s1 + 0x88]\n 18656: a3 = t1 ^ a2\n 18659: a2 = t1 <u a2\n 18662: a2 = a0 if a3 == 0\n 18665: a0 = u64 [s1 + 0x90]\n 18669: t2 = ra <u a0\n 18672: a3 = u64 [s1 + 0x98]\n 18676: a5 = u64 [s1 + 0xf8]\n 18680: a4 = a5 ^ a3\n 18683: a3 = a5 <u a3\n 18686: a3 = t2 if a4 == 0\n 18689: a0 = ra ^ a0\n 18692: a0 = a0 | a4\n 18695: a3 = a2 if a0 == 0\n 18698: jump @801 if a3 == 0\n      : @772 (gas: 5)\n 18702: u64 [s1 + 0xc0] = ra\n 18706: u64 [s1 + 0xc8] = t1\n 18710: u64 [s1 + 0xd0] = t0\n 18714: a0 = s1 + 0x1900\n 18718: ra = 832, jump @6\n      : @773 [@dyn 416] (gas: 13)\n 18724: a1 = s1 + 0x100\n 18728: a5 = u64 [a1 + 0x18]\n 18731: a3 = u64 [a1]\n 18733: a0 = a5 | a3\n 18736: a2 = u64 [a1 + 0x10]\n 18739: t0 = u64 [s1 + 0x108]\n 18743: a1 = t0 | a2\n 18746: a0 = a0 | a1\n 18749: a0 = a0 >> 0x20\n 18752: a1 = a1 | a3\n 18755: a1 = a1 << 0x20\n 18758: a0 = a0 | a1\n 18761: jump @836 if a0 != 0\n      : @774 (gas: 21)\n 18765: a0 = s1 + 0x1898\n 18769: u64 [s1 + 0x110] = a2\n 18773: u64 [s1 + 0x100] = a3\n 18777: a3 = a0\n 18779: a0 = u64 [a0 + 0x78]\n 18782: a1 = u64 [a3 + 0x70]\n 18785: a2 = u64 [a3 + 0x68]\n 18788: a4 = u64 [s1 + 0xa8]\n 18792: a0 = a0 & a4\n 18795: a4 = 0xffffffffffffffff\n 18798: a1 = a1 & a4\n 18801: a2 = a2 & a4\n 18804: u64 [a3 + 96] = 0\n 18807: u64 [a3 + 0x48] = a2\n 18810: u64 [a3 + 0x50] = a1\n 18813: a1 = s1 + 0x18e0\n 18817: u64 [a3 + 0x58] = a0\n 18820: a0 = a5\n 18822: u64 [s1 + 0x118] = a5\n 18826: u64 [s1 + 0x108] = t0\n 18830: ra = 834, jump @4\n      : @775 [@dyn 417] (gas: 56)\n 18836: a1 = u64 [s1 + 0x118]\n 18840: a0 = a1 + 0x20\n 18843: u64 [s1 + 0xb8] = a0\n 18847: a2 = a0 <u a1\n 18850: a1 = u64 [s1 + 0x108]\n 18854: a0 = a1 + a2\n 18857: u64 [s1 + 0xb0] = a0\n 18861: a3 = a0 <u a1\n 18864: a3 = a2 if a2 == 0\n 18867: a0 = u64 [s1 + 0x100]\n 18871: ra = a0 + a3\n 18874: a3 = ra <u a0\n 18877: a0 = u64 [s1 + 0x110]\n 18881: a0 = a0 + a3\n 18884: u64 [s1 + 0x110] = a0\n 18888: t2 = u64 [s1 + 0xe0]\n 18892: t2 = t2 + 0x1\n 18895: u64 [s1 + 0xe0] = t2\n 18899: a3 = t2 <u 0x1\n 18902: a0 = u64 [s1 + 0xf0]\n 18906: a0 = a0 + a3\n 18909: a3 = t2 | a0\n 18912: a3 = a3 <u 0x1\n 18915: a1 = u64 [s1 + 0xd8]\n 18919: a3 = a3 + a1\n 18922: a4 = a3 <u a1\n 18925: a2 = u64 [s1 + 0xe8]\n 18929: a2 = a2 + a4\n 18932: t0 = u64 [s1 + 0xd0]\n 18936: t0 = t0 + 0x1\n 18939: a4 = t0 <u 0x1\n 18942: t1 = u64 [s1 + 0xc8]\n 18946: t1 = t1 + a4\n 18949: a4 = t0 | t1\n 18952: a4 = a4 <u 0x1\n 18955: a5 = u64 [s1 + 0xc0]\n 18959: a4 = a4 + a5\n 18962: a5 = a4 <u a5\n 18965: a1 = u64 [s1 + 0xf8]\n 18969: a1 = a1 + a5\n 18972: u64 [s1 + 0xf8] = a1\n 18976: a5 = a0\n 18978: a1 = u64 [s1 + 0xa0]\n 18982: u64 [a1 + 0x8] = a0\n 18985: u64 [a1] = t2\n 18987: u64 [a1 + 0x10] = a3\n 18990: a0 = a2\n 18992: u64 [a1 + 0x18] = a2\n 18995: u64 [s1 + 0xd8] = a3\n 18999: a2 = u64 [s1 + 0xb8]\n 19003: u64 [s1 + 0x118] = a2\n 19007: a2 = u64 [s1 + 0xb0]\n 19011: u64 [s1 + 0x108] = a2\n 19015: u64 [s1 + 0x100] = ra\n 19019: ra = a4\n 19021: jump @771\n      : @776 (gas: 15)\n 19024: a0 = s1 + 0x7ff\n 19028: a0 = a0 + 0x99\n 19032: a1 = u64 [s1 + 0xf0]\n 19036: a3 = a0 + 0x200\n 19040: u64 [a3 + 0x8] = a1\n 19043: a1 = u64 [s1 + 0xe0]\n 19047: u64 [a3 + 0x10] = a1\n 19050: a1 = u64 [s1 + 0xd8]\n 19054: u64 [a3 + 0x18] = a1\n 19057: a1 = s1 + 0x7ff\n 19061: a1 = a1 + 0x2a1\n 19065: a2 = u64 [s1 + 0xe8]\n 19069: u64 [a3 + 0x20] = a2\n 19072: a0 = 0\n 19074: ra = 836, jump @4\n      : @777 [@dyn 418] (gas: 3)\n 19080: a2 = u64 [s1 + 0xc8]\n 19084: a0 = i32 [a2]\n 19086: jump @779 if a0 >u 31\n      : @778 (gas: 3)\n 19090: u32 [a2 + 0] = 0x20\n 19093: t0 = 0x346\n 19097: jump @1085\n      : @779 (gas: 1)\n 19100: t0 = 838, jump @1085\n      : @780 [@dyn 419] (gas: 39)\n 19106: a0 = u64 [s1 + 0xc0]\n 19110: ecalli 5 // 'hash_keccak_256'\n 19112: a5 = s1 + 0x100\n 19116: a2 = u64 [a5 + 0x18]\n 19119: a0 = u64 [a2 + 0x18]\n 19122: a1 = u64 [a2 + 0x10]\n 19125: t0 = u64 [a2 + 0x8]\n 19128: a2 = u64 [a2]\n 19130: ra = reverse a0\n 19132: a4 = reverse a1\n 19134: a0 = u64 [s1 + 0xf8]\n 19138: a0 = a0 + a4\n 19141: a1 = u64 [a5]\n 19143: a1 = a1 + ra\n 19146: u64 [s1 + 0xf8] = a1\n 19150: a1 = a1 <u ra\n 19153: a3 = a0 + a1\n 19156: a0 = a3 ^ a4\n 19159: u64 [s1 + 0xf0] = a3\n 19163: a3 = a3 <u a4\n 19166: a3 = a1 if a0 == 0\n 19169: t1 = reverse a2\n 19171: t0 = reverse t0\n 19173: a0 = u64 [a5 + 0x8]\n 19176: a0 = a0 + t0\n 19179: a1 = u64 [a5 + 0x10]\n 19182: a1 = a1 + t1\n 19185: a2 = a0 <u t0\n 19188: a1 = a1 + a2\n 19191: a3 = a3 + a0\n 19194: u64 [s1 + 0xe8] = a3\n 19198: a0 = a3 <u a0\n 19201: a0 = a0 + a1\n 19204: u64 [s1 + 0xe0] = a0\n 19208: a0 = sp + 0xffffffffffffffe0\n 19211: a5 = a0 & 0xffffffffffffffe0\n 19214: sp = a5\n 19216: u64 [s1 + 0xd8] = a5\n 19220: fallthrough\n      : @781 (gas: 21)\n 19221: a0 = u64 [s1 + 0xf8]\n 19225: a0 = ra <u a0\n 19228: a2 = u64 [s1 + 0xf0]\n 19232: a1 = a4 ^ a2\n 19235: a2 = a4 <u a2\n 19238: a2 = a0 if a1 == 0\n 19241: a0 = u64 [s1 + 0xe8]\n 19245: t2 = t0 <u a0\n 19248: a3 = u64 [s1 + 0xe0]\n 19252: a1 = t1 ^ a3\n 19255: a3 = t1 <u a3\n 19258: a3 = t2 if a1 == 0\n 19261: a0 = t0 ^ a0\n 19264: a0 = a0 | a1\n 19267: a3 = a2 if a0 == 0\n 19270: u64 [a5] = ra\n 19272: u64 [a5 + 0x8] = a4\n 19275: u64 [a5 + 0x10] = t0\n 19278: u64 [a5 + 0x18] = t1\n 19281: a0 = s1 + 0x209c\n 19285: jump @668 if a3 == 0\n      : @782 (gas: 11)\n 19289: u64 [a0 + 796] = 0\n 19293: u64 [a0 + 788] = 0\n 19297: u64 [a0 + 780] = 0\n 19301: u64 [a0 + 772] = 0\n 19305: a1 = s1 + 0x23a0\n 19309: a0 = a5\n 19311: u64 [s1 + 0x118] = ra\n 19315: u64 [s1 + 0x110] = a4\n 19319: u64 [s1 + 0x108] = t1\n 19323: u64 [s1 + 0x100] = t0\n 19327: ra = 840, jump @10\n      : @783 [@dyn 420] (gas: 15)\n 19333: a5 = u64 [s1 + 0xd8]\n 19337: t1 = u64 [s1 + 0x108]\n 19341: a4 = u64 [s1 + 0x110]\n 19345: ra = u64 [s1 + 0x118]\n 19349: ra = ra + 0x1\n 19352: a0 = ra <u 0x1\n 19355: a4 = a4 + a0\n 19358: a0 = ra | a4\n 19361: a0 = a0 <u 0x1\n 19364: a1 = u64 [s1 + 0x100]\n 19368: a0 = a0 + a1\n 19371: a1 = a0 <u a1\n 19374: t1 = t1 + a1\n 19377: t0 = a0\n 19379: jump @781\n      : @784 (gas: 6)\n 19382: a0 = u64 [s1 + 0x50]\n 19385: ra = 0x34a\n 19389: ecalli 3 // 'caller'\n 19391: a2 = u64 [s1 + 0x58]\n 19394: t0 = 0x34c\n 19398: jump @1053\n      : @785 [@dyn 421] (gas: 2)\n 19401: a2 = u64 [s1 + 0x58]\n 19404: t0 = 844, jump @1053\n      : @786 [@dyn 422] (gas: 8)\n 19410: u64 [s1 + 792] = 0\n 19414: a2 = s1 + 0x300\n 19418: u64 [a2 + 0x10] = a1\n 19421: u64 [a2 + 0x8] = a0\n 19424: a1 = s1 + 0x300\n 19428: u64 [a2] = a3\n 19430: a0 = 0\n 19432: ra = 846, jump @4\n      : @787 [@dyn 423] (gas: 7)\n 19438: u64 [s1 + 760] = 0\n 19442: u64 [s1 + 752] = 0\n 19446: u64 [s1 + 736] = 0x1\n 19451: a0 = 0x20\n 19454: a1 = s1 + 0x2e0\n 19458: u64 [s1 + 744] = 0\n 19462: ra = 848, jump @4\n      : @788 [@dyn 424] (gas: 3)\n 19468: a2 = u64 [s1 + 0x60]\n 19471: a0 = i32 [a2]\n 19473: jump @790 if a0 >u 63\n      : @789 (gas: 3)\n 19477: u32 [a2 + 0] = 0x40\n 19480: t0 = 0x352\n 19484: jump @1058\n      : @790 (gas: 1)\n 19487: t0 = 850, jump @1058\n      : @791 [@dyn 425] (gas: 5)\n 19493: a0 = u64 [s1 + 0x68]\n 19496: ra = 0x354\n 19500: ecalli 5 // 'hash_keccak_256'\n 19502: t0 = 0x356\n 19506: jump @1056\n      : @792 [@dyn 426] (gas: 1)\n 19509: t0 = 854, jump @1056\n      : @793 [@dyn 427] (gas: 8)\n 19515: a5 = a4 + 0x104\n 19519: u64 [a5 + 0x98] = a3\n 19523: u64 [a5 + 0x90] = a2\n 19527: u64 [a5 + 0x88] = a1\n 19531: u64 [a5 + 0x80] = a0\n 19535: a0 = s1 + 0x2c0\n 19539: a1 = s1 + 0x2220\n 19543: ra = 856, jump @6\n      : @794 [@dyn 428] (gas: 7)\n 19549: a0 = u64 [s1 + 0x2c8]\n 19553: u64 [s1 + 0x118] = a0\n 19557: a0 = u64 [s1 + 0x2c0]\n 19561: u64 [s1 + 0x110] = a0\n 19565: a0 = s1 + 0x2a0\n 19569: a1 = 0x40\n 19572: ra = 858, jump @2\n      : @795 [@dyn 429] (gas: 6)\n 19578: a4 = s1 + 0x200\n 19582: a3 = u64 [a4 + 0xb8]\n 19586: a1 = u64 [a4 + 0xb0]\n 19590: a2 = u64 [a4 + 0xa8]\n 19594: a0 = u64 [a4 + 0xa0]\n 19598: t0 = 860, jump @1076\n      : @796 [@dyn 430] (gas: 1)\n 19604: jump @836 if a1 != 0\n      : @797 (gas: 11)\n 19608: a1 = u64 [s1 + 0x118]\n 19612: a2 = u64 [s1 + 0x110]\n 19616: a1 = a1 | a2\n 19619: a2 = a1 >u 0\n 19621: u64 [s1 + 664] = 0\n 19625: u64 [s1 + 656] = 0\n 19629: u64 [s1 + 648] = 0\n 19633: a1 = s1 + 0x280\n 19637: u64 [s1 + 0x280] = a2\n 19641: u64 [s1 + 0x118] = a0\n 19645: ra = 862, jump @4\n      : @798 [@dyn 431] (gas: 3)\n 19651: a1 = 0x20\n 19654: a0 = u64 [s1 + 0x118]\n 19658: ra = 864, jump @11\n      : @799 [@dyn 432] (gas: 5)\n 19664: i32 a1 = a0 + 0\n 19666: a2 = 0x20\n 19669: a0 = 0\n 19671: ecalli 6 // 'seal_return'\n 19673: jump @801\n      : @800 (gas: 4)\n 19675: a2 = 0x20\n 19678: a0 = 0\n 19680: ecalli 6 // 'seal_return'\n 19682: fallthrough\n      : @801 (gas: 38)\n 19683: a0 = u64 [s1 + 0x58]\n 19686: a1 = u64 [s1 + 0x118]\n 19690: t2 = a1 <u a0\n 19693: a1 = u64 [s1 + 0x40]\n 19696: a5 = u64 [s1 + 0x108]\n 19700: a3 = a5 ^ a1\n 19703: a2 = a5 <u a1\n 19706: a2 = t2 if a3 == 0\n 19709: t0 = u64 [s1 + 0x48]\n 19712: a3 = u64 [s1 + 0x100]\n 19716: t1 = a3 - t0\n 19719: a3 = a3 <u t0\n 19722: ra = u64 [s1 + 0x50]\n 19725: a4 = u64 [s1 + 0x110]\n 19729: a4 = a4 - ra\n 19732: a4 = a4 - a3\n 19735: a3 = t1 <u a2\n 19738: a4 = a4 - a3\n 19741: u64 [s1 + 0x110] = a4\n 19745: t1 = t1 - a2\n 19748: a2 = a5 - a1\n 19751: a2 = a2 - t2\n 19754: a4 = u64 [s1 + 0x118]\n 19758: a4 = a4 - a0\n 19761: a3 = s1 + 0x1898\n 19765: a5 = a3 + 0x100\n 19769: u64 [a5 + 0x68] = a0\n 19772: u64 [a5 + 0x48] = a4\n 19775: u64 [a5 + 0x70] = a1\n 19778: u64 [a3 + 0x178] = t0\n 19782: u64 [a5 + 0x50] = a2\n 19785: u64 [a3 + 0x180] = ra\n 19789: u64 [a3 + 0x158] = t1\n 19793: a0 = s1 + 0x1a00\n 19797: a1 = s1 + 0x19e0\n 19801: a2 = u64 [s1 + 0x110]\n 19805: u64 [a5 + 0x60] = a2\n 19808: ra = 866, jump @972\n      : @802 [@dyn 433] (gas: 3)\n 19814: a0 = s1 + 0x19c0\n 19818: a1 = 0x40\n 19821: ra = 868, jump @2\n      : @803 [@dyn 434] (gas: 14)\n 19827: a2 = s1 + 0x1898\n 19831: t0 = u64 [a2 + 0x140]\n 19835: a1 = a2 + 0x100\n 19839: a5 = u64 [a1 + 0x38]\n 19842: a4 = u64 [a1 + 0x30]\n 19845: a0 = u64 [a1 + 0x28]\n 19848: a3 = a4 | t0\n 19851: a1 = a0 | a5\n 19854: a1 = a1 | a3\n 19857: a1 = a1 >> 0x20\n 19860: a3 = a3 | a5\n 19863: a3 = a3 << 0x20\n 19866: a1 = a1 | a3\n 19869: jump @836 if a1 != 0\n      : @804 (gas: 22)\n 19873: a1 = a0 + 0x20\n 19876: u64 [s1 + 0x110] = a1\n 19880: t1 = a1 <u a0\n 19883: a1 = a4 + t1\n 19886: u64 [s1 + 0x118] = a1\n 19890: a1 = a1 <u a4\n 19893: a1 = t1 if t1 == 0\n 19896: a1 = a1 + a5\n 19899: u64 [s1 + 0x100] = a1\n 19903: a1 = a1 <u a5\n 19906: a1 = a1 + t0\n 19909: u64 [s1 + 0x108] = a1\n 19913: u64 [a2 + 288] = 0\n 19917: u64 [a2 + 280] = 0\n 19921: u64 [a2 + 272] = 0\n 19925: a1 = s1 + 0x19a0\n 19929: u64 [a2 + 264] = 0x20\n 19934: u64 [s1 + 0xb0] = a0\n 19938: u64 [s1 + 0xa0] = a4\n 19942: u64 [s1 + 0x98] = t0\n 19946: u64 [s1 + 0x90] = a5\n 19950: ra = 870, jump @4\n      : @805 [@dyn 435] (gas: 3)\n 19956: a0 = s1 + 0x1980\n 19960: a1 = u64 [s1 + 0x58]\n 19963: ra = 872, jump @2\n      : @806 [@dyn 436] (gas: 13)\n 19969: a5 = s1 + 0x100\n 19973: a0 = u64 [a5 + 0x10]\n 19976: a3 = u64 [a5]\n 19978: a2 = a0 | a3\n 19981: a1 = u64 [a5 + 0x18]\n 19984: a4 = u64 [a5 + 0x8]\n 19987: a1 = a1 | a4\n 19990: a2 = a2 | a1\n 19993: a2 = a2 >> 0x20\n 19996: a1 = a1 | a3\n 19999: a1 = a1 << 0x20\n 20002: a1 = a1 | a2\n 20005: jump @836 if a1 != 0\n      : @807 (gas: 15)\n 20009: a5 = s1 + 0x1898\n 20013: a4 = u64 [a5 + 0x100]\n 20017: a1 = u64 [a5 + 0xf8]\n 20021: a2 = u64 [a5 + 0xf0]\n 20025: a3 = u64 [a5 + 0xe8]\n 20029: u64 [s1 + 0xb8] = a3\n 20033: u64 [a5 + 0xc8] = a3\n 20037: u64 [s1 + 0xc0] = a2\n 20041: u64 [a5 + 0xd0] = a2\n 20045: u64 [s1 + 0xc8] = a1\n 20049: u64 [a5 + 0xd8] = a1\n 20053: a1 = s1 + 0x1960\n 20057: u64 [s1 + 0xd0] = a4\n 20061: u64 [a5 + 0xe0] = a4\n 20065: ra = 874, jump @4\n      : @808 [@dyn 437] (gas: 24)\n 20071: t0 = 0\n 20073: a4 = 0\n 20075: ra = 0\n 20077: t2 = 0\n 20079: a1 = u64 [s1 + 0xb0]\n 20083: a0 = a1 + 0x40\n 20086: a3 = s1 + 0x100\n 20090: u64 [a3 + 0x10] = a0\n 20093: a0 = a0 <u a1\n 20096: a2 = u64 [s1 + 0xa0]\n 20100: a1 = a2 + a0\n 20103: u64 [a3 + 0x8] = a1\n 20106: a1 = a1 <u a2\n 20109: a1 = a0 if a0 == 0\n 20112: a0 = u64 [s1 + 0x90]\n 20116: a1 = a1 + a0\n 20119: u64 [a3] = a1\n 20121: a0 = a1 <u a0\n 20124: a1 = u64 [s1 + 0x98]\n 20128: a0 = a0 + a1\n 20131: u64 [a3 + 0x18] = a0\n 20134: a1 = u64 [s1 + 0x68]\n 20137: t1 = u64 [s1 + 0x60]\n 20140: fallthrough\n      : @809 (gas: 17)\n 20141: a0 = u64 [s1 + 0xb8]\n 20145: a0 = t0 <u a0\n 20148: a2 = u64 [s1 + 0xc0]\n 20152: a3 = a4 ^ a2\n 20155: u64 [s1 + 0xf8] = a4\n 20159: a2 = a4 <u a2\n 20162: a2 = a0 if a3 == 0\n 20165: a5 = u64 [s1 + 0xc8]\n 20169: a0 = ra <u a5\n 20172: a3 = u64 [s1 + 0xd0]\n 20176: a4 = t2 ^ a3\n 20179: a3 = t2 <u a3\n 20182: a3 = a0 if a4 == 0\n 20185: a0 = ra ^ a5\n 20188: a0 = a0 | a4\n 20191: a3 = a2 if a0 == 0\n 20194: jump @833 if a3 == 0\n      : @810 (gas: 10)\n 20198: a0 = a1 | t1\n 20201: a2 = u64 [s1 + 0x70]\n 20204: a3 = u64 [s1 + 0x78]\n 20207: a2 = a2 | a3\n 20210: a0 = a0 | a2\n 20213: a0 = a0 >> 0x20\n 20216: a2 = a2 | t1\n 20219: a2 = a2 << 0x20\n 20222: a0 = a0 | a2\n 20225: jump @836 if a0 != 0\n      : @811 (gas: 7)\n 20229: u64 [s1 + 0xe0] = ra\n 20233: u64 [s1 + 0xe8] = t2\n 20237: u64 [s1 + 0xf0] = t0\n 20241: u64 [s1 + 0x60] = t1\n 20244: a0 = s1 + 0x1940\n 20248: u64 [s1 + 0x68] = a1\n 20251: ra = 876, jump @2\n      : @812 [@dyn 438] (gas: 13)\n 20257: a1 = s1 + 0x100\n 20261: a5 = u64 [a1 + 0x10]\n 20264: a3 = u64 [a1]\n 20266: a0 = a5 | a3\n 20269: a2 = u64 [a1 + 0x18]\n 20272: t0 = u64 [s1 + 0x108]\n 20276: a1 = t0 | a2\n 20279: a0 = a0 | a1\n 20282: a0 = a0 >> 0x20\n 20285: a1 = a1 | a3\n 20288: a1 = a1 << 0x20\n 20291: a0 = a0 | a1\n 20294: jump @836 if a0 != 0\n      : @813 (gas: 21)\n 20298: a0 = s1 + 0x1898\n 20302: u64 [s1 + 0x118] = a2\n 20306: u64 [s1 + 0x100] = a3\n 20310: a3 = a0\n 20312: a0 = u64 [a0 + 0xb8]\n 20316: a1 = u64 [a3 + 0xb0]\n 20320: a2 = u64 [a3 + 0xa8]\n 20324: a4 = u64 [s1 + 0xa8]\n 20328: a0 = a0 & a4\n 20331: a4 = 0xffffffffffffffff\n 20334: a1 = a1 & a4\n 20337: a2 = a2 & a4\n 20340: u64 [a3 + 160] = 0\n 20344: u64 [a3 + 0x88] = a2\n 20348: u64 [a3 + 0x90] = a1\n 20352: a1 = s1 + 0x1920\n 20356: u64 [a3 + 0x98] = a0\n 20360: a0 = a5\n 20362: u64 [s1 + 0x110] = a5\n 20366: u64 [s1 + 0x108] = t0\n 20370: ra = 878, jump @4\n      : @814 [@dyn 439] (gas: 51)\n 20376: a1 = u64 [s1 + 0x110]\n 20380: a0 = a1 + 0x20\n 20383: u64 [s1 + 0xd8] = a0\n 20387: a2 = a0 <u a1\n 20390: a0 = u64 [s1 + 0x108]\n 20394: t1 = a0 + a2\n 20397: a3 = t1 <u a0\n 20400: a3 = a2 if a2 == 0\n 20403: a0 = u64 [s1 + 0x100]\n 20407: a2 = a0 + a3\n 20410: a3 = a2 <u a0\n 20413: a0 = u64 [s1 + 0x118]\n 20417: a0 = a0 + a3\n 20420: u64 [s1 + 0x118] = a0\n 20424: a0 = u64 [s1 + 0x68]\n 20427: a3 = a0 + 0x20\n 20430: a4 = a3 <u a0\n 20433: a0 = u64 [s1 + 0x78]\n 20436: a5 = a0 + a4\n 20439: a0 = a5 <u a0\n 20442: a0 = a4 if a4 == 0\n 20445: a1 = u64 [s1 + 0x60]\n 20448: a0 = a0 + a1\n 20451: a4 = a0 <u a1\n 20454: a1 = u64 [s1 + 0x70]\n 20457: a1 = a1 + a4\n 20460: u64 [s1 + 0x70] = a1\n 20463: t0 = u64 [s1 + 0xf0]\n 20467: t0 = t0 + 0x1\n 20470: a4 = t0 <u 0x1\n 20473: t2 = u64 [s1 + 0xf8]\n 20477: t2 = t2 + a4\n 20480: a4 = t0 | t2\n 20483: a4 = a4 <u 0x1\n 20486: a1 = u64 [s1 + 0xe0]\n 20490: a4 = a4 + a1\n 20493: a1 = a4 <u a1\n 20496: ra = u64 [s1 + 0xe8]\n 20500: ra = ra + a1\n 20503: a1 = u64 [s1 + 0xd8]\n 20507: u64 [s1 + 0x110] = a1\n 20511: u64 [s1 + 0x108] = t1\n 20515: u64 [s1 + 0x100] = a2\n 20519: a1 = a3\n 20521: u64 [s1 + 0x78] = a5\n 20524: t1 = a0\n 20526: a0 = a4\n 20528: a4 = t2\n 20530: t2 = ra\n 20532: ra = a0\n 20534: jump @809\n      : @815 (gas: 7)\n 20537: a0 = a0 | a3\n 20540: a0 = a0 >> 0x20\n 20543: t1 = a1\n 20545: a1 = a1 | a3\n 20548: a1 = a1 << 0x20\n 20551: a0 = a0 | a1\n 20554: jump @836 if a0 != 0\n      : @816 (gas: 24)\n 20558: a0 = a2 + 0x20\n 20561: u64 [s1 + 0x100] = a0\n 20565: t0 = a0 <u a2\n 20568: a0 = a4 + t0\n 20571: u64 [s1 + 0x118] = a0\n 20575: a1 = a0 <u a4\n 20578: a1 = t0 if t0 == 0\n 20581: a1 = a1 + t1\n 20584: u64 [s1 + 0xf0] = a1\n 20588: a0 = a1 <u t1\n 20591: a0 = a0 + t2\n 20594: u64 [s1 + 0xf8] = a0\n 20598: a0 = s1 + 0x1000\n 20602: u64 [a0 + 4294965368] = 0\n 20606: a0 = s1 + 0x1000\n 20610: u64 [a0 + 4294965360] = 0\n 20614: a0 = s1 + 0x1000\n 20618: u64 [a0 + 4294965352] = 0\n 20622: a1 = s1 + 0x7ff\n 20626: a1 = a1 + 0x61\n 20629: a3 = s1 + 0x1000\n 20633: u64 [a3 + 4294965344] = 0x20\n 20638: a0 = a2\n 20640: ra = 880, jump @4\n      : @817 [@dyn 440] (gas: 4)\n 20646: a0 = s1 + 0x7ff\n 20650: a0 = a0 + 0x41\n 20653: a1 = u64 [s1 + 0x28]\n 20656: ra = 882, jump @2\n      : @818 [@dyn 441] (gas: 12)\n 20662: a0 = u64 [s1 + 0x100]\n 20666: a3 = u64 [s1 + 0xf0]\n 20670: a2 = a0 | a3\n 20673: a1 = u64 [s1 + 0x118]\n 20677: a4 = u64 [s1 + 0xf8]\n 20681: a1 = a1 | a4\n 20684: a2 = a2 | a1\n 20687: a2 = a2 >> 0x20\n 20690: a1 = a1 | a3\n 20693: a1 = a1 << 0x20\n 20696: a1 = a1 | a2\n 20699: jump @836 if a1 != 0\n      : @819 (gas: 23)\n 20703: a1 = s1 + 0x1000\n 20707: a4 = u64 [a1 + 0xfffffffffffff858]\n 20711: a1 = s1 + 0x1000\n 20715: a1 = u64 [a1 + 0xfffffffffffff850]\n 20719: a2 = s1 + 0x1000\n 20723: a2 = u64 [a2 + 0xfffffffffffff848]\n 20727: a3 = s1 + 0x1000\n 20731: a3 = u64 [a3 + 0xfffffffffffff840]\n 20735: u64 [s1 + 0x50] = a3\n 20738: a5 = s1 + 0x1000\n 20742: u64 [a5 + 0xfffffffffffff820] = a3\n 20746: u64 [s1 + 0x58] = a2\n 20749: a3 = s1 + 0x1000\n 20753: u64 [a3 + 0xfffffffffffff828] = a2\n 20757: u64 [s1 + 0x60] = a1\n 20760: a2 = s1 + 0x1000\n 20764: u64 [a2 + 0xfffffffffffff830] = a1\n 20768: a1 = s1 + 0x7ff\n 20772: a1 = a1 + 0x21\n 20775: u64 [s1 + 0x68] = a4\n 20778: a2 = s1 + 0x1000\n 20782: u64 [a2 + 0xfffffffffffff838] = a4\n 20786: ra = 884, jump @4\n      : @820 [@dyn 442] (gas: 16)\n 20792: a2 = 0\n 20794: a4 = 0\n 20796: t0 = 0\n 20798: t1 = 0\n 20800: a0 = 0x100000000\n 20810: u64 [s1 + 0xd0] = a0\n 20814: a0 = 0xffffffc0\n 20824: u64 [s1 + 0x28] = a0\n 20827: a3 = s1 + 0x100\n 20831: a0 = u64 [a3 + 0x8]\n 20834: ra = u64 [s1 + 0xd8]\n 20838: a1 = u64 [a3 + 0x10]\n 20841: u64 [a3] = a1\n 20843: a1 = u64 [s1 + 0xe0]\n 20847: u64 [s1 + 0xf8] = a1\n 20851: fallthrough\n      : @821 (gas: 33)\n 20852: t2 = a0\n 20854: a1 = a0 + 0x40\n 20857: a0 = u64 [s1 + 0x50]\n 20860: u64 [s1 + 0xc0] = a2\n 20864: a0 = a2 <u a0\n 20867: a2 = u64 [s1 + 0x58]\n 20870: a3 = a4 ^ a2\n 20873: u64 [s1 + 0xb8] = a4\n 20877: a2 = a4 <u a2\n 20880: a2 = a0 if a3 == 0\n 20883: a5 = u64 [s1 + 0x60]\n 20886: a0 = t0 <u a5\n 20889: a3 = u64 [s1 + 0x68]\n 20892: a4 = t1 ^ a3\n 20895: u64 [s1 + 0xb0] = t1\n 20899: a3 = t1 <u a3\n 20902: a3 = a0 if a4 == 0\n 20905: a0 = t0 ^ a5\n 20908: a0 = a0 | a4\n 20911: u64 [s1 + 0x118] = a1\n 20915: u64 [s1 + 0xf0] = t2\n 20919: a1 = a1 <u t2\n 20922: a3 = a2 if a0 == 0\n 20925: a4 = ra + a1\n 20928: a0 = a4 <u ra\n 20931: a0 = a1 if a1 == 0\n 20934: a1 = u64 [s1 + 0x100]\n 20938: t2 = a1 + a0\n 20941: a0 = t2 <u a1\n 20944: t1 = u64 [s1 + 0xf8]\n 20948: t1 = t1 + a0\n 20951: u64 [s1 + 0xc8] = t1\n 20955: jump @835 if a3 == 0\n      : @822 (gas: 13)\n 20959: a1 = u64 [s1 + 0x48]\n 20962: a0 = u64 [s1 + 0x38]\n 20965: a5 = a1 | a0\n 20968: a2 = u64 [s1 + 0x30]\n 20971: a3 = u64 [s1 + 0x40]\n 20974: a2 = a2 | a3\n 20977: a3 = a0\n 20979: a0 = a5 | a2\n 20982: a0 = a0 >> 0x20\n 20985: a2 = a2 | a3\n 20988: a2 = a2 << 0x20\n 20991: a0 = a0 | a2\n 20994: jump @836 if a0 != 0\n      : @823 (gas: 7)\n 20998: u64 [s1 + 0x70] = t2\n 21001: u64 [s1 + 0xe8] = ra\n 21005: u64 [s1 + 0x80] = a4\n 21009: u64 [s1 + 0x88] = t0\n 21013: a0 = s1 + 0x7ff\n 21017: a0 = a0 + 0x1\n 21020: ra = 886, jump @2\n      : @824 [@dyn 443] (gas: 16)\n 21026: a0 = s1 + 0x1000\n 21030: a4 = u64 [a0 + 0xfffffffffffff818]\n 21034: a0 = s1 + 0x1000\n 21038: a5 = u64 [a0 + 0xfffffffffffff810]\n 21042: a0 = s1 + 0x1000\n 21046: a3 = u64 [a0 + 0xfffffffffffff808]\n 21050: a0 = s1 + 0x1000\n 21054: a1 = u64 [a0 + 0xfffffffffffff800]\n 21058: a0 = a3 | a4\n 21061: a2 = a1 | a5\n 21064: a2 = a2 | a0\n 21067: a2 = a2 >> 0x20\n 21070: a0 = a0 | a5\n 21073: a0 = a0 << 0x20\n 21076: a0 = a0 | a2\n 21079: jump @836 if a0 != 0\n      : @825 (gas: 6)\n 21083: u64 [s1 + 0x90] = a5\n 21087: u64 [s1 + 0x98] = a4\n 21091: u64 [s1 + 0xa0] = a3\n 21095: a0 = s1 + 0x7e0\n 21099: u64 [s1 + 0xa8] = a1\n 21103: ra = 888, jump @2\n      : @826 [@dyn 444] (gas: 10)\n 21109: a0 = u64 [s1 + 0x100]\n 21113: a1 = u64 [s1 + 0xf8]\n 21117: a2 = a0 | a1\n 21120: a0 = u64 [s1 + 0x28]\n 21123: a1 = u64 [s1 + 0xf0]\n 21127: a0 = a1 <u a0\n 21130: a1 = u64 [s1 + 0xe8]\n 21134: a0 = 0 if a1 != 0\n 21136: a0 = 0 if a2 != 0\n 21138: jump @836 if a0 == 0\n      : @827 (gas: 11)\n 21142: u64 [s1 + 0x100] = a2\n 21146: a0 = u64 [s1 + 0x7e0]\n 21150: a1 = u64 [s1 + 0x78]\n 21153: a0 = a0 & a1\n 21156: u64 [s1 + 2008] = 0\n 21160: u64 [s1 + 2000] = 0\n 21164: u64 [s1 + 1992] = 0\n 21168: a1 = s1 + 0x7c0\n 21172: u64 [s1 + 0x7c0] = a0\n 21176: a0 = u64 [s1 + 0x118]\n 21180: ra = 890, jump @4\n      : @828 [@dyn 445] (gas: 11)\n 21186: a0 = u64 [s1 + 0x98]\n 21190: a1 = u64 [s1 + 0x90]\n 21194: a0 = a0 | a1\n 21197: a1 = u64 [s1 + 0xd0]\n 21201: a1 = a1 + 0xffffffffffffffe0\n 21204: a2 = u64 [s1 + 0xa8]\n 21208: a1 = a2 <u a1\n 21211: a3 = u64 [s1 + 0xa0]\n 21215: a1 = 0 if a3 != 0\n 21217: a1 = 0 if a0 != 0\n 21219: jump @836 if a1 == 0\n      : @829 (gas: 3)\n 21223: i32 a1 = a2 + 0x20\n 21226: a0 = s1 + 0x7a0\n 21230: ra = 892, jump @2\n      : @830 [@dyn 446] (gas: 9)\n 21236: a0 = u64 [s1 + 0xd0]\n 21240: a0 = a0 + 0xffffffffffffffa0\n 21243: a1 = u64 [s1 + 0xf0]\n 21247: a0 = a1 <u a0\n 21250: a1 = u64 [s1 + 0xe8]\n 21254: a0 = 0 if a1 != 0\n 21256: a1 = u64 [s1 + 0x100]\n 21260: a0 = 0 if a1 != 0\n 21262: jump @836 if a0 == 0\n      : @831 (gas: 13)\n 21266: a4 = s1 + 0x700\n 21270: a0 = u64 [a4 + 0xa8]\n 21274: a1 = u64 [a4 + 0xa0]\n 21278: a2 = a0 & 0xffffffffffffffff\n 21281: a1 = a1 & 0xffffffffffffffff\n 21284: a0 = u64 [s1 + 0x118]\n 21288: i32 a0 = a0 + 0x20\n 21291: u64 [s1 + 1944] = 0\n 21295: u64 [s1 + 1936] = 0\n 21299: u64 [a4 + 0x80] = a1\n 21303: a1 = s1 + 0x780\n 21307: u64 [a4 + 0x88] = a2\n 21311: ra = 894, jump @4\n      : @832 [@dyn 447] (gas: 37)\n 21317: a1 = u64 [s1 + 0x48]\n 21320: t0 = a1 + 0x20\n 21323: a1 = t0 <u a1\n 21326: a3 = u64 [s1 + 0x40]\n 21329: t2 = a3 + a1\n 21332: a3 = t2 <u a3\n 21335: a3 = a1 if a1 == 0\n 21338: a1 = u64 [s1 + 0x38]\n 21341: a3 = a3 + a1\n 21344: a1 = a3 <u a1\n 21347: a0 = u64 [s1 + 0x30]\n 21350: a0 = a0 + a1\n 21353: u64 [s1 + 0x30] = a0\n 21356: a2 = u64 [s1 + 0xc0]\n 21360: a2 = a2 + 0x1\n 21363: a1 = a2 <u 0x1\n 21366: a0 = u64 [s1 + 0xb8]\n 21370: a0 = a0 + a1\n 21373: a1 = a2 | a0\n 21376: a1 = a1 <u 0x1\n 21379: a4 = u64 [s1 + 0x88]\n 21383: a5 = a4 + a1\n 21386: a4 = a5 <u a4\n 21389: t1 = u64 [s1 + 0xb0]\n 21393: t1 = t1 + a4\n 21396: a4 = a0\n 21398: a0 = u64 [s1 + 0x118]\n 21402: ra = u64 [s1 + 0x80]\n 21406: a1 = u64 [s1 + 0x70]\n 21409: u64 [s1 + 0x100] = a1\n 21413: a1 = u64 [s1 + 0xc8]\n 21417: u64 [s1 + 0xf8] = a1\n 21421: u64 [s1 + 0x48] = t0\n 21424: u64 [s1 + 0x40] = t2\n 21427: u64 [s1 + 0x38] = a3\n 21430: t0 = a5\n 21432: jump @821\n      : @833 (gas: 30)\n 21435: a0 = u64 [s1 + 0xb0]\n 21439: t2 = u64 [s1 + 0x110]\n 21443: t0 = t2 <u a0\n 21446: a5 = u64 [s1 + 0xa0]\n 21450: a1 = u64 [s1 + 0x108]\n 21454: a3 = a1 ^ a5\n 21457: a2 = a1 <u a5\n 21460: a2 = t0 if a3 == 0\n 21463: a3 = u64 [s1 + 0x90]\n 21467: a4 = u64 [s1 + 0x100]\n 21471: ra = a4 - a3\n 21474: t1 = a4 <u a3\n 21477: a4 = u64 [s1 + 0x98]\n 21481: a3 = u64 [s1 + 0x118]\n 21485: a4 = a3 - a4\n 21488: a4 = a4 - t1\n 21491: a3 = ra <u a2\n 21494: a3 = a4 - a3\n 21497: a4 = ra - a2\n 21500: a2 = a1 - a5\n 21503: a2 = a2 - t0\n 21506: a1 = t2 - a0\n 21509: a2 = a2 | a3\n 21512: a3 = a1 | a4\n 21515: a3 = a3 | a2\n 21518: a2 = a2 | a4\n 21521: a3 = a3 >> 0x20\n 21524: a2 = a2 << 0x20\n 21527: a2 = a2 | a3\n 21530: jump @836 if a2 != 0\n      : @834 (gas: 1)\n 21533: jump @920\n      : @835 (gas: 30)\n 21536: t0 = u64 [s1 + 0x108]\n 21540: a0 = u64 [s1 + 0x118]\n 21544: t1 = a0 <u t0\n 21547: a0 = u64 [s1 + 0xd8]\n 21551: a1 = a4\n 21553: a3 = a4 ^ a0\n 21556: a2 = a4 <u a0\n 21559: a2 = t1 if a3 == 0\n 21562: a3 = u64 [s1 + 0x110]\n 21566: ra = t2 - a3\n 21569: a3 = t2 <u a3\n 21572: a5 = u64 [s1 + 0xe0]\n 21576: a4 = u64 [s1 + 0xc8]\n 21580: a4 = a4 - a5\n 21583: a5 = ra <u a2\n 21586: a3 = a3 + a5\n 21589: a3 = a4 - a3\n 21592: a5 = ra - a2\n 21595: a2 = a1 - a0\n 21598: a2 = a2 - t1\n 21601: a1 = u64 [s1 + 0x118]\n 21605: a1 = a1 - t0\n 21608: a2 = a2 | a3\n 21611: a3 = a1 | a5\n 21614: a3 = a3 | a2\n 21617: a2 = a2 | a5\n 21620: a3 = a3 >> 0x20\n 21623: a2 = a2 << 0x20\n 21626: a2 = a2 | a3\n 21629: jump @919 if a2 == 0\n      : @836 (gas: 1)\n 21633: trap\n      : @837 (gas: 10)\n 21634: a0 = s1 + 0x1098\n 21638: u64 [a0 + 952] = 0\n 21642: u64 [a0 + 944] = 0\n 21646: u64 [a0 + 936] = 0\n 21650: a2 = a0\n 21652: a0 = 0x4e487b7100000000\n 21662: a1 = s1 + 0x1440\n 21666: u64 [a2 + 0x3c0] = a0\n 21670: a0 = 0\n 21672: ra = 896, jump @4\n      : @838 [@dyn 448] (gas: 10)\n 21678: a0 = s1 + 0x1098\n 21682: u64 [a0 + 928] = 0\n 21686: u64 [a0 + 920] = 0\n 21690: u64 [a0 + 912] = 0\n 21694: a2 = a0\n 21696: a0 = 0x4\n 21699: a1 = s1 + 0x1420\n 21703: u64 [a2 + 904] = 0\n 21707: ra = 0x388\n 21711: jump @4\n      : @839 (gas: 5)\n 21714: a0 = 0x1\n 21717: a1 = u64 [s1 + 0x68]\n 21720: a2 = 0\n 21722: ecalli 6 // 'seal_return'\n 21724: fallthrough\n      : @840 (gas: 8)\n 21725: u64 [t1 + 88] = 0\n 21728: u64 [t1 + 80] = 0\n 21731: u64 [t1 + 72] = 0\n 21734: a0 = 0x4e487b7100000000\n 21744: a1 = s1 + 0x10e0\n 21748: u64 [t1 + 0x60] = a0\n 21751: a0 = 0\n 21753: ra = 898, jump @4\n      : @841 [@dyn 449] (gas: 3)\n 21759: t0 = 0x384\n 21763: a1 = s1 + 0x1098\n 21767: fallthrough\n      : @842 [@dyn 450] (gas: 9)\n 21768: u64 [a1 + 64] = 0\n 21771: u64 [a1 + 56] = 0\n 21774: u64 [a1 + 40] = 0x11\n 21778: a2 = a1\n 21780: a0 = 0x4\n 21783: a1 = s1 + 0x10c0\n 21787: u64 [a2 + 48] = 0\n 21790: ra = 0x388\n 21794: jump @4\n      : @843 (gas: 8)\n 21797: u64 [a2 + 312] = 0\n 21801: u64 [a2 + 304] = 0\n 21805: u64 [a2 + 296] = 0\n 21809: a0 = 0x4e487b7100000000\n 21819: a1 = s1 + 0x11c0\n 21823: u64 [a2 + 0x140] = a0\n 21827: a0 = 0\n 21829: ra = 902, jump @4\n      : @844 [@dyn 451] (gas: 9)\n 21835: a0 = s1 + 0x1098\n 21839: u64 [a0 + 288] = 0\n 21843: u64 [a0 + 280] = 0\n 21847: u64 [a0 + 272] = 0\n 21851: a2 = a0\n 21853: a0 = 0x4\n 21856: a1 = s1 + 0x11a0\n 21860: u64 [a2 + 264] = 0\n 21864: ra = 904, jump @4\n      : @845 [@dyn 452] (gas: 3)\n 21870: a0 = u64 [s1 + 0x28]\n 21873: a0 = i32 [a0]\n 21875: jump @847 if a0 >u 63\n      : @846 (gas: 3)\n 21879: a1 = u64 [s1 + 0x28]\n 21882: u32 [a1 + 0] = 0x40\n 21885: fallthrough\n      : @847 (gas: 5)\n 21886: a0 = 0x1\n 21889: a2 = 0x24\n 21892: a1 = u64 [s1 + 0x20]\n 21895: ecalli 6 // 'seal_return'\n 21897: fallthrough\n      : @848 (gas: 6)\n 21898: a1 = 0x20020\n 21903: i32 a1 = a1 + 0\n 21905: a0 = 0x1\n 21908: a2 = 0\n 21910: ecalli 6 // 'seal_return'\n 21912: jump @840\n      : @849 (gas: 6)\n 21915: a1 = 0x20020\n 21920: i32 a1 = a1 + 0\n 21922: a0 = 0x1\n 21925: a2 = 0\n 21927: ecalli 6 // 'seal_return'\n 21929: jump @840\n      : @850 (gas: 6)\n 21932: a1 = 0x20020\n 21937: i32 a1 = a1 + 0\n 21939: a0 = 0x1\n 21942: a2 = 0\n 21944: ecalli 6 // 'seal_return'\n 21946: jump @840\n      : @851 (gas: 6)\n 21949: a1 = 0x20020\n 21954: i32 a1 = a1 + 0\n 21956: a0 = 0x1\n 21959: a2 = 0\n 21961: ecalli 6 // 'seal_return'\n 21963: jump @840\n      : @852 (gas: 6)\n 21966: a1 = 0x20020\n 21971: i32 a1 = a1 + 0\n 21973: a0 = 0x1\n 21976: a2 = 0\n 21978: ecalli 6 // 'seal_return'\n 21980: jump @840\n      : @853 (gas: 6)\n 21983: a1 = 0x20020\n 21988: i32 a1 = a1 + 0\n 21990: a0 = 0x1\n 21993: a2 = 0\n 21995: ecalli 6 // 'seal_return'\n 21997: jump @840\n      : @854 (gas: 6)\n 22000: a1 = 0x20020\n 22005: i32 a1 = a1 + 0\n 22007: a0 = 0x1\n 22010: a2 = 0\n 22012: ecalli 6 // 'seal_return'\n 22014: jump @840\n      : @855 (gas: 6)\n 22017: a1 = 0x20020\n 22022: i32 a1 = a1 + 0\n 22024: a0 = 0x1\n 22027: a2 = 0\n 22029: ecalli 6 // 'seal_return'\n 22031: jump @840\n      : @856 (gas: 6)\n 22034: a1 = 0x20020\n 22039: i32 a1 = a1 + 0\n 22041: a0 = 0x1\n 22044: a2 = 0\n 22046: ecalli 6 // 'seal_return'\n 22048: jump @840\n      : @857 (gas: 6)\n 22051: a1 = 0x20020\n 22056: i32 a1 = a1 + 0\n 22058: a0 = 0x1\n 22061: a2 = 0\n 22063: ecalli 6 // 'seal_return'\n 22065: jump @840\n      : @858 (gas: 6)\n 22068: a1 = 0x20020\n 22073: i32 a1 = a1 + 0\n 22075: a0 = 0x1\n 22078: a2 = 0\n 22080: ecalli 6 // 'seal_return'\n 22082: jump @840\n      : @859 (gas: 6)\n 22085: a1 = 0x20020\n 22090: i32 a1 = a1 + 0\n 22092: a0 = 0x1\n 22095: a2 = 0\n 22097: ecalli 6 // 'seal_return'\n 22099: jump @840\n      : @860 (gas: 6)\n 22102: a1 = 0x20020\n 22107: i32 a1 = a1 + 0\n 22109: a0 = 0x1\n 22112: a2 = 0\n 22114: ecalli 6 // 'seal_return'\n 22116: jump @840\n      : @861 (gas: 5)\n 22119: a1 = 0x20020\n 22124: i32 a1 = a1 + 0\n 22126: a0 = 0x1\n 22129: ecalli 6 // 'seal_return'\n 22131: fallthrough\n      : @862 (gas: 6)\n 22132: a1 = 0x20020\n 22137: i32 a1 = a1 + 0\n 22139: a0 = 0x1\n 22142: a2 = 0\n 22144: ecalli 6 // 'seal_return'\n 22146: jump @840\n      : @863 (gas: 6)\n 22149: a1 = 0x20020\n 22154: i32 a1 = a1 + 0\n 22156: a0 = 0x1\n 22159: a2 = 0\n 22161: ecalli 6 // 'seal_return'\n 22163: jump @840\n      : @864 (gas: 6)\n 22166: a1 = 0x20020\n 22171: i32 a1 = a1 + 0\n 22173: a0 = 0x1\n 22176: a2 = 0\n 22178: ecalli 6 // 'seal_return'\n 22180: jump @840\n      : @865 (gas: 6)\n 22183: a1 = 0x20020\n 22188: i32 a1 = a1 + 0\n 22190: a0 = 0x1\n 22193: a2 = 0\n 22195: ecalli 6 // 'seal_return'\n 22197: jump @840\n      : @866 (gas: 6)\n 22200: a1 = 0x20020\n 22205: i32 a1 = a1 + 0\n 22207: a0 = 0x1\n 22210: a2 = 0\n 22212: ecalli 6 // 'seal_return'\n 22214: jump @840\n      : @867 (gas: 6)\n 22217: a1 = 0x20020\n 22222: i32 a1 = a1 + 0\n 22224: a0 = 0x1\n 22227: a2 = 0\n 22229: ecalli 6 // 'seal_return'\n 22231: jump @840\n      : @868 (gas: 8)\n 22234: u64 [s1 + 1744] = 0\n 22238: u64 [s1 + 1736] = 0\n 22242: u64 [s1 + 1728] = 0\n 22246: a0 = 0x4e487b7100000000\n 22256: a1 = s1 + 0x6c0\n 22260: u64 [s1 + 0x6d8] = a0\n 22264: a0 = 0\n 22266: ra = 906, jump @4\n      : @869 [@dyn 453] (gas: 7)\n 22272: u64 [s1 + 1720] = 0\n 22276: u64 [s1 + 1712] = 0\n 22280: u64 [s1 + 1696] = 0x41\n 22285: a0 = 0x4\n 22288: a1 = s1 + 0x6a0\n 22292: u64 [s1 + 1704] = 0\n 22296: ra = 908, jump @4\n      : @870 [@dyn 454] (gas: 3)\n 22302: a0 = u64 [s1 + 0xf8]\n 22306: a0 = i32 [a0]\n 22308: jump @872 if a0 >u 63\n      : @871 (gas: 3)\n 22312: a1 = u64 [s1 + 0xf8]\n 22316: u32 [a1 + 0] = 0x40\n 22319: fallthrough\n      : @872 (gas: 5)\n 22320: a0 = 0x1\n 22323: a2 = 0x24\n 22326: a1 = u64 [s1 + 0x100]\n 22330: ecalli 6 // 'seal_return'\n 22332: fallthrough\n      : @873 (gas: 6)\n 22333: a1 = 0x20020\n 22338: i32 a1 = a1 + 0\n 22340: a0 = 0x1\n 22343: a2 = 0\n 22345: ecalli 6 // 'seal_return'\n 22347: jump @840\n      : @874 (gas: 6)\n 22350: a1 = 0x20020\n 22355: i32 a1 = a1 + 0\n 22357: a0 = 0x1\n 22360: a2 = 0\n 22362: ecalli 6 // 'seal_return'\n 22364: jump @840\n      : @875 (gas: 6)\n 22367: a1 = 0x20020\n 22372: i32 a1 = a1 + 0\n 22374: a0 = 0x1\n 22377: a2 = 0\n 22379: ecalli 6 // 'seal_return'\n 22381: jump @840\n      : @876 (gas: 6)\n 22384: a1 = 0x20020\n 22389: i32 a1 = a1 + 0\n 22391: a0 = 0x1\n 22394: a2 = 0\n 22396: ecalli 6 // 'seal_return'\n 22398: jump @840\n      : @877 (gas: 6)\n 22401: a1 = 0x20020\n 22406: i32 a1 = a1 + 0\n 22408: a0 = 0x1\n 22411: a2 = 0\n 22413: ecalli 6 // 'seal_return'\n 22415: jump @840\n      : @878 (gas: 6)\n 22418: a1 = 0x20020\n 22423: i32 a1 = a1 + 0\n 22425: a0 = 0x1\n 22428: a2 = 0\n 22430: ecalli 6 // 'seal_return'\n 22432: jump @840\n      : @879 (gas: 6)\n 22435: a1 = 0x20020\n 22440: i32 a1 = a1 + 0\n 22442: a0 = 0x1\n 22445: a2 = 0\n 22447: ecalli 6 // 'seal_return'\n 22449: jump @840\n      : @880 (gas: 6)\n 22452: a1 = 0x20020\n 22457: i32 a1 = a1 + 0\n 22459: a0 = 0x1\n 22462: a2 = 0\n 22464: ecalli 6 // 'seal_return'\n 22466: jump @840\n      : @881 (gas: 1)\n 22469: jump @912 if a0 != 268786717\n      : @882 (gas: 11)\n 22477: a0 = s1 + 0x209c\n 22481: u64 [a0 + 28] = 0\n 22484: u64 [a0 + 20] = 0\n 22487: u64 [a0 + 12] = 0\n 22490: u64 [a0 + 4] = 0\n 22493: a0 = s1 + 0x2000\n 22497: i32 a0 = a0 + 0xa0\n 22501: ra = 0x38e\n 22505: ecalli 9 // 'value_transferred'\n 22507: t0 = 0x390\n 22511: jump @1094\n      : @883 [@dyn 455] (gas: 1)\n 22514: t0 = 912, jump @1094\n      : @884 [@dyn 456] (gas: 1)\n 22520: t0 = 914, jump @1096\n      : @885 [@dyn 457] (gas: 1)\n 22526: jump @922 if a0 == 0\n      : @886 (gas: 6)\n 22530: a1 = 0x20020\n 22535: i32 a1 = a1 + 0\n 22537: a0 = 0x1\n 22540: a2 = 0\n 22542: ecalli 6 // 'seal_return'\n 22544: jump @840\n      : @887 (gas: 6)\n 22547: a1 = 0x20020\n 22552: i32 a1 = a1 + 0\n 22554: a0 = 0x1\n 22557: a2 = 0\n 22559: ecalli 6 // 'seal_return'\n 22561: jump @840\n      : @888 (gas: 6)\n 22564: a1 = 0x20020\n 22569: i32 a1 = a1 + 0\n 22571: a0 = 0x1\n 22574: a2 = 0\n 22576: ecalli 6 // 'seal_return'\n 22578: jump @840\n      : @889 (gas: 6)\n 22581: a1 = 0x20020\n 22586: i32 a1 = a1 + 0\n 22588: a0 = 0x1\n 22591: a2 = 0\n 22593: ecalli 6 // 'seal_return'\n 22595: jump @840\n      : @890 (gas: 6)\n 22598: a1 = 0x20020\n 22603: i32 a1 = a1 + 0\n 22605: a0 = 0x1\n 22608: a2 = 0\n 22610: ecalli 6 // 'seal_return'\n 22612: jump @840\n      : @891 (gas: 6)\n 22615: a1 = 0x20020\n 22620: i32 a1 = a1 + 0\n 22622: a0 = 0x1\n 22625: a2 = 0\n 22627: ecalli 6 // 'seal_return'\n 22629: jump @840\n      : @892 (gas: 6)\n 22632: a1 = 0x20020\n 22637: i32 a1 = a1 + 0\n 22639: a0 = 0x1\n 22642: a2 = 0\n 22644: ecalli 6 // 'seal_return'\n 22646: jump @840\n      : @893 (gas: 6)\n 22649: a1 = 0x20020\n 22654: i32 a1 = a1 + 0\n 22656: a0 = 0x1\n 22659: a2 = 0\n 22661: ecalli 6 // 'seal_return'\n 22663: jump @840\n      : @894 (gas: 6)\n 22666: a1 = 0x20020\n 22671: i32 a1 = a1 + 0\n 22673: a0 = 0x1\n 22676: a2 = 0\n 22678: ecalli 6 // 'seal_return'\n 22680: jump @840\n      : @895 (gas: 6)\n 22683: a1 = 0x20020\n 22688: i32 a1 = a1 + 0\n 22690: a0 = 0x1\n 22693: a2 = 0\n 22695: ecalli 6 // 'seal_return'\n 22697: jump @840\n      : @896 (gas: 6)\n 22700: a1 = 0x20020\n 22705: i32 a1 = a1 + 0\n 22707: a0 = 0x1\n 22710: a2 = 0\n 22712: ecalli 6 // 'seal_return'\n 22714: jump @840\n      : @897 (gas: 6)\n 22717: a1 = 0x20020\n 22722: i32 a1 = a1 + 0\n 22724: a0 = 0x1\n 22727: a2 = 0\n 22729: ecalli 6 // 'seal_return'\n 22731: jump @840\n      : @898 (gas: 6)\n 22734: a1 = 0x20020\n 22739: i32 a1 = a1 + 0\n 22741: a0 = 0x1\n 22744: a2 = 0\n 22746: ecalli 6 // 'seal_return'\n 22748: jump @840\n      : @899 (gas: 6)\n 22751: a1 = 0x20020\n 22756: i32 a1 = a1 + 0\n 22758: a0 = 0x1\n 22761: a2 = 0\n 22763: ecalli 6 // 'seal_return'\n 22765: jump @840\n      : @900 (gas: 6)\n 22768: a1 = 0x20020\n 22773: i32 a1 = a1 + 0\n 22775: a0 = 0x1\n 22778: a2 = 0\n 22780: ecalli 6 // 'seal_return'\n 22782: jump @840\n      : @901 (gas: 6)\n 22785: a1 = 0x20020\n 22790: i32 a1 = a1 + 0\n 22792: a0 = 0x1\n 22795: a2 = 0\n 22797: ecalli 6 // 'seal_return'\n 22799: jump @840\n      : @902 (gas: 6)\n 22802: a1 = 0x20020\n 22807: i32 a1 = a1 + 0\n 22809: a0 = 0x1\n 22812: a2 = 0\n 22814: ecalli 6 // 'seal_return'\n 22816: jump @840\n      : @903 (gas: 6)\n 22819: a1 = 0x20020\n 22824: i32 a1 = a1 + 0\n 22826: a0 = 0x1\n 22829: a2 = 0\n 22831: ecalli 6 // 'seal_return'\n 22833: jump @840\n      : @904 (gas: 6)\n 22836: a1 = 0x20020\n 22841: i32 a1 = a1 + 0\n 22843: a0 = 0x1\n 22846: a2 = 0\n 22848: ecalli 6 // 'seal_return'\n 22850: jump @840\n      : @905 (gas: 6)\n 22853: a1 = 0x20020\n 22858: i32 a1 = a1 + 0\n 22860: a0 = 0x1\n 22863: a2 = 0\n 22865: ecalli 6 // 'seal_return'\n 22867: jump @840\n      : @906 (gas: 6)\n 22870: a1 = 0x20020\n 22875: i32 a1 = a1 + 0\n 22877: a0 = 0x1\n 22880: a2 = 0\n 22882: ecalli 6 // 'seal_return'\n 22884: jump @840\n      : @907 (gas: 6)\n 22887: a1 = 0x20020\n 22892: i32 a1 = a1 + 0\n 22894: a0 = 0x1\n 22897: a2 = 0\n 22899: ecalli 6 // 'seal_return'\n 22901: jump @840\n      : @908 (gas: 6)\n 22904: a1 = 0x20020\n 22909: i32 a1 = a1 + 0\n 22911: a0 = 0x1\n 22914: a2 = 0\n 22916: ecalli 6 // 'seal_return'\n 22918: jump @840\n      : @909 (gas: 6)\n 22921: a1 = 0x20020\n 22926: i32 a1 = a1 + 0\n 22928: a0 = 0x1\n 22931: a2 = 0\n 22933: ecalli 6 // 'seal_return'\n 22935: jump @840\n      : @910 (gas: 6)\n 22938: a1 = 0x20020\n 22943: i32 a1 = a1 + 0\n 22945: a0 = 0x1\n 22948: a2 = 0\n 22950: ecalli 6 // 'seal_return'\n 22952: jump @840\n      : @911 (gas: 6)\n 22955: a1 = 0x20020\n 22960: i32 a1 = a1 + 0\n 22962: a0 = 0x1\n 22965: a2 = 0\n 22967: ecalli 6 // 'seal_return'\n 22969: jump @840\n      : @912 (gas: 1)\n 22972: jump @918 if a0 != 602365732\n      : @913 (gas: 11)\n 22979: a0 = s1 + 0x209c\n 22983: u64 [a0 + 540] = 0\n 22987: u64 [a0 + 532] = 0\n 22991: u64 [a0 + 524] = 0\n 22995: u64 [a0 + 516] = 0\n 22999: a0 = s1 + 0x2000\n 23003: i32 a0 = a0 + 0x2a0\n 23007: ra = 0x394\n 23011: ecalli 9 // 'value_transferred'\n 23013: t0 = 0x396\n 23017: jump @1093\n      : @914 [@dyn 458] (gas: 1)\n 23020: t0 = 918, jump @1093\n      : @915 [@dyn 459] (gas: 1)\n 23026: t0 = 920, jump @1096\n      : @916 [@dyn 460] (gas: 1)\n 23032: jump @924 if a0 == 0\n      : @917 (gas: 6)\n 23035: a1 = 0x20020\n 23040: i32 a1 = a1 + 0\n 23042: a0 = 0x1\n 23045: a2 = 0\n 23047: ecalli 6 // 'seal_return'\n 23049: jump @840\n      : @918 (gas: 6)\n 23052: a1 = 0x20020\n 23057: i32 a1 = a1 + 0\n 23059: a0 = 0x1\n 23062: a2 = 0\n 23064: ecalli 6 // 'seal_return'\n 23066: jump @840\n      : @919 (gas: 4)\n 23069: a0 = t0\n 23071: u64 [s1 + 0x118] = a1\n 23075: ra = 0x39a\n 23079: jump @11\n      : @920 (gas: 2)\n 23082: u64 [s1 + 0x118] = a1\n 23086: ra = 922, jump @11\n      : @921 [@dyn 461] (gas: 5)\n 23092: i32 a1 = a0 + 0\n 23094: a2 = i32 [s1 + 0x118]\n 23098: a0 = 0\n 23100: ecalli 6 // 'seal_return'\n 23102: jump @801\n      : @922 (gas: 3)\n 23105: a0 = u64 [s1 + 0x118]\n 23109: a0 = i32 [a0]\n 23111: jump @926 if a0 >u 3\n      : @923 (gas: 6)\n 23115: a1 = 0x20020\n 23120: i32 a1 = a1 + 0\n 23122: a0 = 0x1\n 23125: a2 = 0\n 23127: ecalli 6 // 'seal_return'\n 23129: jump @840\n      : @924 (gas: 3)\n 23132: a0 = u64 [s1 + 0x118]\n 23136: a0 = i32 [a0]\n 23138: jump @941 if a0 >u 3\n      : @925 (gas: 6)\n 23143: a1 = 0x20020\n 23148: i32 a1 = a1 + 0\n 23150: a0 = 0x1\n 23153: a2 = 0\n 23155: ecalli 6 // 'seal_return'\n 23157: jump @840\n      : @926 (gas: 8)\n 23160: a0 = 0x30020\n 23165: u64 [s1 + 0x118] = a0\n 23169: i32 a0 = a0 + 0\n 23171: ra = 0x39c\n 23175: ecalli 3 // 'caller'\n 23177: a2 = u64 [s1 + 0x118]\n 23181: t0 = 0x39e\n 23185: jump @1053\n      : @927 [@dyn 462] (gas: 2)\n 23188: a2 = u64 [s1 + 0x118]\n 23192: t0 = 926, jump @1053\n      : @928 [@dyn 463] (gas: 7)\n 23198: u64 [s1 + 472] = 0\n 23202: u64 [s1 + 0x1d0] = a1\n 23206: u64 [s1 + 0x1c8] = a0\n 23210: a1 = s1 + 0x1c0\n 23214: u64 [s1 + 0x1c0] = a3\n 23218: a0 = 0\n 23220: ra = 928, jump @4\n      : @929 [@dyn 464] (gas: 7)\n 23226: u64 [s1 + 440] = 0\n 23230: u64 [s1 + 432] = 0\n 23234: u64 [s1 + 416] = 0x1\n 23239: a0 = 0x20\n 23242: a1 = s1 + 0x1a0\n 23246: u64 [s1 + 424] = 0\n 23250: ra = 930, jump @4\n      : @930 [@dyn 465] (gas: 4)\n 23256: a0 = 0x20014\n 23261: u64 [s1 + 0x118] = a0\n 23265: a0 = i32 [0x20014]\n 23270: jump @932 if a0 >u 63\n      : @931 (gas: 3)\n 23274: a1 = u64 [s1 + 0x118]\n 23278: u32 [a1 + 0] = 0x40\n 23281: fallthrough\n      : @932 (gas: 15)\n 23282: a0 = sp + 0xffffffffffffffe0\n 23285: a2 = a0 & 0xffffffffffffffe0\n 23288: u64 [s1 + 0x100] = a2\n 23292: sp = a2\n 23294: a0 = 0x20020\n 23299: u64 [s1 + 0x108] = a0\n 23303: i32 a0 = a0 + 0\n 23305: i32 a2 = a2 + 0\n 23307: a1 = 0x40\n 23310: u64 [s1 + 0x110] = a0\n 23314: ra = 0x3a4\n 23318: ecalli 5 // 'hash_keccak_256'\n 23320: a3 = u64 [s1 + 0x100]\n 23324: t0 = 0x3a6\n 23328: jump @1060\n      : @933 [@dyn 466] (gas: 2)\n 23331: a3 = u64 [s1 + 0x100]\n 23335: t0 = 934, jump @1060\n      : @934 [@dyn 467] (gas: 8)\n 23341: a5 = a1 + 0x4\n 23344: u64 [a5 + 0x20] = a3\n 23347: u64 [a5 + 0x28] = a2\n 23350: u64 [a5 + 0x30] = a4\n 23353: u64 [a5 + 0x38] = a0\n 23356: a0 = s1 + 0x180\n 23360: a1 = s1 + 0x20c0\n 23364: ra = 936, jump @6\n      : @935 [@dyn 468] (gas: 2)\n 23370: a0 = u8 [s1 + 0x180]\n 23374: jump @948 if a0 <=u 2\n      : @936 (gas: 8)\n 23379: u64 [s1 + 336] = 0\n 23383: u64 [s1 + 328] = 0\n 23387: u64 [s1 + 320] = 0\n 23391: a0 = 0x4e487b7100000000\n 23401: a1 = s1 + 0x140\n 23405: u64 [s1 + 0x158] = a0\n 23409: a0 = 0\n 23411: ra = 938, jump @4\n      : @937 [@dyn 469] (gas: 7)\n 23417: u64 [s1 + 312] = 0\n 23421: u64 [s1 + 304] = 0\n 23425: u64 [s1 + 288] = 0x21\n 23430: a0 = 0x4\n 23433: a1 = s1 + 0x120\n 23437: u64 [s1 + 296] = 0\n 23441: ra = 940, jump @4\n      : @938 [@dyn 470] (gas: 3)\n 23447: a0 = u64 [s1 + 0x118]\n 23451: a0 = i32 [a0]\n 23453: jump @940 if a0 >u 63\n      : @939 (gas: 3)\n 23457: a1 = u64 [s1 + 0x118]\n 23461: u32 [a1 + 0] = 0x40\n 23464: fallthrough\n      : @940 (gas: 5)\n 23465: a0 = 0x1\n 23468: a2 = 0x24\n 23471: a1 = u64 [s1 + 0x110]\n 23475: ecalli 6 // 'seal_return'\n 23477: fallthrough\n      : @941 (gas: 8)\n 23478: a0 = s1 + 0x209c\n 23482: u64 [a0 + 572] = 0\n 23486: u64 [a0 + 564] = 0\n 23490: u64 [a0 + 556] = 0\n 23494: u64 [a0 + 548] = 0\n 23498: a0 = s1 + 0x680\n 23502: a1 = s1 + 0x22c0\n 23506: ra = 942, jump @6\n      : @942 [@dyn 471] (gas: 3)\n 23512: a0 = u64 [s1 + 0x680]\n 23516: i32 a1 = a0 + 0\n 23518: jump @952 if a1 != 4294967295\n      : @943 (gas: 8)\n 23523: u64 [s1 + 1648] = 0\n 23527: u64 [s1 + 1640] = 0\n 23531: u64 [s1 + 1632] = 0\n 23535: a0 = 0x4e487b7100000000\n 23545: a1 = s1 + 0x660\n 23549: u64 [s1 + 0x678] = a0\n 23553: a0 = 0\n 23555: ra = 944, jump @4\n      : @944 [@dyn 472] (gas: 7)\n 23561: u64 [s1 + 1624] = 0\n 23565: u64 [s1 + 1616] = 0\n 23569: u64 [s1 + 1600] = 0x11\n 23574: a0 = 0x4\n 23577: a1 = s1 + 0x640\n 23581: u64 [s1 + 1608] = 0\n 23585: ra = 946, jump @4\n      : @945 [@dyn 473] (gas: 2)\n 23591: a1 = i32 [0x20014]\n 23596: jump @947 if a1 >u 63\n      : @946 (gas: 2)\n 23600: u32 [0x20014] = 0x40\n 23606: fallthrough\n      : @947 (gas: 6)\n 23607: a1 = 0x20020\n 23612: i32 a1 = a1 + 0\n 23614: a0 = 0x1\n 23617: a2 = 0x24\n 23620: ecalli 6 // 'seal_return'\n 23622: fallthrough\n      : @948 (gas: 7)\n 23623: u64 [s1 + 376] = 0\n 23627: u64 [s1 + 368] = 0\n 23631: u64 [s1 + 0x160] = a0\n 23635: a0 = 0x80\n 23639: a1 = s1 + 0x160\n 23643: u64 [s1 + 360] = 0\n 23647: ra = 948, jump @4\n      : @949 [@dyn 474] (gas: 3)\n 23653: a0 = u64 [s1 + 0x118]\n 23657: a0 = i32 [a0]\n 23659: jump @951 if a0 >u 159\n      : @950 (gas: 5)\n 23664: a1 = u64 [s1 + 0x118]\n 23668: u32 [a1 + 0] = 0xa0\n 23672: a0 = u64 [s1 + 0x108]\n 23676: i32 a1 = a0 + 0x80\n 23680: jump @800\n      : @951 (gas: 3)\n 23683: a0 = u64 [s1 + 0x108]\n 23687: i32 a1 = a0 + 0x80\n 23691: jump @800\n      : @952 (gas: 23)\n 23694: a1 = 0xffffffff\n 23704: a5 = s1 + 0x600\n 23708: a2 = u64 [a5 + 0x98]\n 23712: a3 = u64 [a5 + 0x90]\n 23716: a4 = u64 [a5 + 0x88]\n 23720: a5 = a0 + 0x1\n 23723: a1 = a1 & a5\n 23726: a0 = a0 >> 0x20\n 23729: a0 = a0 << 0x20\n 23732: a0 = a0 | a1\n 23735: a1 = s1 + 0x209c\n 23739: u64 [a1 + 604] = 0\n 23743: u64 [a1 + 596] = 0\n 23747: u64 [a1 + 588] = 0\n 23751: u64 [a1 + 580] = 0\n 23755: a5 = a1 + 0x204\n 23759: u64 [a5 + 0x68] = a4\n 23762: u64 [a5 + 0x70] = a3\n 23765: u64 [a5 + 0x78] = a2\n 23768: u64 [a5 + 0x60] = a0\n 23771: a0 = s1 + 0x22e0\n 23775: a1 = s1 + 0x2300\n 23779: ra = 950, jump @10\n      : @953 [@dyn 475] (gas: 6)\n 23785: a1 = 0x20020\n 23790: i32 a1 = a1 + 0\n 23792: a0 = 0\n 23794: a2 = 0\n 23796: ecalli 6 // 'seal_return'\n 23798: jump @840\n      : @954 (gas: 3)\n 23801: a1 = u32 [a1]\n 23803: a2 = 0xfffffffd\n 23813: jump @956 if a2 <u a1\n      : @955 (gas: 8)\n 23816: a2 = a1 + 0x2\n 23819: a1 = a2 <u a1\n 23822: u64 [a0 + 24] = 0\n 23825: u64 [a0] = a2\n 23827: u64 [a0 + 0x8] = a1\n 23830: a1 = 0 if a1 != 0\n 23832: u64 [a0 + 0x10] = a1\n 23835: ret\n      : @956 (gas: 6)\n 23837: sp = sp + 0xffffffffffffffb0\n 23840: u64 [sp + 0x48] = ra\n 23843: u64 [sp + 0x40] = s0\n 23846: s0 = sp + 0x50\n 23849: sp = sp & 0xfffffffffffffff0\n 23852: t0 = 952, jump @1061\n      : @957 [@dyn 476] (gas: 1)\n 23858: ra = 954, jump @4\n      : @958 [@dyn 477] (gas: 1)\n 23864: t0 = 956, jump @1095\n      : @959 [@dyn 478] (gas: 1)\n 23870: ra = 958, jump @4\n      : @960 [@dyn 479] (gas: 2)\n 23876: a1 = i32 [0x20014]\n 23881: jump @962 if a1 >u 63\n      : @961 (gas: 2)\n 23885: u32 [0x20014] = 0x40\n 23891: fallthrough\n      : @962 (gas: 7)\n 23892: a1 = 0x20020\n 23897: i32 a1 = a1 + 0\n 23899: a0 = 0x1\n 23902: a2 = 0x24\n 23905: ra = 0x3c0\n 23909: ecalli 6 // 'seal_return'\n 23911: fallthrough\n      : @963 [@dyn 480] (gas: 19)\n 23912: sp = sp + 0xffffffffffffff90\n 23915: u64 [sp + 0x68] = ra\n 23918: u64 [sp + 0x60] = s0\n 23921: s0 = sp + 0x70\n 23924: sp = sp & 0xfffffffffffffff0\n 23927: a3 = u64 [a0 + 0x18]\n 23930: a2 = u64 [a0 + 0x10]\n 23933: t1 = u64 [a0]\n 23935: a0 = u64 [a0 + 0x8]\n 23938: a4 = a3 >u 0\n 23940: a5 = a2 >u 0\n 23942: a5 = a4 if a3 != 0\n 23945: t0 = a0 >u 0\n 23947: a4 = t1 <u 0xffffffffffffffc0\n 23950: a4 = a4 ^ 0x1\n 23953: a4 = t0 if a0 != 0\n 23956: a1 = a2 | a3\n 23959: a4 = a5 if a1 != 0\n 23962: jump @966 if a4 != 0\n      : @964 (gas: 15)\n 23965: a1 = t1 + 0x40\n 23968: a4 = a1 <u t1\n 23971: a5 = a0 + a4\n 23974: a0 = a5 <u a0\n 23977: a0 = a4 if a4 == 0\n 23980: a0 = a0 + a2\n 23983: a2 = a0 <u a2\n 23986: a2 = a2 + a3\n 23989: u64 [sp + 0x40] = a1\n 23992: u64 [sp + 0x48] = a5\n 23995: u64 [sp + 0x50] = a0\n 23998: a0 = 0x40\n 24001: a1 = sp + a0\n 24004: u64 [sp + 0x58] = a2\n 24007: ra = 962, jump @4\n      : @965 [@dyn 481] (gas: 5)\n 24013: sp = s0 + 0xffffffffffffff90\n 24016: ra = u64 [sp + 0x68]\n 24019: s0 = u64 [sp + 0x60]\n 24022: sp = sp + 0x70\n 24025: ret\n      : @966 (gas: 1)\n 24027: t0 = 964, jump @1061\n      : @967 [@dyn 482] (gas: 1)\n 24033: ra = 966, jump @4\n      : @968 [@dyn 483] (gas: 7)\n 24039: u64 [sp + 24] = 0\n 24042: u64 [sp + 16] = 0\n 24045: u64 [sp + 0] = 0x41\n 24048: a0 = 0x4\n 24051: a1 = sp\n 24053: u64 [sp + 8] = 0\n 24056: ra = 968, jump @4\n      : @969 [@dyn 484] (gas: 2)\n 24062: a1 = i32 [0x20014]\n 24067: jump @971 if a1 >u 63\n      : @970 (gas: 2)\n 24071: u32 [0x20014] = 0x40\n 24077: fallthrough\n      : @971 (gas: 7)\n 24078: a1 = 0x20020\n 24083: i32 a1 = a1 + 0\n 24085: a0 = 0x1\n 24088: a2 = 0x24\n 24091: ra = 0x3ca\n 24095: ecalli 6 // 'seal_return'\n 24097: fallthrough\n      : @972 [@dyn 485] (gas: 46)\n 24098: sp = sp + 0xffffffffffffff70\n 24102: u64 [sp + 0x88] = ra\n 24106: u64 [sp + 0x80] = s0\n 24110: u64 [sp + 0x78] = s1\n 24113: s0 = sp + 0x90\n 24117: sp = sp & 0xfffffffffffffff0\n 24120: t0 = a0\n 24122: a2 = u64 [a1]\n 24124: t2 = u64 [a0 + 0x8]\n 24127: a5 = u64 [a1 + 0x8]\n 24130: t1 = u64 [a0]\n 24132: a3 = a2 + 0x1f\n 24135: ra = a3 <u a2\n 24138: a2 = a5 + ra\n 24141: a3 = a3 & 0xffffffffffffffe0\n 24144: u64 [sp + 0x8] = t1\n 24147: t1 = t1 + a3\n 24150: a4 = t1 <u a3\n 24153: a3 = a2 + t2\n 24156: a3 = a3 + a4\n 24159: s1 = a3 ^ a2\n 24162: a0 = a3 <u a2\n 24165: a0 = a4 if s1 == 0\n 24168: a4 = u64 [t0 + 0x18]\n 24171: a5 = a2 <u a5\n 24174: s1 = u64 [a1 + 0x10]\n 24177: t0 = u64 [t0 + 0x10]\n 24180: a1 = u64 [a1 + 0x18]\n 24183: a5 = ra if ra == 0\n 24186: a5 = a5 + s1\n 24189: s1 = a5 <u s1\n 24192: a2 = a5 + t0\n 24195: a0 = a0 + a2\n 24198: a5 = a2 <u a5\n 24201: a2 = a0 <u a2\n 24204: a1 = a1 + a4\n 24207: a1 = a1 + s1\n 24210: a1 = a1 + a5\n 24213: a5 = a1 + a2\n 24216: a1 = a5 >u 0\n 24218: a2 = a0 >u 0\n 24220: a2 = a1 if a5 != 0\n 24223: a1 = a0 | a5\n 24226: s1 = a3 >u 0\n 24228: s1 = a2 if a1 != 0\n 24231: jump @976 if s1 != 0\n      : @973 (gas: 13)\n 24234: a1 = u64 [sp + 0x8]\n 24237: a1 = t1 <u a1\n 24240: a2 = a3 ^ t2\n 24243: s1 = a3 <u t2\n 24246: s1 = a1 if a2 == 0\n 24249: a1 = a0 <u t0\n 24252: a2 = a5 ^ a4\n 24255: a4 = a5 <u a4\n 24258: a4 = a1 if a2 == 0\n 24261: a1 = a0 ^ t0\n 24264: a1 = a1 | a2\n 24267: a4 = s1 if a1 == 0\n 24270: jump @976 if a4 != 0\n      : @974 (gas: 7)\n 24273: u64 [sp + 0x50] = t1\n 24276: u64 [sp + 0x58] = a3\n 24279: u64 [sp + 0x60] = a0\n 24282: a0 = 0x40\n 24285: a1 = sp + 0x50\n 24288: u64 [sp + 0x68] = a5\n 24291: ra = 972, jump @4\n      : @975 [@dyn 486] (gas: 6)\n 24297: sp = s0 + 0xffffffffffffff70\n 24301: ra = u64 [sp + 0x88]\n 24305: s0 = u64 [sp + 0x80]\n 24309: s1 = u64 [sp + 0x78]\n 24312: sp = sp + 0x90\n 24316: ret\n      : @976 (gas: 8)\n 24318: u64 [sp + 64] = 0\n 24321: u64 [sp + 56] = 0\n 24324: u64 [sp + 48] = 0\n 24327: a0 = 0x4e487b7100000000\n 24337: a1 = sp + 0x30\n 24340: u64 [sp + 0x48] = a0\n 24343: a0 = 0\n 24345: ra = 974, jump @4\n      : @977 [@dyn 487] (gas: 7)\n 24351: u64 [sp + 40] = 0\n 24354: u64 [sp + 32] = 0\n 24357: u64 [sp + 16] = 0x41\n 24361: a0 = 0x4\n 24364: a1 = sp + 0x10\n 24367: u64 [sp + 24] = 0\n 24370: ra = 976, jump @4\n      : @978 [@dyn 488] (gas: 2)\n 24376: a1 = i32 [0x20014]\n 24381: jump @980 if a1 >u 63\n      : @979 (gas: 2)\n 24385: u32 [0x20014] = 0x40\n 24391: fallthrough\n      : @980 (gas: 7)\n 24392: a1 = 0x20020\n 24397: i32 a1 = a1 + 0\n 24399: a0 = 0x1\n 24402: a2 = 0x24\n 24405: ra = 0x3d2\n 24409: ecalli 6 // 'seal_return'\n 24411: fallthrough\n      : @981 [@dyn 489] (gas: 31)\n 24412: sp = sp + 0xfffffffffffffee0\n 24416: u64 [sp + 0x118] = ra\n 24420: u64 [sp + 0x110] = s0\n 24424: u64 [sp + 0x108] = s1\n 24428: s0 = sp + 0x120\n 24432: sp = sp & 0xffffffffffffffe0\n 24435: s1 = sp\n 24437: u64 [s1 + 0x38] = a0\n 24440: a0 = u64 [a2]\n 24442: u64 [s1 + 0x48] = a0\n 24445: a0 = u64 [a2 + 0x8]\n 24448: u64 [s1 + 0x40] = a0\n 24451: a0 = u64 [a2 + 0x10]\n 24454: u64 [s1 + 0x50] = a0\n 24457: a0 = u64 [a2 + 0x18]\n 24460: u64 [s1 + 0x58] = a0\n 24463: a0 = u64 [a1 + 0x18]\n 24466: a2 = u64 [a1 + 0x10]\n 24469: a3 = u64 [a1 + 0x8]\n 24472: a1 = u64 [a1]\n 24474: u64 [s1 + 0x30] = a0\n 24477: u64 [s1 + 0xf8] = a0\n 24481: u64 [s1 + 0x28] = a2\n 24484: u64 [s1 + 0xf0] = a2\n 24488: u64 [s1 + 0x20] = a3\n 24491: u64 [s1 + 0xe8] = a3\n 24495: u64 [s1 + 0x18] = a1\n 24498: u64 [s1 + 0xe0] = a1\n 24502: a0 = s1 + 0xc0\n 24506: a1 = s1 + 0xe0\n 24510: ra = 980, jump @6\n      : @982 [@dyn 490] (gas: 20)\n 24516: a0 = u64 [s1 + 0xd8]\n 24520: t0 = u64 [s1 + 0xc0]\n 24524: a2 = u64 [s1 + 0xd0]\n 24528: a3 = u64 [s1 + 0xc8]\n 24532: a1 = u64 [s1 + 0x58]\n 24535: a4 = a0 ^ a1\n 24538: a1 = a1 <u a0\n 24541: a0 = u64 [s1 + 0x50]\n 24544: a5 = a0 <u a2\n 24547: a5 = a1 if a4 != 0\n 24550: a1 = u64 [s1 + 0x40]\n 24553: t1 = a3 ^ a1\n 24556: a3 = a1 <u a3\n 24559: a1 = u64 [s1 + 0x48]\n 24562: a1 = a1 <u t0\n 24565: a1 = a3 if t1 != 0\n 24568: a0 = a0 ^ a2\n 24571: a0 = a0 | a4\n 24574: a1 = a5 if a0 != 0\n 24577: jump @987 if a1 == 0\n      : @983 (gas: 11)\n 24581: a0 = u64 [s1 + 0x18]\n 24584: u64 [s1 + 0x60] = a0\n 24587: a0 = u64 [s1 + 0x20]\n 24590: u64 [s1 + 0x68] = a0\n 24593: a0 = u64 [s1 + 0x28]\n 24596: u64 [s1 + 0x70] = a0\n 24599: a1 = s1 + 0x60\n 24602: a0 = u64 [s1 + 0x30]\n 24605: u64 [s1 + 0x78] = a0\n 24608: a0 = 0\n 24610: ra = 982, jump @4\n      : @984 [@dyn 491] (gas: 2)\n 24616: a1 = i32 [0x20014]\n 24621: jump @986 if a1 >u 31\n      : @985 (gas: 2)\n 24625: u32 [0x20014] = 0x20\n 24631: fallthrough\n      : @986 (gas: 52)\n 24632: a0 = sp + 0xffffffffffffffe0\n 24635: a2 = a0 & 0xffffffffffffffe0\n 24638: u64 [s1 + 0x30] = a2\n 24641: sp = a2\n 24643: a0 = 0x20020\n 24648: i32 a0 = a0 + 0\n 24650: i32 a2 = a2 + 0\n 24652: a1 = 0x20\n 24655: ecalli 5 // 'hash_keccak_256'\n 24657: a3 = u64 [s1 + 0x30]\n 24660: a0 = u64 [a3]\n 24662: a1 = u64 [a3 + 0x8]\n 24665: a2 = u64 [a3 + 0x18]\n 24668: a3 = u64 [a3 + 0x10]\n 24671: t0 = reverse a0\n 24673: a1 = reverse a1\n 24675: a2 = reverse a2\n 24677: a3 = reverse a3\n 24679: a4 = u64 [s1 + 0x40]\n 24682: a4 = a4 + a3\n 24685: t1 = u64 [s1 + 0x48]\n 24688: t1 = t1 + a2\n 24691: a2 = t1 <u a2\n 24694: a4 = a4 + a2\n 24697: a0 = a4 ^ a3\n 24700: a3 = a4 <u a3\n 24703: a3 = a2 if a0 == 0\n 24706: a0 = u64 [s1 + 0x50]\n 24709: a0 = a0 + a1\n 24712: a3 = a3 + a0\n 24715: a2 = a3 <u a0\n 24718: a5 = u64 [s1 + 0x58]\n 24721: t0 = t0 + a5\n 24724: a0 = a0 <u a1\n 24727: a0 = a0 + t0\n 24730: a0 = a0 + a2\n 24733: a1 = u64 [s1 + 0x38]\n 24736: a2 = 0\n 24738: u64 [a1 + 56] = 0\n 24741: u64 [a1 + 48] = 0\n 24744: u64 [a1 + 40] = 0\n 24747: u64 [a1 + 32] = 0\n 24750: u64 [a1] = t1\n 24752: u64 [a1 + 0x8] = a4\n 24755: u64 [a1 + 0x10] = a3\n 24758: u64 [a1 + 0x18] = a0\n 24761: sp = s0 + 0xfffffffffffffee0\n 24765: ra = u64 [sp + 0x118]\n 24769: s0 = u64 [sp + 0x110]\n 24773: s1 = u64 [sp + 0x108]\n 24777: sp = sp + 0x120\n 24781: ret\n      : @987 (gas: 1)\n 24783: t0 = 984, jump @1067\n      : @988 [@dyn 492] (gas: 1)\n 24789: ra = 986, jump @4\n      : @989 [@dyn 493] (gas: 7)\n 24795: u64 [s1 + 152] = 0\n 24799: u64 [s1 + 144] = 0\n 24803: u64 [s1 + 128] = 0x32\n 24808: a0 = 0x4\n 24811: a1 = s1 + 0x80\n 24815: u64 [s1 + 136] = 0\n 24819: ra = 988, jump @4\n      : @990 [@dyn 494] (gas: 2)\n 24825: a1 = i32 [0x20014]\n 24830: jump @992 if a1 >u 63\n      : @991 (gas: 2)\n 24834: u32 [0x20014] = 0x40\n 24840: fallthrough\n      : @992 (gas: 8)\n 24841: a1 = 0x20020\n 24846: i32 a1 = a1 + 0\n 24848: a0 = 0x1\n 24851: a2 = 0x24\n 24854: ra = 0x3de\n 24858: ecalli 6 // 'seal_return'\n 24860: t0 = 0x3e0\n 24864: jump @1097\n      : @993 [@dyn 495] (gas: 1)\n 24867: t0 = 992, jump @1097\n      : @994 [@dyn 496] (gas: 4)\n 24873: a2 = u64 [a1 + 0x8]\n 24876: u64 [sp + 0x18] = a2\n 24879: s1 = u64 [a1]\n 24881: t0 = 994, jump @1090\n      : @995 [@dyn 497] (gas: 1)\n 24887: ra = 996, jump @6\n      : @996 [@dyn 498] (gas: 19)\n 24893: a0 = u32 [sp + 0x34]\n 24896: a0 = a0 << 0x20\n 24899: a1 = u64 [sp + 0x38]\n 24902: a2 = u32 [sp + 0x20]\n 24905: a3 = s1 >> 0x20\n 24908: a5 = u64 [sp + 0x18]\n 24911: a4 = a5 << 0x20\n 24914: a3 = a3 | a4\n 24917: s1 = s1 << 0x20\n 24920: a4 = a5 >> 0x20\n 24923: a0 = a0 | a4\n 24926: a2 = a2 | s1\n 24929: u64 [sp + 0x68] = a3\n 24932: u64 [sp + 0x78] = a1\n 24935: u64 [sp + 0x60] = a2\n 24938: u64 [sp + 0x70] = a0\n 24941: a0 = sp + 0x40\n 24944: a1 = sp + 0x60\n 24947: ra = 998, jump @10\n      : @997 [@dyn 499] (gas: 6)\n 24953: sp = s0 + 0xffffffffffffff60\n 24957: ra = u64 [sp + 0x98]\n 24961: s0 = u64 [sp + 0x90]\n 24965: s1 = u64 [sp + 0x88]\n 24969: sp = sp + 0xa0\n 24973: ret\n      : @998 (gas: 31)\n 24975: sp = sp + 0xfffffffffffffd40\n 24979: a2 = sp + 0x200\n 24983: u64 [a2 + 0xb8] = ra\n 24987: u64 [a2 + 0xb0] = s0\n 24991: u64 [a2 + 0xa8] = s1\n 24995: s0 = sp + 0x2c0\n 24999: sp = sp & 0xffffffffffffffe0\n 25002: s1 = sp\n 25004: a2 = u64 [a1 + 0x18]\n 25007: u64 [s1 + 0x60] = a2\n 25010: a2 = u64 [a1 + 0x10]\n 25013: u64 [s1 + 0x58] = a2\n 25016: a2 = u64 [a1 + 0x8]\n 25019: u64 [s1 + 0x68] = a2\n 25022: a1 = u64 [a1]\n 25024: u64 [s1 + 0x70] = a1\n 25027: a3 = u64 [a0 + 0x18]\n 25030: a2 = u64 [a0 + 0x10]\n 25033: a1 = u64 [a0 + 0x8]\n 25036: a0 = u64 [a0]\n 25038: u64 [s1 + 0x38] = a3\n 25041: u64 [s1 + 0x258] = a3\n 25045: u64 [s1 + 0x40] = a2\n 25048: u64 [s1 + 0x250] = a2\n 25052: u64 [s1 + 0x48] = a1\n 25055: u64 [s1 + 0x248] = a1\n 25059: u64 [s1 + 0x50] = a0\n 25062: u64 [s1 + 0x240] = a0\n 25066: a0 = s1 + 0x220\n 25070: a1 = s1 + 0x240\n 25074: ra = 1000, jump @6\n      : @999 [@dyn 500] (gas: 11)\n 25080: a0 = s1 + 0x200\n 25084: a5 = u64 [a0 + 0x38]\n 25087: a4 = u64 [a0 + 0x30]\n 25090: a3 = u64 [a0 + 0x28]\n 25093: a0 = a5 >u 0\n 25095: a1 = a4 >u 0\n 25097: a1 = a0 if a5 != 0\n 25100: a0 = a4 | a5\n 25103: a2 = a3 >u 0\n 25105: a2 = a1 if a0 != 0\n 25108: jump @1012 if a2 != 0\n      : @1000 (gas: 20)\n 25112: a0 = u64 [s1 + 0x220]\n 25116: u64 [s1 + 0x30] = a0\n 25119: a0 = a0 + 0x1\n 25122: a1 = a0 <u 0x1\n 25125: a1 = a1 + a3\n 25128: a2 = a0 | a1\n 25131: a2 = a2 <u 0x1\n 25134: a2 = a2 + a4\n 25137: u64 [s1 + 0x28] = a3\n 25140: a3 = a2 <u a4\n 25143: a3 = a3 + a5\n 25146: u64 [s1 + 0x260] = a0\n 25150: u64 [s1 + 0x268] = a1\n 25154: u64 [s1 + 0x270] = a2\n 25158: u64 [s1 + 0x278] = a3\n 25162: a0 = s1 + 0x240\n 25166: a1 = s1 + 0x260\n 25170: u64 [s1 + 0x20] = a4\n 25173: u64 [s1 + 0x18] = a5\n 25176: ra = 1002, jump @10\n      : @1001 [@dyn 501] (gas: 24)\n 25182: a0 = sp + 0xffffffffffffffe0\n 25185: a0 = a0 & 0xffffffffffffffe0\n 25188: u64 [s1 + 0x78] = a0\n 25191: sp = a0\n 25193: a0 = u64 [s1 + 0x18]\n 25196: u64 [s1 + 0x1b8] = a0\n 25200: a0 = u64 [s1 + 0x20]\n 25203: u64 [s1 + 0x1b0] = a0\n 25207: a0 = u64 [s1 + 0x28]\n 25210: u64 [s1 + 0x1a8] = a0\n 25214: a0 = u64 [s1 + 0x30]\n 25217: u64 [s1 + 0x1a0] = a0\n 25221: a0 = u64 [s1 + 0x38]\n 25224: u64 [s1 + 0x1d8] = a0\n 25228: a0 = u64 [s1 + 0x40]\n 25231: u64 [s1 + 0x1d0] = a0\n 25235: a0 = u64 [s1 + 0x48]\n 25238: u64 [s1 + 0x1c8] = a0\n 25242: a0 = s1 + 0x1e0\n 25246: a1 = s1 + 0x1c0\n 25250: a2 = s1 + 0x1a0\n 25254: a3 = u64 [s1 + 0x50]\n 25257: u64 [s1 + 0x1c0] = a3\n 25261: ra = 1004, jump @981\n      : @1002 [@dyn 502] (gas: 18)\n 25267: t0 = u64 [s1 + 0x210]\n 25271: t1 = u64 [s1 + 0x200]\n 25275: t2 = u64 [s1 + 0x218]\n 25279: a0 = u64 [s1 + 0x208]\n 25283: a2 = s1 + 0x100\n 25287: a5 = u64 [a2 + 0xf0]\n 25291: a3 = u64 [a2 + 0xf8]\n 25295: a4 = u64 [a2 + 0xe0]\n 25299: a1 = u64 [a2 + 0xe8]\n 25303: a2 = u64 [s1 + 0x78]\n 25306: u64 [a2 + 0x10] = a5\n 25309: u64 [a2 + 0x18] = a3\n 25312: u64 [a2] = a4\n 25314: t2 = a0 | t2\n 25317: a0 = t1 | t0\n 25320: a0 = a0 | t2\n 25323: u64 [a2 + 0x8] = a1\n 25326: jump @1018 if a0 != 0\n      : @1003 (gas: 16)\n 25330: u64 [s1 + 0x38] = a3\n 25333: u64 [s1 + 0x40] = a1\n 25336: u64 [s1 + 0x48] = a5\n 25339: u64 [s1 + 0x50] = a4\n 25342: a1 = u64 [s1 + 0x70]\n 25345: a3 = u64 [s1 + 0x58]\n 25348: a0 = a1 | a3\n 25351: a2 = u64 [s1 + 0x68]\n 25354: a4 = u64 [s1 + 0x60]\n 25357: a2 = a2 | a4\n 25360: a0 = a0 | a2\n 25363: a0 = a0 >> 0x20\n 25366: a2 = a2 | a3\n 25369: a2 = a2 << 0x20\n 25372: a0 = a0 | a2\n 25375: jump @1011 if a0 != 0\n      : @1004 (gas: 2)\n 25379: a0 = s1 + 0x140\n 25383: ra = 1006, jump @2\n      : @1005 [@dyn 503] (gas: 5)\n 25389: a0 = u32 [s1 + 0x140]\n 25393: u64 [s1 + 0x30] = a0\n 25396: a0 = s1 + 0x120\n 25400: a1 = u64 [s1 + 0x78]\n 25403: ra = 1008, jump @6\n      : @1006 [@dyn 504] (gas: 16)\n 25409: a0 = u32 [s1 + 0x124]\n 25413: a0 = a0 << 0x20\n 25416: a4 = s1 + 0x100\n 25420: a1 = u64 [a4 + 0x38]\n 25423: a2 = u64 [a4 + 0x30]\n 25426: a3 = u64 [a4 + 0x28]\n 25429: a4 = u64 [s1 + 0x30]\n 25432: a0 = a0 | a4\n 25435: a4 = s1 + 0x200\n 25439: u64 [a4 + 0x98] = a1\n 25443: u64 [a4 + 0x90] = a2\n 25447: u64 [a4 + 0x88] = a3\n 25451: u64 [a4 + 0x80] = a0\n 25455: a1 = s1 + 0x280\n 25459: a0 = u64 [s1 + 0x78]\n 25462: ra = 1010, jump @10\n      : @1007 [@dyn 505] (gas: 10)\n 25468: a2 = u64 [s1 + 0x70]\n 25471: a0 = u64 [s1 + 0x58]\n 25474: a1 = u64 [s1 + 0x60]\n 25477: a0 = a0 | a1\n 25480: a1 = 0xffffffe0\n 25490: a1 = a2 <u a1\n 25493: a3 = u64 [s1 + 0x68]\n 25496: a1 = 0 if a3 != 0\n 25498: a1 = 0 if a0 != 0\n 25500: jump @1011 if a1 == 0\n      : @1008 (gas: 3)\n 25503: i32 a1 = a2 + 0x20\n 25506: a0 = s1 + 0x100\n 25510: ra = 1012, jump @2\n      : @1009 [@dyn 506] (gas: 19)\n 25516: a0 = u64 [s1 + 0x100]\n 25520: a1 = u64 [s1 + 0x108]\n 25524: u64 [s1 + 216] = 0\n 25528: u64 [s1 + 208] = 0\n 25532: u64 [s1 + 0xc8] = a1\n 25536: u64 [s1 + 0xc0] = a0\n 25540: a0 = u64 [s1 + 0x38]\n 25543: u64 [s1 + 0xf8] = a0\n 25547: a0 = u64 [s1 + 0x48]\n 25550: u64 [s1 + 0xf0] = a0\n 25554: a0 = u64 [s1 + 0x40]\n 25557: u64 [s1 + 0xe8] = a0\n 25561: a0 = s1 + 0xe0\n 25565: a1 = s1 + 0xc0\n 25569: a2 = u64 [s1 + 0x50]\n 25572: u64 [s1 + 0xe0] = a2\n 25576: ra = 0x3f6\n 25580: t0 = 0x3e0\n 25584: jump @1097\n      : @1010 [@dyn 507] (gas: 7)\n 25587: sp = s0 + 0xfffffffffffffd40\n 25591: a0 = sp + 0x200\n 25595: ra = u64 [a0 + 0xb8]\n 25599: s0 = u64 [a0 + 0xb0]\n 25603: s1 = u64 [a0 + 0xa8]\n 25607: sp = sp + 0x2c0\n 25611: ret\n      : @1011 (gas: 1)\n 25613: trap\n      : @1012 (gas: 1)\n 25614: t0 = 1016, jump @1067\n      : @1013 [@dyn 508] (gas: 1)\n 25620: ra = 1018, jump @4\n      : @1014 [@dyn 509] (gas: 7)\n 25626: u64 [s1 + 152] = 0\n 25630: u64 [s1 + 144] = 0\n 25634: u64 [s1 + 128] = 0x41\n 25639: a0 = 0x4\n 25642: a1 = s1 + 0x80\n 25646: u64 [s1 + 136] = 0\n 25650: ra = 1020, jump @4\n      : @1015 [@dyn 510] (gas: 2)\n 25656: a1 = i32 [0x20014]\n 25661: jump @1017 if a1 >u 63\n      : @1016 (gas: 3)\n 25665: u32 [0x20014] = 0x40\n 25671: a1 = 0x20020\n 25676: jump @1023\n      : @1017 (gas: 2)\n 25678: a1 = 0x20020\n 25683: jump @1023\n      : @1018 (gas: 8)\n 25685: u64 [s1 + 400] = 0\n 25689: u64 [s1 + 392] = 0\n 25693: u64 [s1 + 384] = 0\n 25697: a0 = 0x4e487b7100000000\n 25707: a1 = s1 + 0x180\n 25711: u64 [s1 + 0x198] = a0\n 25715: a0 = 0\n 25717: ra = 1022, jump @4\n      : @1019 [@dyn 511] (gas: 7)\n 25723: u64 [s1 + 376] = 0\n 25727: u64 [s1 + 368] = 0\n 25731: u64 [s1 + 360] = 0\n 25735: a0 = 0x4\n 25738: a1 = s1 + 0x160\n 25742: u64 [s1 + 352] = 0\n 25746: ra = 1024, jump @4\n      : @1020 [@dyn 512] (gas: 2)\n 25752: a1 = i32 [0x20014]\n 25757: jump @1022 if a1 >u 63\n      : @1021 (gas: 3)\n 25761: u32 [0x20014] = 0x40\n 25767: a1 = 0x20020\n 25772: jump @1023\n      : @1022 (gas: 2)\n 25774: a1 = 0x20020\n 25779: fallthrough\n      : @1023 (gas: 6)\n 25780: i32 a1 = a1 + 0\n 25782: a0 = 0x1\n 25785: a2 = 0x24\n 25788: ra = 0x402\n 25792: ecalli 6 // 'seal_return'\n 25794: fallthrough\n      : @1024 [@dyn 513] (gas: 14)\n 25795: a3 = u64 [a1]\n 25797: a1 = u64 [a1 + 0x8]\n 25800: a4 = u64 [a2 + 0x8]\n 25803: a2 = u64 [a2]\n 25805: a5 = a4 + a1\n 25808: a1 = a2 + a3\n 25811: a2 = a1 <u a2\n 25814: a5 = a5 + a2\n 25817: t0 = a5 ^ a4\n 25820: a3 = a5 <u a4\n 25823: a3 = a2 if t0 == 0\n 25826: a2 = a3 >u 0\n 25828: a2 = 0 if a3 == 0\n 25830: jump @1026 if a2 != 0\n      : @1025 (gas: 5)\n 25833: u64 [a0 + 24] = 0\n 25836: u64 [a0] = a1\n 25838: u64 [a0 + 0x8] = a5\n 25841: u64 [a0 + 0x10] = a3\n 25844: ret\n      : @1026 (gas: 6)\n 25846: sp = sp + 0xffffffffffffffb0\n 25849: u64 [sp + 0x48] = ra\n 25852: u64 [sp + 0x40] = s0\n 25855: s0 = sp + 0x50\n 25858: sp = sp & 0xfffffffffffffff0\n 25861: t0 = 1028, jump @1061\n      : @1027 [@dyn 514] (gas: 1)\n 25867: ra = 1030, jump @4\n      : @1028 [@dyn 515] (gas: 1)\n 25873: t0 = 1032, jump @1095\n      : @1029 [@dyn 516] (gas: 1)\n 25879: ra = 1034, jump @4\n      : @1030 [@dyn 517] (gas: 2)\n 25885: a1 = i32 [0x20014]\n 25890: jump @1032 if a1 >u 63\n      : @1031 (gas: 2)\n 25894: u32 [0x20014] = 0x40\n 25900: fallthrough\n      : @1032 (gas: 8)\n 25901: a1 = 0x20020\n 25906: i32 a1 = a1 + 0\n 25908: a0 = 0x1\n 25911: a2 = 0x24\n 25914: ra = 0x40c\n 25918: ecalli 6 // 'seal_return'\n 25920: t0 = 0x40e\n 25924: jump @1097\n      : @1033 [@dyn 518] (gas: 1)\n 25927: t0 = 1038, jump @1097\n      : @1034 [@dyn 519] (gas: 4)\n 25933: a2 = u64 [a1]\n 25935: u64 [sp + 0x18] = a2\n 25938: s1 = u64 [a1 + 0x8]\n 25941: t0 = 1040, jump @1090\n      : @1035 [@dyn 520] (gas: 1)\n 25947: ra = 1042, jump @6\n      : @1036 [@dyn 521] (gas: 10)\n 25953: a0 = u64 [sp + 0x28]\n 25956: a1 = u64 [sp + 0x20]\n 25959: u64 [sp + 0x78] = s1\n 25962: a2 = u64 [sp + 0x18]\n 25965: u64 [sp + 0x70] = a2\n 25968: u64 [sp + 0x68] = a0\n 25971: u64 [sp + 0x60] = a1\n 25974: a0 = sp + 0x40\n 25977: a1 = sp + 0x60\n 25980: ra = 1044, jump @10\n      : @1037 [@dyn 522] (gas: 6)\n 25986: sp = s0 + 0xffffffffffffff60\n 25990: ra = u64 [sp + 0x98]\n 25994: s0 = u64 [sp + 0x90]\n 25998: s1 = u64 [sp + 0x88]\n 26002: sp = sp + 0xa0\n 26006: ret\n      : @1038 (gas: 23)\n 26008: sp = sp + 0xffffffffffffffa0\n 26011: u64 [sp + 0x58] = ra\n 26014: u64 [sp + 0x50] = s0\n 26017: u64 [sp + 0x48] = s1\n 26020: s0 = sp + 0x60\n 26023: sp = sp & 0xfffffffffffffff0\n 26026: a3 = u64 [a2 + 0x8]\n 26029: a4 = u64 [a1 + 0x8]\n 26032: t0 = u64 [a2]\n 26034: t1 = u64 [a1]\n 26036: a1 = a4 ^ a3\n 26039: a2 = a4 <u a3\n 26042: t2 = t1 <u t0\n 26045: a2 = t2 if a1 == 0\n 26048: a5 = a2 <u 0x1\n 26051: a5 = a5 + 0xffffffffffffffff\n 26054: a1 = -a2\n 26056: a2 = a1 >u 0\n 26058: s1 = a5 >u 0\n 26060: s1 = a2 if a5 == 0\n 26063: a2 = a1 | a5\n 26066: s1 = 0 if a2 == 0\n 26068: jump @1041 if s1 != 0\n      : @1039 (gas: 8)\n 26071: a4 = a4 - a3\n 26074: a2 = a4 - t2\n 26077: a3 = t1 - t0\n 26080: u64 [a0] = a3\n 26082: u64 [a0 + 0x8] = a2\n 26085: u64 [a0 + 0x10] = a1\n 26088: u64 [a0 + 0x18] = a5\n 26091: t0 = 1046, jump @1083\n      : @1040 [@dyn 523] (gas: 1)\n 26097: ret\n      : @1041 (gas: 1)\n 26099: t0 = 1048, jump @1061\n      : @1042 [@dyn 524] (gas: 1)\n 26105: ra = 1050, jump @4\n      : @1043 [@dyn 525] (gas: 1)\n 26111: t0 = 1052, jump @1095\n      : @1044 [@dyn 526] (gas: 1)\n 26117: ra = 1054, jump @4\n      : @1045 [@dyn 527] (gas: 2)\n 26123: a1 = i32 [0x20014]\n 26128: jump @1047 if a1 >u 63\n      : @1046 (gas: 2)\n 26132: u32 [0x20014] = 0x40\n 26138: fallthrough\n      : @1047 (gas: 8)\n 26139: a1 = 0x20020\n 26144: i32 a1 = a1 + 0\n 26146: a0 = 0x1\n 26149: a2 = 0x24\n 26152: ecalli 6 // 'seal_return'\n 26154: a0 = 0\n 26156: ra = 0x420\n 26160: jump @17\n      : @1048 [export #0: 'call'] (gas: 2)\n 26163: a0 = 0\n 26165: ra = 1056, jump @17\n      : @1049 [@dyn 528] [export #1: 'deploy'] (gas: 2)\n 26171: a0 = 0x1\n 26174: ra = 1058, jump @17\n      : @1050 [@dyn 529] (gas: 15)\n 26180: a0 = u64 [a2 + 0x8]\n 26183: a1 = i32 [a2 + 0x10]\n 26186: a2 = u64 [a2]\n 26188: a0 = reverse a0\n 26190: a3 = a0 << 0x20\n 26193: a1 = reverse a1\n 26195: a1 = a1 >> 0x20\n 26198: a3 = a3 | a1\n 26201: a0 = a0 >> 0x20\n 26204: a1 = reverse a2\n 26206: a2 = a1 << 0x20\n 26209: a0 = a0 | a2\n 26212: a1 = a1 >> 0x20\n 26215: a2 = s1 + 0x1898\n 26219: jump [t0]\n      : @1051 (gas: 16)\n 26221: a0 = u64 [a2 + 0x8]\n 26224: a1 = i32 [a2 + 0x10]\n 26227: a2 = u64 [a2]\n 26229: a0 = reverse a0\n 26231: a3 = a0 << 0x20\n 26234: a1 = reverse a1\n 26236: a1 = a1 >> 0x20\n 26239: a3 = a3 | a1\n 26242: a0 = a0 >> 0x20\n 26245: a1 = reverse a2\n 26247: a2 = a1 << 0x20\n 26250: a0 = a0 | a2\n 26253: a1 = a1 >> 0x20\n 26256: a2 = s1 + 0x7ff\n 26260: a2 = a2 + 0x99\n 26264: jump [t0]\n      : @1052 (gas: 15)\n 26266: a0 = u64 [a2 + 0x8]\n 26269: a1 = i32 [a2 + 0x10]\n 26272: a2 = u64 [a2]\n 26274: a0 = reverse a0\n 26276: a3 = a0 << 0x20\n 26279: a1 = reverse a1\n 26281: a1 = a1 >> 0x20\n 26284: a3 = a3 | a1\n 26287: a0 = a0 >> 0x20\n 26290: a1 = reverse a2\n 26292: a2 = a1 << 0x20\n 26295: a0 = a0 | a2\n 26298: a1 = a1 >> 0x20\n 26301: a2 = s1 + 0x1098\n 26305: jump [t0]\n      : @1053 (gas: 14)\n 26307: a0 = u64 [a2 + 0x8]\n 26310: a1 = i32 [a2 + 0x10]\n 26313: a2 = u64 [a2]\n 26315: a0 = reverse a0\n 26317: a3 = a0 << 0x20\n 26320: a1 = reverse a1\n 26322: a1 = a1 >> 0x20\n 26325: a3 = a3 | a1\n 26328: a0 = a0 >> 0x20\n 26331: a1 = reverse a2\n 26333: a2 = a1 << 0x20\n 26336: a0 = a0 | a2\n 26339: a1 = a1 >> 0x20\n 26342: jump [t0]\n      : @1054 (gas: 17)\n 26344: a0 = u64 [a3]\n 26346: a1 = u64 [a3 + 0x8]\n 26349: a2 = u64 [a3 + 0x10]\n 26352: a3 = u64 [a3 + 0x18]\n 26355: a0 = reverse a0\n 26357: a1 = reverse a1\n 26359: a2 = reverse a2\n 26361: a3 = reverse a3\n 26363: a4 = a3 + 0x3\n 26366: a3 = a4 <u a3\n 26369: a5 = a2 + a3\n 26372: a2 = a5 <u a2\n 26375: a2 = a3 if a3 == 0\n 26378: a2 = a2 + a1\n 26381: a1 = a2 <u a1\n 26384: a0 = a0 + a1\n 26387: jump [t0]\n      : @1055 (gas: 17)\n 26389: a0 = u64 [a3]\n 26391: a1 = u64 [a3 + 0x8]\n 26394: a2 = u64 [a3 + 0x10]\n 26397: a3 = u64 [a3 + 0x18]\n 26400: a0 = reverse a0\n 26402: a1 = reverse a1\n 26404: a2 = reverse a2\n 26406: a3 = reverse a3\n 26408: a4 = a3 + 0x2\n 26411: a3 = a4 <u a3\n 26414: a5 = a2 + a3\n 26417: a2 = a5 <u a2\n 26420: a2 = a3 if a3 == 0\n 26423: a2 = a2 + a1\n 26426: a1 = a2 <u a1\n 26429: a0 = a0 + a1\n 26432: jump [t0]\n      : @1056 (gas: 11)\n 26434: a3 = u64 [s1 + 0x118]\n 26438: a0 = u64 [a3 + 0x18]\n 26441: a1 = u64 [a3 + 0x10]\n 26444: a2 = u64 [a3 + 0x8]\n 26447: a3 = u64 [a3]\n 26449: a0 = reverse a0\n 26451: a1 = reverse a1\n 26453: a2 = reverse a2\n 26455: a3 = reverse a3\n 26457: a4 = s1 + 0x209c\n 26461: jump [t0]\n      : @1057 (gas: 8)\n 26463: a4 = a4 | a2\n 26466: a2 = a0 | a1\n 26469: a2 = a2 | a4\n 26472: a2 = a2 >> 0x20\n 26475: a1 = a1 | a4\n 26478: a1 = a1 << 0x20\n 26481: a1 = a1 | a2\n 26484: jump [t0]\n      : @1058 (gas: 7)\n 26486: a0 = sp + 0xffffffffffffffe0\n 26489: a0 = a0 & 0xffffffffffffffe0\n 26492: u64 [s1 + 0x118] = a0\n 26496: sp = a0\n 26498: i32 a2 = a0 + 0\n 26500: a1 = 0x40\n 26503: jump [t0]\n      : @1059 (gas: 22)\n 26505: a0 = u64 [a3]\n 26507: a1 = u64 [a3 + 0x8]\n 26510: a2 = u64 [a3 + 0x10]\n 26513: a3 = u64 [a3 + 0x18]\n 26516: a0 = reverse a0\n 26518: a1 = reverse a1\n 26520: a2 = reverse a2\n 26522: a3 = reverse a3\n 26524: a3 = a3 + 0x1\n 26527: a4 = a3 <u 0x1\n 26530: a2 = a2 + a4\n 26533: a4 = a3 | a2\n 26536: a4 = a4 <u 0x1\n 26539: a4 = a4 + a1\n 26542: a1 = a4 <u a1\n 26545: a0 = a0 + a1\n 26548: a1 = u64 [s1 + 0x118]\n 26552: u64 [a1] = a3\n 26554: u64 [a1 + 0x8] = a2\n 26557: u64 [a1 + 0x10] = a4\n 26560: u64 [a1 + 0x18] = a0\n 26563: jump [t0]\n      : @1060 (gas: 18)\n 26565: a0 = u64 [a3]\n 26567: a1 = u64 [a3 + 0x8]\n 26570: a2 = u64 [a3 + 0x10]\n 26573: a3 = u64 [a3 + 0x18]\n 26576: a0 = reverse a0\n 26578: a1 = reverse a1\n 26580: a2 = reverse a2\n 26582: a3 = reverse a3\n 26584: a3 = a3 + 0x1\n 26587: a4 = a3 <u 0x1\n 26590: a2 = a2 + a4\n 26593: a4 = a3 | a2\n 26596: a4 = a4 <u 0x1\n 26599: a4 = a4 + a1\n 26602: a1 = a4 <u a1\n 26605: a0 = a0 + a1\n 26608: a1 = s1 + 0x209c\n 26612: jump [t0]\n      : @1061 (gas: 8)\n 26614: u64 [sp + 48] = 0\n 26617: u64 [sp + 40] = 0\n 26620: u64 [sp + 32] = 0\n 26623: a0 = 0x4e487b7100000000\n 26633: a1 = sp + 0x20\n 26636: u64 [sp + 0x38] = a0\n 26639: a0 = 0\n 26641: jump [t0]\n      : @1062 (gas: 18)\n 26643: a3 = u64 [s1 + 0xd0]\n 26647: a0 = u64 [a3]\n 26649: a1 = u64 [a3 + 0x8]\n 26652: a2 = u64 [a3 + 0x10]\n 26655: a3 = u64 [a3 + 0x18]\n 26658: a0 = reverse a0\n 26660: a1 = reverse a1\n 26662: a2 = reverse a2\n 26664: a3 = reverse a3\n 26666: a3 = a3 + 0x1\n 26669: a4 = a3 <u 0x1\n 26672: a2 = a2 + a4\n 26675: a4 = a3 | a2\n 26678: a4 = a4 <u 0x1\n 26681: a4 = a4 + a1\n 26684: a1 = a4 <u a1\n 26687: a0 = a0 + a1\n 26690: jump [t0]\n      : @1063 (gas: 8)\n 26692: a0 = a0 | a2\n 26695: a2 = a4 | a1\n 26698: a2 = a2 | a0\n 26701: a2 = a2 >> 0x20\n 26704: a0 = a0 | a1\n 26707: a0 = a0 << 0x20\n 26710: a0 = a0 | a2\n 26713: jump [t0]\n      : @1064 (gas: 5)\n 26715: a0 = sp + 0xffffffffffffffe0\n 26718: a0 = a0 & 0xffffffffffffffe0\n 26721: u64 [s1 + 0x118] = a0\n 26725: sp = a0\n 26727: jump [t0]\n      : @1065 (gas: 15)\n 26729: a0 = u64 [a3 + 0x18]\n 26732: a1 = u64 [a3 + 0x10]\n 26735: a2 = u64 [a3 + 0x8]\n 26738: a3 = u64 [a3]\n 26740: a0 = reverse a0\n 26742: a4 = reverse a1\n 26744: a2 = reverse a2\n 26746: a3 = reverse a3\n 26748: a1 = u64 [s1 + 0x118]\n 26752: u64 [a1 + 0x18] = a3\n 26755: u64 [a1 + 0x10] = a2\n 26758: u64 [a1 + 0x8] = a4\n 26761: u64 [a1] = a0\n 26763: a0 = 0x2000\n 26767: jump [t0]\n      : @1066 (gas: 14)\n 26769: a0 = u64 [a3 + 0x18]\n 26772: a1 = u64 [a3 + 0x10]\n 26775: a2 = u64 [a3 + 0x8]\n 26778: a3 = u64 [a3]\n 26780: a0 = reverse a0\n 26782: a4 = reverse a1\n 26784: a2 = reverse a2\n 26786: a3 = reverse a3\n 26788: a1 = u64 [s1 + 0x118]\n 26792: u64 [a1 + 0x18] = a3\n 26795: u64 [a1 + 0x10] = a2\n 26798: u64 [a1 + 0x8] = a4\n 26801: u64 [a1] = a0\n 26803: jump [t0]\n      : @1067 (gas: 8)\n 26805: u64 [s1 + 176] = 0\n 26809: u64 [s1 + 168] = 0\n 26813: u64 [s1 + 160] = 0\n 26817: a0 = 0x4e487b7100000000\n 26827: a1 = s1 + 0xa0\n 26831: u64 [s1 + 0xb8] = a0\n 26835: a0 = 0\n 26837: jump [t0]\n      : @1068 (gas: 8)\n 26839: a0 = u64 [a4 + 0x90]\n 26843: a1 = u64 [a4 + 0x98]\n 26847: a2 = u64 [a4 + 0x88]\n 26851: a3 = u64 [a4 + 0x80]\n 26855: a1 = a1 | a2\n 26858: a0 = a0 | a3\n 26861: a0 = a0 | a1\n 26864: jump [t0]\n      : @1069 (gas: 8)\n 26866: a0 = a1 ^ 0x1\n 26869: a0 = a0 | a3\n 26872: u64 [s1 + 0x108] = a1\n 26876: a1 = a1 <u 0x1\n 26879: u64 [s1 + 0x110] = a3\n 26883: a1 = 0 if a3 != 0\n 26885: a1 = 0 if a0 == 0\n 26887: jump [t0]\n      : @1070 (gas: 8)\n 26889: a0 = u64 [a4 + 0x70]\n 26892: a1 = u64 [a4 + 0x78]\n 26895: a2 = u64 [a4 + 0x68]\n 26898: a3 = u64 [a4 + 0x60]\n 26901: a1 = a1 | a2\n 26904: a0 = a0 | a3\n 26907: a0 = a0 | a1\n 26910: jump [t0]\n      : @1071 (gas: 4)\n 26912: a0 = 0x209c\n 26916: a3 = s1 + a0\n 26919: a4 = a3 + 0x304\n 26923: jump [t0]\n      : @1072 (gas: 4)\n 26925: a0 = 0x209c\n 26929: a3 = s1 + a0\n 26932: a4 = a3 + 0x604\n 26936: jump [t0]\n      : @1073 (gas: 4)\n 26938: a0 = 0x209c\n 26942: a3 = s1 + a0\n 26945: a4 = a3 + 0x404\n 26949: jump [t0]\n      : @1074 (gas: 8)\n 26951: a0 = u64 [a4 + 0xb0]\n 26955: a1 = u64 [a4 + 0xb8]\n 26959: a2 = u64 [a4 + 0xa8]\n 26963: a3 = u64 [a4 + 0xa0]\n 26967: a1 = a1 | a2\n 26970: a0 = a0 | a3\n 26973: a0 = a0 | a1\n 26976: jump [t0]\n      : @1075 (gas: 8)\n 26978: a0 = sp + 0xffffffffffffffe0\n 26981: a0 = a0 & 0xffffffffffffffe0\n 26984: u64 [s1 + 0x118] = a0\n 26988: sp = a0\n 26990: i32 a2 = a0 + 0\n 26992: a1 = 0x20\n 26995: a0 = u64 [s1 + 0x100]\n 26999: jump [t0]\n      : @1076 (gas: 8)\n 27001: a3 = a3 | a2\n 27004: a2 = a0 | a1\n 27007: a2 = a2 | a3\n 27010: a2 = a2 >> 0x20\n 27013: a1 = a1 | a3\n 27016: a1 = a1 << 0x20\n 27019: a1 = a1 | a2\n 27022: jump [t0]\n      : @1077 (gas: 5)\n 27024: a0 = reverse a0\n 27026: a1 = reverse a1\n 27028: a2 = reverse a2\n 27030: a3 = reverse a3\n 27032: jump [t0]\n      : @1078 (gas: 9)\n 27034: a3 = u64 [s1 + 0x118]\n 27038: a0 = u64 [a3 + 0x18]\n 27041: a1 = u64 [a3 + 0x10]\n 27044: a2 = u64 [a3 + 0x8]\n 27047: a3 = u64 [a3]\n 27049: a0 = reverse a0\n 27051: u64 [s1 + 0x118] = a0\n 27055: a4 = reverse a1\n 27057: jump [t0]\n      : @1079 (gas: 8)\n 27059: a0 = sp + 0xffffffffffffffe0\n 27062: a0 = a0 & 0xffffffffffffffe0\n 27065: u64 [s1 + 0x110] = a0\n 27069: sp = a0\n 27071: i32 a2 = a0 + 0\n 27073: a1 = 0x40\n 27076: a0 = u64 [s1 + 0xc0]\n 27080: jump [t0]\n      : @1080 (gas: 8)\n 27082: a0 = sp + 0xffffffffffffffe0\n 27085: a0 = a0 & 0xffffffffffffffe0\n 27088: u64 [s1 + 0x118] = a0\n 27092: sp = a0\n 27094: i32 a2 = a0 + 0\n 27096: a1 = 0x40\n 27099: a0 = u64 [s1 + 0xe8]\n 27103: jump [t0]\n      : @1081 (gas: 7)\n 27105: a1 = 0xffffffe0\n 27115: a2 = u64 [a3 + 0x18]\n 27118: a1 = a2 <u a1\n 27121: a2 = u64 [a3 + 0x10]\n 27124: a1 = 0 if a2 != 0\n 27126: a1 = 0 if a0 != 0\n 27128: jump [t0]\n      : @1082 (gas: 4)\n 27130: a3 = s1 + 0x7ff\n 27134: a3 = a3 + 0x99\n 27138: a5 = a3 + 0x300\n 27142: jump [t0]\n      : @1083 (gas: 6)\n 27144: sp = s0 + 0xffffffffffffffa0\n 27147: ra = u64 [sp + 0x58]\n 27150: s0 = u64 [sp + 0x50]\n 27153: s1 = u64 [sp + 0x48]\n 27156: sp = sp + 0x60\n 27159: jump [t0]\n      : @1084 (gas: 5)\n 27161: a1 = u64 [s1 + 0x118]\n 27165: a2 = u64 [s1 + 0x110]\n 27169: a1 = a1 | a2\n 27172: a1 = a1 >u 0\n 27174: jump [t0]\n      : @1085 (gas: 7)\n 27176: a0 = sp + 0xffffffffffffffe0\n 27179: a0 = a0 & 0xffffffffffffffe0\n 27182: u64 [s1 + 0x118] = a0\n 27186: sp = a0\n 27188: i32 a2 = a0 + 0\n 27190: a1 = 0x20\n 27193: jump [t0]\n      : @1086 (gas: 5)\n 27195: a0 = sp + 0xffffffffffffffe0\n 27198: a2 = a0 & 0xffffffffffffffe0\n 27201: u64 [s1 + 0x110] = a2\n 27205: sp = a2\n 27207: jump [t0]\n      : @1087 (gas: 5)\n 27209: a0 = sp + 0xffffffffffffffe0\n 27212: a2 = a0 & 0xffffffffffffffe0\n 27215: u64 [s1 + 0x118] = a2\n 27219: sp = a2\n 27221: jump [t0]\n      : @1088 (gas: 6)\n 27223: u64 [a1 + 1664] = 0\n 27227: u64 [a1 + 1656] = 0\n 27231: u64 [a1 + 1640] = 0x1\n 27236: a2 = a1\n 27238: a0 = 0x20\n 27241: jump [t0]\n      : @1089 (gas: 8)\n 27243: a0 = u64 [a4 + 0xf0]\n 27247: a1 = u64 [a4 + 0xf8]\n 27251: a2 = u64 [a4 + 0xe8]\n 27255: a3 = u64 [a4 + 0xe0]\n 27259: a1 = a1 | a2\n 27262: a0 = a0 | a3\n 27265: a0 = a0 | a1\n 27268: jump [t0]\n      : @1090 (gas: 11)\n 27270: a1 = u64 [a0 + 0x18]\n 27273: a2 = u64 [a0 + 0x10]\n 27276: a3 = u64 [a0 + 0x8]\n 27279: a0 = u64 [a0]\n 27281: u64 [sp + 0x58] = a1\n 27284: u64 [sp + 0x50] = a2\n 27287: u64 [sp + 0x48] = a3\n 27290: u64 [sp + 0x40] = a0\n 27293: a0 = sp + 0x20\n 27296: a1 = sp + 0x40\n 27299: jump [t0]\n      : @1091 (gas: 7)\n 27301: a1 = a1 | a2\n 27304: a1 = a1 | a0\n 27307: a1 = a1 >> 0x20\n 27310: a0 = a0 | a2\n 27313: a0 = a0 << 0x20\n 27316: a0 = a0 | a1\n 27319: jump [t0]\n      : @1092 (gas: 4)\n 27321: a0 = 0x209c\n 27325: a3 = s1 + a0\n 27328: a4 = a3 + 0x504\n 27332: jump [t0]\n      : @1093 (gas: 4)\n 27334: a0 = 0x209c\n 27338: a3 = s1 + a0\n 27341: a4 = a3 + 0x204\n 27345: jump [t0]\n      : @1094 (gas: 4)\n 27347: a0 = 0x209c\n 27351: a3 = s1 + a0\n 27354: a4 = a3 + 0x4\n 27357: jump [t0]\n      : @1095 (gas: 7)\n 27359: u64 [sp + 24] = 0\n 27362: u64 [sp + 16] = 0\n 27365: u64 [sp + 0] = 0x11\n 27368: a0 = 0x4\n 27371: a1 = sp\n 27373: u64 [sp + 8] = 0\n 27376: jump [t0]\n      : @1096 (gas: 8)\n 27378: a0 = u64 [a4 + 0x10]\n 27381: a1 = u64 [a4 + 0x18]\n 27384: a2 = u64 [a4 + 0x8]\n 27387: a3 = u64 [a4]\n 27389: a1 = a1 | a2\n 27392: a0 = a0 | a3\n 27395: a0 = a0 | a1\n 27398: jump [t0]\n      : @1097 (gas: 7)\n 27400: sp = sp + 0xffffffffffffff60\n 27404: u64 [sp + 0x98] = ra\n 27408: u64 [sp + 0x90] = s0\n 27412: u64 [sp + 0x88] = s1\n 27416: s0 = sp + 0xa0\n 27420: sp = sp & 0xffffffffffffffe0\n 27423: jump [t0]\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "advanceEra()": "23e75f24",
              "bond()": "64c9ec6f",
              "chill()": "2b8a3ae6",
              "commission()": "e1489191",
              "era()": "143e55e0",
              "full_unbond()": "22b223ed",
              "max_nominations()": "727f17f2",
              "minimum_active_nominator_bond()": "17c19d5f",
              "minimum_bond()": "3eb9776c",
              "minimum_nominator_bond()": "385496f7",
              "minimum_validator_bond()": "b35ae446",
              "nominate(address[])": "19f2fdad",
              "nominations()": "d1d4d3e4",
              "payee()": "ae90b213",
              "payout()": "63bd1d4a",
              "pending()": "e20ccec3",
              "rebond_unbonded(uint128)": "efb073f0",
              "role()": "10055c1d",
              "set_payee(address)": "ec9b28f1",
              "stake_able()": "498aa0f1",
              "stake_of()": "64e7b428",
              "unbond(uint128)": "e8111842",
              "unbonding_queue()": "262c5f0f",
              "validate(uint32)": "ac0d45e2",
              "withdraw_unbonded()": "77a0fe02"
            }
          },
          "irOptimized": "/// @use-src 5:\"contracts/IStaking.sol\", 6:\"contracts/MockStaking.sol\"\nobject \"MockStaking_1213\" {\n    code {\n        {\n            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 6:163:166  \"100\" */ 0x00, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ or(and(sload(/** @src 6:163:166  \"100\" */ 0x00), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ not(0xffffffff)), /** @src 6:163:166  \"100\" */ 0x64))\n            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n            let _2 := datasize(\"MockStaking_1213_deployed\")\n            codecopy(_1, dataoffset(\"MockStaking_1213_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 6:\"contracts/MockStaking.sol\"\n    object \"MockStaking_1213_deployed\" {\n        code {\n            {\n                /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x10055c1d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:3829:3839  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3823:3828  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let value := and(sload(/** @src 6:3823:3845  \"users[msg.sender].role\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3823:3828  \"users\" */ 0x01)), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xff)\n                        if iszero(lt(value, 3))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x21)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, value)\n                        return(_1, 0x20)\n                    }\n                    case 0x143e55e0 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned := and(sload(0), 0xffffffff)\n                        let memPos := mload(64)\n                        mstore(memPos, cleaned)\n                        return(memPos, 32)\n                    }\n                    case 0x17c19d5f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, /** @src 6:4436:4444  \"25 ether\" */ 0x015af1d78b58c40000)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_1, 32)\n                    }\n                    case 0x19f2fdad {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                        let length := calldataload(add(4, offset))\n                        let _2 := gt(length, 0xffffffffffffffff)\n                        if _2 { revert(0, 0) }\n                        if gt(add(add(offset, shl(5, length)), 36), calldatasize()) { revert(0, 0) }\n                        mstore(0, /** @src 6:3018:3028  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3012:3017  \"users\" */ 0x01)\n                        /// @src 6:3012:3034  \"users[msg.sender].role\"\n                        let _3 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3012:3017  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let cleaned_1 := 0\n                        cleaned_1 := 0\n                        sstore(_3, or(and(sload(_3), not(255)), /** @src 6:3037:3052  \"Roles.NOMINATOR\" */ 2))\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0, /** @src 6:3018:3028  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3012:3017  \"users\" */ 0x01)\n                        /// @src 6:3062:3091  \"users[msg.sender].nominations\"\n                        let _4 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3037:3052  \"Roles.NOMINATOR\" */ 2)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        _2 := 0\n                        if gt(length, 18446744073709551616)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        let oldLen := sload(_4)\n                        sstore(_4, length)\n                        if lt(length, oldLen)\n                        {\n                            mstore(0, _4)\n                            let data := keccak256(0, 32)\n                            let _5 := add(data, oldLen)\n                            let start := add(data, length)\n                            for { }\n                            lt(start, _5)\n                            {\n                                start := add(start, /** @src 6:3012:3017  \"users\" */ 0x01)\n                            }\n                            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                            { sstore(start, 0) }\n                        }\n                        let srcPtr := add(offset, 36)\n                        mstore(0, _4)\n                        let data_1 := keccak256(0, 32)\n                        let i := 0\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 6:3012:3017  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        {\n                            let value_1 := calldataload(srcPtr)\n                            if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            srcPtr := add(srcPtr, 32)\n                            sstore(add(data_1, i), value_1)\n                        }\n                        mstore(0, /** @src 6:3018:3028  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3012:3017  \"users\" */ 0x01)\n                        /// @src 6:3111:3152  \"return users[msg.sender].stake.active > 0\"\n                        let var := /** @src 6:3118:3152  \"users[msg.sender].stake.active > 0\" */ iszero(iszero(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(keccak256(0, 64)), 0xffffffffffffffffffffffffffffffff)))\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, var)\n                        return(memPos_2, 32)\n                    }\n                    case 0x22b223ed {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:1076:1086  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:1070:1075  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot := keccak256(0, 64)\n                        let cleaned_2 := and(sload(/** @src 6:1112:1120  \"s.active\" */ dataSlot), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)\n                        sstore(dataSlot, and(sload(dataSlot), not(0xffffffffffffffffffffffffffffffff)))\n                        mstore(0, /** @src 6:1076:1086  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:1070:1075  \"users\" */ 0x01)\n                        /// @src 6:1152:1189  \"users[msg.sender].unbondingQueue.push\"\n                        let expr_self_slot := /** @src 6:1152:1184  \"users[msg.sender].unbondingQueue\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 4)\n                        /// @src 6:1207:1215  \"_era + 2\"\n                        let expr := checked_add_uint32(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(0), 0xffffffff))\n                        let memPtr := mload(64)\n                        finalize_allocation_9133(memPtr)\n                        mstore(memPtr, and(expr, 0xffffffff))\n                        mstore(/** @src 6:1190:1234  \"Unbonding({ era: _era + 2, amount: amount })\" */ add(memPtr, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0x20), cleaned_2)\n                        /// @src 6:1152:1235  \"users[msg.sender].unbondingQueue.push(Unbonding({ era: _era + 2, amount: amount }))\"\n                        array_push_from_struct_Unbonding_to_array_struct_Unbonding_storage_dyn_ptr(expr_self_slot, memPtr)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, cleaned_2)\n                        return(memPos_3, 0x20)\n                    }\n                    case 0x23e75f24 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _6 := sload(0)\n                        let cleaned_3 := and(_6, 0xffffffff)\n                        if eq(cleaned_3, 0xffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        sstore(0, or(and(_6, not(0xffffffff)), and(add(cleaned_3, 1), 0xffffffff)))\n                        return(0, 0)\n                    }\n                    case 0x262c5f0f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:2884:2894  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:2878:2883  \"users\" */ 0x01)\n                        /// @src 6:2878:2910  \"users[msg.sender].unbondingQueue\"\n                        let _7 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 4)\n                        let length_1 := sload(_7)\n                        if gt(length_1, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        let memPtr_1 := mload(64)\n                        finalize_allocation(memPtr_1, add(shl(5, length_1), 0x20))\n                        mstore(memPtr_1, length_1)\n                        let mpos := memPtr_1\n                        mpos := add(memPtr_1, 0x20)\n                        let mpos_1 := mpos\n                        mstore(0, _7)\n                        let spos := keccak256(0, 0x20)\n                        let i_1 := 0\n                        for { }\n                        lt(i_1, length_1)\n                        {\n                            i_1 := add(i_1, /** @src 6:2878:2883  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        {\n                            let memPtr_2 := mload(64)\n                            finalize_allocation_9133(memPtr_2)\n                            let _8 := sload(spos)\n                            mstore(memPtr_2, and(_8, 0xffffffff))\n                            mstore(add(memPtr_2, 0x20), and(shr(0x20, _8), 0xffffffffffffffffffffffffffffffff))\n                            mstore(mpos, memPtr_2)\n                            mpos := add(mpos, 0x20)\n                            spos := add(spos, /** @src 6:2878:2883  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let memPos_4 := mload(64)\n                        let tail := add(memPos_4, 0x20)\n                        mstore(memPos_4, 0x20)\n                        let pos := tail\n                        let length_2 := mload(memPtr_1)\n                        mstore(tail, length_2)\n                        pos := add(memPos_4, 64)\n                        let srcPtr_1 := mpos_1\n                        let i_2 := 0\n                        for { }\n                        lt(i_2, length_2)\n                        {\n                            i_2 := add(i_2, /** @src 6:2878:2883  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        {\n                            let _9 := mload(srcPtr_1)\n                            mstore(pos, and(mload(_9), 0xffffffff))\n                            mstore(add(pos, 0x20), and(mload(add(_9, 0x20)), 0xffffffffffffffffffffffffffffffff))\n                            pos := add(pos, 64)\n                            srcPtr_1 := add(srcPtr_1, 0x20)\n                        }\n                        return(memPos_4, sub(pos, memPos_4))\n                    }\n                    case 0x2b8a3ae6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:3468:3478  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3462:3467  \"users\" */ 0x01)\n                        /// @src 6:3462:3484  \"users[msg.sender].role\"\n                        let _10 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3462:3467  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let value_2 := 0\n                        value_2 := 0\n                        sstore(_10, and(sload(_10), not(255)))\n                        mstore(0, /** @src 6:3468:3478  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3462:3467  \"users\" */ 0x01)\n                        /// @src 6:3517:3546  \"users[msg.sender].nominations\"\n                        let _11 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3517:3546  \"users[msg.sender].nominations\" */ 2)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let newLen := 0\n                        newLen := 0\n                        let oldLen_1 := sload(_11)\n                        sstore(_11, 0)\n                        if iszero(iszero(oldLen_1))\n                        {\n                            mstore(0, _11)\n                            let data_2 := keccak256(0, 0x20)\n                            let _12 := add(data_2, oldLen_1)\n                            let start_1 := data_2\n                            for { }\n                            lt(start_1, _12)\n                            {\n                                start_1 := add(start_1, /** @src 6:3462:3467  \"users\" */ 0x01)\n                            }\n                            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                            { sstore(start_1, 0) }\n                        }\n                        mstore(0, /** @src 6:3468:3478  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3462:3467  \"users\" */ 0x01)\n                        /// @src 6:3556:3584  \"users[msg.sender].commission\"\n                        let _13 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 3)\n                        sstore(_13, and(sload(_13), not(0xffffffff)))\n                        mstore(0, /** @src 6:3468:3478  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3462:3467  \"users\" */ 0x01)\n                        /// @src 6:3598:3639  \"return users[msg.sender].stake.active > 0\"\n                        let var_1 := /** @src 6:3605:3639  \"users[msg.sender].stake.active > 0\" */ iszero(iszero(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(keccak256(0, 64)), 0xffffffffffffffffffffffffffffffff)))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, var_1)\n                        return(memPos_5, 0x20)\n                    }\n                    case 0x385496f7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, /** @src 6:4316:4324  \"10 ether\" */ 0x8ac7230489e80000)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_6, 32)\n                    }\n                    case 0x3eb9776c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, /** @src 6:2335:2342  \"1 ether\" */ 0x0de0b6b3a7640000)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_7, 32)\n                    }\n                    case 0x498aa0f1 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, /** @src 6:2554:2569  \"1_000_000 ether\" */ 0xd3c21bcecceda1000000)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_8, 32)\n                    }\n                    case 0x63bd1d4a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, /** @src 6:4533:4537  \"5000\" */ 0x1388)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_9, 32)\n                    }\n                    case 0x64c9ec6f {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 6:522:540  \"uint128(msg.value)\"\n                        let expr_1 := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(/** @src 6:530:539  \"msg.value\" */ callvalue(), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)\n                        mstore(0, /** @src 6:494:504  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:488:493  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_1 := keccak256(0, 64)\n                        sstore(/** @src 6:488:540  \"users[msg.sender].stake.active += uint128(msg.value)\" */ dataSlot_1, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ or(and(sload(/** @src 6:488:540  \"users[msg.sender].stake.active += uint128(msg.value)\" */ dataSlot_1), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ not(0xffffffffffffffffffffffffffffffff)), and(/** @src 6:488:540  \"users[msg.sender].stake.active += uint128(msg.value)\" */ checked_add_uint128(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(/** @src 6:488:540  \"users[msg.sender].stake.active += uint128(msg.value)\" */ dataSlot_1), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff), /** @src 6:488:540  \"users[msg.sender].stake.active += uint128(msg.value)\" */ expr_1), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)))\n                        mstore(0, /** @src 6:494:504  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:488:493  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 6:550:601  \"users[msg.sender].stake.total += uint128(msg.value)\"\n                        update_storage_value_offset_16t_uint128_to_uint128(dataSlot_2, checked_add_uint128(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ shr(128, sload(/** @src 6:550:601  \"users[msg.sender].stake.total += uint128(msg.value)\" */ dataSlot_2)), expr_1))\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, expr_1)\n                        return(memPos_10, 0x20)\n                    }\n                    case 0x64e7b428 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_3 := mload(64)\n                        finalize_allocation_9133(memPtr_3)\n                        mstore(memPtr_3, 0)\n                        mstore(add(memPtr_3, 32), 0)\n                        mstore(0, /** @src 6:2444:2454  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:2438:2443  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_3 := keccak256(0, 64)\n                        let memPtr_4 := mload(64)\n                        finalize_allocation_9133(memPtr_4)\n                        let _14 := sload(dataSlot_3)\n                        let cleaned_4 := and(_14, 0xffffffffffffffffffffffffffffffff)\n                        mstore(memPtr_4, cleaned_4)\n                        let _15 := add(memPtr_4, 32)\n                        mstore(_15, shr(128, _14))\n                        let memPos_11 := mload(64)\n                        mstore(memPos_11, cleaned_4)\n                        mstore(add(memPos_11, 32), and(mload(_15), 0xffffffffffffffffffffffffffffffff))\n                        return(memPos_11, 64)\n                    }\n                    case 0x727f17f2 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_12 := mload(64)\n                        mstore(memPos_12, /** @src 6:3736:3738  \"16\" */ 0x10)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_12, 32)\n                    }\n                    case 0x77a0fe02 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:1554:1564  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:1548:1553  \"users\" */ 0x01)\n                        /// @src 6:1520:1580  \"Unbonding[] storage queue = users[msg.sender].unbondingQueue\"\n                        let var_queue_slot := /** @src 6:1548:1580  \"users[msg.sender].unbondingQueue\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 4)\n                        /// @src 6:1590:1614  \"uint128 withdrawable = 0\"\n                        let var_withdrawable := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0\n                        /// @src 6:1624:1642  \"uint newLength = 0\"\n                        let var_newLength := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0\n                        /// @src 6:1658:1668  \"uint i = 0\"\n                        let var_i := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0\n                        /// @src 6:1653:1875  \"for (uint i = 0; i < queue.length; i++) {...\"\n                        for { }\n                        /** @src 6:1548:1553  \"users\" */ 0x01\n                        /// @src 6:1658:1668  \"uint i = 0\"\n                        {\n                            /// @src 6:1688:1691  \"i++\"\n                            var_i := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ add(/** @src 6:1688:1691  \"i++\" */ var_i, /** @src 6:1548:1553  \"users\" */ 0x01)\n                        }\n                        /// @src 6:1688:1691  \"i++\"\n                        {\n                            /// @src 6:1670:1686  \"i < queue.length\"\n                            if iszero(lt(var_i, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ sload(/** @src 6:1674:1686  \"queue.length\" */ var_queue_slot)))\n                            /// @src 6:1670:1686  \"i < queue.length\"\n                            { break }\n                            /// @src 6:1711:1719  \"queue[i]\"\n                            let _16, _17 := storage_array_index_access_struct_Unbonding__dyn_ptr(var_queue_slot, var_i)\n                            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                            let cleaned_5 := and(sload(/** @src 6:1711:1723  \"queue[i].era\" */ _16), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffff)\n                            /// @src 6:1707:1865  \"if (queue[i].era <= _era) {...\"\n                            switch /** @src 6:1711:1731  \"queue[i].era <= _era\" */ iszero(gt(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ cleaned_5, and(sload(0), 0xffffffff)))\n                            case /** @src 6:1707:1865  \"if (queue[i].era <= _era) {...\" */ 0 {\n                                /// @src 6:1842:1850  \"queue[i]\"\n                                let _18, _19 := storage_array_index_access_struct_Unbonding__dyn_ptr(var_queue_slot, var_i)\n                                /// @src 6:1827:1838  \"newLength++\"\n                                let _20 := var_newLength\n                                /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                                if eq(var_newLength, not(0))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(0, 0x24)\n                                }\n                                /// @src 6:1827:1838  \"newLength++\"\n                                var_newLength := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ add(var_newLength, /** @src 6:1548:1553  \"users\" */ 0x01)\n                                /// @src 6:1821:1839  \"queue[newLength++]\"\n                                let _21, _22 := storage_array_index_access_struct_Unbonding__dyn_ptr(var_queue_slot, _20)\n                                /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                                if _22\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0)\n                                    revert(0, 0x24)\n                                }\n                                if iszero(eq(_21, _18))\n                                {\n                                    sstore(_21, or(and(sload(_21), not(0xffffffff)), and(and(sload(_18), 0xffffffff), 0xffffffff)))\n                                    update_storage_value_offsett_uint128_to_uint128(_21, and(shr(0x20, sload(_18)), 0xffffffffffffffffffffffffffffffff))\n                                }\n                            }\n                            default /// @src 6:1707:1865  \"if (queue[i].era <= _era) {...\"\n                            {\n                                /// @src 6:1767:1775  \"queue[i]\"\n                                let _23, _24 := storage_array_index_access_struct_Unbonding__dyn_ptr(var_queue_slot, var_i)\n                                /// @src 6:1751:1782  \"withdrawable += queue[i].amount\"\n                                var_withdrawable := checked_add_uint128(var_withdrawable, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(shr(0x20, sload(/** @src 6:1767:1782  \"queue[i].amount\" */ _23)), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff))\n                            }\n                        }\n                        /// @src 6:1913:1982  \"while (queue.length > newLength) {...\"\n                        for { }\n                        /** @src 6:1548:1553  \"users\" */ 0x01\n                        /// @src 6:1913:1982  \"while (queue.length > newLength) {...\"\n                        { }\n                        {\n                            /// @src 6:1920:1932  \"queue.length\"\n                            let expr_2 := /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ sload(/** @src 6:1920:1932  \"queue.length\" */ var_queue_slot)\n                            /// @src 6:1920:1944  \"queue.length > newLength\"\n                            if iszero(gt(expr_2, var_newLength)) { break }\n                            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                            if iszero(expr_2)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x31)\n                                revert(0, 0x24)\n                            }\n                            let newLen_1 := add(expr_2, not(0))\n                            let slot, offset_1 := storage_array_index_access_struct_Unbonding__dyn_ptr(var_queue_slot, newLen_1)\n                            if iszero(iszero(offset_1))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0)\n                                revert(0, 0x24)\n                            }\n                            sstore(slot, 0)\n                            sstore(var_queue_slot, newLen_1)\n                        }\n                        mstore(0, /** @src 6:1554:1564  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:1548:1553  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_4 := keccak256(0, 64)\n                        /// @src 6:1992:2037  \"users[msg.sender].stake.total -= withdrawable\"\n                        update_storage_value_offset_16t_uint128_to_uint128(dataSlot_4, checked_sub_uint128(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ shr(128, sload(/** @src 6:1992:2037  \"users[msg.sender].stake.total -= withdrawable\" */ dataSlot_4)), var_withdrawable))\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let memPos_13 := mload(64)\n                        mstore(memPos_13, and(var_withdrawable, 0xffffffffffffffffffffffffffffffff))\n                        return(memPos_13, 0x20)\n                    }\n                    case 0xac0d45e2 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_3 := calldataload(4)\n                        if iszero(eq(value_3, and(value_3, 0xffffffff))) { revert(0, 0) }\n                        mstore(0, /** @src 6:3252:3262  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3271:3286  \"Roles.VALIDATOR\" */ 1)\n                        /// @src 6:3246:3268  \"users[msg.sender].role\"\n                        let _25 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3271:3286  \"Roles.VALIDATOR\" */ 1)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let cleaned_6 := 0\n                        cleaned_6 := 0\n                        sstore(_25, or(and(sload(_25), not(255)), /** @src 6:3271:3286  \"Roles.VALIDATOR\" */ 1))\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0, /** @src 6:3252:3262  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3271:3286  \"Roles.VALIDATOR\" */ 1)\n                        /// @src 6:3296:3324  \"users[msg.sender].commission\"\n                        let _26 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 3)\n                        sstore(/** @src 6:3296:3324  \"users[msg.sender].commission\" */ _26, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ or(and(sload(/** @src 6:3296:3324  \"users[msg.sender].commission\" */ _26), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ not(0xffffffff)), and(/** @src 6:3296:3338  \"users[msg.sender].commission = _commission\" */ value_3, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffff)))\n                        mstore(0, /** @src 6:3252:3262  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:3271:3286  \"Roles.VALIDATOR\" */ 1)\n                        /// @src 6:3348:3389  \"return users[msg.sender].stake.active > 0\"\n                        let var_2 := /** @src 6:3355:3389  \"users[msg.sender].stake.active > 0\" */ iszero(iszero(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(keccak256(0, 64)), 0xffffffffffffffffffffffffffffffff)))\n                        let memPos_14 := mload(64)\n                        mstore(memPos_14, var_2)\n                        return(memPos_14, 32)\n                    }\n                    case 0xae90b213 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:2663:2673  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:2657:2662  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let value_4 := and(shr(8, sload(/** @src 6:2657:2680  \"users[msg.sender].payee\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:2657:2662  \"users\" */ 0x01))), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ sub(shl(160, 1), 1))\n                        let memPos_15 := mload(64)\n                        mstore(memPos_15, value_4)\n                        return(memPos_15, 0x20)\n                    }\n                    case 0xb35ae446 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_16 := mload(64)\n                        mstore(memPos_16, /** @src 6:4202:4211  \"100 ether\" */ 0x056bc75e2d63100000)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_16, 32)\n                    }\n                    case 0xd1d4d3e4 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:3954:3964  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:3948:3953  \"users\" */ 0x01)\n                        /// @src 6:3948:3977  \"users[msg.sender].nominations\"\n                        let _27 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:3948:3977  \"users[msg.sender].nominations\" */ 2)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let pos_1 := mload(64)\n                        let memPtr_5 := pos_1\n                        let length_3 := sload(_27)\n                        mstore(pos_1, length_3)\n                        pos_1 := add(pos_1, 0x20)\n                        let updated_pos := pos_1\n                        mstore(0, _27)\n                        let srcPtr_2 := keccak256(0, 0x20)\n                        let i_3 := 0\n                        for { }\n                        lt(i_3, length_3)\n                        {\n                            i_3 := add(i_3, /** @src 6:3948:3953  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        {\n                            mstore(pos_1, and(sload(srcPtr_2), sub(shl(160, 1), 1)))\n                            pos_1 := add(pos_1, 0x20)\n                            srcPtr_2 := add(srcPtr_2, /** @src 6:3948:3953  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        finalize_allocation(memPtr_5, sub(pos_1, memPtr_5))\n                        let memPos_17 := mload(64)\n                        let tail_1 := add(memPos_17, 0x20)\n                        mstore(memPos_17, 0x20)\n                        let pos_2 := tail_1\n                        let length_4 := mload(memPtr_5)\n                        mstore(tail_1, length_4)\n                        pos_2 := add(memPos_17, 64)\n                        let srcPtr_3 := updated_pos\n                        let i_4 := 0\n                        for { }\n                        lt(i_4, length_4)\n                        {\n                            i_4 := add(i_4, /** @src 6:3948:3953  \"users\" */ 0x01)\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        {\n                            mstore(pos_2, and(mload(srcPtr_3), sub(shl(160, 1), 1)))\n                            pos_2 := add(pos_2, 0x20)\n                            srcPtr_3 := add(srcPtr_3, 0x20)\n                        }\n                        return(memPos_17, sub(pos_2, memPos_17))\n                    }\n                    case 0xe1489191 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 6:4075:4085  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(0x20, /** @src 6:4069:4074  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let cleaned_7 := and(sload(/** @src 6:4069:4097  \"users[msg.sender].commission\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:4069:4097  \"users[msg.sender].commission\" */ 3)), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffff)\n                        let memPos_18 := mload(64)\n                        mstore(memPos_18, cleaned_7)\n                        return(memPos_18, 0x20)\n                    }\n                    case 0xe20ccec3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_19 := mload(64)\n                        mstore(memPos_19, /** @src 6:4627:4628  \"2\" */ 0x02)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        return(memPos_19, 32)\n                    }\n                    case 0xe8111842 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_5 := calldataload(4)\n                        let _28 := and(value_5, 0xffffffffffffffffffffffffffffffff)\n                        if iszero(eq(value_5, _28)) { revert(0, 0) }\n                        let var_value := value_5\n                        mstore(0, /** @src 6:757:767  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:751:756  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_5 := keccak256(0, 64)\n                        let cleaned_8 := and(sload(/** @src 6:796:804  \"s.active\" */ dataSlot_5), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)\n                        /// @src 6:784:822  \"if (value > s.active) value = s.active\"\n                        if /** @src 6:788:804  \"value > s.active\" */ gt(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ _28, /** @src 6:788:804  \"value > s.active\" */ cleaned_8)\n                        /// @src 6:784:822  \"if (value > s.active) value = s.active\"\n                        {\n                            /// @src 6:806:822  \"value = s.active\"\n                            var_value := cleaned_8\n                        }\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        sstore(/** @src 6:832:849  \"s.active -= value\" */ dataSlot_5, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ or(and(sload(/** @src 6:832:849  \"s.active -= value\" */ dataSlot_5), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ not(0xffffffffffffffffffffffffffffffff)), and(/** @src 6:832:849  \"s.active -= value\" */ checked_sub_uint128(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ cleaned_8, /** @src 6:832:849  \"s.active -= value\" */ var_value), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)))\n                        mstore(0, /** @src 6:757:767  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:751:756  \"users\" */ 0x01)\n                        /// @src 6:859:896  \"users[msg.sender].unbondingQueue.push\"\n                        let expr_self_slot_1 := /** @src 6:859:891  \"users[msg.sender].unbondingQueue\" */ add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), 4)\n                        /// @src 6:914:922  \"_era + 2\"\n                        let expr_3 := checked_add_uint32(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(0), 0xffffffff))\n                        let memPtr_6 := mload(64)\n                        finalize_allocation_9133(memPtr_6)\n                        mstore(memPtr_6, and(expr_3, 0xffffffff))\n                        let _29 := and(var_value, 0xffffffffffffffffffffffffffffffff)\n                        mstore(/** @src 6:897:940  \"Unbonding({ era: _era + 2, amount: value })\" */ add(memPtr_6, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 32), _29)\n                        /// @src 6:859:941  \"users[msg.sender].unbondingQueue.push(Unbonding({ era: _era + 2, amount: value }))\"\n                        array_push_from_struct_Unbonding_to_array_struct_Unbonding_storage_dyn_ptr(expr_self_slot_1, memPtr_6)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let memPos_20 := mload(64)\n                        mstore(memPos_20, _29)\n                        return(memPos_20, 32)\n                    }\n                    case 0xec9b28f1 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_6 := calldataload(4)\n                        if iszero(eq(value_6, and(value_6, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                        mstore(0, /** @src 6:2163:2173  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:2157:2162  \"users\" */ 0x01)\n                        /// @src 6:2157:2180  \"users[msg.sender].payee\"\n                        let _30 := add(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ keccak256(0, 64), /** @src 6:2157:2162  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let _31 := sload(_30)\n                        sstore(_30, or(and(_31, not(sub(shl(168, 1), 256))), and(shl(8, value_6), sub(shl(168, 1), 256))))\n                        mstore(0, /** @src 6:2163:2173  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:2157:2162  \"users\" */ 0x01)\n                        /// @src 6:2199:2240  \"return users[msg.sender].stake.active > 0\"\n                        let var_3 := /** @src 6:2206:2240  \"users[msg.sender].stake.active > 0\" */ iszero(iszero(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(keccak256(0, 64)), 0xffffffffffffffffffffffffffffffff)))\n                        let memPos_21 := mload(64)\n                        mstore(memPos_21, var_3)\n                        return(memPos_21, 32)\n                    }\n                    case 0xefb073f0 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_7 := calldataload(4)\n                        let _32 := and(value_7, 0xffffffffffffffffffffffffffffffff)\n                        if iszero(eq(value_7, _32)) { revert(0, 0) }\n                        mstore(0, /** @src 6:1370:1380  \"msg.sender\" */ caller())\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        mstore(32, /** @src 6:1364:1369  \"users\" */ 0x01)\n                        /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        sstore(/** @src 6:1364:1403  \"users[msg.sender].stake.active += value\" */ dataSlot_6, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ or(and(sload(/** @src 6:1364:1403  \"users[msg.sender].stake.active += value\" */ dataSlot_6), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ not(0xffffffffffffffffffffffffffffffff)), and(/** @src 6:1364:1403  \"users[msg.sender].stake.active += value\" */ checked_add_uint128(/** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ and(sload(/** @src 6:1364:1403  \"users[msg.sender].stake.active += value\" */ dataSlot_6), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff), /** @src 6:1364:1403  \"users[msg.sender].stake.active += value\" */ value_7), /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0xffffffffffffffffffffffffffffffff)))\n                        let memPos_22 := mload(64)\n                        mstore(memPos_22, _32)\n                        return(memPos_22, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function checked_add_uint32(x) -> sum\n            {\n                sum := add(and(x, 0xffffffff), 2)\n                if gt(sum, 0xffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation_9133(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function storage_array_index_access_struct_Unbonding__dyn_ptr(array, index) -> slot, offset\n            {\n                if iszero(lt(index, sload(array)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ array)\n                slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 6:102:4750  \"contract MockStaking is IStaking {...\" */ 0x20), index)\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 6:102:4750  \"contract MockStaking is IStaking {...\"\n            function update_storage_value_offsett_uint128_to_uint128(slot, value)\n            {\n                let _1 := sload(slot)\n                sstore(slot, or(and(_1, not(0xffffffffffffffffffffffffffffffff00000000)), and(shl(32, value), 0xffffffffffffffffffffffffffffffff00000000)))\n            }\n            function array_push_from_struct_Unbonding_to_array_struct_Unbonding_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Unbonding__dyn_ptr(array, oldLen)\n                if offset\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0)\n                    revert(0, 0x24)\n                }\n                sstore(slot, or(and(sload(slot), not(0xffffffff)), and(and(mload(value0), 0xffffffff), 0xffffffff)))\n                update_storage_value_offsett_uint128_to_uint128(slot, and(mload(add(value0, 32)), 0xffffffffffffffffffffffffffffffff))\n            }\n            function checked_add_uint128(x, y) -> sum\n            {\n                sum := add(and(x, 0xffffffffffffffffffffffffffffffff), and(y, 0xffffffffffffffffffffffffffffffff))\n                if gt(sum, 0xffffffffffffffffffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function update_storage_value_offset_16t_uint128_to_uint128(slot, value)\n            {\n                let _1 := sload(slot)\n                sstore(slot, or(and(_1, 0xffffffffffffffffffffffffffffffff), and(shl(128, value), not(0xffffffffffffffffffffffffffffffff))))\n            }\n            function checked_sub_uint128(x, y) -> diff\n            {\n                diff := sub(and(x, 0xffffffffffffffffffffffffffffffff), and(y, 0xffffffffffffffffffffffffffffffff))\n                if gt(diff, 0xffffffffffffffffffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220bc5e3920c32f46892b32f4cce5902bb495ccef21dd5448abd5f5ff2849bd272864736f6c634300081a0033\"\n    }\n}\n",
          "hash": "c88c88bb63fd435d3cd0c58ab151dfed84084b1e8201f6bec0e8ca32eae86b3c",
          "factoryDependencies": {}
        }
      },
      "contracts/SleepFine.sol": {
        "SleepFine": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract IStaking",
                  "name": "_stakingPrecompile",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AccessControlBadConfirmation",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "neededRole",
                  "type": "bytes32"
                }
              ],
              "name": "AccessControlUnauthorizedAccount",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "challengeId",
                  "type": "uint256"
                }
              ],
              "name": "NewChallenge",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "AI_AGENT_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "name": "bond",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "challenges",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "app",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "completed",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "startDate",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "durationDays",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "missedDaysCount",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "deposit",
                  "type": "uint128"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "challengeId",
                  "type": "uint256"
                }
              ],
              "name": "completeChallenge",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "challengeId",
                  "type": "uint256"
                }
              ],
              "name": "getChallenge",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "user",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "app",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "completed",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startDate",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "durationDays",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "missedDaysCount",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "missedDaysArray",
                      "type": "bool[]"
                    },
                    {
                      "internalType": "uint128",
                      "name": "deposit",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct SleepFine.Challenge",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getCurrentDate",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "aiAgent",
                  "type": "address"
                }
              ],
              "name": "grantAiAgentRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "targets",
                  "type": "address[]"
                }
              ],
              "name": "nominate",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "callerConfirmation",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "challengeId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "dayId",
                  "type": "uint64"
                }
              ],
              "name": "reportMissedSleep",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "aiAgent",
                  "type": "address"
                }
              ],
              "name": "revokeAiAgentRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stakingPrecompile",
              "outputs": [
                {
                  "internalType": "contract IStaking",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "numDays",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "app",
                  "type": "address"
                }
              ],
              "name": "startChallenge",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                }
              ],
              "name": "unbond",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"_stakingPrecompile\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"NewChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AI_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"durationDays\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missedDaysCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallenge\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"durationDays\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missedDaysCount\",\"type\":\"uint64\"},{\"internalType\":\"bool[]\",\"name\":\"missedDaysArray\",\"type\":\"bool[]\"},{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"}],\"internalType\":\"struct SleepFine.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aiAgent\",\"type\":\"address\"}],\"name\":\"grantAiAgentRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"nominate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"dayId\",\"type\":\"uint64\"}],\"name\":\"reportMissedSleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aiAgent\",\"type\":\"address\"}],\"name\":\"revokeAiAgentRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPrecompile\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"numDays\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"startChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"unbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"reportMissedSleep(uint256,uint64)\":{\"params\":{\"challengeId\":\"The ID of the challenge\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"startChallenge(uint64,address)\":{\"params\":{\"app\":\"iOS app scoped key from secure enclave, created when user installed the app\",\"numDays\":\"Number of days for the challenge\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"challenges(uint256)\":{\"notice\":\"A challenge is uniquely identified by an incremental Challenge ID This simple structure enables users to start multiple challenges\"},\"startChallenge(uint64,address)\":{\"notice\":\"User starts challenge by making a deposit from their wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SleepFine.sol\":\"SleepFine\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"contracts/IStaking.sol\":{\"keccak256\":\"0xadce66a52aab23bf6c38d84ac9add30ff229fe3c52442beb54704547e328f6c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c86eb5998778edc3a2abe5b32b0ea9b62d7a10f263298716e7e17124797744f\",\"dweb:/ipfs/QmWuwPUkpjGDB8TcDEvn6uKobsYta6hZ2z1oUtrRHCunh6\"]},\"contracts/SleepFine.sol\":{\"keccak256\":\"0x419060601c634cbeb35c38d6e884cdfbf687025943337e196b325880cb6c99ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3ae70dc8349ca036d93bc433a4836da6043384de012c306543c46bf97ac419d\",\"dweb:/ipfs/QmdZewwbxgmqeRbr3h85UuHeQsDemWWqfXkRgTw5vVguuk\"]}},\"version\":1}",
            "solc_version": "0.8.26+commit.8a97fa7a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 492/66112 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 13306\n// Code size = 47108 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x201e8\n    16: s0 = i32 [0x201e8]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30220\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 6 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x201e8]\n    41: u32 [0x201e8] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x201e8]\n    68: jump @48 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30220\n    77: i32 a0 = a0 + 0\n    79: ecalli 14 // 'set_immutable_data'\n    81: jump @48\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @18\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @18\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 7 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 15 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 [@dyn 3] (gas: 2)\n   874: u64 [sp + 0x38] = a1\n   877: ra = 8, jump @18\n      : @14 [@dyn 4] (gas: 46)\n   882: a1 = reverse s1\n   884: u64 [sp + 0x78] = a1\n   887: a1 = u64 [sp]\n   889: a1 = reverse a1\n   891: u64 [sp + 0x70] = a1\n   894: a1 = u64 [sp + 0x8]\n   897: a1 = reverse a1\n   899: u64 [sp + 0x68] = a1\n   902: a1 = u64 [sp + 0x10]\n   905: a1 = reverse a1\n   907: u64 [sp + 0x60] = a1\n   910: a1 = u64 [sp + 0x18]\n   913: a1 = reverse a1\n   915: u64 [sp + 0x98] = a1\n   919: a1 = u64 [sp + 0x20]\n   922: a1 = reverse a1\n   924: u64 [sp + 0x90] = a1\n   928: a1 = u64 [sp + 0x28]\n   931: a1 = reverse a1\n   933: u64 [sp + 0x88] = a1\n   937: a1 = u64 [sp + 0x30]\n   940: a1 = reverse a1\n   942: u64 [sp + 0x80] = a1\n   946: a1 = u64 [sp + 0x40]\n   949: a1 = reverse a1\n   951: u64 [sp + 0xb8] = a1\n   955: a1 = u64 [sp + 0x48]\n   958: a1 = reverse a1\n   960: u64 [sp + 0xb0] = a1\n   964: a1 = u64 [sp + 0x50]\n   967: a1 = reverse a1\n   969: u64 [sp + 0xa8] = a1\n   973: a1 = u64 [sp + 0x58]\n   976: a1 = reverse a1\n   978: u64 [sp + 0xa0] = a1\n   982: i32 a2 = a0 + 0\n   984: a3 = i32 [sp + 0x38]\n   987: i32 a0 = sp + 0x60\n   990: a1 = 0x3\n   993: ecalli 5 // 'deposit_event'\n   995: sp = s0 + 0xffffffffffffff20\n   999: ra = u64 [sp + 0xd8]\n  1003: s0 = u64 [sp + 0xd0]\n  1007: s1 = u64 [sp + 0xc8]\n  1011: sp = sp + 0xe0\n  1015: ret\n      : @15 [@dyn 5] (gas: 17)\n  1017: s1 = u64 [a5]\n  1019: u64 [sp + 0x60] = s1\n  1022: s1 = u64 [a5 + 0x8]\n  1025: u64 [sp + 0x68] = s1\n  1028: s1 = u64 [a5 + 0x10]\n  1031: u64 [sp + 0x70] = s1\n  1034: a5 = u64 [a5 + 0x18]\n  1037: u64 [sp + 0x78] = a5\n  1040: a5 = u64 [a4]\n  1042: u64 [sp + 0x38] = a5\n  1045: a5 = u64 [a4 + 0x8]\n  1048: u64 [sp + 0x40] = a5\n  1051: a5 = u64 [a4 + 0x10]\n  1054: u64 [sp + 0x48] = a5\n  1057: a4 = u64 [a4 + 0x18]\n  1060: u64 [sp + 0x50] = a4\n  1063: t0 = 12, jump @1796\n      : @16 [@dyn 6] (gas: 2)\n  1069: u64 [sp + 0x58] = a1\n  1072: ra = 14, jump @18\n      : @17 [@dyn 7] (gas: 58)\n  1077: a1 = reverse s1\n  1079: u64 [sp + 0x98] = a1\n  1083: a1 = u64 [sp]\n  1085: a1 = reverse a1\n  1087: u64 [sp + 0x90] = a1\n  1091: a1 = u64 [sp + 0x8]\n  1094: a1 = reverse a1\n  1096: u64 [sp + 0x88] = a1\n  1100: a1 = u64 [sp + 0x10]\n  1103: a1 = reverse a1\n  1105: u64 [sp + 0x80] = a1\n  1109: a1 = u64 [sp + 0x18]\n  1112: a1 = reverse a1\n  1114: u64 [sp + 0xb8] = a1\n  1118: a1 = u64 [sp + 0x20]\n  1121: a1 = reverse a1\n  1123: u64 [sp + 0xb0] = a1\n  1127: a1 = u64 [sp + 0x28]\n  1130: a1 = reverse a1\n  1132: u64 [sp + 0xa8] = a1\n  1136: a1 = u64 [sp + 0x30]\n  1139: a1 = reverse a1\n  1141: u64 [sp + 0xa0] = a1\n  1145: a1 = u64 [sp + 0x38]\n  1148: a1 = reverse a1\n  1150: u64 [sp + 0xd8] = a1\n  1154: a1 = u64 [sp + 0x40]\n  1157: a1 = reverse a1\n  1159: u64 [sp + 0xd0] = a1\n  1163: a1 = u64 [sp + 0x48]\n  1166: a1 = reverse a1\n  1168: u64 [sp + 0xc8] = a1\n  1172: a1 = u64 [sp + 0x50]\n  1175: a1 = reverse a1\n  1177: u64 [sp + 0xc0] = a1\n  1181: a1 = u64 [sp + 0x60]\n  1184: a1 = reverse a1\n  1186: u64 [sp + 0xf8] = a1\n  1190: a1 = u64 [sp + 0x68]\n  1193: a1 = reverse a1\n  1195: u64 [sp + 0xf0] = a1\n  1199: a1 = u64 [sp + 0x70]\n  1202: a1 = reverse a1\n  1204: u64 [sp + 0xe8] = a1\n  1208: a1 = u64 [sp + 0x78]\n  1211: a1 = reverse a1\n  1213: u64 [sp + 0xe0] = a1\n  1217: i32 a2 = a0 + 0\n  1219: a3 = i32 [sp + 0x58]\n  1222: i32 a0 = sp + 0x80\n  1226: a1 = 0x4\n  1229: ecalli 5 // 'deposit_event'\n  1231: sp = s0 + 0xfffffffffffffee0\n  1235: ra = u64 [sp + 0x118]\n  1239: s0 = u64 [sp + 0x110]\n  1243: s1 = u64 [sp + 0x108]\n  1247: sp = sp + 0x120\n  1251: ret\n      : @18 (gas: 2)\n  1253: i32 a2 = a0 >> 0x10\n  1256: jump @23 if a2 != 0\n      : @19 (gas: 4)\n  1259: a1 = a1 + a0\n  1262: i32 a1 = a1 + 0x1f\n  1265: a1 = a1 & 0xffffffffffffffe0\n  1268: jump @23 if a1 >u 65536\n      : @20 (gas: 3)\n  1274: a2 = 0x201f0\n  1279: a3 = i32 [0x201f0]\n  1284: jump @22 if a3 >=u a1\n      : @21 (gas: 2)\n  1287: u32 [0x201f0] = a1\n  1292: fallthrough\n      : @22 (gas: 4)\n  1293: a1 = 0x20200\n  1298: i32 a0 = a0 + 0\n  1300: a0 = a0 + a1\n  1303: ret\n      : @23 (gas: 1)\n  1305: trap\n      : @24 (gas: 6)\n  1306: sp = sp + 0xfffffffffffffff0\n  1309: u64 [sp + 0x8] = ra\n  1312: u64 [sp] = s0\n  1314: s0 = a0 & 0x1\n  1317: ecalli 3 // 'call_data_size'\n  1319: fallthrough\n      : @25 (gas: 3)\n  1320: a1 = 0x201ec\n  1325: u32 [0x201ec] = a0\n  1330: jump @27 if s0 == 0\n      : @26 (gas: 3)\n  1333: ra = 0x10\n  1336: t0 = 0x14\n  1339: jump @1825\n      : @27 [@dyn 8] (gas: 1)\n  1343: ra = 18, jump @51\n      : @28 [@dyn 9] (gas: 1)\n  1348: t0 = 20, jump @1825\n      : @29 [@dyn 10] (gas: 7)\n  1354: u64 [sp + 248] = 0\n  1358: u64 [sp + 240] = 0\n  1362: u64 [sp + 232] = 0\n  1366: u64 [sp + 224] = 0\n  1370: i32 a0 = sp + 0xe0\n  1374: ecalli 16 // 'value_transferred'\n  1376: fallthrough\n      : @30 (gas: 8)\n  1377: a0 = u64 [sp + 0xf0]\n  1381: a1 = u64 [sp + 0xf8]\n  1385: a2 = u64 [sp + 0xe8]\n  1389: a3 = u64 [sp + 0xe0]\n  1393: a1 = a1 | a2\n  1396: a0 = a0 | a3\n  1399: a0 = a0 | a1\n  1402: jump @42 if a0 != 0\n      : @31 (gas: 15)\n  1406: s1 = i32 [0x201ec]\n  1411: a0 = s1 << 0x20\n  1414: a0 = a0 >> 0x20\n  1417: a0 = a0 + 0x1f\n  1420: a0 = a0 & 0xffffffffffffffe0\n  1423: a1 = a0 + 0xa0\n  1427: a0 = a1 <u a0\n  1430: u64 [sp + 0xc0] = a1\n  1434: u64 [sp + 0xc8] = a0\n  1438: a0 = 0 if a0 != 0\n  1440: u64 [sp + 0xd0] = a0\n  1444: a0 = 0x40\n  1447: a1 = sp + 0xc0\n  1451: u64 [sp + 216] = 0\n  1455: ra = 22, jump @9\n      : @32 [@dyn 11] (gas: 3)\n  1460: a0 = 0xa0\n  1464: a1 = s1\n  1466: ra = 24, jump @18\n      : @33 [@dyn 12] (gas: 5)\n  1471: i32 a0 = a0 + 0\n  1473: a1 = s1\n  1475: a2 = 0\n  1477: ecalli 1 // 'call_data_copy'\n  1479: fallthrough\n      : @34 (gas: 1)\n  1480: jump @43 if s1 <=u 31\n      : @35 (gas: 3)\n  1485: a0 = sp + 0xa0\n  1489: a1 = 0xa0\n  1493: ra = 26, jump @7\n      : @36 [@dyn 13] (gas: 10)\n  1498: a0 = u64 [sp + 0xb0]\n  1502: a2 = u64 [sp + 0xb8]\n  1506: a1 = 0x100000000\n  1516: a1 = a1 ^ a0\n  1519: a1 = a1 | a2\n  1522: a3 = a0 >> 0x20\n  1525: a3 = a3 <u 0x1\n  1528: a3 = 0 if a2 != 0\n  1530: a3 = 0 if a1 == 0\n  1532: jump @44 if a3 == 0\n      : @37 (gas: 9)\n  1536: a1 = u64 [sp + 0xa8]\n  1540: a3 = u64 [sp + 0xa0]\n  1544: u64 [sp + 0x80] = a3\n  1548: u64 [sp + 0x88] = a1\n  1552: u64 [sp + 0x90] = a0\n  1556: a0 = 0x80\n  1560: a1 = sp + a0\n  1563: u64 [sp + 0x98] = a2\n  1567: ra = 28, jump @9\n      : @38 [@dyn 14] (gas: 23)\n  1572: s1 = 0x30200\n  1577: i32 a0 = s1 + 0\n  1579: ecalli 4 // 'caller'\n  1581: a0 = u64 [0x30208]\n  1586: a1 = i32 [0x30210]\n  1591: a2 = u64 [0x30200]\n  1596: a0 = reverse a0\n  1598: a3 = a0 << 0x20\n  1601: a1 = reverse a1\n  1603: a1 = a1 >> 0x20\n  1606: a3 = a3 | a1\n  1609: a0 = a0 >> 0x20\n  1612: a1 = reverse a2\n  1614: a2 = a1 << 0x20\n  1617: a0 = a0 | a2\n  1620: a1 = a1 >> 0x20\n  1623: u64 [sp + 88] = 0\n  1626: u64 [sp + 0x50] = a1\n  1629: u64 [sp + 0x48] = a0\n  1632: a0 = sp + 0x60\n  1635: a1 = sp + 0x40\n  1638: u64 [sp + 0x40] = a3\n  1641: ra = 30, jump @1329\n      : @39 [@dyn 15] (gas: 3)\n  1647: a0 = sp + 0x20\n  1650: a1 = 0x40\n  1653: ra = 32, jump @7\n      : @40 [@dyn 16] (gas: 12)\n  1658: a0 = u64 [sp + 0x38]\n  1661: a1 = u64 [sp + 0x30]\n  1664: a2 = u64 [sp + 0x28]\n  1667: s1 = u64 [sp + 0x20]\n  1670: a0 = a0 | a2\n  1673: a2 = s1 | a1\n  1676: a2 = a2 | a0\n  1679: a2 = a2 >> 0x20\n  1682: a0 = a0 | a1\n  1685: a0 = a0 << 0x20\n  1688: a0 = a0 | a2\n  1691: jump @45 if a0 == 0\n      : @41 (gas: 1)\n  1694: trap\n      : @42 (gas: 4)\n  1695: a1 = 0x20200\n  1700: i32 a1 = a1 + 0\n  1702: a0 = 0x1\n  1705: jump @50\n      : @43 (gas: 4)\n  1707: a1 = 0x20200\n  1712: i32 a1 = a1 + 0\n  1714: a0 = 0x1\n  1717: jump @50\n      : @44 (gas: 4)\n  1719: a1 = 0x20200\n  1724: i32 a1 = a1 + 0\n  1726: a0 = 0x1\n  1729: jump @50\n      : @45 (gas: 3)\n  1731: a0 = s1\n  1733: a1 = 0\n  1735: ra = 34, jump @18\n      : @46 [@dyn 17] (gas: 7)\n  1740: i32 a0 = a0 + 0\n  1742: a1 = 0\n  1744: a2 = 0\n  1746: ecalli 1 // 'call_data_copy'\n  1748: a0 = sp\n  1750: a1 = 0x80\n  1754: ra = 36, jump @7\n      : @47 [@dyn 18] (gas: 9)\n  1759: a0 = u64 [sp + 0x18]\n  1762: a2 = u64 [sp + 0x10]\n  1765: a3 = u64 [sp + 0x8]\n  1768: a4 = u64 [sp]\n  1770: u64 [0x30238] = a0\n  1775: u64 [0x30230] = a2\n  1780: u64 [0x30228] = a3\n  1785: u64 [0x30220] = a4\n  1790: jump @5\n      : @48 (gas: 3)\n  1793: a0 = s1\n  1795: a1 = 0\n  1797: ra = 38, jump @18\n      : @49 [@dyn 19] (gas: 6)\n  1802: i32 a1 = a0 + 0\n  1804: a0 = 0\n  1806: a2 = 0\n  1808: ra = 0x28\n  1811: ecalli 13 // 'seal_return'\n  1813: jump @51\n      : @50 (gas: 4)\n  1815: a2 = 0\n  1817: ra = 0x28\n  1820: ecalli 13 // 'seal_return'\n  1822: fallthrough\n      : @51 [@dyn 20] (gas: 16)\n  1823: sp = sp + 0xfffffffffffffe10\n  1827: u64 [sp + 0x1e8] = ra\n  1831: u64 [sp + 0x1e0] = s0\n  1835: u64 [sp + 0x1d8] = s1\n  1839: s0 = sp + 0x1f0\n  1843: sp = sp + 0xffffffffffffcbf0\n  1847: sp = sp & 0xffffffffffffffe0\n  1850: s1 = sp\n  1852: a2 = s1 + 0x29f8\n  1856: u64 [a2 + 352] = 0\n  1860: u64 [a2 + 344] = 0\n  1864: u64 [a2 + 328] = 0x80\n  1870: a0 = 0x40\n  1873: a1 = s1 + 0x2b40\n  1877: u64 [a2 + 336] = 0\n  1881: ra = 42, jump @9\n      : @52 [@dyn 21] (gas: 4)\n  1886: a0 = 0x201ec\n  1891: u64 [s1 + 0x278] = a0\n  1895: a0 = i32 [0x201ec]\n  1900: jump @54 if a0 >=u 4\n      : @53 (gas: 1)\n  1904: jump @1261\n      : @54 (gas: 6)\n  1907: a0 = s1 + 0x3000\n  1911: i32 a0 = a0 + 0xfffffffffffffb60\n  1915: a1 = 0\n  1917: ra = 0x2c\n  1920: ecalli 2 // 'call_data_load'\n  1922: fallthrough\n      : @55 [@dyn 22] (gas: 3)\n  1923: a2 = s1 + 0x29f8\n  1927: a0 = i32 [a2 + 0x184]\n  1931: jump @57 if a0 != 2401056630\n      : @56 (gas: 1)\n  1938: jump @536\n      : @57 (gas: 1)\n  1941: jump @59 if a0 != 2446411860\n      : @58 (gas: 1)\n  1948: jump @364\n      : @59 (gas: 2)\n  1951: a3 = s1 + 0x31f8\n  1955: jump @104 if a0 == 2455033714\n      : @60 (gas: 1)\n  1963: jump @62 if a0 != 2719481311\n      : @61 (gas: 1)\n  1970: jump @590\n      : @62 (gas: 1)\n  1973: jump @64 if a0 != 2810280892\n      : @63 (gas: 1)\n  1980: jump @387\n      : @64 (gas: 1)\n  1983: jump @66 if a0 != 3741207314\n      : @65 (gas: 1)\n  1990: jump @603\n      : @66 (gas: 1)\n  1993: jump @68 if a0 != 3893434434\n      : @67 (gas: 1)\n  2000: jump @450\n      : @68 (gas: 1)\n  2003: jump @70 if a0 != 4165322163\n      : @69 (gas: 1)\n  2010: jump @577\n      : @70 (gas: 1)\n  2013: jump @72 if a0 != 435355053\n      : @71 (gas: 1)\n  2020: jump @496\n      : @72 (gas: 1)\n  2023: jump @115 if a0 == 467487604\n      : @73 (gas: 1)\n  2031: jump @75 if a0 != 613063843\n      : @74 (gas: 1)\n  2038: jump @436\n      : @75 (gas: 1)\n  2041: jump @77 if a0 != 632874987\n      : @76 (gas: 1)\n  2048: jump @425\n      : @77 (gas: 1)\n  2051: jump @79 if a0 == 1774491868\n      : @78 (gas: 1)\n  2058: jump @483\n      : @79 (gas: 3)\n  2061: a0 = u64 [s1 + 0x278]\n  2065: a0 = i32 [a0]\n  2067: jump @81 if a0 >u 67\n      : @80 (gas: 1)\n  2071: jump @1101\n      : @81 (gas: 5)\n  2074: a0 = s1 + 0x3000\n  2078: i32 a0 = a0 + 0xffffffffffffff20\n  2082: a1 = 0x4\n  2085: ecalli 2 // 'call_data_load'\n  2087: fallthrough\n      : @82 (gas: 13)\n  2088: a2 = s1 + 0x29f8\n  2092: a4 = a2 + 0x500\n  2096: a0 = u64 [a4 + 0x40]\n  2099: a1 = u64 [a4 + 0x38]\n  2102: a3 = u64 [a4 + 0x30]\n  2105: a4 = s1 + 0x200\n  2109: u64 [a4 + 0x40] = a0\n  2112: u64 [a4 + 0x38] = a1\n  2115: a0 = a0 | a1\n  2118: u64 [a4 + 0x30] = a3\n  2121: a1 = a3 <u 0x1\n  2124: a1 = 0 if a0 != 0\n  2126: jump @84 if a1 != 0\n      : @83 (gas: 1)\n  2129: jump @1102\n      : @84 (gas: 6)\n  2132: a0 = u64 [a2 + 0x528]\n  2136: u64 [s1 + 0x270] = a0\n  2140: a0 = s1 + 0x1f20\n  2144: ra = 0x2e\n  2147: t0 = 0x50c\n  2151: jump @1793\n      : @85 [@dyn 23] (gas: 21)\n  2155: a1 = s1 + 0x19f8\n  2159: a2 = a1 + 0x500\n  2163: a0 = u64 [a2 + 0x38]\n  2166: a1 = s1 + 0x200\n  2170: u64 [a1 + 0x18] = a0\n  2173: a0 = u64 [a2 + 0x30]\n  2176: u64 [a1 + 0x20] = a0\n  2179: a0 = u64 [a2 + 0x28]\n  2182: u64 [a1 + 0x28] = a0\n  2185: a0 = s1 + 0x29f8\n  2189: u64 [a0 + 1376] = 0\n  2193: a0 = s1 + 0x29f8\n  2197: u64 [a0 + 1368] = 0\n  2201: a0 = s1 + 0x29f8\n  2205: u64 [a0 + 1360] = 0\n  2209: a0 = s1 + 0x29f8\n  2213: u64 [a0 + 1352] = 0\n  2217: a0 = s1 + 0x3000\n  2221: i32 a0 = a0 + 0xffffffffffffff40\n  2225: ecalli 16 // 'value_transferred'\n  2227: fallthrough\n      : @86 (gas: 10)\n  2228: a4 = s1 + 0x29f8\n  2232: a5 = a4 + 0x500\n  2236: a0 = u64 [a5 + 0x58]\n  2239: a1 = u64 [a5 + 0x60]\n  2242: a2 = u64 [a5 + 0x50]\n  2245: a3 = u64 [a5 + 0x48]\n  2248: a1 = a1 | a2\n  2251: a0 = a0 | a3\n  2254: a0 = a0 | a1\n  2257: jump @88 if a0 == 0\n      : @87 (gas: 1)\n  2260: jump @673\n      : @88 (gas: 3)\n  2263: a0 = s1 + 0x1920\n  2267: a1 = 0x40\n  2270: ra = 48, jump @7\n      : @89 [@dyn 24] (gas: 14)\n  2275: a2 = s1 + 0x11f8\n  2279: t0 = u64 [a2 + 0x740]\n  2283: a1 = a2 + 0x700\n  2287: a5 = u64 [a1 + 0x38]\n  2290: a4 = u64 [a1 + 0x30]\n  2293: a0 = u64 [a1 + 0x28]\n  2296: a3 = a4 | t0\n  2299: a1 = a0 | a5\n  2302: a1 = a1 | a3\n  2305: a1 = a1 >> 0x20\n  2308: a3 = a3 | a5\n  2311: a3 = a3 << 0x20\n  2314: a1 = a1 | a3\n  2317: jump @91 if a1 == 0\n      : @90 (gas: 1)\n  2320: jump @797\n      : @91 (gas: 11)\n  2323: u64 [a2 + 1816] = 0\n  2327: u64 [a2 + 1808] = 0\n  2331: u64 [a2 + 1800] = 0\n  2335: a3 = 0x8c379a000000000\n  2345: a1 = s1 + 0x1900\n  2349: u64 [a2 + 0x720] = a3\n  2353: u64 [s1 + 0x278] = a0\n  2357: u64 [s1 + 0x270] = a4\n  2361: u64 [s1 + 0x260] = t0\n  2365: u64 [s1 + 0x268] = a5\n  2369: ra = 50, jump @9\n      : @92 [@dyn 25] (gas: 6)\n  2374: a5 = s1 + 0x200\n  2378: a1 = u64 [a5 + 0x78]\n  2381: a0 = u64 [a5 + 0x68]\n  2384: a3 = u64 [a5 + 0x60]\n  2387: a3 = a3 | a0\n  2390: t0 = 52, jump @1785\n      : @93 [@dyn 26] (gas: 1)\n  2396: jump @95 if a0 != 0\n      : @94 (gas: 1)\n  2399: jump @797\n      : @95 (gas: 10)\n  2402: i32 a0 = a1 + 0x4\n  2405: a2 = s1 + 0x11f8\n  2409: u64 [a2 + 1792] = 0\n  2413: u64 [a2 + 1784] = 0\n  2417: u64 [a2 + 1768] = 0x20\n  2422: a1 = s1 + 0x18e0\n  2426: u64 [a2 + 1776] = 0\n  2430: u64 [s1 + 0x268] = a3\n  2434: u64 [s1 + 0x260] = a4\n  2438: ra = 54, jump @9\n      : @96 [@dyn 27] (gas: 1)\n  2443: t0 = 56, jump @1799\n      : @97 [@dyn 28] (gas: 1)\n  2449: jump @99 if a0 != 0\n      : @98 (gas: 1)\n  2452: jump @797\n      : @99 (gas: 8)\n  2455: i32 a0 = a1 + 0x24\n  2458: a3 = s1 + 0x11f8\n  2462: u64 [a3 + 1760] = 0\n  2466: u64 [a3 + 1752] = 0\n  2470: u64 [a3 + 1736] = 0x10\n  2475: a1 = s1 + 0x18c0\n  2479: u64 [a3 + 1744] = 0\n  2483: ra = 58, jump @9\n      : @100 [@dyn 29] (gas: 1)\n  2488: t0 = 60, jump @1775\n      : @101 [@dyn 30] (gas: 1)\n  2494: jump @103 if a0 != 0\n      : @102 (gas: 1)\n  2497: jump @797\n      : @103 (gas: 11)\n  2500: i32 a0 = a3 + 0x44\n  2503: a1 = u64 [0x20070]\n  2508: a2 = u64 [0x20078]\n  2513: a4 = s1 + 0x11f8\n  2517: u64 [a4 + 0x6c0] = a1\n  2521: u64 [a4 + 1712] = 0\n  2525: u64 [a4 + 0x6b8] = a2\n  2529: a1 = s1 + 0x18a0\n  2533: u64 [a4 + 1704] = 0\n  2537: ra = 0x262\n  2541: jump @9\n      : @104 (gas: 9)\n  2544: u64 [a3 + 160] = 0\n  2548: u64 [a3 + 152] = 0\n  2552: u64 [a3 + 144] = 0\n  2556: u64 [a3 + 136] = 0\n  2560: a0 = s1 + 0x3000\n  2564: i32 a0 = a0 + 0x280\n  2568: ecalli 16 // 'value_transferred'\n  2570: a3 = s1 + 0x31f8\n  2574: fallthrough\n      : @105 (gas: 8)\n  2575: a0 = u64 [a3 + 0x98]\n  2579: a1 = u64 [a3 + 0xa0]\n  2583: a2 = u64 [a3 + 0x90]\n  2587: a3 = u64 [a3 + 0x88]\n  2591: a1 = a1 | a2\n  2594: a0 = a0 | a3\n  2597: a0 = a0 | a1\n  2600: jump @107 if a0 == 0\n      : @106 (gas: 1)\n  2603: jump @1103\n      : @107 (gas: 4)\n  2606: a0 = u64 [s1 + 0x278]\n  2610: a0 = i32 [a0]\n  2612: a1 = 0x3\n  2615: jump @109 if a1 <u a0\n      : @108 (gas: 1)\n  2618: jump @1104\n      : @109 (gas: 4)\n  2621: a0 = s1 + 0x2320\n  2625: ra = 0x3e\n  2628: t0 = 0x596\n  2632: jump @1793\n      : @110 [@dyn 31] (gas: 6)\n  2636: a0 = s1 + 0x21f8\n  2640: a0 = u64 [a0 + 0x128]\n  2644: u64 [s1 + 0x278] = a0\n  2648: a0 = s1 + 0x2300\n  2652: a1 = 0x40\n  2655: ra = 64, jump @7\n      : @111 [@dyn 32] (gas: 7)\n  2660: a3 = s1 + 0x21f8\n  2664: a5 = a3 + 0x100\n  2668: a4 = u64 [a5 + 0x20]\n  2671: a1 = u64 [a5 + 0x18]\n  2674: a2 = u64 [a5 + 0x10]\n  2677: a0 = u64 [a5 + 0x8]\n  2680: t0 = 66, jump @1784\n      : @112 [@dyn 33] (gas: 1)\n  2686: jump @114 if a1 == 0\n      : @113 (gas: 1)\n  2689: jump @797\n      : @114 (gas: 9)\n  2692: u64 [a3 + 256] = 0\n  2696: u64 [a3 + 248] = 0\n  2700: a1 = u64 [s1 + 0x278]\n  2704: u64 [a3 + 0xe8] = a1\n  2708: a1 = s1 + 0x22e0\n  2712: u64 [a3 + 240] = 0\n  2716: u64 [s1 + 0x278] = a0\n  2720: ra = 0x22a\n  2724: jump @9\n      : @115 (gas: 9)\n  2727: u64 [a2 + 928] = 0\n  2731: u64 [a2 + 920] = 0\n  2735: u64 [a2 + 912] = 0\n  2739: u64 [a2 + 904] = 0\n  2743: a0 = s1 + 0x3000\n  2747: i32 a0 = a0 + 0xfffffffffffffd80\n  2751: ra = 0x44\n  2754: ecalli 16 // 'value_transferred'\n  2756: fallthrough\n      : @116 [@dyn 34] (gas: 3)\n  2757: a3 = s1 + 0x29f8\n  2761: a4 = a3 + 0x300\n  2765: t0 = 70, jump @1807\n      : @117 [@dyn 35] (gas: 1)\n  2771: jump @119 if a0 == 0\n      : @118 (gas: 1)\n  2774: jump @1105\n      : @119 (gas: 1)\n  2777: t0 = 72, jump @1808\n      : @120 [@dyn 36] (gas: 1)\n  2783: jump @122 if a1 <u a0\n      : @121 (gas: 1)\n  2786: jump @1106\n      : @122 (gas: 3)\n  2789: a0 = s1 + 0x15e0\n  2793: a1 = 0x40\n  2796: ra = 74, jump @7\n      : @123 [@dyn 37] (gas: 16)\n  2801: a1 = s1 + 0x11f8\n  2805: a0 = u64 [a1 + 0x400]\n  2809: u64 [s1 + 0x268] = a0\n  2813: a5 = a1 + 0x300\n  2817: a2 = u64 [a5 + 0xf8]\n  2821: u64 [s1 + 0x260] = a2\n  2825: a4 = u64 [a5 + 0xf0]\n  2829: u64 [s1 + 0x270] = a4\n  2833: a3 = u64 [a5 + 0xe8]\n  2837: u64 [s1 + 0x278] = a3\n  2841: u64 [a5 + 0xe0] = a0\n  2845: u64 [a5 + 0xd8] = a2\n  2849: u64 [a5 + 0xd0] = a4\n  2853: a0 = s1 + 0x15c0\n  2857: u64 [a5 + 0xc8] = a3\n  2861: ra = 76, jump @1443\n      : @124 [@dyn 38] (gas: 7)\n  2867: a3 = s1 + 0x200\n  2871: a0 = u64 [a3 + 0x68]\n  2874: a1 = u64 [a3 + 0x70]\n  2877: a0 = a0 | a1\n  2880: a2 = u64 [a3 + 0x60]\n  2883: a1 = u64 [a3 + 0x78]\n  2886: t0 = 78, jump @1823\n      : @125 [@dyn 39] (gas: 1)\n  2892: jump @127 if a0 == 0\n      : @126 (gas: 1)\n  2895: jump @797\n      : @127 (gas: 8)\n  2898: a0 = s1 + 0x11f8\n  2902: u64 [a0 + 960] = 0\n  2906: u64 [a0 + 952] = 0\n  2910: u64 [a0 + 944] = 0\n  2914: a1 = s1 + 0x15a0\n  2918: u64 [a0 + 936] = 0\n  2922: a0 = u64 [s1 + 0x278]\n  2926: ra = 80, jump @9\n      : @128 [@dyn 40] (gas: 12)\n  2931: a4 = s1 + 0x200\n  2935: a0 = u64 [a4 + 0x68]\n  2938: a2 = u64 [a4 + 0x60]\n  2941: a2 = a2 | a0\n  2944: a3 = 0x100000000\n  2954: a0 = 0xffffffe0\n  2964: a1 = u64 [a4 + 0x78]\n  2967: a0 = a1 <u a0\n  2970: a1 = u64 [a4 + 0x70]\n  2973: a0 = 0 if a1 != 0\n  2975: a0 = 0 if a2 != 0\n  2977: jump @130 if a0 != 0\n      : @129 (gas: 1)\n  2980: jump @797\n      : @130 (gas: 12)\n  2983: a0 = u64 [s1 + 0x278]\n  2987: i32 a0 = a0 + 0x20\n  2990: a1 = s1 + 0x11f8\n  2994: u64 [s1 + 0x268] = a2\n  2998: a2 = a1\n  3000: u64 [a1 + 928] = 0\n  3004: u64 [a1 + 920] = 0\n  3008: u64 [a1 + 912] = 0\n  3012: a1 = s1 + 0x1580\n  3016: u64 [a2 + 904] = 0\n  3020: u64 [s1 + 0x260] = a3\n  3024: ra = 82, jump @9\n      : @131 [@dyn 41] (gas: 4)\n  3029: a2 = s1 + 0x200\n  3033: a0 = u64 [a2 + 0x60]\n  3036: a0 = a0 + 0xffffffffffffffc0\n  3039: t0 = 84, jump @1797\n      : @132 [@dyn 42] (gas: 1)\n  3045: jump @134 if a0 != 0\n      : @133 (gas: 1)\n  3048: jump @797\n      : @134 (gas: 9)\n  3051: a0 = u64 [s1 + 0x278]\n  3055: i32 a0 = a0 + 0x40\n  3058: a2 = s1 + 0x11f8\n  3062: u64 [a2 + 896] = 0\n  3066: u64 [a2 + 888] = 0\n  3070: u64 [a2 + 880] = 0\n  3074: a1 = s1 + 0x1560\n  3078: u64 [a2 + 872] = 0\n  3082: ra = 86, jump @9\n      : @135 [@dyn 43] (gas: 3)\n  3087: a2 = 0x100000000\n  3097: a0 = 0xffffffa0\n  3107: t0 = 88, jump @1817\n      : @136 [@dyn 44] (gas: 1)\n  3113: jump @138 if a0 != 0\n      : @137 (gas: 1)\n  3116: jump @797\n      : @138 (gas: 11)\n  3119: a0 = u64 [s1 + 0x278]\n  3123: i32 a0 = a0 + 0x60\n  3126: a1 = s1 + 0x11f8\n  3130: u64 [s1 + 0x260] = a2\n  3134: a2 = a1\n  3136: u64 [a1 + 864] = 0\n  3140: u64 [a1 + 856] = 0\n  3144: u64 [a1 + 848] = 0\n  3148: a1 = s1 + 0x1540\n  3152: u64 [a2 + 840] = 0\n  3156: ra = 90, jump @9\n      : @139 [@dyn 45] (gas: 4)\n  3161: a2 = s1 + 0x200\n  3165: a0 = u64 [a2 + 0x60]\n  3168: a0 = a0 + 0xffffffffffffff80\n  3171: t0 = 92, jump @1797\n      : @140 [@dyn 46] (gas: 1)\n  3177: jump @142 if a0 != 0\n      : @141 (gas: 1)\n  3180: jump @797\n      : @142 (gas: 9)\n  3183: a0 = u64 [s1 + 0x278]\n  3187: i32 a0 = a0 + 0x80\n  3191: a2 = s1 + 0x11f8\n  3195: u64 [a2 + 832] = 0\n  3199: u64 [a2 + 824] = 0\n  3203: u64 [a2 + 816] = 0\n  3207: a1 = s1 + 0x1520\n  3211: u64 [a2 + 808] = 0\n  3215: ra = 94, jump @9\n      : @143 [@dyn 47] (gas: 3)\n  3220: a2 = 0x100000000\n  3230: a0 = 0xffffff60\n  3240: t0 = 96, jump @1817\n      : @144 [@dyn 48] (gas: 1)\n  3246: jump @146 if a0 != 0\n      : @145 (gas: 1)\n  3249: jump @797\n      : @146 (gas: 11)\n  3252: a0 = u64 [s1 + 0x278]\n  3256: i32 a0 = a0 + 0xa0\n  3260: a1 = s1 + 0x11f8\n  3264: u64 [s1 + 0x260] = a2\n  3268: a2 = a1\n  3270: u64 [a1 + 800] = 0\n  3274: u64 [a1 + 792] = 0\n  3278: u64 [a1 + 784] = 0\n  3282: a1 = s1 + 0x1500\n  3286: u64 [a2 + 776] = 0\n  3290: ra = 98, jump @9\n      : @147 [@dyn 49] (gas: 10)\n  3295: a3 = s1 + 0x200\n  3299: a2 = u64 [a3 + 0x68]\n  3302: a0 = u64 [a3 + 0x60]\n  3305: a0 = a0 + 0xffffffffffffff40\n  3309: a1 = u64 [a3 + 0x78]\n  3312: a0 = a1 <u a0\n  3315: a1 = u64 [a3 + 0x70]\n  3318: a0 = 0 if a1 != 0\n  3320: a0 = 0 if a2 != 0\n  3322: jump @149 if a0 != 0\n      : @148 (gas: 1)\n  3325: jump @797\n      : @149 (gas: 9)\n  3328: a0 = u64 [s1 + 0x278]\n  3332: i32 a0 = a0 + 0xc0\n  3336: a2 = s1 + 0x11f8\n  3340: u64 [a2 + 768] = 0\n  3344: u64 [a2 + 760] = 0\n  3348: u64 [a2 + 744] = 0x60\n  3353: a1 = s1 + 0x14e0\n  3357: u64 [a2 + 752] = 0\n  3361: ra = 100, jump @9\n      : @150 [@dyn 50] (gas: 3)\n  3366: a0 = 0xffffff20\n  3376: a2 = s1 + 0x200\n  3380: t0 = 102, jump @1797\n      : @151 [@dyn 51] (gas: 1)\n  3386: jump @153 if a0 != 0\n      : @152 (gas: 1)\n  3389: jump @797\n      : @153 (gas: 9)\n  3392: a0 = u64 [s1 + 0x278]\n  3396: i32 a0 = a0 + 0xe0\n  3400: a2 = s1 + 0x11f8\n  3404: u64 [a2 + 736] = 0\n  3408: u64 [a2 + 728] = 0\n  3412: u64 [a2 + 720] = 0\n  3416: a1 = s1 + 0x14c0\n  3420: u64 [a2 + 712] = 0\n  3424: ra = 104, jump @9\n      : @154 [@dyn 52] (gas: 23)\n  3429: a0 = sp + 0xffffffffffffffe0\n  3432: a0 = a0 & 0xffffffffffffffe0\n  3435: u64 [s1 + 0x278] = a0\n  3439: sp = a0\n  3441: a0 = s1 + 0x3000\n  3445: i32 a0 = a0 + 0xfffffffffffffda0\n  3449: a1 = 0x4\n  3452: ecalli 2 // 'call_data_load'\n  3454: a3 = s1 + 0x29f8\n  3458: a4 = a3 + 0x300\n  3462: a2 = u64 [a4 + 0xa8]\n  3466: a0 = u64 [a4 + 0xb0]\n  3470: a1 = u64 [a4 + 0xb8]\n  3474: a3 = u64 [a4 + 0xc0]\n  3478: a4 = s1 + 0x11f8\n  3482: a5 = a4 + 0x200\n  3486: u64 [a5 + 0x80] = a3\n  3490: u64 [a5 + 0x78] = a1\n  3493: u64 [a5 + 0x70] = a0\n  3496: a0 = s1 + 0x1480\n  3500: a1 = s1 + 0x1460\n  3504: u64 [a5 + 0x68] = a2\n  3507: ra = 106, jump @1373\n      : @155 [@dyn 53] (gas: 18)\n  3513: a2 = s1 + 0x11f8\n  3517: a5 = a2 + 0x200\n  3521: a0 = u64 [a5 + 0x98]\n  3525: a1 = u64 [a5 + 0xa0]\n  3529: a4 = u64 [a5 + 0x88]\n  3533: a3 = u64 [a5 + 0x90]\n  3537: u64 [s1 + 0x88] = a0\n  3541: a2 = u64 [s1 + 0x278]\n  3545: u64 [a2 + 0x10] = a0\n  3548: u64 [s1 + 0x80] = a1\n  3552: u64 [a2 + 0x18] = a1\n  3555: u64 [s1 + 0x70] = a4\n  3558: u64 [a2] = a4\n  3560: u64 [s1 + 0x78] = a3\n  3563: u64 [a2 + 0x8] = a3\n  3566: a0 = s1 + 0x1440\n  3570: a1 = 0x40\n  3573: ra = 108, jump @7\n      : @156 [@dyn 54] (gas: 17)\n  3578: a0 = s1 + 0x11f8\n  3582: a5 = a0 + 0x200\n  3586: a2 = u64 [a5 + 0x60]\n  3589: u64 [s1 + 0x270] = a2\n  3593: a1 = u64 [a5 + 0x58]\n  3596: u64 [s1 + 0x268] = a1\n  3600: a3 = u64 [a5 + 0x50]\n  3603: u64 [s1 + 0x90] = a3\n  3607: a4 = u64 [a5 + 0x48]\n  3610: u64 [s1 + 0x98] = a4\n  3614: u64 [a5 + 0x40] = a2\n  3617: u64 [a5 + 0x38] = a1\n  3620: u64 [a5 + 0x30] = a3\n  3623: a1 = a0\n  3625: a0 = s1 + 0x1420\n  3629: u64 [a1 + 0x228] = a4\n  3633: ra = 110, jump @1443\n      : @157 [@dyn 55] (gas: 3)\n  3639: a0 = s1 + 0x1400\n  3643: a1 = u64 [s1 + 0x278]\n  3647: ra = 112, jump @11\n      : @158 [@dyn 56] (gas: 12)\n  3652: a1 = u64 [s1 + 0x90]\n  3656: a0 = u64 [s1 + 0x98]\n  3660: a2 = u64 [s1 + 0x270]\n  3664: a2 = a2 | a1\n  3667: a4 = u64 [s1 + 0x268]\n  3671: a1 = a0 | a4\n  3674: a1 = a1 | a2\n  3677: a1 = a1 >> 0x20\n  3680: a2 = a2 | a4\n  3683: a2 = a2 << 0x20\n  3686: a1 = a1 | a2\n  3689: jump @160 if a1 == 0\n      : @159 (gas: 1)\n  3692: jump @797\n      : @160 (gas: 14)\n  3695: a4 = s1 + 0x11f8\n  3699: a5 = a4 + 0x200\n  3703: a3 = u64 [a5 + 0x18]\n  3706: a1 = u64 [a5 + 0x10]\n  3709: a2 = u64 [a5 + 0x8]\n  3712: a3 = a3 << 0x20\n  3715: a3 = a3 >> 0x20\n  3718: u64 [a4 + 512] = 0\n  3722: a5 = a4 + 0x100\n  3726: u64 [a5 + 0xe8] = a2\n  3730: u64 [a5 + 0xf0] = a1\n  3734: a1 = s1 + 0x13e0\n  3738: u64 [a5 + 0xf8] = a3\n  3742: ra = 114, jump @9\n      : @161 [@dyn 57] (gas: 21)\n  3747: a0 = u64 [s1 + 0x70]\n  3750: a0 = a0 + 0x1\n  3753: a1 = a0 <u 0x1\n  3756: a2 = u64 [s1 + 0x78]\n  3759: a1 = a1 + a2\n  3762: a2 = a0 | a1\n  3765: a2 = a2 <u 0x1\n  3768: a3 = u64 [s1 + 0x88]\n  3772: a2 = a2 + a3\n  3775: a3 = a2 <u a3\n  3778: a4 = u64 [s1 + 0x80]\n  3782: a3 = a3 + a4\n  3785: a4 = s1 + 0x29f8\n  3789: a5 = a4 + 0x300\n  3793: u64 [a5 + 0xd8] = a2\n  3797: u64 [a5 + 0xd0] = a1\n  3801: u64 [a5 + 0xc8] = a0\n  3805: u64 [a5 + 0xe0] = a3\n  3809: a0 = s1 + 0x13c0\n  3813: a1 = s1 + 0x2dc0\n  3817: ra = 116, jump @11\n      : @162 [@dyn 58] (gas: 14)\n  3822: a3 = u64 [s1 + 0x98]\n  3826: a4 = s1 + 0x200\n  3830: a0 = u64 [a4 + 0x70]\n  3833: a1 = u64 [a4 + 0x68]\n  3836: a2 = a1 | a0\n  3839: a0 = 0x100000000\n  3849: u64 [a4 + 0x78] = a0\n  3852: a0 = 0xffffffe0\n  3862: a0 = a3 <u a0\n  3865: a1 = u64 [s1 + 0x90]\n  3869: a0 = 0 if a1 != 0\n  3871: u64 [s1 + 0x68] = a2\n  3874: a0 = 0 if a2 != 0\n  3876: jump @164 if a0 != 0\n      : @163 (gas: 1)\n  3879: jump @797\n      : @164 (gas: 22)\n  3882: t0 = 0xffffffffffffffff\n  3885: a2 = 0xffffffff\n  3895: a4 = s1 + 0x11f8\n  3899: a5 = u64 [a4 + 0x1d8]\n  3903: t1 = u64 [a4 + 0x1d0]\n  3907: a1 = u64 [a4 + 0x1c8]\n  3911: a0 = u64 [a4 + 0x1e0]\n  3915: u64 [s1 + 0x268] = a0\n  3919: u64 [s1 + 0x60] = a2\n  3922: u64 [s1 + 0x270] = a5\n  3926: a2 = a2 & a5\n  3929: a5 = t1 & t0\n  3932: a1 = a1 & t0\n  3935: i32 a0 = a3 + 0x20\n  3938: u64 [a4 + 448] = 0\n  3942: a3 = a4 + 0x100\n  3946: u64 [a3 + 0xa8] = a1\n  3950: u64 [a3 + 0xb0] = a5\n  3954: a1 = s1 + 0x13a0\n  3958: u64 [a3 + 0xb8] = a2\n  3962: u64 [s1 + 0x58] = a0\n  3965: ra = 118, jump @9\n      : @165 [@dyn 59] (gas: 3)\n  3970: a0 = u64 [s1 + 0x278]\n  3974: a0 = a0 + 0xffffffffffffffc0\n  3977: t0 = 120, jump @1770\n      : @166 [@dyn 60] (gas: 1)\n  3983: jump @168 if a0 != 0\n      : @167 (gas: 1)\n  3986: jump @797\n      : @168 (gas: 15)\n  3989: a0 = 0xff00000000\n  3999: u64 [s1 + 0x118] = a0\n  4003: a1 = u64 [s1 + 0x270]\n  4007: a0 = a0 & a1\n  4010: a2 = a0 >u 0\n  4012: a0 = u64 [s1 + 0x98]\n  4016: i32 a0 = a0 + 0x40\n  4019: a3 = s1 + 0x11f8\n  4023: u64 [a3 + 416] = 0\n  4027: u64 [a3 + 408] = 0\n  4031: u64 [a3 + 400] = 0\n  4035: a1 = s1 + 0x1380\n  4039: u64 [a3 + 0x188] = a2\n  4043: u64 [s1 + 0x50] = a0\n  4046: ra = 122, jump @9\n      : @169 [@dyn 61] (gas: 4)\n  4051: a0 = 0x100000000\n  4061: u64 [s1 + 0x278] = a0\n  4065: a0 = 0xffffffa0\n  4075: t0 = 124, jump @1770\n      : @170 [@dyn 62] (gas: 1)\n  4081: jump @172 if a0 != 0\n      : @171 (gas: 1)\n  4084: jump @797\n      : @172 (gas: 15)\n  4087: a0 = u64 [s1 + 0x270]\n  4091: a0 = a0 >> 0x28\n  4094: a1 = u64 [s1 + 0x268]\n  4098: a1 = a1 << 0x18\n  4101: a2 = a0 | a1\n  4104: a0 = u64 [s1 + 0x98]\n  4108: i32 a0 = a0 + 0x60\n  4111: a3 = s1 + 0x11f8\n  4115: u64 [a3 + 384] = 0\n  4119: u64 [a3 + 376] = 0\n  4123: u64 [a3 + 368] = 0\n  4127: a1 = s1 + 0x1360\n  4131: u64 [a3 + 0x168] = a2\n  4135: u64 [s1 + 0x48] = a0\n  4138: ra = 126, jump @9\n      : @173 [@dyn 63] (gas: 3)\n  4143: a1 = u64 [s1 + 0x70]\n  4146: a0 = a1 + 0x2\n  4149: t0 = 128, jump @1789\n      : @174 [@dyn 64] (gas: 8)\n  4156: a5 = a4 + 0x300\n  4160: u64 [a5 + 0xf8] = a3\n  4164: u64 [a5 + 0xf0] = a2\n  4168: u64 [a5 + 0xe8] = a0\n  4172: u64 [a4 + 0x400] = a1\n  4176: a0 = s1 + 0x1340\n  4180: a1 = s1 + 0x2de0\n  4184: ra = 130, jump @11\n      : @175 [@dyn 65] (gas: 3)\n  4190: a0 = u64 [s1 + 0x278]\n  4194: a0 = a0 + 0xffffffffffffff80\n  4197: t0 = 132, jump @1770\n      : @176 [@dyn 66] (gas: 1)\n  4204: jump @178 if a0 != 0\n      : @177 (gas: 1)\n  4207: jump @797\n      : @178 (gas: 15)\n  4210: a3 = s1 + 0x11f8\n  4214: a4 = a3 + 0x100\n  4218: a0 = u64 [a4 + 0x48]\n  4221: a1 = u64 [a4 + 0x50]\n  4224: u64 [s1 + 0x278] = a1\n  4228: a2 = a0 & 0xffffffffffffffff\n  4231: a0 = u64 [s1 + 0x98]\n  4235: i32 a0 = a0 + 0x80\n  4239: u64 [a3 + 320] = 0\n  4243: u64 [a3 + 312] = 0\n  4247: u64 [a3 + 304] = 0\n  4251: a1 = s1 + 0x1320\n  4255: u64 [a4 + 0x28] = a2\n  4258: u64 [s1 + 0x40] = a0\n  4261: ra = 134, jump @9\n      : @179 [@dyn 67] (gas: 2)\n  4267: a0 = 0xffffff60\n  4277: t0 = 136, jump @1770\n      : @180 [@dyn 68] (gas: 1)\n  4284: jump @182 if a0 != 0\n      : @181 (gas: 1)\n  4287: jump @797\n      : @182 (gas: 12)\n  4290: a2 = u64 [s1 + 0x278]\n  4294: a2 = a2 & 0xffffffffffffffff\n  4297: a1 = u64 [s1 + 0x98]\n  4301: i32 a0 = a1 + 0xa0\n  4305: a3 = s1 + 0x11f8\n  4309: u64 [a3 + 288] = 0\n  4313: u64 [a3 + 280] = 0\n  4317: u64 [a3 + 272] = 0\n  4321: a1 = s1 + 0x1300\n  4325: u64 [a3 + 0x108] = a2\n  4329: u64 [s1 + 0x18] = a0\n  4332: ra = 138, jump @9\n      : @183 [@dyn 69] (gas: 31)\n  4338: a0 = sp + 0xffffffffffffffe0\n  4341: a5 = a0 & 0xffffffffffffffe0\n  4344: sp = a5\n  4346: a0 = u64 [s1 + 0x70]\n  4349: a2 = a0 + 0x3\n  4352: a0 = a2 <u a0\n  4355: a1 = u64 [s1 + 0x78]\n  4358: a3 = a1 + a0\n  4361: a1 = a3 <u a1\n  4364: a1 = a0 if a0 == 0\n  4367: a0 = u64 [s1 + 0x88]\n  4371: a4 = a0 + a1\n  4374: a0 = a4 <u a0\n  4377: a1 = u64 [s1 + 0x80]\n  4381: a0 = a0 + a1\n  4384: u64 [s1 + 0x250] = a0\n  4388: u64 [s1 + 0x270] = a5\n  4392: u64 [a5 + 0x18] = a0\n  4395: u64 [s1 + 0x258] = a4\n  4399: u64 [a5 + 0x10] = a4\n  4402: u64 [s1 + 0x260] = a3\n  4406: u64 [a5 + 0x8] = a3\n  4409: u64 [s1 + 0x268] = a2\n  4413: u64 [a5] = a2\n  4415: a0 = sp + 0xffffffffffffffe0\n  4418: a0 = a0 & 0xffffffffffffffe0\n  4421: u64 [s1 + 0x278] = a0\n  4425: sp = a0\n  4427: a0 = s1 + 0x12e0\n  4431: a1 = 0x40\n  4434: ra = 140, jump @7\n      : @184 [@dyn 70] (gas: 17)\n  4440: a3 = s1 + 0x11f8\n  4444: a1 = u64 [a3 + 0xf8]\n  4448: a0 = u64 [a3 + 0x100]\n  4452: a2 = u64 [a3 + 0xe8]\n  4456: a3 = u64 [a3 + 0xf0]\n  4460: u64 [s1 + 0x30] = a1\n  4463: a4 = u64 [s1 + 0x278]\n  4467: u64 [a4 + 0x10] = a1\n  4470: u64 [s1 + 0x38] = a0\n  4473: u64 [a4 + 0x18] = a0\n  4476: u64 [s1 + 0x28] = a2\n  4479: u64 [a4] = a2\n  4481: u64 [s1 + 0x20] = a3\n  4484: u64 [a4 + 0x8] = a3\n  4487: a0 = s1 + 0x12c0\n  4491: a1 = u64 [s1 + 0x270]\n  4495: ra = 142, jump @11\n      : @185 [@dyn 71] (gas: 2)\n  4501: a0 = u64 [s1 + 0x278]\n  4505: t0 = 144, jump @1781\n      : @186 [@dyn 72] (gas: 1)\n  4512: jump @188 if a1 == 0\n      : @187 (gas: 1)\n  4515: jump @797\n      : @188 (gas: 15)\n  4518: a5 = s1 + 0x11f8\n  4522: a2 = u64 [a5 + 0xe0]\n  4526: a1 = u64 [a5 + 0xd8]\n  4530: a3 = u64 [a5 + 0xd0]\n  4534: a4 = u64 [a5 + 0xc8]\n  4538: u64 [s1 + 0x110] = a4\n  4542: u64 [a5 + 0xa8] = a4\n  4546: u64 [s1 + 0xf8] = a3\n  4550: u64 [a5 + 0xb0] = a3\n  4554: u64 [s1 + 0x108] = a1\n  4558: u64 [a5 + 0xb8] = a1\n  4562: a1 = s1 + 0x12a0\n  4566: u64 [s1 + 0x100] = a2\n  4570: u64 [a5 + 0xc0] = a2\n  4574: ra = 146, jump @9\n      : @189 [@dyn 73] (gas: 31)\n  4580: a1 = u64 [s1 + 0x278]\n  4584: a0 = u64 [a1]\n  4586: t0 = u64 [a1 + 0x18]\n  4589: a2 = u64 [a1 + 0x8]\n  4592: a3 = u64 [a1 + 0x10]\n  4595: a4 = a0 + 0x20\n  4598: a0 = a4 <u a0\n  4601: a5 = a2 + a0\n  4604: a2 = a5 <u a2\n  4607: a2 = a0 if a0 == 0\n  4610: a2 = a2 + a3\n  4613: a0 = a2 <u a3\n  4616: a0 = a0 + t0\n  4619: u64 [a1] = a4\n  4621: u64 [a1 + 0x8] = a5\n  4624: u64 [a1 + 0x10] = a2\n  4627: u64 [a1 + 0x18] = a0\n  4630: a3 = s1 + 0x200\n  4634: a0 = u64 [a3 + 0x50]\n  4637: a1 = s1 + 0x11f8\n  4641: u64 [a1 + 0xa0] = a0\n  4645: a0 = u64 [a3 + 0x58]\n  4648: u64 [a1 + 0x98] = a0\n  4652: a0 = u64 [a3 + 0x60]\n  4655: u64 [a1 + 0x90] = a0\n  4659: a2 = a1\n  4661: a1 = s1 + 0x1280\n  4665: a0 = u64 [a3 + 0x68]\n  4668: u64 [a2 + 0x88] = a0\n  4672: a0 = 0\n  4674: ra = 148, jump @9\n      : @190 [@dyn 74] (gas: 6)\n  4680: a0 = sp + 0xffffffffffffffe0\n  4683: a0 = a0 & 0xffffffffffffffe0\n  4686: u64 [s1 + 0xc0] = a0\n  4690: sp = a0\n  4692: a1 = i32 [0x201f0]\n  4697: jump @192 if a1 >u 31\n      : @191 (gas: 2)\n  4701: u32 [0x201f0] = 0x20\n  4707: fallthrough\n      : @192 (gas: 41)\n  4708: a1 = 0xff000000000000\n  4718: u64 [s1 + 0xf0] = a1\n  4722: a1 = 0xff0000000000\n  4732: u64 [s1 + 0xe8] = a1\n  4736: a1 = 0xff00000000\n  4746: u64 [s1 + 0xe0] = a1\n  4750: a0 = 0xff000000\n  4760: u64 [s1 + 0xd8] = a0\n  4764: u64 [s1 + 208] = 0xff00\n  4771: a0 = 0xff00000000000000\n  4781: u64 [s1 + 0xc8] = a0\n  4785: a0 = sp + 0xffffffffffffffe0\n  4788: a2 = a0 & 0xffffffffffffffe0\n  4791: u64 [s1 + 0x270] = a2\n  4795: sp = a2\n  4797: a0 = 0x20200\n  4802: i32 a0 = a0 + 0\n  4804: i32 a2 = a2 + 0\n  4806: a1 = 0x20\n  4809: ecalli 8 // 'hash_keccak_256'\n  4811: a2 = 0\n  4813: t1 = 0\n  4815: t0 = 0\n  4817: a1 = 0\n  4819: a3 = u64 [s1 + 0x270]\n  4823: a5 = u64 [a3 + 0x18]\n  4826: a4 = u64 [a3 + 0x10]\n  4829: a0 = u64 [a3 + 0x8]\n  4832: t2 = u64 [a3]\n  4834: a3 = reverse a5\n  4836: a5 = reverse a4\n  4838: a4 = reverse a0\n  4840: a0 = reverse t2\n  4842: t2 = u64 [s1 + 0xc0]\n  4846: u64 [t2 + 0x18] = a0\n  4849: u64 [s1 + 0x120] = a4\n  4853: u64 [t2 + 0x10] = a4\n  4856: a4 = t2\n  4858: u64 [a4 + 0x8] = a5\n  4861: u64 [a4] = a3\n  4863: fallthrough\n      : @193 (gas: 33)\n  4864: u64 [s1 + 0x128] = a0\n  4868: u64 [s1 + 0x130] = a5\n  4872: u64 [s1 + 0x138] = a3\n  4876: u64 [s1 + 0x190] = a2\n  4880: a0 = a2 | 0x1f\n  4883: u64 [s1 + 0x270] = a0\n  4887: a0 = u64 [s1 + 0xf8]\n  4891: a5 = t1 ^ a0\n  4894: a3 = u64 [s1 + 0x108]\n  4898: ra = t0 <u a3\n  4901: a4 = u64 [s1 + 0x100]\n  4905: a2 = a1 ^ a4\n  4908: u64 [s1 + 0x180] = a1\n  4912: a4 = a1 <u a4\n  4915: a4 = ra if a2 == 0\n  4918: u64 [s1 + 0x170] = t0\n  4922: a1 = t0 ^ a3\n  4925: a2 = a2 | a1\n  4928: u64 [s1 + 0x178] = t1\n  4932: a0 = t1 <u a0\n  4935: a1 = u64 [s1 + 0x110]\n  4939: a3 = u64 [s1 + 0x270]\n  4943: a1 = a3 <u a1\n  4946: u64 [s1 + 0xb8] = a5\n  4950: u64 [s1 + 0xa0] = a0\n  4954: a1 = a0 if a5 != 0\n  4957: u64 [s1 + 0xb0] = a4\n  4961: u64 [s1 + 0xa8] = a2\n  4965: a1 = a4 if a2 != 0\n  4968: u64 [s1 + 0x270] = a1\n  4972: a0 = s1 + 0x1260\n  4976: a1 = t2\n  4978: ra = 150, jump @11\n      : @194 [@dyn 75] (gas: 83)\n  4984: a1 = s1 + 0x11f8\n  4988: a0 = u64 [a1 + 0x68]\n  4991: a1 = u64 [a1 + 0x70]\n  4994: a3 = a0 & 0xff\n  4998: u64 [s1 + 0x268] = a3\n  5002: a4 = u64 [s1 + 0xd0]\n  5006: a3 = a0 & a4\n  5009: u64 [s1 + 0x260] = a3\n  5013: a3 = a0 & 0xff0000\n  5019: u64 [s1 + 0x258] = a3\n  5023: t1 = u64 [s1 + 0xd8]\n  5027: a3 = a0 & t1\n  5030: u64 [s1 + 0x250] = a3\n  5034: t0 = u64 [s1 + 0xe0]\n  5038: a3 = a0 & t0\n  5041: u64 [s1 + 0x248] = a3\n  5045: a5 = u64 [s1 + 0xe8]\n  5049: a3 = a0 & a5\n  5052: u64 [s1 + 0x240] = a3\n  5056: ra = u64 [s1 + 0xf0]\n  5060: a3 = a0 & ra\n  5063: u64 [s1 + 0x238] = a3\n  5067: t2 = u64 [s1 + 0xc8]\n  5071: a0 = a0 & t2\n  5074: u64 [s1 + 0x230] = a0\n  5078: a2 = s1 + 0x11f8\n  5082: a0 = u64 [a2 + 0x78]\n  5085: a3 = a1 & 0xff\n  5089: u64 [s1 + 0x228] = a3\n  5093: a3 = a1 & a4\n  5096: u64 [s1 + 0x220] = a3\n  5100: a3 = a1 & 0xff0000\n  5106: u64 [s1 + 0x218] = a3\n  5110: a3 = a1 & t1\n  5113: u64 [s1 + 0x210] = a3\n  5117: a3 = a1 & t0\n  5120: u64 [s1 + 0x208] = a3\n  5124: a3 = a1 & a5\n  5127: u64 [s1 + 0x200] = a3\n  5131: a3 = a1 & ra\n  5134: u64 [s1 + 0x1f8] = a3\n  5138: a1 = a1 & t2\n  5141: u64 [s1 + 0x1f0] = a1\n  5145: a1 = u64 [a2 + 0x80]\n  5149: a2 = a0 & 0xff\n  5153: u64 [s1 + 0x1e8] = a2\n  5157: a2 = a0 & a4\n  5160: u64 [s1 + 0x1e0] = a2\n  5164: a2 = a0 & 0xff0000\n  5170: u64 [s1 + 0x1d8] = a2\n  5174: a2 = a0 & t1\n  5177: u64 [s1 + 0x1d0] = a2\n  5181: a2 = u64 [s1 + 0x118]\n  5185: a2 = a2 & a0\n  5188: u64 [s1 + 0x1c8] = a2\n  5192: a2 = a0 & a5\n  5195: u64 [s1 + 0x1c0] = a2\n  5199: a3 = ra\n  5201: a2 = a0 & ra\n  5204: u64 [s1 + 0x1b8] = a2\n  5208: a2 = a0 & t2\n  5211: u64 [s1 + 0x1b0] = a2\n  5215: a2 = a1 & 0xff\n  5219: u64 [s1 + 0x1a8] = a2\n  5223: ra = a1 & a4\n  5226: t2 = a1 & 0xff0000\n  5232: t1 = a1 & t1\n  5235: t0 = a1 & t0\n  5238: a5 = a5 & a1\n  5241: a3 = a3 & a1\n  5244: a2 = a1 >> 0x38\n  5247: a4 = u64 [s1 + 0x270]\n  5251: u64 [s1 + 0x150] = a0\n  5255: a0 = s1 + 0x100\n  5259: u64 [a0 + 0x48] = a1\n  5262: u64 [a0 + 0x40] = a2\n  5265: u64 [a0 + 0x58] = a3\n  5268: u64 [a0 + 0x60] = a5\n  5271: u64 [s1 + 0x168] = t0\n  5275: u64 [s1 + 0x188] = t1\n  5279: u64 [s1 + 0x198] = t2\n  5283: u64 [s1 + 0x1a0] = ra\n  5287: jump @196 if a4 != 0\n      : @195 (gas: 1)\n  5290: jump @800\n      : @196 (gas: 2)\n  5293: a0 = u64 [s1 + 0x278]\n  5297: t0 = 152, jump @1781\n      : @197 [@dyn 76] (gas: 3)\n  5304: a2 = s1 + 0x7ff\n  5308: a2 = a2 + 0x1f9\n  5312: jump @199 if a1 == 0\n      : @198 (gas: 1)\n  5315: jump @797\n      : @199 (gas: 9)\n  5318: a1 = u64 [s1 + 0x268]\n  5322: a1 = a1 >u 0\n  5324: u64 [a2 + 256] = 0\n  5328: u64 [a2 + 248] = 0\n  5332: u64 [a2 + 0xe8] = a1\n  5336: a1 = s1 + 0x7ff\n  5340: a1 = a1 + 0x2e1\n  5344: u64 [a2 + 240] = 0\n  5348: ra = 154, jump @9\n      : @200 [@dyn 77] (gas: 1)\n  5354: t0 = 156, jump @1756\n      : @201 [@dyn 78] (gas: 2)\n  5361: a0 = a1 + 0x20\n  5364: t0 = 158, jump @1753\n      : @202 [@dyn 79] (gas: 1)\n  5371: jump @204 if a1 == 0\n      : @203 (gas: 1)\n  5374: jump @797\n      : @204 (gas: 2)\n  5377: a1 = u64 [s1 + 0x260]\n  5381: t0 = 160, jump @1778\n      : @205 [@dyn 80] (gas: 7)\n  5388: u64 [a2 + 0xe0] = a3\n  5392: u64 [a2 + 0xd8] = a3\n  5396: u64 [a2 + 0xc8] = a1\n  5400: a1 = s1 + 0x7ff\n  5404: a1 = a1 + 0x2c1\n  5408: u64 [a2 + 0xd0] = a3\n  5412: ra = 162, jump @9\n      : @206 [@dyn 81] (gas: 1)\n  5418: t0 = 164, jump @1756\n      : @207 [@dyn 82] (gas: 2)\n  5425: a0 = a1 + 0x40\n  5428: t0 = 166, jump @1753\n      : @208 [@dyn 83] (gas: 1)\n  5435: jump @210 if a1 == 0\n      : @209 (gas: 1)\n  5438: jump @797\n      : @210 (gas: 2)\n  5441: a1 = u64 [s1 + 0x258]\n  5445: t0 = 168, jump @1778\n      : @211 [@dyn 84] (gas: 7)\n  5452: u64 [a2 + 0xc0] = a3\n  5456: u64 [a2 + 0xb8] = a3\n  5460: u64 [a2 + 0xa8] = a1\n  5464: a1 = s1 + 0x7ff\n  5468: a1 = a1 + 0x2a1\n  5472: u64 [a2 + 0xb0] = a3\n  5476: ra = 170, jump @9\n      : @212 [@dyn 85] (gas: 1)\n  5482: t0 = 172, jump @1756\n      : @213 [@dyn 86] (gas: 2)\n  5489: a0 = a1 + 0x60\n  5492: t0 = 174, jump @1753\n      : @214 [@dyn 87] (gas: 1)\n  5499: jump @216 if a1 == 0\n      : @215 (gas: 1)\n  5502: jump @797\n      : @216 (gas: 2)\n  5505: a1 = u64 [s1 + 0x250]\n  5509: t0 = 176, jump @1778\n      : @217 [@dyn 88] (gas: 7)\n  5516: u64 [a2 + 0xa0] = a3\n  5520: u64 [a2 + 0x98] = a3\n  5524: u64 [a2 + 0x88] = a1\n  5528: a1 = s1 + 0x7ff\n  5532: a1 = a1 + 0x281\n  5536: u64 [a2 + 0x90] = a3\n  5540: ra = 178, jump @9\n      : @218 [@dyn 89] (gas: 1)\n  5546: t0 = 180, jump @1756\n      : @219 [@dyn 90] (gas: 2)\n  5553: a0 = a1 + 0x80\n  5557: t0 = 182, jump @1753\n      : @220 [@dyn 91] (gas: 1)\n  5564: jump @222 if a1 == 0\n      : @221 (gas: 1)\n  5567: jump @797\n      : @222 (gas: 2)\n  5570: a1 = u64 [s1 + 0x248]\n  5574: t0 = 184, jump @1778\n      : @223 [@dyn 92] (gas: 7)\n  5581: u64 [a2 + 0x80] = a3\n  5585: u64 [a2 + 0x78] = a3\n  5588: u64 [a2 + 0x68] = a1\n  5591: a1 = s1 + 0x7ff\n  5595: a1 = a1 + 0x261\n  5599: u64 [a2 + 0x70] = a3\n  5602: ra = 186, jump @9\n      : @224 [@dyn 93] (gas: 1)\n  5608: t0 = 188, jump @1756\n      : @225 [@dyn 94] (gas: 2)\n  5615: a0 = a1 + 0xa0\n  5619: t0 = 190, jump @1753\n      : @226 [@dyn 95] (gas: 1)\n  5626: jump @228 if a1 == 0\n      : @227 (gas: 1)\n  5629: jump @797\n      : @228 (gas: 2)\n  5632: a1 = u64 [s1 + 0x240]\n  5636: t0 = 192, jump @1778\n      : @229 [@dyn 96] (gas: 7)\n  5643: u64 [a2 + 0x60] = a3\n  5646: u64 [a2 + 0x58] = a3\n  5649: u64 [a2 + 0x48] = a1\n  5652: a1 = s1 + 0x7ff\n  5656: a1 = a1 + 0x241\n  5660: u64 [a2 + 0x50] = a3\n  5663: ra = 194, jump @9\n      : @230 [@dyn 97] (gas: 1)\n  5669: t0 = 196, jump @1756\n      : @231 [@dyn 98] (gas: 2)\n  5676: a0 = a1 + 0xc0\n  5680: t0 = 198, jump @1753\n      : @232 [@dyn 99] (gas: 1)\n  5687: jump @234 if a1 == 0\n      : @233 (gas: 1)\n  5690: jump @797\n      : @234 (gas: 2)\n  5693: a1 = u64 [s1 + 0x238]\n  5697: t0 = 200, jump @1778\n      : @235 [@dyn 100] (gas: 7)\n  5704: u64 [a2 + 0x40] = a3\n  5707: u64 [a2 + 0x38] = a3\n  5710: u64 [a2 + 0x28] = a1\n  5713: a1 = s1 + 0x7ff\n  5717: a1 = a1 + 0x221\n  5721: u64 [a2 + 0x30] = a3\n  5724: ra = 202, jump @9\n      : @236 [@dyn 101] (gas: 1)\n  5730: t0 = 204, jump @1756\n      : @237 [@dyn 102] (gas: 2)\n  5737: a0 = a1 + 0xe0\n  5741: t0 = 206, jump @1753\n      : @238 [@dyn 103] (gas: 1)\n  5748: jump @240 if a1 == 0\n      : @239 (gas: 1)\n  5751: jump @797\n      : @240 (gas: 2)\n  5754: a1 = u64 [s1 + 0x230]\n  5758: t0 = 208, jump @1778\n      : @241 [@dyn 104] (gas: 7)\n  5765: u64 [a2 + 0x20] = a3\n  5768: u64 [a2 + 0x18] = a3\n  5771: u64 [a2 + 0x8] = a1\n  5774: a1 = s1 + 0x7ff\n  5778: a1 = a1 + 0x201\n  5782: u64 [a2 + 0x10] = a3\n  5785: ra = 210, jump @9\n      : @242 [@dyn 105] (gas: 1)\n  5791: t0 = 212, jump @1756\n      : @243 [@dyn 106] (gas: 2)\n  5798: a0 = a1 + 0x100\n  5802: t0 = 214, jump @1753\n      : @244 [@dyn 107] (gas: 1)\n  5809: jump @246 if a1 == 0\n      : @245 (gas: 1)\n  5812: jump @797\n      : @246 (gas: 2)\n  5815: a1 = u64 [s1 + 0x228]\n  5819: t0 = 216, jump @1757\n      : @247 [@dyn 108] (gas: 9)\n  5826: u64 [a2 + 0] = 0\n  5828: u64 [a2 + 4294967288] = 0\n  5831: a2 = s1 + 0x1000\n  5835: u64 [a2 + 0xfffffffffffff9e0] = a1\n  5839: a1 = s1 + 0x7ff\n  5843: a1 = a1 + 0x1e1\n  5847: a2 = s1 + 0x1000\n  5851: u64 [a2 + 4294965736] = 0\n  5855: ra = 218, jump @9\n      : @248 [@dyn 109] (gas: 1)\n  5861: t0 = 220, jump @1756\n      : @249 [@dyn 110] (gas: 2)\n  5868: a0 = a1 + 0x120\n  5872: t0 = 222, jump @1753\n      : @250 [@dyn 111] (gas: 1)\n  5879: jump @252 if a1 == 0\n      : @251 (gas: 1)\n  5882: jump @797\n      : @252 (gas: 13)\n  5885: a1 = u64 [s1 + 0x220]\n  5889: a1 = a1 >u 0\n  5891: a2 = s1 + 0x1000\n  5895: u64 [a2 + 4294965720] = 0\n  5899: a2 = s1 + 0x1000\n  5903: u64 [a2 + 4294965712] = 0\n  5907: a2 = s1 + 0x1000\n  5911: u64 [a2 + 0xfffffffffffff9c0] = a1\n  5915: a1 = s1 + 0x7ff\n  5919: a1 = a1 + 0x1c1\n  5923: a2 = s1 + 0x1000\n  5927: u64 [a2 + 4294965704] = 0\n  5931: ra = 224, jump @9\n      : @253 [@dyn 112] (gas: 1)\n  5937: t0 = 226, jump @1756\n      : @254 [@dyn 113] (gas: 2)\n  5944: a0 = a1 + 0x140\n  5948: t0 = 228, jump @1753\n      : @255 [@dyn 114] (gas: 1)\n  5955: jump @257 if a1 == 0\n      : @256 (gas: 1)\n  5958: jump @797\n      : @257 (gas: 13)\n  5961: a1 = u64 [s1 + 0x218]\n  5965: a1 = a1 >u 0\n  5967: a2 = s1 + 0x1000\n  5971: u64 [a2 + 4294965688] = 0\n  5975: a2 = s1 + 0x1000\n  5979: u64 [a2 + 4294965680] = 0\n  5983: a2 = s1 + 0x1000\n  5987: u64 [a2 + 0xfffffffffffff9a0] = a1\n  5991: a1 = s1 + 0x7ff\n  5995: a1 = a1 + 0x1a1\n  5999: a2 = s1 + 0x1000\n  6003: u64 [a2 + 4294965672] = 0\n  6007: ra = 230, jump @9\n      : @258 [@dyn 115] (gas: 1)\n  6013: t0 = 232, jump @1756\n      : @259 [@dyn 116] (gas: 2)\n  6020: a0 = a1 + 0x160\n  6024: t0 = 234, jump @1753\n      : @260 [@dyn 117] (gas: 1)\n  6031: jump @262 if a1 == 0\n      : @261 (gas: 1)\n  6034: jump @797\n      : @262 (gas: 13)\n  6037: a1 = u64 [s1 + 0x210]\n  6041: a1 = a1 >u 0\n  6043: a2 = s1 + 0x1000\n  6047: u64 [a2 + 4294965656] = 0\n  6051: a2 = s1 + 0x1000\n  6055: u64 [a2 + 4294965648] = 0\n  6059: a2 = s1 + 0x1000\n  6063: u64 [a2 + 0xfffffffffffff980] = a1\n  6067: a1 = s1 + 0x7ff\n  6071: a1 = a1 + 0x181\n  6075: a2 = s1 + 0x1000\n  6079: u64 [a2 + 4294965640] = 0\n  6083: ra = 236, jump @9\n      : @263 [@dyn 118] (gas: 1)\n  6089: t0 = 238, jump @1756\n      : @264 [@dyn 119] (gas: 2)\n  6096: a0 = a1 + 0x180\n  6100: t0 = 240, jump @1753\n      : @265 [@dyn 120] (gas: 1)\n  6107: jump @267 if a1 == 0\n      : @266 (gas: 1)\n  6110: jump @797\n      : @267 (gas: 13)\n  6113: a1 = u64 [s1 + 0x208]\n  6117: a1 = a1 >u 0\n  6119: a2 = s1 + 0x1000\n  6123: u64 [a2 + 4294965624] = 0\n  6127: a2 = s1 + 0x1000\n  6131: u64 [a2 + 4294965616] = 0\n  6135: a2 = s1 + 0x1000\n  6139: u64 [a2 + 0xfffffffffffff960] = a1\n  6143: a1 = s1 + 0x7ff\n  6147: a1 = a1 + 0x161\n  6151: a2 = s1 + 0x1000\n  6155: u64 [a2 + 4294965608] = 0\n  6159: ra = 242, jump @9\n      : @268 [@dyn 121] (gas: 1)\n  6165: t0 = 244, jump @1756\n      : @269 [@dyn 122] (gas: 2)\n  6172: a0 = a1 + 0x1a0\n  6176: t0 = 246, jump @1753\n      : @270 [@dyn 123] (gas: 1)\n  6183: jump @272 if a1 == 0\n      : @271 (gas: 1)\n  6186: jump @797\n      : @272 (gas: 13)\n  6189: a1 = u64 [s1 + 0x200]\n  6193: a1 = a1 >u 0\n  6195: a2 = s1 + 0x1000\n  6199: u64 [a2 + 4294965592] = 0\n  6203: a2 = s1 + 0x1000\n  6207: u64 [a2 + 4294965584] = 0\n  6211: a2 = s1 + 0x1000\n  6215: u64 [a2 + 0xfffffffffffff940] = a1\n  6219: a1 = s1 + 0x7ff\n  6223: a1 = a1 + 0x141\n  6227: a2 = s1 + 0x1000\n  6231: u64 [a2 + 4294965576] = 0\n  6235: ra = 248, jump @9\n      : @273 [@dyn 124] (gas: 1)\n  6241: t0 = 250, jump @1756\n      : @274 [@dyn 125] (gas: 2)\n  6248: a0 = a1 + 0x1c0\n  6252: t0 = 252, jump @1753\n      : @275 [@dyn 126] (gas: 1)\n  6259: jump @277 if a1 == 0\n      : @276 (gas: 1)\n  6262: jump @797\n      : @277 (gas: 13)\n  6265: a1 = u64 [s1 + 0x1f8]\n  6269: a1 = a1 >u 0\n  6271: a2 = s1 + 0x1000\n  6275: u64 [a2 + 4294965560] = 0\n  6279: a2 = s1 + 0x1000\n  6283: u64 [a2 + 4294965552] = 0\n  6287: a2 = s1 + 0x1000\n  6291: u64 [a2 + 0xfffffffffffff920] = a1\n  6295: a1 = s1 + 0x7ff\n  6299: a1 = a1 + 0x121\n  6303: a2 = s1 + 0x1000\n  6307: u64 [a2 + 4294965544] = 0\n  6311: ra = 254, jump @9\n      : @278 [@dyn 127] (gas: 1)\n  6317: t0 = 256, jump @1756\n      : @279 [@dyn 128] (gas: 2)\n  6324: a0 = a1 + 0x1e0\n  6328: t0 = 258, jump @1753\n      : @280 [@dyn 129] (gas: 1)\n  6335: jump @282 if a1 == 0\n      : @281 (gas: 1)\n  6338: jump @797\n      : @282 (gas: 13)\n  6341: a1 = u64 [s1 + 0x1f0]\n  6345: a1 = a1 >u 0\n  6347: a2 = s1 + 0x1000\n  6351: u64 [a2 + 4294965528] = 0\n  6355: a2 = s1 + 0x1000\n  6359: u64 [a2 + 4294965520] = 0\n  6363: a2 = s1 + 0x1000\n  6367: u64 [a2 + 0xfffffffffffff900] = a1\n  6371: a1 = s1 + 0x7ff\n  6375: a1 = a1 + 0x101\n  6379: a2 = s1 + 0x1000\n  6383: u64 [a2 + 4294965512] = 0\n  6387: ra = 260, jump @9\n      : @283 [@dyn 130] (gas: 1)\n  6393: t0 = 262, jump @1756\n      : @284 [@dyn 131] (gas: 2)\n  6400: a0 = a1 + 0x200\n  6404: t0 = 264, jump @1753\n      : @285 [@dyn 132] (gas: 1)\n  6411: jump @287 if a1 == 0\n      : @286 (gas: 1)\n  6414: jump @797\n      : @287 (gas: 13)\n  6417: a1 = u64 [s1 + 0x1e8]\n  6421: a1 = a1 >u 0\n  6423: a2 = s1 + 0x1000\n  6427: u64 [a2 + 4294965496] = 0\n  6431: a2 = s1 + 0x1000\n  6435: u64 [a2 + 4294965488] = 0\n  6439: a2 = s1 + 0x1000\n  6443: u64 [a2 + 0xfffffffffffff8e0] = a1\n  6447: a1 = s1 + 0x7ff\n  6451: a1 = a1 + 0xe1\n  6455: a2 = s1 + 0x1000\n  6459: u64 [a2 + 4294965480] = 0\n  6463: ra = 266, jump @9\n      : @288 [@dyn 133] (gas: 1)\n  6469: t0 = 268, jump @1756\n      : @289 [@dyn 134] (gas: 2)\n  6476: a0 = a1 + 0x220\n  6480: t0 = 270, jump @1753\n      : @290 [@dyn 135] (gas: 1)\n  6487: jump @292 if a1 == 0\n      : @291 (gas: 1)\n  6490: jump @797\n      : @292 (gas: 13)\n  6493: a1 = u64 [s1 + 0x1e0]\n  6497: a1 = a1 >u 0\n  6499: a2 = s1 + 0x1000\n  6503: u64 [a2 + 4294965464] = 0\n  6507: a2 = s1 + 0x1000\n  6511: u64 [a2 + 4294965456] = 0\n  6515: a2 = s1 + 0x1000\n  6519: u64 [a2 + 0xfffffffffffff8c0] = a1\n  6523: a1 = s1 + 0x7ff\n  6527: a1 = a1 + 0xc1\n  6531: a2 = s1 + 0x1000\n  6535: u64 [a2 + 4294965448] = 0\n  6539: ra = 272, jump @9\n      : @293 [@dyn 136] (gas: 1)\n  6545: t0 = 274, jump @1756\n      : @294 [@dyn 137] (gas: 2)\n  6552: a0 = a1 + 0x240\n  6556: t0 = 276, jump @1753\n      : @295 [@dyn 138] (gas: 1)\n  6563: jump @297 if a1 == 0\n      : @296 (gas: 1)\n  6566: jump @797\n      : @297 (gas: 13)\n  6569: a1 = u64 [s1 + 0x1d8]\n  6573: a1 = a1 >u 0\n  6575: a2 = s1 + 0x1000\n  6579: u64 [a2 + 4294965432] = 0\n  6583: a2 = s1 + 0x1000\n  6587: u64 [a2 + 4294965424] = 0\n  6591: a2 = s1 + 0x1000\n  6595: u64 [a2 + 0xfffffffffffff8a0] = a1\n  6599: a1 = s1 + 0x7ff\n  6603: a1 = a1 + 0xa1\n  6607: a2 = s1 + 0x1000\n  6611: u64 [a2 + 4294965416] = 0\n  6615: ra = 278, jump @9\n      : @298 [@dyn 139] (gas: 1)\n  6621: t0 = 280, jump @1756\n      : @299 [@dyn 140] (gas: 2)\n  6628: a0 = a1 + 0x260\n  6632: t0 = 282, jump @1753\n      : @300 [@dyn 141] (gas: 1)\n  6639: jump @302 if a1 == 0\n      : @301 (gas: 1)\n  6642: jump @797\n      : @302 (gas: 13)\n  6645: a1 = u64 [s1 + 0x1d0]\n  6649: a1 = a1 >u 0\n  6651: a2 = s1 + 0x1000\n  6655: u64 [a2 + 4294965400] = 0\n  6659: a2 = s1 + 0x1000\n  6663: u64 [a2 + 4294965392] = 0\n  6667: a2 = s1 + 0x1000\n  6671: u64 [a2 + 0xfffffffffffff880] = a1\n  6675: a1 = s1 + 0x7ff\n  6679: a1 = a1 + 0x81\n  6683: a2 = s1 + 0x1000\n  6687: u64 [a2 + 4294965384] = 0\n  6691: ra = 284, jump @9\n      : @303 [@dyn 142] (gas: 1)\n  6697: t0 = 286, jump @1756\n      : @304 [@dyn 143] (gas: 2)\n  6704: a0 = a1 + 0x280\n  6708: t0 = 288, jump @1753\n      : @305 [@dyn 144] (gas: 1)\n  6715: jump @307 if a1 == 0\n      : @306 (gas: 1)\n  6718: jump @797\n      : @307 (gas: 13)\n  6721: a1 = u64 [s1 + 0x1c8]\n  6725: a1 = a1 >u 0\n  6727: a2 = s1 + 0x1000\n  6731: u64 [a2 + 4294965368] = 0\n  6735: a2 = s1 + 0x1000\n  6739: u64 [a2 + 4294965360] = 0\n  6743: a2 = s1 + 0x1000\n  6747: u64 [a2 + 0xfffffffffffff860] = a1\n  6751: a1 = s1 + 0x7ff\n  6755: a1 = a1 + 0x61\n  6758: a2 = s1 + 0x1000\n  6762: u64 [a2 + 4294965352] = 0\n  6766: ra = 290, jump @9\n      : @308 [@dyn 145] (gas: 1)\n  6772: t0 = 292, jump @1756\n      : @309 [@dyn 146] (gas: 2)\n  6779: a0 = a1 + 0x2a0\n  6783: t0 = 294, jump @1753\n      : @310 [@dyn 147] (gas: 1)\n  6790: jump @312 if a1 == 0\n      : @311 (gas: 1)\n  6793: jump @797\n      : @312 (gas: 13)\n  6796: a1 = u64 [s1 + 0x1c0]\n  6800: a1 = a1 >u 0\n  6802: a2 = s1 + 0x1000\n  6806: u64 [a2 + 4294965336] = 0\n  6810: a2 = s1 + 0x1000\n  6814: u64 [a2 + 4294965328] = 0\n  6818: a2 = s1 + 0x1000\n  6822: u64 [a2 + 0xfffffffffffff840] = a1\n  6826: a1 = s1 + 0x7ff\n  6830: a1 = a1 + 0x41\n  6833: a2 = s1 + 0x1000\n  6837: u64 [a2 + 4294965320] = 0\n  6841: ra = 296, jump @9\n      : @313 [@dyn 148] (gas: 1)\n  6847: t0 = 298, jump @1756\n      : @314 [@dyn 149] (gas: 2)\n  6854: a0 = a1 + 0x2c0\n  6858: t0 = 300, jump @1753\n      : @315 [@dyn 150] (gas: 1)\n  6865: jump @317 if a1 == 0\n      : @316 (gas: 1)\n  6868: jump @797\n      : @317 (gas: 13)\n  6871: a1 = u64 [s1 + 0x1b8]\n  6875: a1 = a1 >u 0\n  6877: a2 = s1 + 0x1000\n  6881: u64 [a2 + 4294965304] = 0\n  6885: a2 = s1 + 0x1000\n  6889: u64 [a2 + 4294965296] = 0\n  6893: a2 = s1 + 0x1000\n  6897: u64 [a2 + 0xfffffffffffff820] = a1\n  6901: a1 = s1 + 0x7ff\n  6905: a1 = a1 + 0x21\n  6908: a2 = s1 + 0x1000\n  6912: u64 [a2 + 4294965288] = 0\n  6916: ra = 302, jump @9\n      : @318 [@dyn 151] (gas: 1)\n  6922: t0 = 304, jump @1756\n      : @319 [@dyn 152] (gas: 2)\n  6929: a0 = a1 + 0x2e0\n  6933: t0 = 306, jump @1753\n      : @320 [@dyn 153] (gas: 1)\n  6940: jump @322 if a1 == 0\n      : @321 (gas: 1)\n  6943: jump @797\n      : @322 (gas: 13)\n  6946: a1 = u64 [s1 + 0x1b0]\n  6950: a1 = a1 >u 0\n  6952: a2 = s1 + 0x1000\n  6956: u64 [a2 + 4294965272] = 0\n  6960: a2 = s1 + 0x1000\n  6964: u64 [a2 + 4294965264] = 0\n  6968: a2 = s1 + 0x1000\n  6972: u64 [a2 + 0xfffffffffffff800] = a1\n  6976: a1 = s1 + 0x7ff\n  6980: a1 = a1 + 0x1\n  6983: a2 = s1 + 0x1000\n  6987: u64 [a2 + 4294965256] = 0\n  6991: ra = 308, jump @9\n      : @323 [@dyn 154] (gas: 1)\n  6997: t0 = 310, jump @1756\n      : @324 [@dyn 155] (gas: 2)\n  7004: a0 = a1 + 0x300\n  7008: t0 = 312, jump @1753\n      : @325 [@dyn 156] (gas: 1)\n  7015: jump @327 if a1 == 0\n      : @326 (gas: 1)\n  7018: jump @797\n      : @327 (gas: 8)\n  7021: a1 = u64 [s1 + 0x1a8]\n  7025: a1 = a1 >u 0\n  7027: u64 [s1 + 2040] = 0\n  7031: u64 [s1 + 2032] = 0\n  7035: u64 [s1 + 0x7e0] = a1\n  7039: a1 = s1 + 0x7e0\n  7043: u64 [s1 + 2024] = 0\n  7047: ra = 314, jump @9\n      : @328 [@dyn 157] (gas: 1)\n  7053: t0 = 316, jump @1756\n      : @329 [@dyn 158] (gas: 2)\n  7060: a0 = a1 + 0x320\n  7064: t0 = 318, jump @1753\n      : @330 [@dyn 159] (gas: 1)\n  7071: jump @332 if a1 == 0\n      : @331 (gas: 1)\n  7074: jump @797\n      : @332 (gas: 8)\n  7077: a1 = u64 [s1 + 0x1a0]\n  7081: a1 = a1 >u 0\n  7083: u64 [s1 + 2008] = 0\n  7087: u64 [s1 + 2000] = 0\n  7091: u64 [s1 + 0x7c0] = a1\n  7095: a1 = s1 + 0x7c0\n  7099: u64 [s1 + 1992] = 0\n  7103: ra = 320, jump @9\n      : @333 [@dyn 160] (gas: 1)\n  7109: t0 = 322, jump @1756\n      : @334 [@dyn 161] (gas: 2)\n  7116: a0 = a1 + 0x340\n  7120: t0 = 324, jump @1753\n      : @335 [@dyn 162] (gas: 1)\n  7127: jump @337 if a1 == 0\n      : @336 (gas: 1)\n  7130: jump @797\n      : @337 (gas: 8)\n  7133: a1 = u64 [s1 + 0x198]\n  7137: a1 = a1 >u 0\n  7139: u64 [s1 + 1976] = 0\n  7143: u64 [s1 + 1968] = 0\n  7147: u64 [s1 + 0x7a0] = a1\n  7151: a1 = s1 + 0x7a0\n  7155: u64 [s1 + 1960] = 0\n  7159: ra = 326, jump @9\n      : @338 [@dyn 163] (gas: 1)\n  7165: t0 = 328, jump @1756\n      : @339 [@dyn 164] (gas: 2)\n  7172: a0 = a1 + 0x360\n  7176: t0 = 330, jump @1753\n      : @340 [@dyn 165] (gas: 1)\n  7183: jump @342 if a1 == 0\n      : @341 (gas: 1)\n  7186: jump @797\n      : @342 (gas: 8)\n  7189: a1 = u64 [s1 + 0x188]\n  7193: a1 = a1 >u 0\n  7195: u64 [s1 + 1944] = 0\n  7199: u64 [s1 + 1936] = 0\n  7203: u64 [s1 + 0x780] = a1\n  7207: a1 = s1 + 0x780\n  7211: u64 [s1 + 1928] = 0\n  7215: ra = 332, jump @9\n      : @343 [@dyn 166] (gas: 1)\n  7221: t0 = 334, jump @1756\n      : @344 [@dyn 167] (gas: 2)\n  7228: a0 = a1 + 0x380\n  7232: t0 = 336, jump @1753\n      : @345 [@dyn 168] (gas: 1)\n  7239: jump @347 if a1 == 0\n      : @346 (gas: 1)\n  7242: jump @797\n      : @347 (gas: 8)\n  7245: a1 = u64 [s1 + 0x168]\n  7249: a1 = a1 >u 0\n  7251: u64 [s1 + 1912] = 0\n  7255: u64 [s1 + 1904] = 0\n  7259: u64 [s1 + 0x760] = a1\n  7263: a1 = s1 + 0x760\n  7267: u64 [s1 + 1896] = 0\n  7271: ra = 338, jump @9\n      : @348 [@dyn 169] (gas: 1)\n  7277: t0 = 340, jump @1756\n      : @349 [@dyn 170] (gas: 2)\n  7284: a0 = a1 + 0x3a0\n  7288: t0 = 342, jump @1753\n      : @350 [@dyn 171] (gas: 1)\n  7295: jump @352 if a1 == 0\n      : @351 (gas: 1)\n  7298: jump @797\n      : @352 (gas: 8)\n  7301: a1 = u64 [s1 + 0x160]\n  7305: a1 = a1 >u 0\n  7307: u64 [s1 + 1880] = 0\n  7311: u64 [s1 + 1872] = 0\n  7315: u64 [s1 + 0x740] = a1\n  7319: a1 = s1 + 0x740\n  7323: u64 [s1 + 1864] = 0\n  7327: ra = 344, jump @9\n      : @353 [@dyn 172] (gas: 1)\n  7333: t0 = 346, jump @1756\n      : @354 [@dyn 173] (gas: 2)\n  7340: a0 = a1 + 0x3c0\n  7344: t0 = 348, jump @1753\n      : @355 [@dyn 174] (gas: 1)\n  7351: jump @357 if a1 == 0\n      : @356 (gas: 1)\n  7354: jump @797\n      : @357 (gas: 8)\n  7357: a1 = u64 [s1 + 0x158]\n  7361: a1 = a1 >u 0\n  7363: u64 [s1 + 1848] = 0\n  7367: u64 [s1 + 1840] = 0\n  7371: u64 [s1 + 0x720] = a1\n  7375: a1 = s1 + 0x720\n  7379: u64 [s1 + 1832] = 0\n  7383: ra = 350, jump @9\n      : @358 [@dyn 175] (gas: 1)\n  7389: t0 = 352, jump @1756\n      : @359 [@dyn 176] (gas: 2)\n  7396: a0 = a1 + 0x3e0\n  7400: t0 = 354, jump @1753\n      : @360 [@dyn 177] (gas: 1)\n  7407: jump @362 if a1 == 0\n      : @361 (gas: 1)\n  7410: jump @797\n      : @362 (gas: 14)\n  7413: a1 = 0xffffffffffffff\n  7423: a2 = u64 [s1 + 0x148]\n  7427: a1 = a1 ^ a2\n  7430: a2 = u64 [s1 + 0x150]\n  7434: a1 = a1 | ~a2\n  7437: a2 = u64 [s1 + 0x140]\n  7441: a2 = a2 >u 0\n  7443: a2 = 0 if a1 == 0\n  7445: u64 [s1 + 1816] = 0\n  7449: u64 [s1 + 1808] = 0\n  7453: u64 [s1 + 0x700] = a2\n  7457: a1 = s1 + 0x700\n  7461: u64 [s1 + 1800] = 0\n  7465: ra = 356, jump @9\n      : @363 [@dyn 178] (gas: 51)\n  7471: a1 = u64 [s1 + 0x278]\n  7475: a0 = u64 [a1]\n  7477: t0 = u64 [a1 + 0x18]\n  7480: a2 = u64 [a1 + 0x8]\n  7483: a3 = u64 [a1 + 0x10]\n  7486: a4 = a0 + 0x400\n  7490: a0 = a4 <u a0\n  7493: a5 = a2 + a0\n  7496: a2 = a5 <u a2\n  7499: a2 = a0 if a0 == 0\n  7502: a2 = a2 + a3\n  7505: a0 = a2 <u a3\n  7508: a0 = a0 + t0\n  7511: u64 [a1] = a4\n  7513: u64 [a1 + 0x8] = a5\n  7516: u64 [a1 + 0x10] = a2\n  7519: u64 [a1 + 0x18] = a0\n  7522: a3 = u64 [s1 + 0x138]\n  7526: a3 = a3 + 0x1\n  7529: a0 = a3 <u 0x1\n  7532: a5 = u64 [s1 + 0x130]\n  7536: a5 = a5 + a0\n  7539: a0 = a3 | a5\n  7542: a0 = a0 <u 0x1\n  7545: a1 = u64 [s1 + 0x120]\n  7549: ra = a1 + a0\n  7552: a1 = ra <u a1\n  7555: a0 = u64 [s1 + 0x128]\n  7559: a0 = a0 + a1\n  7562: a1 = u64 [s1 + 0x190]\n  7566: t0 = a1 + 0x20\n  7569: a2 = t0 <u a1\n  7572: a1 = u64 [s1 + 0x178]\n  7576: t1 = a1 + a2\n  7579: a4 = t1 <u a1\n  7582: a4 = a2 if a2 == 0\n  7585: a1 = u64 [s1 + 0x170]\n  7589: a4 = a4 + a1\n  7592: a2 = a4 <u a1\n  7595: a1 = u64 [s1 + 0x180]\n  7599: a1 = a1 + a2\n  7602: t2 = u64 [s1 + 0xc0]\n  7606: a2 = t2\n  7608: u64 [a2 + 0x18] = a0\n  7611: u64 [t2 + 0x10] = ra\n  7614: u64 [a2 + 0x8] = a5\n  7617: u64 [a2] = a3\n  7619: u64 [s1 + 0x120] = ra\n  7623: a2 = t0\n  7625: t0 = a4\n  7627: jump @193\n      : @364 (gas: 10)\n  7630: a0 = s1 + 0x31f8\n  7634: u64 [a0 + 96] = 0\n  7637: u64 [a0 + 88] = 0\n  7640: u64 [a0 + 80] = 0\n  7643: u64 [a0 + 72] = 0\n  7646: a0 = s1 + 0x3000\n  7650: i32 a0 = a0 + 0x240\n  7654: ecalli 16 // 'value_transferred'\n  7656: a3 = s1 + 0x31f8\n  7660: fallthrough\n      : @365 (gas: 8)\n  7661: a0 = u64 [a3 + 0x58]\n  7664: a1 = u64 [a3 + 0x60]\n  7667: a2 = u64 [a3 + 0x50]\n  7670: a3 = u64 [a3 + 0x48]\n  7673: a1 = a1 | a2\n  7676: a0 = a0 | a3\n  7679: a0 = a0 | a1\n  7682: jump @367 if a0 == 0\n      : @366 (gas: 1)\n  7685: jump @1107\n      : @367 (gas: 4)\n  7688: a0 = u64 [s1 + 0x278]\n  7692: a0 = i32 [a0]\n  7694: a1 = 0x43\n  7697: jump @369 if a1 <u a0\n      : @368 (gas: 1)\n  7700: jump @1108\n      : @369 (gas: 4)\n  7703: a0 = s1 + 0x22c0\n  7707: ra = 0x166\n  7711: t0 = 0x50c\n  7715: jump @1793\n      : @370 [@dyn 179] (gas: 15)\n  7719: a1 = s1 + 0x21f8\n  7723: a0 = u64 [a1 + 0xd8]\n  7727: a2 = s1 + 0x200\n  7731: u64 [a2 + 0x68] = a0\n  7734: a0 = u64 [a1 + 0xd0]\n  7738: u64 [a2 + 0x70] = a0\n  7741: a0 = u64 [a1 + 0xc8]\n  7745: u64 [a2 + 0x78] = a0\n  7748: a0 = s1 + 0x3000\n  7752: i32 a0 = a0 + 0x260\n  7756: a1 = 0x4\n  7759: ecalli 2 // 'call_data_load'\n  7761: t0 = 0x168\n  7765: a3 = s1 + 0x31f8\n  7769: fallthrough\n      : @371 [@dyn 180] (gas: 12)\n  7770: a0 = u64 [a3 + 0x68]\n  7773: a1 = u64 [a3 + 0x70]\n  7776: a2 = u64 [a3 + 0x78]\n  7779: a3 = u64 [a3 + 0x80]\n  7783: a4 = s1 + 0x21f8\n  7787: u64 [a4 + 0xc0] = a3\n  7791: u64 [a4 + 0xb8] = a2\n  7795: u64 [a4 + 0xb0] = a1\n  7799: a1 = s1 + 0x22a0\n  7803: u64 [a4 + 0xa8] = a0\n  7807: a0 = 0\n  7809: ra = 362, jump @9\n      : @372 [@dyn 181] (gas: 9)\n  7815: a0 = s1 + 0x21f8\n  7819: u64 [a0 + 160] = 0\n  7823: u64 [a0 + 152] = 0\n  7827: u64 [a0 + 144] = 0\n  7831: a2 = a0\n  7833: a0 = 0x20\n  7836: a1 = s1 + 0x2280\n  7840: u64 [a2 + 136] = 0\n  7844: ra = 364, jump @9\n      : @373 [@dyn 182] (gas: 3)\n  7850: a1 = 0x201f0\n  7855: a0 = i32 [0x201f0]\n  7860: jump @375 if a0 >u 63\n      : @374 (gas: 2)\n  7864: u32 [0x201f0] = 0x40\n  7870: fallthrough\n      : @375 (gas: 41)\n  7871: a0 = sp + 0xffffffffffffffe0\n  7874: a2 = a0 & 0xffffffffffffffe0\n  7877: u64 [s1 + 0x250] = a2\n  7881: sp = a2\n  7883: a0 = 0x20200\n  7888: i32 a0 = a0 + 0\n  7890: i32 a2 = a2 + 0\n  7892: u64 [s1 + 0x260] = a1\n  7896: a1 = 0x40\n  7899: u64 [s1 + 0x258] = a0\n  7903: ecalli 8 // 'hash_keccak_256'\n  7905: a3 = u64 [s1 + 0x250]\n  7909: a0 = u64 [a3 + 0x18]\n  7912: a1 = u64 [a3 + 0x10]\n  7915: a2 = u64 [a3 + 0x8]\n  7918: a3 = u64 [a3]\n  7920: a0 = reverse a0\n  7922: u64 [s1 + 0x248] = a0\n  7926: a0 = reverse a1\n  7928: u64 [s1 + 0x240] = a0\n  7932: a0 = reverse a2\n  7934: u64 [s1 + 0x238] = a0\n  7938: a0 = reverse a3\n  7940: u64 [s1 + 0x230] = a0\n  7944: a0 = sp + 0xffffffffffffffe0\n  7947: a0 = a0 & 0xffffffffffffffe0\n  7950: u64 [s1 + 0x250] = a0\n  7954: sp = a0\n  7956: a0 = u64 [s1 + 0x268]\n  7960: a0 = a0 << 0x20\n  7963: a0 = a0 >> 0x20\n  7966: a2 = s1 + 0x21f8\n  7970: u64 [a2 + 128] = 0\n  7974: u64 [a2 + 0x78] = a0\n  7977: a0 = u64 [s1 + 0x270]\n  7981: u64 [a2 + 0x70] = a0\n  7984: a1 = s1 + 0x2260\n  7988: a0 = u64 [s1 + 0x278]\n  7992: u64 [a2 + 0x68] = a0\n  7995: a0 = 0\n  7997: ra = 366, jump @9\n      : @376 [@dyn 183] (gas: 13)\n  8003: a0 = u64 [s1 + 0x230]\n  8007: a1 = s1 + 0x21f8\n  8011: u64 [a1 + 0x60] = a0\n  8014: a0 = u64 [s1 + 0x238]\n  8018: u64 [a1 + 0x58] = a0\n  8021: a0 = u64 [s1 + 0x240]\n  8025: u64 [a1 + 0x50] = a0\n  8028: a3 = a1\n  8030: a0 = 0x20\n  8033: a1 = s1 + 0x2240\n  8037: a2 = u64 [s1 + 0x248]\n  8041: u64 [a3 + 0x48] = a2\n  8044: ra = 368, jump @9\n      : @377 [@dyn 184] (gas: 3)\n  8050: a1 = u64 [s1 + 0x260]\n  8054: a0 = i32 [a1]\n  8056: jump @379 if a0 >u 63\n      : @378 (gas: 2)\n  8060: u32 [a1 + 0] = 0x40\n  8063: fallthrough\n      : @379 (gas: 12)\n  8064: a0 = sp + 0xffffffffffffffe0\n  8067: a0 = a0 & 0xffffffffffffffe0\n  8070: u64 [s1 + 0x278] = a0\n  8074: sp = a0\n  8076: i32 a2 = a0 + 0\n  8078: a1 = 0x40\n  8081: a0 = u64 [s1 + 0x258]\n  8085: ra = 0x172\n  8089: ecalli 8 // 'hash_keccak_256'\n  8091: a3 = u64 [s1 + 0x278]\n  8095: t0 = 0x174\n  8099: jump @1811\n      : @380 [@dyn 185] (gas: 2)\n  8103: a3 = u64 [s1 + 0x278]\n  8107: t0 = 372, jump @1811\n      : @381 [@dyn 186] (gas: 7)\n  8114: a1 = u64 [s1 + 0x250]\n  8118: u64 [a1 + 0x18] = a3\n  8121: u64 [a1 + 0x10] = a2\n  8124: u64 [a1 + 0x8] = a4\n  8127: u64 [a1] = a0\n  8129: a0 = s1 + 0x2220\n  8133: ra = 374, jump @11\n      : @382 [@dyn 187] (gas: 6)\n  8139: a0 = s1 + 0x21f8\n  8143: a0 = u64 [a0 + 0x28]\n  8146: u64 [s1 + 0x278] = a0\n  8150: a0 = s1 + 0x2200\n  8154: a1 = 0x40\n  8157: ra = 376, jump @7\n      : @383 [@dyn 188] (gas: 6)\n  8163: a3 = s1 + 0x21f8\n  8167: a4 = u64 [a3 + 0x20]\n  8170: a1 = u64 [a3 + 0x18]\n  8173: a2 = u64 [a3 + 0x10]\n  8176: a0 = u64 [a3 + 0x8]\n  8179: t0 = 378, jump @1784\n      : @384 [@dyn 189] (gas: 1)\n  8186: jump @386 if a1 == 0\n      : @385 (gas: 1)\n  8189: jump @797\n      : @386 (gas: 10)\n  8192: a1 = u8 [s1 + 0x278]\n  8196: a1 = a1 >u 0\n  8198: u64 [a3 + 0] = 0\n  8200: u64 [a3 + 4294967288] = 0\n  8203: u64 [a3 + 0xffffffffffffffe8] = a1\n  8206: a1 = s1 + 0x21e0\n  8210: u64 [a3 + 4294967280] = 0\n  8213: u64 [s1 + 0x278] = a0\n  8217: ra = 0x22a\n  8221: jump @9\n      : @387 (gas: 10)\n  8224: u64 [a3 + 224] = 0\n  8228: u64 [a3 + 216] = 0\n  8232: u64 [a3 + 208] = 0\n  8236: u64 [a3 + 200] = 0\n  8240: a0 = s1 + 0x3000\n  8244: i32 a0 = a0 + 0x2c0\n  8248: ra = 0x17c\n  8252: ecalli 16 // 'value_transferred'\n  8254: a3 = s1 + 0x31f8\n  8258: jump @389\n      : @388 [@dyn 190] (gas: 2)\n  8260: a3 = s1 + 0x31f8\n  8264: fallthrough\n      : @389 (gas: 8)\n  8265: a0 = u64 [a3 + 0xd8]\n  8269: a1 = u64 [a3 + 0xe0]\n  8273: a2 = u64 [a3 + 0xd0]\n  8277: a3 = u64 [a3 + 0xc8]\n  8281: a1 = a1 | a2\n  8284: a0 = a0 | a3\n  8287: a0 = a0 | a1\n  8290: jump @391 if a0 == 0\n      : @390 (gas: 1)\n  8293: jump @1109\n      : @391 (gas: 1)\n  8296: t0 = 382, jump @1808\n      : @392 [@dyn 191] (gas: 1)\n  8303: jump @394 if a1 <u a0\n      : @393 (gas: 1)\n  8306: jump @1110\n      : @394 (gas: 22)\n  8309: a0 = s1 + 0x3000\n  8313: i32 a0 = a0 + 0x2e0\n  8317: a1 = 0x4\n  8320: ecalli 2 // 'call_data_load'\n  8322: a0 = s1 + 0x31f8\n  8326: a2 = u64 [a0 + 0xe8]\n  8330: u64 [s1 + 0x268] = a2\n  8334: a1 = u64 [a0 + 0xf0]\n  8338: u64 [s1 + 0x260] = a1\n  8342: a3 = u64 [a0 + 0xf8]\n  8346: u64 [s1 + 0x258] = a3\n  8350: a4 = u64 [a0 + 0x100]\n  8354: u64 [s1 + 0x250] = a4\n  8358: a5 = s1 + 0x21f8\n  8362: u64 [a5 + 0x5c0] = a4\n  8366: a4 = a5 + 0x500\n  8370: u64 [a4 + 0xb8] = a3\n  8374: u64 [a4 + 0xb0] = a1\n  8378: a0 = s1 + 0x27c0\n  8382: a1 = s1 + 0x27a0\n  8386: u64 [a4 + 0xa8] = a2\n  8390: ra = 384, jump @1373\n      : @395 [@dyn 192] (gas: 7)\n  8396: a3 = s1 + 0x21f8\n  8400: a4 = a3 + 0x500\n  8404: a0 = u64 [a4 + 0xc8]\n  8408: a1 = u64 [a4 + 0xe0]\n  8412: a2 = u64 [a4 + 0xd0]\n  8416: a3 = u64 [a4 + 0xd8]\n  8420: t0 = 386, jump @1809\n      : @396 [@dyn 193] (gas: 10)\n  8427: i32 a3 = a3 + 0x1f8\n  8431: a3 = a3 + s1\n  8434: a5 = a3 + 0x100\n  8438: u64 [a5 + 0x8] = a0\n  8441: u64 [a5 + 0x10] = a2\n  8444: u64 [a5 + 0x18] = a4\n  8447: u64 [a5 + 0x20] = a1\n  8450: a0 = s1 + 0x2780\n  8454: a1 = s1 + 0x3300\n  8458: ra = 388, jump @11\n      : @397 [@dyn 194] (gas: 15)\n  8464: a0 = s1 + 0x21f8\n  8468: a1 = u64 [a0 + 0x590]\n  8472: u64 [s1 + 0x270] = a1\n  8476: a1 = u64 [a0 + 0x588]\n  8480: u64 [s1 + 0x248] = a1\n  8484: a0 = u32 [a0 + 0x598]\n  8488: u64 [s1 + 0x240] = a0\n  8492: a0 = 0x30200\n  8497: u64 [s1 + 0x278] = a0\n  8501: i32 a0 = a0 + 0\n  8503: ra = 0x186\n  8507: ecalli 4 // 'caller'\n  8509: a2 = u64 [s1 + 0x278]\n  8513: t0 = 0x188\n  8517: jump @1768\n      : @398 [@dyn 195] (gas: 2)\n  8521: a2 = u64 [s1 + 0x278]\n  8525: t0 = 392, jump @1768\n      : @399 [@dyn 196] (gas: 18)\n  8532: a2 = u64 [s1 + 0x240]\n  8536: a1 = a1 ^ a2\n  8539: a2 = u64 [s1 + 0x248]\n  8543: a0 = a0 ^ a2\n  8546: a0 = a0 | a1\n  8549: a1 = u64 [s1 + 0x270]\n  8553: a1 = a1 ^ a3\n  8556: a0 = a0 | a1\n  8559: a0 = a0 <u 0x1\n  8562: a1 = s1 + 0x21f8\n  8566: u64 [a1 + 1408] = 0\n  8570: u64 [a1 + 1400] = 0\n  8574: u64 [a1 + 0x568] = a0\n  8578: a0 = s1 + 0x2760\n  8582: u64 [a1 + 1392] = 0\n  8586: ra = 0x18a\n  8590: t0 = 0x52a\n  8594: jump @1806\n      : @400 [@dyn 197] (gas: 17)\n  8598: a0 = sp + 0xffffffffffffffe0\n  8601: a0 = a0 & 0xffffffffffffffe0\n  8604: u64 [s1 + 0x270] = a0\n  8608: sp = a0\n  8610: a0 = u64 [s1 + 0x250]\n  8614: a3 = s1 + 0x21f8\n  8618: a4 = a3 + 0x500\n  8622: u64 [a4 + 0x20] = a0\n  8625: a0 = u64 [s1 + 0x258]\n  8629: u64 [a4 + 0x18] = a0\n  8632: a0 = u64 [s1 + 0x260]\n  8636: u64 [a4 + 0x10] = a0\n  8639: a0 = s1 + 0x2720\n  8643: a1 = s1 + 0x2700\n  8647: a2 = u64 [s1 + 0x268]\n  8651: u64 [a4 + 0x8] = a2\n  8654: ra = 396, jump @1373\n      : @401 [@dyn 198] (gas: 34)\n  8660: a0 = s1 + 0x21f8\n  8664: a3 = a0 + 0x500\n  8668: a5 = u64 [a3 + 0x38]\n  8671: u64 [s1 + 0x268] = a5\n  8675: a1 = u64 [a3 + 0x40]\n  8678: a2 = u64 [a3 + 0x28]\n  8681: u64 [s1 + 0x250] = a2\n  8685: a4 = u64 [a3 + 0x30]\n  8688: u64 [s1 + 0x258] = a4\n  8692: a0 = u64 [s1 + 0x270]\n  8696: u64 [a0 + 0x10] = a5\n  8699: u64 [a0 + 0x18] = a1\n  8702: t0 = a1\n  8704: u64 [s1 + 0x260] = a1\n  8708: u64 [a0] = a2\n  8710: u64 [a0 + 0x8] = a4\n  8713: a0 = sp + 0xffffffffffffffe0\n  8716: a1 = a0 & 0xffffffffffffffe0\n  8719: sp = a1\n  8721: a0 = a2 + 0x1\n  8724: a2 = a0 <u 0x1\n  8727: a4 = a4 + a2\n  8730: a2 = a0 | a4\n  8733: a2 = a2 <u 0x1\n  8736: a2 = a2 + a5\n  8739: a3 = a2 <u a5\n  8742: a3 = a3 + t0\n  8745: u64 [a1 + 0x10] = a2\n  8748: u64 [a1 + 0x8] = a4\n  8751: u64 [a1] = a0\n  8753: u64 [a1 + 0x18] = a3\n  8756: a0 = s1 + 0x26e0\n  8760: u64 [s1 + 0x210] = a1\n  8764: ra = 398, jump @11\n      : @402 [@dyn 199] (gas: 21)\n  8770: a1 = s1 + 0x21f8\n  8774: a0 = u64 [a1 + 0x500]\n  8778: u64 [s1 + 0x248] = a0\n  8782: a3 = a1 + 0x400\n  8786: a2 = u64 [a3 + 0xf8]\n  8790: u64 [s1 + 0x240] = a2\n  8794: a0 = u64 [a3 + 0xf0]\n  8798: u64 [s1 + 0x208] = a0\n  8802: a0 = u64 [a3 + 0xe8]\n  8806: u64 [s1 + 0x200] = a0\n  8810: a0 = 0xff00000000\n  8820: a0 = a0 & a2\n  8823: a0 = a0 <u 0x1\n  8826: u64 [a1 + 1248] = 0\n  8830: u64 [a1 + 1240] = 0\n  8834: u64 [a3 + 0xc8] = a0\n  8838: a0 = s1 + 0x26c0\n  8842: u64 [a1 + 1232] = 0\n  8846: ra = 0x190\n  8850: t0 = 0x544\n  8854: jump @1806\n      : @403 [@dyn 200] (gas: 2)\n  8858: a1 = u64 [s1 + 0x250]\n  8862: t0 = 402, jump @1790\n      : @404 [@dyn 201] (gas: 10)\n  8869: a1 = a1 + a4\n  8872: a4 = s1 + 0x31f8\n  8876: a5 = a4 + 0x100\n  8880: u64 [a5 + 0x40] = a1\n  8883: u64 [a5 + 0x38] = a3\n  8886: u64 [a5 + 0x30] = a2\n  8889: u64 [a5 + 0x28] = a0\n  8892: a0 = s1 + 0x26a0\n  8896: a1 = s1 + 0x3320\n  8900: ra = 404, jump @11\n      : @405 [@dyn 202] (gas: 20)\n  8906: a2 = s1 + 0x21f8\n  8910: a3 = u64 [a2 + 0x4a8]\n  8914: a4 = s1 + 0x200\n  8918: a0 = u64 [a4 + 0x48]\n  8921: a0 = a0 << 0x18\n  8924: a1 = u64 [a4 + 0x40]\n  8927: a1 = a1 >> 0x28\n  8930: a0 = a0 | a1\n  8933: a0 = a0 + a3\n  8936: u64 [a4 + 0x38] = a3\n  8939: u64 [a4 + 0x18] = a0\n  8942: a0 = a0 <u a3\n  8945: a1 = a0\n  8947: a1 = 0 if a0 != 0\n  8949: a3 = a1 >u 0\n  8951: u64 [a4 + 0x28] = a0\n  8954: u64 [a4 + 0x30] = a1\n  8957: u64 [a4 + 0x20] = a3\n  8960: a0 = a3 if a1 != 0\n  8963: jump @407 if a0 == 0\n      : @406 (gas: 1)\n  8966: jump @1111\n      : @407 (gas: 6)\n  8969: a0 = u64 [a2 + 0x4b0]\n  8973: u64 [s1 + 0x1f8] = a0\n  8977: a0 = s1 + 0x2680\n  8981: ra = 0x196\n  8985: t0 = 0x596\n  8989: jump @1793\n      : @408 [@dyn 203] (gas: 13)\n  8993: a0 = s1 + 0x21f8\n  8997: a0 = u64 [a0 + 0x488]\n  9001: a0 = a0 & 0xffffffffffffffff\n  9004: a3 = s1 + 0x200\n  9008: a1 = u64 [a3 + 0x18]\n  9011: a0 = a0 <u a1\n  9014: a2 = u64 [a3 + 0x28]\n  9017: a1 = a2 >u 0\n  9019: a1 = a0 if a2 == 0\n  9022: a0 = u64 [a3 + 0x30]\n  9025: a2 = u64 [a3 + 0x20]\n  9028: a1 = a2 if a0 != 0\n  9031: jump @410 if a1 != 0\n      : @409 (gas: 1)\n  9034: jump @641\n      : @410 (gas: 3)\n  9037: a0 = s1 + 0x2440\n  9041: a1 = 0x40\n  9044: ra = 408, jump @7\n      : @411 [@dyn 204] (gas: 14)\n  9050: a4 = s1 + 0x21f8\n  9054: t0 = u64 [a4 + 0x260]\n  9058: a1 = a4 + 0x200\n  9062: a5 = u64 [a1 + 0x58]\n  9065: a3 = u64 [a1 + 0x50]\n  9068: a0 = u64 [a1 + 0x48]\n  9071: a2 = a3 | t0\n  9074: a1 = a0 | a5\n  9077: a1 = a1 | a2\n  9080: a1 = a1 >> 0x20\n  9083: a2 = a2 | a5\n  9086: a2 = a2 << 0x20\n  9089: a1 = a1 | a2\n  9092: jump @413 if a1 == 0\n      : @412 (gas: 1)\n  9095: jump @797\n      : @413 (gas: 11)\n  9098: u64 [a4 + 568] = 0\n  9102: u64 [a4 + 560] = 0\n  9106: u64 [a4 + 552] = 0\n  9110: u64 [s1 + 0x270] = a3\n  9114: a3 = 0x8c379a000000000\n  9124: a1 = s1 + 0x2420\n  9128: u64 [a4 + 0x240] = a3\n  9132: u64 [s1 + 0x278] = a0\n  9136: u64 [s1 + 0x268] = t0\n  9140: u64 [s1 + 0x260] = a5\n  9144: ra = 410, jump @9\n      : @414 [@dyn 205] (gas: 6)\n  9150: a5 = s1 + 0x200\n  9154: a1 = u64 [a5 + 0x78]\n  9157: a0 = u64 [a5 + 0x68]\n  9160: a3 = u64 [a5 + 0x60]\n  9163: a3 = a3 | a0\n  9166: t0 = 412, jump @1785\n      : @415 [@dyn 206] (gas: 1)\n  9173: jump @417 if a0 != 0\n      : @416 (gas: 1)\n  9176: jump @797\n      : @417 (gas: 11)\n  9179: i32 a0 = a1 + 0x4\n  9182: a2 = s1 + 0x21f8\n  9186: u64 [a2 + 544] = 0\n  9190: u64 [a2 + 536] = 0\n  9194: u64 [a2 + 528] = 0\n  9198: a5 = 0x20\n  9201: a1 = s1 + 0x2400\n  9205: u64 [a2 + 0x208] = a5\n  9209: u64 [s1 + 0x268] = a3\n  9213: u64 [s1 + 0x260] = a4\n  9217: ra = 414, jump @9\n      : @418 [@dyn 207] (gas: 10)\n  9223: a2 = s1 + 0x200\n  9227: a4 = u64 [a2 + 0x68]\n  9230: a3 = u64 [a2 + 0x70]\n  9233: a1 = u64 [a2 + 0x78]\n  9236: a0 = u64 [a2 + 0x60]\n  9239: a0 = a0 + 0xffffffffffffffdc\n  9242: a0 = a1 <u a0\n  9245: a0 = 0 if a3 != 0\n  9247: a0 = 0 if a4 != 0\n  9249: jump @420 if a0 != 0\n      : @419 (gas: 1)\n  9252: jump @797\n      : @420 (gas: 8)\n  9255: i32 a0 = a1 + 0x24\n  9258: a2 = s1 + 0x21f8\n  9262: u64 [a2 + 512] = 0\n  9266: u64 [a2 + 504] = 0\n  9270: u64 [a2 + 488] = 0x20\n  9275: a1 = s1 + 0x23e0\n  9279: u64 [a2 + 496] = 0\n  9283: ra = 416, jump @9\n      : @421 [@dyn 208] (gas: 1)\n  9289: t0 = 418, jump @1775\n      : @422 [@dyn 209] (gas: 1)\n  9296: jump @424 if a0 != 0\n      : @423 (gas: 1)\n  9299: jump @797\n      : @424 (gas: 14)\n  9302: i32 a0 = a3 + 0x44\n  9305: a1 = u64 [0x20010]\n  9310: a4 = s1 + 0x21f8\n  9314: a5 = a4 + 0x100\n  9318: u64 [a5 + 0xe0] = a1\n  9322: a1 = u64 [0x20018]\n  9327: a2 = u64 [0x20020]\n  9332: a3 = u64 [0x20028]\n  9337: u64 [a5 + 0xd8] = a1\n  9341: u64 [a5 + 0xd0] = a2\n  9345: a1 = s1 + 0x23c0\n  9349: u64 [a5 + 0xc8] = a3\n  9353: ra = 0x262\n  9357: jump @9\n      : @425 (gas: 10)\n  9360: u64 [a2 + 1152] = 0\n  9364: u64 [a2 + 1144] = 0\n  9368: u64 [a2 + 1136] = 0\n  9372: u64 [a2 + 1128] = 0\n  9376: a0 = s1 + 0x3000\n  9380: i32 a0 = a0 + 0xfffffffffffffe60\n  9384: ra = 0x1a4\n  9388: ecalli 16 // 'value_transferred'\n  9390: t0 = 0x1a6\n  9394: jump @1788\n      : @426 [@dyn 210] (gas: 1)\n  9398: t0 = 422, jump @1788\n      : @427 [@dyn 211] (gas: 8)\n  9405: a0 = u64 [a4 + 0x78]\n  9408: a1 = u64 [a4 + 0x80]\n  9412: a2 = u64 [a4 + 0x70]\n  9415: a3 = u64 [a4 + 0x68]\n  9418: a1 = a1 | a2\n  9421: a0 = a0 | a3\n  9424: a0 = a0 | a1\n  9427: jump @429 if a0 == 0\n      : @428 (gas: 1)\n  9430: jump @1118\n      : @429 (gas: 3)\n  9433: a0 = u64 [s1 + 0x278]\n  9437: a0 = i32 [a0]\n  9439: jump @431 if a0 >u 3\n      : @430 (gas: 1)\n  9443: jump @1119\n      : @431 (gas: 3)\n  9446: a0 = s1 + 0x16a0\n  9450: a1 = 0x40\n  9453: ra = 424, jump @7\n      : @432 [@dyn 212] (gas: 7)\n  9459: a3 = s1 + 0x11f8\n  9463: a5 = a3 + 0x400\n  9467: a4 = u64 [a5 + 0xc0]\n  9471: a1 = u64 [a5 + 0xb8]\n  9475: a2 = u64 [a5 + 0xb0]\n  9479: a0 = u64 [a5 + 0xa8]\n  9483: t0 = 426, jump @1784\n      : @433 [@dyn 213] (gas: 1)\n  9490: jump @435 if a1 == 0\n      : @434 (gas: 1)\n  9493: jump @797\n      : @435 (gas: 13)\n  9496: a1 = u64 [0x20080]\n  9501: a5 = a3 + 0x400\n  9505: u64 [a5 + 0xa0] = a1\n  9509: a4 = u64 [0x20088]\n  9514: a1 = u64 [0x20090]\n  9519: a2 = u64 [0x20098]\n  9524: u64 [a5 + 0x98] = a4\n  9528: u64 [a5 + 0x90] = a1\n  9532: a1 = s1 + 0x1680\n  9536: u64 [a5 + 0x88] = a2\n  9540: u64 [s1 + 0x278] = a0\n  9544: ra = 0x22a\n  9548: jump @9\n      : @436 (gas: 10)\n  9551: u64 [a2 + 1088] = 0\n  9555: u64 [a2 + 1080] = 0\n  9559: u64 [a2 + 1072] = 0\n  9563: u64 [a2 + 1064] = 0\n  9567: a0 = s1 + 0x3000\n  9571: i32 a0 = a0 + 0xfffffffffffffe20\n  9575: ra = 0x1ac\n  9579: ecalli 16 // 'value_transferred'\n  9581: t0 = 0x1ae\n  9585: jump @1788\n      : @437 [@dyn 214] (gas: 1)\n  9589: t0 = 430, jump @1788\n      : @438 [@dyn 215] (gas: 8)\n  9596: a0 = u64 [a4 + 0x38]\n  9599: a1 = u64 [a4 + 0x40]\n  9602: a2 = u64 [a4 + 0x30]\n  9605: a3 = u64 [a4 + 0x28]\n  9608: a1 = a1 | a2\n  9611: a0 = a0 | a3\n  9614: a0 = a0 | a1\n  9617: jump @440 if a0 == 0\n      : @439 (gas: 1)\n  9620: jump @1120\n      : @440 (gas: 1)\n  9623: t0 = 432, jump @1808\n      : @441 [@dyn 216] (gas: 1)\n  9630: jump @443 if a1 <u a0\n      : @442 (gas: 1)\n  9633: jump @1121\n      : @443 (gas: 7)\n  9636: a0 = s1 + 0x3000\n  9640: i32 a0 = a0 + 0xfffffffffffffe40\n  9644: a1 = 0x4\n  9647: ra = 0x1b2\n  9651: ecalli 2 // 'call_data_load'\n  9653: t0 = 0x1b4\n  9657: jump @1788\n      : @444 [@dyn 217] (gas: 1)\n  9661: t0 = 436, jump @1788\n      : @445 [@dyn 218] (gas: 13)\n  9668: a2 = u64 [a4 + 0x48]\n  9671: a0 = u64 [a4 + 0x50]\n  9674: a1 = u64 [a4 + 0x58]\n  9677: a3 = u64 [a4 + 0x60]\n  9680: a4 = s1 + 0x11f8\n  9684: a5 = a4 + 0x400\n  9688: u64 [a5 + 0x60] = a3\n  9691: u64 [a5 + 0x58] = a1\n  9694: u64 [a5 + 0x50] = a0\n  9697: a0 = s1 + 0x1660\n  9701: a1 = s1 + 0x1640\n  9705: u64 [a5 + 0x48] = a2\n  9708: ra = 438, jump @1461\n      : @446 [@dyn 219] (gas: 14)\n  9714: a1 = s1 + 0x11f8\n  9718: a2 = a1 + 0x400\n  9722: a0 = u64 [a2 + 0x80]\n  9726: a1 = s1 + 0x200\n  9730: u64 [a1 + 0x78] = a0\n  9733: a0 = u64 [a2 + 0x78]\n  9736: u64 [a1 + 0x70] = a0\n  9739: a0 = u64 [a2 + 0x70]\n  9742: u64 [a1 + 0x68] = a0\n  9745: a0 = u64 [a2 + 0x68]\n  9748: u64 [a1 + 0x60] = a0\n  9751: a0 = s1 + 0x1620\n  9755: a1 = 0x40\n  9758: ra = 440, jump @7\n      : @447 [@dyn 220] (gas: 14)\n  9764: a3 = s1 + 0x11f8\n  9768: a5 = a3 + 0x400\n  9772: a0 = u64 [a5 + 0x40]\n  9775: a1 = u64 [a5 + 0x38]\n  9778: a2 = u64 [a5 + 0x30]\n  9781: a4 = u64 [a5 + 0x28]\n  9784: a0 = a0 | a2\n  9787: a2 = a4 | a1\n  9790: a2 = a2 | a0\n  9793: a2 = a2 >> 0x20\n  9796: a0 = a0 | a1\n  9799: a0 = a0 << 0x20\n  9802: a0 = a0 | a2\n  9805: jump @449 if a0 == 0\n      : @448 (gas: 1)\n  9808: jump @797\n      : @449 (gas: 15)\n  9811: a2 = s1 + 0x200\n  9815: a0 = u64 [a2 + 0x60]\n  9818: a5 = a3 + 0x400\n  9822: u64 [a5 + 0x8] = a0\n  9825: a0 = u64 [a2 + 0x68]\n  9828: u64 [a5 + 0x10] = a0\n  9831: a0 = u64 [a2 + 0x70]\n  9834: u64 [a5 + 0x18] = a0\n  9837: a1 = s1 + 0x1600\n  9841: a0 = u64 [a2 + 0x78]\n  9844: u64 [a5 + 0x20] = a0\n  9847: a0 = a4\n  9849: u64 [a2 + 0x78] = a4\n  9852: ra = 0x22a\n  9856: jump @9\n      : @450 (gas: 9)\n  9859: u64 [a3 + 800] = 0\n  9863: u64 [a3 + 792] = 0\n  9867: u64 [a3 + 784] = 0\n  9871: u64 [a3 + 776] = 0\n  9875: a0 = s1 + 0x3000\n  9879: i32 a0 = a0 + 0x500\n  9883: ra = 0x1ba\n  9887: ecalli 16 // 'value_transferred'\n  9889: fallthrough\n      : @451 [@dyn 221] (gas: 10)\n  9890: a3 = s1 + 0x31f8\n  9894: a4 = a3 + 0x300\n  9898: a0 = u64 [a4 + 0x18]\n  9901: a1 = u64 [a4 + 0x20]\n  9904: a2 = u64 [a4 + 0x10]\n  9907: a3 = u64 [a4 + 0x8]\n  9910: a1 = a1 | a2\n  9913: a0 = a0 | a3\n  9916: a0 = a0 | a1\n  9919: jump @453 if a0 == 0\n      : @452 (gas: 1)\n  9922: jump @1122\n      : @453 (gas: 1)\n  9925: t0 = 444, jump @1808\n      : @454 [@dyn 222] (gas: 1)\n  9932: jump @456 if a1 <u a0\n      : @455 (gas: 1)\n  9935: jump @1123\n      : @456 (gas: 6)\n  9938: a0 = s1 + 0x3000\n  9942: i32 a0 = a0 + 0x520\n  9946: a1 = 0x4\n  9949: ecalli 2 // 'call_data_load'\n  9951: a3 = s1 + 0x31f8\n  9955: fallthrough\n      : @457 (gas: 8)\n  9956: a0 = u64 [a3 + 0x338]\n  9960: a1 = u64 [a3 + 0x340]\n  9964: a2 = a0 ^ 0x1\n  9967: a2 = a2 | a1\n  9970: a0 = a0 <u 0x1\n  9973: a0 = 0 if a1 != 0\n  9975: a0 = 0 if a2 == 0\n  9977: jump @459 if a0 != 0\n      : @458 (gas: 1)\n  9980: jump @1124\n      : @459 (gas: 7)\n  9983: a0 = u64 [a3 + 0x330]\n  9987: u64 [s1 + 0x270] = a0\n  9991: a0 = u64 [a3 + 0x328]\n  9995: u64 [s1 + 0x268] = a0\n  9999: ra = 0x1be\n 10003: t0 = 0x59c\n 10007: jump @1810\n      : @460 [@dyn 223] (gas: 3)\n 10011: a0 = s1 + 0x2ae0\n 10015: a1 = 0x40\n 10018: ra = 448, jump @7\n      : @461 [@dyn 224] (gas: 13)\n 10024: a2 = s1 + 0x29f8\n 10028: t0 = u64 [a2 + 0x100]\n 10032: a5 = u64 [a2 + 0xf8]\n 10036: a4 = u64 [a2 + 0xf0]\n 10040: a0 = u64 [a2 + 0xe8]\n 10044: a3 = a4 | t0\n 10047: a1 = a0 | a5\n 10050: a1 = a1 | a3\n 10053: a1 = a1 >> 0x20\n 10056: a3 = a3 | a5\n 10059: a3 = a3 << 0x20\n 10062: a1 = a1 | a3\n 10065: jump @463 if a1 == 0\n      : @462 (gas: 1)\n 10068: jump @797\n      : @463 (gas: 11)\n 10071: u64 [a2 + 216] = 0\n 10075: u64 [a2 + 208] = 0\n 10079: u64 [a2 + 200] = 0\n 10083: a3 = 0xe811184200000000\n 10093: a1 = s1 + 0x2ac0\n 10097: u64 [a2 + 0xe0] = a3\n 10101: u64 [s1 + 0x278] = a0\n 10105: u64 [s1 + 0x260] = a4\n 10109: u64 [s1 + 0x258] = a5\n 10113: u64 [s1 + 0x250] = t0\n 10117: ra = 450, jump @9\n      : @464 [@dyn 225] (gas: 11)\n 10123: a4 = s1 + 0x200\n 10127: a2 = u64 [a4 + 0x78]\n 10130: a0 = u64 [a4 + 0x58]\n 10133: a1 = u64 [a4 + 0x50]\n 10136: a0 = a0 | a1\n 10139: a1 = 0xfffffffc\n 10149: a1 = a2 <u a1\n 10152: a3 = u64 [a4 + 0x60]\n 10155: a1 = 0 if a3 != 0\n 10157: a1 = 0 if a0 != 0\n 10159: jump @466 if a1 != 0\n      : @465 (gas: 1)\n 10162: jump @797\n      : @466 (gas: 10)\n 10165: i32 a0 = a2 + 0x4\n 10168: a3 = s1 + 0x29f8\n 10172: u64 [a3 + 192] = 0\n 10176: u64 [a3 + 184] = 0\n 10180: a1 = u64 [s1 + 0x268]\n 10184: u64 [a3 + 0xa8] = a1\n 10188: a1 = s1 + 0x2aa0\n 10192: a4 = u64 [s1 + 0x270]\n 10196: u64 [a3 + 0xb0] = a4\n 10200: ra = 452, jump @9\n      : @467 [@dyn 226] (gas: 1)\n 10206: ra = 454, jump @0\n      : @468 [@dyn 227] (gas: 33)\n 10212: a1 = u64 [0x30220]\n 10217: u64 [s1 + 0x270] = a1\n 10221: a1 = u64 [0x30230]\n 10226: u64 [s1 + 0x268] = a1\n 10230: a0 = u64 [0x30228]\n 10235: u64 [s1 + 0x248] = a0\n 10239: ecalli 10 // 'ref_time_left'\n 10241: a0 = u64 [s1 + 0x248]\n 10245: a0 = reverse a0\n 10247: a1 = a0 << 0x20\n 10250: a2 = u64 [s1 + 0x268]\n 10254: a2 = reverse a2\n 10256: a2 = a2 >> 0x20\n 10259: a1 = a1 | a2\n 10262: a0 = a0 >> 0x20\n 10265: a2 = u64 [s1 + 0x270]\n 10269: a2 = reverse a2\n 10271: a4 = 0x30200\n 10276: a3 = a2 << 0x20\n 10279: a0 = a0 | a3\n 10282: a2 = a2 >> 0x20\n 10285: u64 [s1 + 0x270] = a4\n 10289: u32 [0x30210] = a2\n 10294: u64 [0x30208] = a0\n 10299: u64 [0x30200] = a1\n 10304: a0 = s1 + 0x31f8\n 10308: u64 [a0 + 864] = 0\n 10312: u64 [a0 + 856] = 0\n 10316: u64 [a0 + 848] = 0\n 10320: u64 [a0 + 840] = 0\n 10324: a1 = 0x24\n 10327: a0 = u64 [s1 + 0x278]\n 10331: ra = 456, jump @18\n      : @469 [@dyn 228] (gas: 4)\n 10337: u64 [s1 + 0x268] = a0\n 10341: a1 = 0x20\n 10344: a0 = u64 [s1 + 0x278]\n 10348: ra = 458, jump @18\n      : @470 [@dyn 229] (gas: 33)\n 10354: a2 = s1 + 0x31f8\n 10358: a3 = a2 + 0x300\n 10362: u32 [a3 + 104] = 0x20\n 10366: u64 [a3 + 160] = 0xffffffffffffffff\n 10371: u64 [a3 + 152] = 0xffffffffffffffff\n 10376: u64 [a3 + 144] = 0xffffffffffffffff\n 10381: u64 [a3 + 136] = 0xffffffffffffffff\n 10386: a1 = u64 [s1 + 0x270]\n 10390: a1 = a1 << 0x20\n 10393: a1 = a1 >> 0x20\n 10396: a2 = 0x800000000\n 10406: t0 = a1 | a2\n 10409: a1 = s1 + 0x3540\n 10413: a1 = a1 << 0x20\n 10416: a1 = a1 >> 0x20\n 10419: a2 = s1 + 0x3580\n 10423: a2 = a2 << 0x20\n 10426: a3 = a2 | a1\n 10429: a1 = u64 [s1 + 0x268]\n 10433: a1 = a1 << 0x20\n 10436: a1 = a1 >> 0x20\n 10439: a2 = 0x2400000000\n 10449: a4 = a1 | a2\n 10452: a0 = a0 << 0x20\n 10455: a0 = a0 >> 0x20\n 10458: a1 = s1 + 0x3560\n 10462: a1 = a1 << 0x20\n 10465: a5 = a1 | a0\n 10468: a1 = 0xffffffffffffffff\n 10471: a2 = 0xffffffffffffffff\n 10474: a0 = t0\n 10476: ecalli 0 // 'call'\n 10477: fallthrough\n      : @471 (gas: 1)\n 10478: jump @473 if a0 != 0\n      : @472 (gas: 1)\n 10481: jump @1187\n      : @473 (gas: 3)\n 10484: a0 = s1 + 0x2a80\n 10488: a1 = 0x40\n 10491: ra = 460, jump @7\n      : @474 [@dyn 230] (gas: 13)\n 10497: a0 = s1 + 0x29f8\n 10501: a1 = u64 [a0 + 0xa0]\n 10505: u64 [s1 + 0x270] = a1\n 10509: a1 = u64 [a0 + 0x98]\n 10513: u64 [s1 + 0x268] = a1\n 10517: a1 = u64 [a0 + 0x90]\n 10521: u64 [s1 + 0x260] = a1\n 10525: a0 = u64 [a0 + 0x88]\n 10529: u64 [s1 + 0x278] = a0\n 10533: ra = 0x1ce\n 10537: ecalli 12 // 'return_data_size'\n 10539: t0 = 0x1d0\n 10543: jump @1779\n      : @475 [@dyn 231] (gas: 1)\n 10547: t0 = 464, jump @1779\n      : @476 [@dyn 232] (gas: 1)\n 10554: jump @478 if a1 == 0\n      : @477 (gas: 1)\n 10557: jump @797\n      : @478 (gas: 3)\n 10560: a2 = a0\n 10562: a0 = a0 >> 0x20\n 10565: jump @480 if a0 == 0\n      : @479 (gas: 1)\n 10568: jump @797\n      : @480 (gas: 1)\n 10571: t0 = 466, jump @1805\n      : @481 [@dyn 233] (gas: 1)\n 10578: ra = 468, jump @18\n      : @482 [@dyn 234] (gas: 11)\n 10584: a1 = s1 + 0x31f8\n 10588: a2 = u64 [s1 + 0x268]\n 10592: u32 [a1 + 0x3a8] = a2\n 10596: i32 a0 = a0 + 0\n 10598: a1 = s1 + 0x3000\n 10602: i32 a1 = a1 + 0x5a0\n 10606: a2 = 0\n 10608: ecalli 11 // 'return_data_copy'\n 10610: a0 = s1 + 0x31f8\n 10614: a0 = i32 [a0 + 0x3a8]\n 10618: jump @634\n      : @483 (gas: 1)\n 10621: jump @485 if a0 == 1974614268\n      : @484 (gas: 1)\n 10628: jump @1125\n      : @485 (gas: 9)\n 10631: u64 [a2 + 1888] = 0\n 10635: u64 [a2 + 1880] = 0\n 10639: u64 [a2 + 1872] = 0\n 10643: u64 [a2 + 1864] = 0\n 10647: a0 = s1 + 0x3000\n 10651: i32 a0 = a0 + 0x140\n 10655: ra = 0x1d6\n 10659: ecalli 16 // 'value_transferred'\n 10661: fallthrough\n      : @486 [@dyn 235] (gas: 3)\n 10662: a3 = s1 + 0x29f8\n 10666: a4 = a3 + 0x700\n 10670: t0 = 472, jump @1824\n      : @487 [@dyn 236] (gas: 1)\n 10677: jump @489 if a0 == 0\n      : @488 (gas: 1)\n 10680: jump @1130\n      : @489 (gas: 3)\n 10683: a0 = u64 [s1 + 0x278]\n 10687: a0 = i32 [a0]\n 10689: jump @491 if a0 >u 3\n      : @490 (gas: 1)\n 10693: jump @1131\n      : @491 (gas: 3)\n 10696: a0 = s1 + 0x1f60\n 10700: a1 = 0x40\n 10703: ra = 474, jump @7\n      : @492 [@dyn 237] (gas: 7)\n 10709: a3 = s1 + 0x19f8\n 10713: a5 = a3 + 0x500\n 10717: a4 = u64 [a5 + 0x80]\n 10721: a1 = u64 [a5 + 0x78]\n 10724: a2 = u64 [a5 + 0x70]\n 10727: a0 = u64 [a5 + 0x68]\n 10730: t0 = 476, jump @1784\n      : @493 [@dyn 238] (gas: 1)\n 10737: jump @495 if a1 == 0\n      : @494 (gas: 1)\n 10740: jump @797\n      : @495 (gas: 13)\n 10743: a1 = u64 [0x20030]\n 10748: a5 = a3 + 0x500\n 10752: u64 [a5 + 0x60] = a1\n 10755: a4 = u64 [0x20038]\n 10760: a1 = u64 [0x20040]\n 10765: a2 = u64 [0x20048]\n 10770: u64 [a5 + 0x58] = a4\n 10773: u64 [a5 + 0x50] = a1\n 10776: a1 = s1 + 0x1f40\n 10780: u64 [a5 + 0x48] = a2\n 10783: u64 [s1 + 0x278] = a0\n 10787: ra = 0x22a\n 10791: jump @9\n      : @496 (gas: 9)\n 10794: u64 [a2 + 672] = 0\n 10798: u64 [a2 + 664] = 0\n 10802: u64 [a2 + 656] = 0\n 10806: u64 [a2 + 648] = 0\n 10810: a0 = s1 + 0x3000\n 10814: i32 a0 = a0 + 0xfffffffffffffc80\n 10818: ra = 0x1de\n 10822: ecalli 16 // 'value_transferred'\n 10824: fallthrough\n      : @497 [@dyn 239] (gas: 3)\n 10825: a3 = s1 + 0x29f8\n 10829: a4 = a3 + 0x200\n 10833: t0 = 480, jump @1807\n      : @498 [@dyn 240] (gas: 1)\n 10840: jump @500 if a0 == 0\n      : @499 (gas: 1)\n 10843: jump @1132\n      : @500 (gas: 1)\n 10846: t0 = 482, jump @1808\n      : @501 [@dyn 241] (gas: 1)\n 10853: jump @503 if a1 <u a0\n      : @502 (gas: 1)\n 10856: jump @1133\n      : @503 (gas: 5)\n 10859: a0 = s1 + 0x3000\n 10863: i32 a0 = a0 + 0xfffffffffffffca0\n 10867: a1 = 0x4\n 10870: ecalli 2 // 'call_data_load'\n 10872: fallthrough\n      : @504 (gas: 9)\n 10873: a2 = s1 + 0x29f8\n 10877: a0 = a2 + 0x200\n 10881: a5 = u64 [a0 + 0xc0]\n 10885: a3 = u64 [a0 + 0xb8]\n 10889: a4 = u64 [a0 + 0xb0]\n 10893: a0 = a3 | a5\n 10896: a1 = a4 <u 0x1\n 10899: a1 = 0 if a0 != 0\n 10901: jump @506 if a1 != 0\n      : @505 (gas: 1)\n 10904: jump @1134\n      : @506 (gas: 19)\n 10907: a1 = u64 [a2 + 0x2a8]\n 10911: a0 = u64 [s1 + 0x278]\n 10915: t2 = u32 [a0]\n 10917: a0 = a1 + 0x23\n 10920: a2 = a0 <u a1\n 10923: t0 = a4 + a2\n 10926: u64 [s1 + 0x260] = a4\n 10930: a4 = t0 <u a4\n 10933: a4 = a2 if a2 == 0\n 10936: a4 = a4 + a3\n 10939: u64 [s1 + 0x268] = a3\n 10943: a2 = a4 <u a3\n 10946: u64 [s1 + 0x270] = a5\n 10950: a2 = a2 + a5\n 10953: a2 = a2 | a4\n 10956: a0 = a0 <u t2\n 10959: a0 = 0 if t0 != 0\n 10961: a0 = 0 if a2 != 0\n 10963: jump @508 if a0 != 0\n      : @507 (gas: 1)\n 10966: jump @1135\n      : @508 (gas: 6)\n 10969: u64 [s1 + 0x258] = a1\n 10973: i32 a1 = a1 + 0x4\n 10976: a0 = s1 + 0x3000\n 10980: i32 a0 = a0 + 0xfffffffffffffcc0\n 10984: ecalli 2 // 'call_data_load'\n 10986: fallthrough\n      : @509 (gas: 9)\n 10987: a3 = s1 + 0x29f8\n 10991: a0 = u64 [a3 + 0x2e0]\n 10995: ra = u64 [a3 + 0x2d8]\n 10999: a2 = u64 [a3 + 0x2d0]\n 11003: u64 [s1 + 0x210] = a0\n 11007: a0 = ra | a0\n 11010: a1 = a2 <u 0x1\n 11013: a1 = 0 if a0 != 0\n 11015: jump @511 if a1 != 0\n      : @510 (gas: 1)\n 11018: jump @1136\n      : @511 (gas: 59)\n 11021: a3 = u64 [a3 + 0x2c8]\n 11025: a0 = a3 >> 0x3b\n 11028: a1 = a2 << 0x5\n 11031: a4 = a1 | a0\n 11034: u64 [s1 + 0x1f8] = a3\n 11038: a1 = a3 << 0x5\n 11041: a0 = u64 [s1 + 0x258]\n 11045: a3 = a0 + 0x24\n 11048: t2 = a3 <u a0\n 11051: t1 = u64 [s1 + 0x260]\n 11055: a0 = t1 + t2\n 11058: t0 = a0 + a4\n 11061: a1 = a1 + a3\n 11064: u64 [s1 + 0x238] = a1\n 11068: u64 [s1 + 0x248] = a3\n 11072: a4 = a1 <u a3\n 11075: t0 = t0 + a4\n 11078: a5 = t0 ^ a0\n 11081: a3 = t0 <u a0\n 11084: a3 = a4 if a5 == 0\n 11087: a4 = ra >> 0x3b\n 11090: a5 = u64 [s1 + 0x210]\n 11094: a5 = a5 << 0x5\n 11097: a4 = a4 | a5\n 11100: u64 [s1 + 0x200] = a2\n 11104: a5 = a2 >> 0x3b\n 11107: u64 [s1 + 0x208] = ra\n 11111: a1 = ra << 0x5\n 11114: a1 = a1 | a5\n 11117: u64 [s1 + 0x258] = a0\n 11121: a5 = a0 <u t1\n 11124: a5 = t2 if t2 == 0\n 11127: a0 = u64 [s1 + 0x268]\n 11131: a5 = a5 + a0\n 11134: a2 = a5 <u a0\n 11137: a0 = u64 [s1 + 0x270]\n 11141: a2 = a2 + a0\n 11144: a1 = a1 + a5\n 11147: u64 [s1 + 0x250] = a2\n 11151: a4 = a4 + a2\n 11154: u64 [s1 + 0x240] = a5\n 11158: a2 = a1 <u a5\n 11161: a2 = a2 + a4\n 11164: a4 = u64 [s1 + 0x278]\n 11168: a4 = u32 [a4]\n 11170: a3 = a3 + a1\n 11173: a1 = a3 <u a1\n 11176: a1 = a1 + a2\n 11179: a0 = u64 [s1 + 0x238]\n 11183: a2 = a4 <u a0\n 11186: a4 = t0 <u 0x1\n 11189: a2 = a2 ^ 0x1\n 11192: a2 = a4 if t0 != 0\n 11195: a0 = a1 <u 0x1\n 11198: a4 = a3 <u 0x1\n 11201: a4 = a0 if a1 != 0\n 11204: a1 = a1 | a3\n 11207: a2 = a4 if a1 != 0\n 11210: jump @513 if a2 != 0\n      : @512 (gas: 1)\n 11213: jump @1137\n      : @513 (gas: 3)\n 11216: ra = 0x1e4\n 11220: t0 = 0x59c\n 11224: jump @1810\n      : @514 [@dyn 242] (gas: 3)\n 11228: a0 = s1 + 0x6e0\n 11232: a1 = 0x40\n 11235: ra = 486, jump @7\n      : @515 [@dyn 243] (gas: 13)\n 11241: a1 = s1 + 0x600\n 11245: a3 = u64 [a1 + 0xf8]\n 11249: a4 = u64 [a1 + 0xf0]\n 11253: a5 = u64 [a1 + 0xe8]\n 11257: a0 = u64 [a1 + 0xe0]\n 11261: a2 = a5 | a3\n 11264: a1 = a0 | a4\n 11267: a1 = a1 | a2\n 11270: a1 = a1 >> 0x20\n 11273: a2 = a2 | a4\n 11276: a2 = a2 << 0x20\n 11279: a1 = a1 | a2\n 11282: jump @517 if a1 == 0\n      : @516 (gas: 1)\n 11285: jump @797\n      : @517 (gas: 11)\n 11288: u64 [s1 + 1744] = 0\n 11292: u64 [s1 + 1736] = 0\n 11296: u64 [s1 + 1728] = 0\n 11300: a2 = 0x19f2fdad00000000\n 11310: a1 = s1 + 0x6c0\n 11314: u64 [s1 + 0x6d8] = a2\n 11318: u64 [s1 + 0x1e8] = a0\n 11322: u64 [s1 + 0x1d8] = a3\n 11326: u64 [s1 + 0x1d0] = a4\n 11330: u64 [s1 + 0x1e0] = a5\n 11334: ra = 488, jump @9\n      : @518 [@dyn 244] (gas: 12)\n 11340: a2 = s1 + 0x100\n 11344: a1 = u64 [a2 + 0xe8]\n 11348: a0 = u64 [a2 + 0xd8]\n 11352: a4 = u64 [a2 + 0xd0]\n 11356: a4 = a4 | a0\n 11359: a5 = 0x100000000\n 11369: a0 = 0xfffffffc\n 11379: a0 = a1 <u a0\n 11382: a3 = u64 [a2 + 0xe0]\n 11386: a0 = 0 if a3 != 0\n 11388: a0 = 0 if a4 != 0\n 11390: jump @520 if a0 != 0\n      : @519 (gas: 1)\n 11393: jump @797\n      : @520 (gas: 9)\n 11396: i32 a0 = a1 + 0x4\n 11399: u64 [s1 + 1720] = 0\n 11403: u64 [s1 + 1712] = 0\n 11407: u64 [s1 + 1696] = 0x20\n 11412: a1 = s1 + 0x6a0\n 11416: u64 [s1 + 1704] = 0\n 11420: u64 [s1 + 0x278] = a4\n 11424: u64 [s1 + 0x270] = a5\n 11428: ra = 490, jump @9\n      : @521 [@dyn 245] (gas: 9)\n 11434: a3 = u64 [s1 + 0x1e0]\n 11438: a2 = u64 [s1 + 0x1e8]\n 11442: a0 = u64 [s1 + 0x270]\n 11446: a0 = a0 + 0xffffffffffffffdc\n 11449: a0 = a2 <u a0\n 11452: a0 = 0 if a3 != 0\n 11454: a1 = u64 [s1 + 0x278]\n 11458: a0 = 0 if a1 != 0\n 11460: jump @523 if a0 != 0\n      : @522 (gas: 1)\n 11463: jump @797\n      : @523 (gas: 12)\n 11466: i32 a0 = a2 + 0x24\n 11469: a1 = u64 [s1 + 0x1f8]\n 11473: a2 = s1 + 0x600\n 11477: u64 [a2 + 0x80] = a1\n 11481: a1 = u64 [s1 + 0x200]\n 11485: u64 [a2 + 0x88] = a1\n 11489: a1 = u64 [s1 + 0x208]\n 11493: u64 [a2 + 0x90] = a1\n 11497: a1 = s1 + 0x680\n 11501: a4 = u64 [s1 + 0x210]\n 11505: u64 [a2 + 0x98] = a4\n 11509: ra = 492, jump @9\n      : @524 [@dyn 246] (gas: 26)\n 11515: a5 = 0\n 11517: a3 = 0\n 11519: t1 = 0\n 11521: t2 = 0\n 11523: a4 = s1 + 0x100\n 11527: a1 = u64 [a4 + 0xe8]\n 11531: a0 = a1 + 0x44\n 11534: u64 [s1 + 0x270] = a0\n 11538: a0 = a0 <u a1\n 11541: a2 = u64 [a4 + 0xe0]\n 11545: a1 = a2 + a0\n 11548: u64 [s1 + 0x268] = a1\n 11552: a1 = a1 <u a2\n 11555: a1 = a0 if a0 == 0\n 11558: a0 = u64 [a4 + 0xd0]\n 11562: a1 = a1 + a0\n 11565: u64 [s1 + 0x260] = a1\n 11569: a0 = a1 <u a0\n 11572: a1 = u64 [a4 + 0xd8]\n 11576: a0 = a0 + a1\n 11579: u64 [s1 + 0x278] = a0\n 11583: a0 = 0xffffffff\n 11593: u64 [a4 + 0xf0] = a0\n 11597: t0 = u64 [s1 + 0x248]\n 11601: ra = u64 [s1 + 0x240]\n 11605: fallthrough\n      : @525 (gas: 17)\n 11606: a0 = u64 [s1 + 0x1f8]\n 11610: a0 = a5 <u a0\n 11613: a2 = u64 [s1 + 0x200]\n 11617: a1 = a3 ^ a2\n 11620: u64 [s1 + 0x238] = a3\n 11624: a2 = a3 <u a2\n 11627: a2 = a0 if a1 == 0\n 11630: a4 = u64 [s1 + 0x208]\n 11634: a0 = t1 <u a4\n 11637: a3 = u64 [s1 + 0x210]\n 11641: a1 = t2 ^ a3\n 11644: a3 = t2 <u a3\n 11647: a3 = a0 if a1 == 0\n 11650: a0 = t1 ^ a4\n 11653: a0 = a0 | a1\n 11656: a3 = a2 if a0 == 0\n 11659: jump @527 if a3 != 0\n      : @526 (gas: 1)\n 11662: jump @753\n      : @527 (gas: 10)\n 11665: a0 = t0 | ra\n 11668: a1 = u64 [s1 + 0x250]\n 11672: a2 = u64 [s1 + 0x258]\n 11676: a1 = a1 | a2\n 11679: a0 = a0 | a1\n 11682: a0 = a0 >> 0x20\n 11685: a1 = a1 | ra\n 11688: a1 = a1 << 0x20\n 11691: a0 = a0 | a1\n 11694: jump @529 if a0 == 0\n      : @528 (gas: 1)\n 11697: jump @797\n      : @529 (gas: 10)\n 11700: u64 [s1 + 0x220] = t1\n 11704: u64 [s1 + 0x228] = t2\n 11708: u64 [s1 + 0x230] = a5\n 11712: u64 [s1 + 0x240] = ra\n 11716: u64 [s1 + 0x248] = t0\n 11720: i32 a1 = t0 + 0\n 11722: a0 = s1 + 0x3000\n 11726: i32 a0 = a0 + 0xfffffffffffffce0\n 11730: ecalli 2 // 'call_data_load'\n 11732: fallthrough\n      : @530 (gas: 12)\n 11733: t0 = s1 + 0x29f8\n 11737: a4 = u64 [t0 + 0x300]\n 11741: a1 = u64 [t0 + 0x2f8]\n 11745: a2 = a4 >u 0\n 11747: a3 = a1 >> 0x20\n 11750: a3 = a3 >u 0\n 11752: a3 = a2 if a4 != 0\n 11755: a2 = u64 [s1 + 0x1f0]\n 11759: a2 = a2 ^ a1\n 11762: a2 = a2 | a4\n 11765: a3 = 0 if a2 == 0\n 11767: jump @532 if a3 == 0\n      : @531 (gas: 1)\n 11770: jump @798\n      : @532 (gas: 12)\n 11773: a0 = u64 [s1 + 0x270]\n 11777: a5 = u64 [s1 + 0x260]\n 11781: a2 = a0 | a5\n 11784: t2 = u64 [s1 + 0x278]\n 11788: t1 = u64 [s1 + 0x268]\n 11792: a3 = t1 | t2\n 11795: a2 = a2 | a3\n 11798: a2 = a2 >> 0x20\n 11801: a3 = a3 | a5\n 11804: a3 = a3 << 0x20\n 11807: a2 = a2 | a3\n 11810: jump @534 if a2 == 0\n      : @533 (gas: 1)\n 11813: jump @797\n      : @534 (gas: 13)\n 11816: a2 = u64 [t0 + 0x2f0]\n 11820: a3 = u64 [t0 + 0x2e8]\n 11824: u64 [s1 + 0x5a0] = a3\n 11828: a3 = s1 + 0x500\n 11832: u64 [a3 + 0xa8] = a2\n 11836: u64 [a3 + 0xb0] = a1\n 11840: a1 = s1 + 0x5a0\n 11844: u64 [a3 + 0xb8] = a4\n 11848: u64 [s1 + 0x278] = t2\n 11852: u64 [s1 + 0x270] = a0\n 11856: u64 [s1 + 0x268] = t1\n 11860: u64 [s1 + 0x260] = a5\n 11864: ra = 494, jump @9\n      : @535 [@dyn 247] (gas: 47)\n 11870: a1 = u64 [s1 + 0x270]\n 11874: a0 = a1 + 0x20\n 11877: u64 [s1 + 0x218] = a0\n 11881: a2 = a0 <u a1\n 11884: a0 = u64 [s1 + 0x268]\n 11888: t1 = a0 + a2\n 11891: a3 = t1 <u a0\n 11894: a3 = a2 if a2 == 0\n 11897: a0 = u64 [s1 + 0x260]\n 11901: ra = a0 + a3\n 11904: a3 = ra <u a0\n 11907: a0 = u64 [s1 + 0x278]\n 11911: a0 = a0 + a3\n 11914: u64 [s1 + 0x278] = a0\n 11918: a0 = u64 [s1 + 0x248]\n 11922: t0 = a0 + 0x20\n 11925: a4 = t0 <u a0\n 11928: a0 = u64 [s1 + 0x258]\n 11932: a2 = a0 + a4\n 11935: a0 = a2 <u a0\n 11938: a0 = a4 if a4 == 0\n 11941: a1 = u64 [s1 + 0x240]\n 11945: a0 = a0 + a1\n 11948: a4 = a0 <u a1\n 11951: a1 = u64 [s1 + 0x250]\n 11955: a1 = a1 + a4\n 11958: u64 [s1 + 0x250] = a1\n 11962: a5 = u64 [s1 + 0x230]\n 11966: a5 = a5 + 0x1\n 11969: a4 = a5 <u 0x1\n 11972: a3 = u64 [s1 + 0x238]\n 11976: a3 = a3 + a4\n 11979: a4 = a5 | a3\n 11982: a4 = a4 <u 0x1\n 11985: a1 = u64 [s1 + 0x220]\n 11989: a4 = a4 + a1\n 11992: a1 = a4 <u a1\n 11995: t2 = u64 [s1 + 0x228]\n 11999: t2 = t2 + a1\n 12002: a1 = u64 [s1 + 0x218]\n 12006: u64 [s1 + 0x270] = a1\n 12010: u64 [s1 + 0x268] = t1\n 12014: u64 [s1 + 0x260] = ra\n 12018: u64 [s1 + 0x258] = a2\n 12022: ra = a0\n 12024: t1 = a4\n 12026: jump @525\n      : @536 (gas: 9)\n 12029: u64 [a2 + 1920] = 0\n 12033: u64 [a2 + 1912] = 0\n 12037: u64 [a2 + 1904] = 0\n 12041: u64 [a2 + 1896] = 0\n 12045: a0 = s1 + 0x3000\n 12049: i32 a0 = a0 + 0x160\n 12053: ra = 0x1f0\n 12057: ecalli 16 // 'value_transferred'\n 12059: fallthrough\n      : @537 [@dyn 248] (gas: 10)\n 12060: a3 = s1 + 0x29f8\n 12064: a4 = a3 + 0x700\n 12068: a0 = u64 [a4 + 0x78]\n 12071: a1 = u64 [a4 + 0x80]\n 12075: a2 = u64 [a4 + 0x70]\n 12078: a3 = u64 [a4 + 0x68]\n 12081: a1 = a1 | a2\n 12084: a0 = a0 | a3\n 12087: a0 = a0 | a1\n 12090: jump @539 if a0 == 0\n      : @538 (gas: 1)\n 12093: jump @1138\n      : @539 (gas: 1)\n 12096: t0 = 498, jump @1808\n      : @540 [@dyn 249] (gas: 1)\n 12103: jump @542 if a1 <u a0\n      : @541 (gas: 1)\n 12106: jump @1139\n      : @542 (gas: 21)\n 12109: a0 = s1 + 0x3000\n 12113: i32 a0 = a0 + 0x180\n 12117: a1 = 0x4\n 12120: ecalli 2 // 'call_data_load'\n 12122: a1 = s1 + 0x29f8\n 12126: a2 = a1 + 0x700\n 12130: a0 = u64 [a2 + 0xa0]\n 12134: u64 [s1 + 0x270] = a0\n 12138: a0 = u64 [a2 + 0x98]\n 12142: u64 [s1 + 0x278] = a0\n 12146: a0 = u64 [a2 + 0x90]\n 12150: u64 [s1 + 0x268] = a0\n 12154: a0 = u64 [a2 + 0x88]\n 12158: u64 [s1 + 0x260] = a0\n 12162: u64 [a1 + 1984] = 0\n 12166: u64 [a1 + 1976] = 0\n 12170: u64 [a1 + 1968] = 0\n 12174: u64 [a2 + 168] = 0x1\n 12179: a0 = s1 + 0x2160\n 12183: a1 = s1 + 0x31a0\n 12187: ra = 500, jump @11\n      : @543 [@dyn 250] (gas: 22)\n 12193: t2 = u64 [s1 + 0x270]\n 12197: t1 = u64 [s1 + 0x268]\n 12201: t0 = u64 [s1 + 0x260]\n 12205: a5 = s1 + 0x19f8\n 12209: a2 = a5 + 0x700\n 12213: a0 = u64 [a2 + 0x70]\n 12216: a1 = u64 [a2 + 0x68]\n 12219: ra = u64 [a5 + 0x778]\n 12223: a3 = u64 [a2 + 0x80]\n 12227: a4 = t1 ^ a0\n 12230: a0 = t1 <u a0\n 12233: a1 = t0 <u a1\n 12236: a1 = a0 if a4 != 0\n 12239: a0 = t2 ^ a3\n 12242: a2 = t2 <u a3\n 12245: a3 = u64 [s1 + 0x278]\n 12249: a4 = a3 <u ra\n 12252: a4 = a2 if a0 != 0\n 12255: a2 = a3 ^ ra\n 12258: a0 = a0 | a2\n 12261: a1 = a4 if a0 != 0\n 12264: jump @545 if a1 != 0\n      : @544 (gas: 1)\n 12267: jump @1140\n      : @545 (gas: 11)\n 12270: a0 = sp + 0xffffffffffffffe0\n 12273: a0 = a0 & 0xffffffffffffffe0\n 12276: u64 [s1 + 0x258] = a0\n 12280: sp = a0\n 12282: u64 [a5 + 0x720] = t2\n 12286: u64 [a5 + 0x718] = a3\n 12290: u64 [a5 + 0x710] = t1\n 12294: a0 = s1 + 0x2120\n 12298: a1 = s1 + 0x2100\n 12302: u64 [a5 + 0x708] = t0\n 12306: ra = 502, jump @1373\n      : @546 [@dyn 251] (gas: 17)\n 12312: a1 = s1 + 0x19f8\n 12316: a5 = a1 + 0x700\n 12320: a4 = u64 [a5 + 0x38]\n 12323: u64 [s1 + 0x260] = a4\n 12327: a0 = u64 [a5 + 0x40]\n 12330: u64 [s1 + 0x278] = a0\n 12334: a3 = u64 [a5 + 0x28]\n 12337: u64 [s1 + 0x268] = a3\n 12341: a2 = u64 [a5 + 0x30]\n 12344: u64 [s1 + 0x270] = a2\n 12348: a1 = u64 [s1 + 0x258]\n 12352: u64 [a1 + 0x10] = a4\n 12355: u64 [a1 + 0x18] = a0\n 12358: u64 [a1] = a3\n 12360: u64 [a1 + 0x8] = a2\n 12363: a0 = s1 + 0x20e0\n 12367: ra = 504, jump @11\n      : @547 [@dyn 252] (gas: 29)\n 12373: a1 = s1 + 0x19f8\n 12377: a2 = a1 + 0x600\n 12381: a0 = u64 [a2 + 0xf8]\n 12385: u64 [s1 + 0x248] = a0\n 12389: a0 = u64 [a2 + 0xf0]\n 12393: u64 [s1 + 0x258] = a0\n 12397: a0 = u64 [a2 + 0xe8]\n 12401: u64 [s1 + 0x250] = a0\n 12405: a0 = u64 [s1 + 0x268]\n 12409: a0 = a0 + 0x1\n 12412: a1 = a0 <u 0x1\n 12415: a2 = u64 [s1 + 0x270]\n 12419: a1 = a1 + a2\n 12422: a2 = s1 + 0x29f8\n 12426: a3 = a2 + 0x700\n 12430: u64 [a3 + 0xd0] = a1\n 12434: a1 = a1 | a0\n 12437: u64 [a3 + 0xc8] = a0\n 12441: a0 = a1 <u 0x1\n 12444: a1 = u64 [s1 + 0x260]\n 12448: a0 = a0 + a1\n 12451: u64 [a3 + 0xd8] = a0\n 12455: a0 = a0 <u a1\n 12458: a1 = u64 [s1 + 0x278]\n 12462: a0 = a0 + a1\n 12465: u64 [a3 + 0xe0] = a0\n 12469: a0 = s1 + 0x20c0\n 12473: a1 = s1 + 0x31c0\n 12477: ra = 506, jump @11\n      : @548 [@dyn 253] (gas: 13)\n 12483: a1 = s1 + 0x19f8\n 12487: a2 = a1 + 0x600\n 12491: a0 = u64 [a2 + 0xe0]\n 12495: u64 [s1 + 0x228] = a0\n 12499: a0 = u64 [a2 + 0xd8]\n 12503: u64 [s1 + 0x240] = a0\n 12507: a0 = u64 [a2 + 0xd0]\n 12511: u64 [s1 + 0x230] = a0\n 12515: a0 = u64 [a2 + 0xc8]\n 12519: u64 [s1 + 0x238] = a0\n 12523: a1 = u64 [s1 + 0x268]\n 12527: a0 = a1 + 0x2\n 12530: t0 = 508, jump @1780\n      : @549 [@dyn 254] (gas: 8)\n 12536: u64 [a4] = a1\n 12538: a1 = a4 + 0xffffffffffffff00\n 12542: u64 [a1 + 0xf8] = a3\n 12546: u64 [a1 + 0xf0] = a2\n 12550: u64 [a1 + 0xe8] = a0\n 12554: a0 = s1 + 0x20a0\n 12558: a1 = s1 + 0x31e0\n 12562: ra = 510, jump @11\n      : @550 [@dyn 255] (gas: 8)\n 12568: a1 = s1 + 0x19f8\n 12572: a0 = u64 [a1 + 0x6b0]\n 12576: u64 [s1 + 0x218] = a0\n 12580: a0 = u64 [a1 + 0x6a8]\n 12584: u64 [s1 + 0x220] = a0\n 12588: a1 = u64 [s1 + 0x268]\n 12592: a0 = a1 + 0x4\n 12595: t0 = 512, jump @1780\n      : @551 [@dyn 256] (gas: 7)\n 12601: u64 [a4 + 0x20] = a1\n 12604: u64 [a4 + 0x18] = a3\n 12607: u64 [a4 + 0x10] = a2\n 12610: u64 [a4 + 0x8] = a0\n 12613: a0 = s1 + 0x2080\n 12617: a1 = s1 + 0x3200\n 12621: ra = 514, jump @11\n      : @552 [@dyn 257] (gas: 3)\n 12627: t0 = 0x204\n 12631: a1 = s1 + 0x19f8\n 12635: fallthrough\n      : @553 [@dyn 258] (gas: 7)\n 12636: a0 = u64 [a1 + 0x690]\n 12640: u64 [s1 + 0x268] = a0\n 12644: a0 = u64 [a1 + 0x688]\n 12648: u64 [s1 + 0x260] = a0\n 12652: a0 = s1 + 0x2060\n 12656: a1 = 0x40\n 12659: ra = 518, jump @7\n      : @554 [@dyn 259] (gas: 14)\n 12665: a4 = s1 + 0x19f8\n 12669: t0 = u64 [a4 + 0x680]\n 12673: a1 = a4 + 0x600\n 12677: a5 = u64 [a1 + 0x78]\n 12680: a3 = u64 [a1 + 0x70]\n 12683: a0 = u64 [a1 + 0x68]\n 12686: a2 = a3 | t0\n 12689: a1 = a0 | a5\n 12692: a1 = a1 | a2\n 12695: a1 = a1 >> 0x20\n 12698: a2 = a2 | a5\n 12701: a2 = a2 << 0x20\n 12704: a1 = a1 | a2\n 12707: jump @556 if a1 == 0\n      : @555 (gas: 1)\n 12710: jump @797\n      : @556 (gas: 16)\n 12713: a1 = u64 [s1 + 0x248]\n 12717: a1 = a1 << 0x20\n 12720: u64 [s1 + 0x270] = a3\n 12724: a3 = a1 >> 0x20\n 12727: u64 [a4 + 1632] = 0\n 12731: a1 = u64 [s1 + 0x250]\n 12735: a2 = a4 + 0x600\n 12739: u64 [a2 + 0x48] = a1\n 12742: a1 = u64 [s1 + 0x258]\n 12746: u64 [a2 + 0x50] = a1\n 12749: a1 = s1 + 0x2040\n 12753: u64 [a2 + 0x58] = a3\n 12756: u64 [s1 + 0x278] = a0\n 12760: u64 [s1 + 0x258] = t0\n 12764: u64 [s1 + 0x250] = a5\n 12768: ra = 520, jump @9\n      : @557 [@dyn 260] (gas: 12)\n 12774: a3 = s1 + 0x200\n 12778: a4 = u64 [a3 + 0x78]\n 12781: a0 = u64 [a3 + 0x58]\n 12784: a5 = u64 [a3 + 0x50]\n 12787: a5 = a5 | a0\n 12790: a2 = 0x100000000\n 12800: a0 = 0xffffffe0\n 12810: a0 = a4 <u a0\n 12813: a1 = u64 [a3 + 0x70]\n 12816: a0 = 0 if a1 != 0\n 12818: a0 = 0 if a5 != 0\n 12820: jump @559 if a0 != 0\n      : @558 (gas: 1)\n 12823: jump @797\n      : @559 (gas: 17)\n 12826: a1 = 0xffffffff\n 12836: u64 [s1 + 0x250] = a2\n 12840: a2 = u64 [s1 + 0x240]\n 12844: a2 = a2 & a1\n 12847: a1 = u64 [s1 + 0x230]\n 12851: a1 = a1 & 0xffffffffffffffff\n 12854: a3 = u64 [s1 + 0x238]\n 12858: a3 = a3 & 0xffffffffffffffff\n 12861: i32 a0 = a4 + 0x20\n 12864: a4 = s1 + 0x19f8\n 12868: u64 [a4 + 1600] = 0\n 12872: u64 [a4 + 0x628] = a3\n 12876: u64 [a4 + 0x630] = a1\n 12880: a1 = s1 + 0x2020\n 12884: u64 [a4 + 0x638] = a2\n 12888: u64 [s1 + 0x258] = a5\n 12892: ra = 522, jump @9\n      : @560 [@dyn 261] (gas: 10)\n 12898: a3 = s1 + 0x200\n 12902: a2 = u64 [a3 + 0x78]\n 12905: a0 = u64 [a3 + 0x50]\n 12908: a0 = a0 + 0xffffffffffffffc0\n 12911: a0 = a2 <u a0\n 12914: a1 = u64 [a3 + 0x70]\n 12917: a0 = 0 if a1 != 0\n 12919: a1 = u64 [a3 + 0x58]\n 12922: a0 = 0 if a1 != 0\n 12924: jump @562 if a0 != 0\n      : @561 (gas: 1)\n 12927: jump @797\n      : @562 (gas: 12)\n 12930: a0 = 0xff00000000\n 12940: a1 = u64 [s1 + 0x240]\n 12944: a0 = a0 & a1\n 12947: a1 = a0 >u 0\n 12949: i32 a0 = a2 + 0x40\n 12952: a2 = s1 + 0x19f8\n 12956: u64 [a2 + 1568] = 0\n 12960: u64 [a2 + 1560] = 0\n 12964: u64 [a2 + 0x608] = a1\n 12968: a1 = s1 + 0x2000\n 12972: u64 [a2 + 1552] = 0\n 12976: ra = 524, jump @9\n      : @563 [@dyn 262] (gas: 10)\n 12982: a4 = s1 + 0x200\n 12986: a2 = u64 [a4 + 0x78]\n 12989: a3 = 0x100000000\n 12999: a0 = 0xffffffa0\n 13009: a0 = a2 <u a0\n 13012: a1 = u64 [a4 + 0x70]\n 13015: a0 = 0 if a1 != 0\n 13017: a1 = u64 [a4 + 0x58]\n 13020: a0 = 0 if a1 != 0\n 13022: jump @565 if a0 != 0\n      : @564 (gas: 1)\n 13025: jump @797\n      : @565 (gas: 14)\n 13028: a0 = u64 [s1 + 0x240]\n 13032: a0 = a0 >> 0x28\n 13035: a1 = u64 [s1 + 0x228]\n 13039: a1 = a1 << 0x18\n 13042: a1 = a1 | a0\n 13045: i32 a0 = a2 + 0x60\n 13048: a2 = s1 + 0x19f8\n 13052: u64 [a2 + 1536] = 0\n 13056: u64 [a2 + 1528] = 0\n 13060: u64 [a2 + 0x5e8] = a1\n 13064: a1 = s1 + 0x1fe0\n 13068: u64 [a2 + 1520] = 0\n 13072: u64 [s1 + 0x250] = a3\n 13076: ra = 526, jump @9\n      : @566 [@dyn 263] (gas: 10)\n 13082: a3 = s1 + 0x200\n 13086: a2 = u64 [a3 + 0x78]\n 13089: a0 = u64 [a3 + 0x50]\n 13092: a0 = a0 + 0xffffffffffffff80\n 13095: a0 = a2 <u a0\n 13098: a1 = u64 [a3 + 0x70]\n 13101: a0 = 0 if a1 != 0\n 13103: a1 = u64 [a3 + 0x58]\n 13106: a0 = 0 if a1 != 0\n 13108: jump @568 if a0 != 0\n      : @567 (gas: 1)\n 13111: jump @797\n      : @568 (gas: 10)\n 13114: a0 = u64 [s1 + 0x220]\n 13118: a1 = a0 & 0xffffffffffffffff\n 13121: i32 a0 = a2 + 0x80\n 13125: a2 = s1 + 0x19f8\n 13129: u64 [a2 + 1504] = 0\n 13133: u64 [a2 + 1496] = 0\n 13137: u64 [a2 + 0x5c8] = a1\n 13141: a1 = s1 + 0x1fc0\n 13145: u64 [a2 + 1488] = 0\n 13149: ra = 528, jump @9\n      : @569 [@dyn 264] (gas: 10)\n 13155: a0 = s1 + 0x200\n 13159: a4 = u64 [a0 + 0x58]\n 13162: a3 = u64 [a0 + 0x70]\n 13165: a2 = u64 [a0 + 0x78]\n 13168: a1 = 0x100000000\n 13178: a0 = 0xffffff60\n 13188: a0 = a2 <u a0\n 13191: a0 = 0 if a3 != 0\n 13193: a0 = 0 if a4 != 0\n 13195: jump @571 if a0 != 0\n      : @570 (gas: 1)\n 13198: jump @797\n      : @571 (gas: 11)\n 13201: a0 = u64 [s1 + 0x218]\n 13205: u64 [s1 + 0x250] = a1\n 13209: a1 = a0 & 0xffffffffffffffff\n 13212: i32 a0 = a2 + 0xa0\n 13216: a2 = s1 + 0x19f8\n 13220: u64 [a2 + 1472] = 0\n 13224: u64 [a2 + 1464] = 0\n 13228: u64 [a2 + 0x5a8] = a1\n 13232: a1 = s1 + 0x1fa0\n 13236: u64 [a2 + 1456] = 0\n 13240: ra = 530, jump @9\n      : @572 [@dyn 265] (gas: 10)\n 13246: a2 = s1 + 0x200\n 13250: a3 = u64 [a2 + 0x78]\n 13253: a0 = u64 [a2 + 0x50]\n 13256: a0 = a0 + 0xffffffffffffff40\n 13260: a0 = a3 <u a0\n 13263: a1 = u64 [a2 + 0x70]\n 13266: a0 = 0 if a1 != 0\n 13268: a1 = u64 [a2 + 0x58]\n 13271: a0 = 0 if a1 != 0\n 13273: jump @574 if a0 != 0\n      : @573 (gas: 1)\n 13276: jump @797\n      : @574 (gas: 10)\n 13279: i32 a0 = a3 + 0xc0\n 13283: a4 = s1 + 0x19f8\n 13287: u64 [a4 + 1440] = 0\n 13291: u64 [a4 + 1432] = 0\n 13295: a1 = u64 [s1 + 0x260]\n 13299: u64 [a4 + 0x588] = a1\n 13303: a1 = s1 + 0x1f80\n 13307: a2 = u64 [s1 + 0x268]\n 13311: u64 [a4 + 0x590] = a2\n 13315: ra = 532, jump @9\n      : @575 [@dyn 266] (gas: 3)\n 13321: a1 = 0xe0\n 13325: a0 = u64 [s1 + 0x278]\n 13329: ra = 534, jump @18\n      : @576 [@dyn 267] (gas: 5)\n 13335: i32 a1 = a0 + 0\n 13337: a2 = 0xe0\n 13341: a0 = 0\n 13343: ecalli 13 // 'seal_return'\n 13345: jump @603\n      : @577 (gas: 9)\n 13348: u64 [a3 + 992] = 0\n 13352: u64 [a3 + 984] = 0\n 13356: u64 [a3 + 976] = 0\n 13360: u64 [a3 + 968] = 0\n 13364: a0 = s1 + 0x3000\n 13368: i32 a0 = a0 + 0x5c0\n 13372: ra = 0x218\n 13376: ecalli 16 // 'value_transferred'\n 13378: fallthrough\n      : @578 [@dyn 268] (gas: 3)\n 13379: a3 = s1 + 0x31f8\n 13383: a4 = a3 + 0x300\n 13387: t0 = 538, jump @1827\n      : @579 [@dyn 269] (gas: 1)\n 13394: jump @581 if a0 == 0\n      : @580 (gas: 1)\n 13397: jump @1141\n      : @581 (gas: 3)\n 13400: a0 = u64 [s1 + 0x278]\n 13404: a0 = i32 [a0]\n 13406: jump @583 if a0 >u 3\n      : @582 (gas: 1)\n 13410: jump @1142\n      : @583 (gas: 3)\n 13413: a0 = s1 + 0x2b20\n 13417: a1 = 0x40\n 13420: ra = 540, jump @7\n      : @584 [@dyn 270] (gas: 11)\n 13426: a0 = s1 + 0x29f8\n 13430: a2 = a0 + 0x100\n 13434: a1 = u64 [a2 + 0x40]\n 13437: u64 [s1 + 0x278] = a1\n 13441: a1 = u64 [a2 + 0x38]\n 13444: u64 [s1 + 0x270] = a1\n 13448: a1 = u64 [a2 + 0x30]\n 13451: u64 [s1 + 0x260] = a1\n 13455: a0 = u64 [a2 + 0x28]\n 13458: u64 [s1 + 0x268] = a0\n 13462: ra = 542, jump @0\n      : @585 [@dyn 271] (gas: 8)\n 13468: a4 = s1 + 0x200\n 13472: a0 = u64 [a4 + 0x78]\n 13475: a1 = u64 [a4 + 0x60]\n 13478: a0 = a0 | a1\n 13481: a1 = u64 [a4 + 0x68]\n 13484: a3 = a1\n 13486: a2 = u64 [a4 + 0x70]\n 13489: t0 = 544, jump @1823\n      : @586 [@dyn 272] (gas: 1)\n 13496: jump @588 if a0 == 0\n      : @587 (gas: 1)\n 13499: jump @797\n      : @588 (gas: 12)\n 13502: a2 = u64 [0x30220]\n 13507: a1 = u64 [0x30228]\n 13512: a0 = u32 [0x30230]\n 13517: a4 = s1 + 0x29f8\n 13521: u64 [a4 + 288] = 0\n 13525: a5 = a4 + 0x100\n 13529: u64 [a5 + 0x18] = a0\n 13532: u64 [a5 + 0x10] = a1\n 13535: a1 = s1 + 0x2b00\n 13539: u64 [a5 + 0x8] = a2\n 13542: a0 = a3\n 13544: ra = 546, jump @9\n      : @589 [@dyn 273] (gas: 4)\n 13550: a1 = 0x20\n 13553: a0 = u64 [s1 + 0x268]\n 13557: ra = 0x22c\n 13561: jump @18\n      : @590 (gas: 10)\n 13564: u64 [a3 + 192] = 0\n 13568: u64 [a3 + 184] = 0\n 13572: u64 [a3 + 176] = 0\n 13576: u64 [a3 + 168] = 0\n 13580: a0 = s1 + 0x3000\n 13584: i32 a0 = a0 + 0x2a0\n 13588: ecalli 16 // 'value_transferred'\n 13590: t0 = 0x224\n 13594: a3 = s1 + 0x31f8\n 13598: fallthrough\n      : @591 [@dyn 274] (gas: 8)\n 13599: a0 = u64 [a3 + 0xb8]\n 13603: a1 = u64 [a3 + 0xc0]\n 13607: a2 = u64 [a3 + 0xb0]\n 13611: a3 = u64 [a3 + 0xa8]\n 13615: a1 = a1 | a2\n 13618: a0 = a0 | a3\n 13621: a0 = a0 | a1\n 13624: jump @593 if a0 == 0\n      : @592 (gas: 1)\n 13627: jump @1143\n      : @593 (gas: 3)\n 13630: a0 = u64 [s1 + 0x278]\n 13634: a0 = i32 [a0]\n 13636: jump @595 if a0 >u 3\n      : @594 (gas: 1)\n 13640: jump @1144\n      : @595 (gas: 3)\n 13643: a0 = s1 + 0x2360\n 13647: a1 = 0x40\n 13650: ra = 550, jump @7\n      : @596 [@dyn 275] (gas: 7)\n 13656: a3 = s1 + 0x21f8\n 13660: a5 = a3 + 0x100\n 13664: a4 = u64 [a5 + 0x80]\n 13668: a1 = u64 [a5 + 0x78]\n 13671: a2 = u64 [a5 + 0x70]\n 13674: a0 = u64 [a5 + 0x68]\n 13677: t0 = 552, jump @1784\n      : @597 [@dyn 276] (gas: 1)\n 13683: jump @599 if a1 == 0\n      : @598 (gas: 1)\n 13686: jump @797\n      : @599 (gas: 7)\n 13689: u64 [a3 + 352] = 0\n 13693: u64 [a3 + 344] = 0\n 13697: u64 [a3 + 336] = 0\n 13701: a1 = s1 + 0x2340\n 13705: u64 [a3 + 328] = 0\n 13709: u64 [s1 + 0x278] = a0\n 13713: ra = 554, jump @9\n      : @600 [@dyn 277] (gas: 3)\n 13719: a1 = 0x20\n 13722: a0 = u64 [s1 + 0x278]\n 13726: ra = 556, jump @18\n      : @601 [@dyn 278] (gas: 5)\n 13732: i32 a1 = a0 + 0\n 13734: a2 = 0x20\n 13737: a0 = 0\n 13739: ecalli 13 // 'seal_return'\n 13741: jump @603\n      : @602 (gas: 4)\n 13743: a2 = 0x20\n 13746: a0 = 0\n 13748: ecalli 13 // 'seal_return'\n 13750: fallthrough\n      : @603 (gas: 9)\n 13751: u64 [a3 + 608] = 0\n 13755: u64 [a3 + 600] = 0\n 13759: u64 [a3 + 592] = 0\n 13763: u64 [a3 + 584] = 0\n 13767: a0 = s1 + 0x3000\n 13771: i32 a0 = a0 + 0x440\n 13775: ra = 0x22e\n 13779: ecalli 16 // 'value_transferred'\n 13781: fallthrough\n      : @604 [@dyn 279] (gas: 3)\n 13782: a3 = s1 + 0x31f8\n 13786: a4 = a3 + 0x200\n 13790: t0 = 560, jump @1824\n      : @605 [@dyn 280] (gas: 1)\n 13796: jump @607 if a0 == 0\n      : @606 (gas: 1)\n 13799: jump @1145\n      : @607 (gas: 1)\n 13802: t0 = 562, jump @1808\n      : @608 [@dyn 281] (gas: 1)\n 13808: jump @610 if a1 <u a0\n      : @609 (gas: 1)\n 13811: jump @1146\n      : @610 (gas: 6)\n 13814: a0 = s1 + 0x3000\n 13818: i32 a0 = a0 + 0x460\n 13822: a1 = 0x4\n 13825: ecalli 2 // 'call_data_load'\n 13827: a3 = s1 + 0x31f8\n 13831: fallthrough\n      : @611 (gas: 8)\n 13832: a0 = u64 [a3 + 0x278]\n 13836: a1 = u64 [a3 + 0x280]\n 13840: a2 = a0 ^ 0x1\n 13843: a2 = a2 | a1\n 13846: a0 = a0 <u 0x1\n 13849: a0 = 0 if a1 != 0\n 13851: a0 = 0 if a2 == 0\n 13853: jump @613 if a0 != 0\n      : @612 (gas: 1)\n 13856: jump @1147\n      : @613 (gas: 7)\n 13859: a0 = u64 [a3 + 0x270]\n 13863: u64 [s1 + 0x268] = a0\n 13867: a0 = u64 [a3 + 0x268]\n 13871: u64 [s1 + 0x270] = a0\n 13875: ra = 0x234\n 13879: t0 = 0x59c\n 13883: jump @1810\n      : @614 [@dyn 282] (gas: 3)\n 13886: a0 = s1 + 0x29c0\n 13890: a1 = 0x40\n 13893: ra = 566, jump @7\n      : @615 [@dyn 283] (gas: 14)\n 13899: a2 = s1 + 0x21f8\n 13903: t0 = u64 [a2 + 0x7e0]\n 13907: a1 = a2 + 0x700\n 13911: a5 = u64 [a1 + 0xd8]\n 13915: a4 = u64 [a1 + 0xd0]\n 13919: a0 = u64 [a1 + 0xc8]\n 13923: a3 = a4 | t0\n 13926: a1 = a0 | a5\n 13929: a1 = a1 | a3\n 13932: a1 = a1 >> 0x20\n 13935: a3 = a3 | a5\n 13938: a3 = a3 << 0x20\n 13941: a1 = a1 | a3\n 13944: jump @617 if a1 == 0\n      : @616 (gas: 1)\n 13947: jump @797\n      : @617 (gas: 11)\n 13950: u64 [s1 + 0x238] = t0\n 13954: u64 [s1 + 0x240] = a5\n 13958: u64 [s1 + 0x248] = a4\n 13962: u64 [a2 + 1976] = 0\n 13966: u64 [a2 + 1968] = 0\n 13970: u64 [a2 + 1960] = 0\n 13974: a3 = 0x64c9ec6f00000000\n 13984: a1 = s1 + 0x29a0\n 13988: u64 [a2 + 0x7c0] = a3\n 13992: u64 [s1 + 0x278] = a0\n 13996: ra = 568, jump @9\n      : @618 [@dyn 284] (gas: 1)\n 14002: ra = 570, jump @0\n      : @619 [@dyn 285] (gas: 35)\n 14008: a1 = u64 [0x30220]\n 14013: u64 [s1 + 0x260] = a1\n 14017: a1 = u64 [0x30230]\n 14022: u64 [s1 + 0x258] = a1\n 14026: a0 = u64 [0x30228]\n 14031: u64 [s1 + 0x250] = a0\n 14035: ecalli 10 // 'ref_time_left'\n 14037: a0 = u64 [s1 + 0x250]\n 14041: a0 = reverse a0\n 14043: a1 = a0 << 0x20\n 14046: a2 = u64 [s1 + 0x258]\n 14050: a2 = reverse a2\n 14052: a2 = a2 >> 0x20\n 14055: a1 = a1 | a2\n 14058: a0 = a0 >> 0x20\n 14061: a2 = u64 [s1 + 0x260]\n 14065: a2 = reverse a2\n 14067: a4 = 0x30200\n 14072: a3 = a2 << 0x20\n 14075: a0 = a0 | a3\n 14078: a2 = a2 >> 0x20\n 14081: u64 [s1 + 0x260] = a4\n 14085: u32 [0x30210] = a2\n 14090: u64 [0x30208] = a0\n 14095: u64 [0x30200] = a1\n 14100: a1 = s1 + 0x31f8\n 14104: u64 [a1 + 672] = 0\n 14108: u64 [a1 + 664] = 0\n 14112: a0 = u64 [s1 + 0x268]\n 14116: u64 [a1 + 0x290] = a0\n 14120: a0 = u64 [s1 + 0x270]\n 14124: u64 [a1 + 0x288] = a0\n 14128: a1 = 0x4\n 14131: a0 = u64 [s1 + 0x278]\n 14135: ra = 572, jump @18\n      : @620 [@dyn 286] (gas: 4)\n 14141: u64 [s1 + 0x270] = a0\n 14145: a1 = 0x20\n 14148: a0 = u64 [s1 + 0x278]\n 14152: ra = 574, jump @18\n      : @621 [@dyn 287] (gas: 33)\n 14158: a2 = s1 + 0x31f8\n 14162: u32 [a2 + 680] = 0x20\n 14167: a3 = a2 + 0x200\n 14171: u64 [a3 + 224] = 0xffffffffffffffff\n 14176: u64 [a3 + 216] = 0xffffffffffffffff\n 14181: u64 [a3 + 208] = 0xffffffffffffffff\n 14186: u64 [a3 + 200] = 0xffffffffffffffff\n 14191: a1 = u64 [s1 + 0x260]\n 14195: a1 = a1 << 0x20\n 14198: a1 = a1 >> 0x20\n 14201: a3 = 0x800000000\n 14211: t0 = a1 | a3\n 14214: a1 = s1 + 0x3480\n 14218: a1 = a1 << 0x20\n 14221: a1 = a1 >> 0x20\n 14224: a3 = s1 + 0x34c0\n 14228: a3 = a3 << 0x20\n 14231: a3 = a3 | a1\n 14234: a1 = u64 [s1 + 0x270]\n 14238: a1 = a1 << 0x20\n 14241: a1 = a1 >> 0x20\n 14244: a2 = 0x400000000\n 14254: a4 = a1 | a2\n 14257: a0 = a0 << 0x20\n 14260: a0 = a0 >> 0x20\n 14263: a1 = s1 + 0x34a0\n 14267: a1 = a1 << 0x20\n 14270: a5 = a1 | a0\n 14273: a1 = 0xffffffffffffffff\n 14276: a2 = 0xffffffffffffffff\n 14279: a0 = t0\n 14281: ecalli 0 // 'call'\n 14282: fallthrough\n      : @622 (gas: 1)\n 14283: jump @624 if a0 != 0\n      : @623 (gas: 1)\n 14286: jump @1148\n      : @624 (gas: 3)\n 14289: a0 = s1 + 0x2980\n 14293: a1 = 0x40\n 14296: ra = 576, jump @7\n      : @625 [@dyn 288] (gas: 14)\n 14302: a0 = s1 + 0x21f8\n 14306: a2 = a0 + 0x700\n 14310: a1 = u64 [a2 + 0xa0]\n 14314: u64 [s1 + 0x270] = a1\n 14318: a1 = u64 [a2 + 0x98]\n 14322: u64 [s1 + 0x268] = a1\n 14326: a1 = u64 [a2 + 0x90]\n 14330: u64 [s1 + 0x260] = a1\n 14334: a0 = u64 [a2 + 0x88]\n 14338: u64 [s1 + 0x278] = a0\n 14342: ra = 0x242\n 14346: ecalli 12 // 'return_data_size'\n 14348: t0 = 0x244\n 14352: jump @1779\n      : @626 [@dyn 289] (gas: 1)\n 14355: t0 = 580, jump @1779\n      : @627 [@dyn 290] (gas: 1)\n 14361: jump @629 if a1 == 0\n      : @628 (gas: 1)\n 14364: jump @797\n      : @629 (gas: 3)\n 14367: a2 = a0\n 14369: a0 = a0 >> 0x20\n 14372: jump @631 if a0 == 0\n      : @630 (gas: 1)\n 14375: jump @797\n      : @631 (gas: 1)\n 14378: t0 = 582, jump @1805\n      : @632 [@dyn 291] (gas: 1)\n 14384: ra = 584, jump @18\n      : @633 [@dyn 292] (gas: 11)\n 14390: a1 = s1 + 0x31f8\n 14394: a2 = u64 [s1 + 0x268]\n 14398: u32 [a1 + 0x2e8] = a2\n 14402: i32 a0 = a0 + 0\n 14404: a1 = s1 + 0x3000\n 14408: i32 a1 = a1 + 0x4e0\n 14412: a2 = 0\n 14414: ecalli 11 // 'return_data_copy'\n 14416: a0 = s1 + 0x31f8\n 14420: a0 = i32 [a0 + 0x2e8]\n 14424: fallthrough\n      : @634 (gas: 2)\n 14425: a1 = u64 [s1 + 0x270]\n 14429: jump @636 if a0 >=u a1\n      : @635 (gas: 1)\n 14432: jump @797\n      : @636 (gas: 2)\n 14435: ecalli 12 // 'return_data_size'\n 14437: fallthrough\n      : @637 (gas: 3)\n 14438: a1 = a0\n 14440: a0 = a0 >> 0x20\n 14443: jump @639 if a0 == 0\n      : @638 (gas: 1)\n 14446: jump @797\n      : @639 (gas: 3)\n 14449: a0 = u64 [s1 + 0x278]\n 14453: u64 [s1 + 0x270] = a1\n 14457: ra = 586, jump @18\n      : @640 [@dyn 293] (gas: 6)\n 14463: i32 a1 = a0 + 0\n 14465: a2 = i32 [s1 + 0x270]\n 14469: a0 = 0x1\n 14472: ecalli 13 // 'seal_return'\n 14474: a1 = 0x20200\n 14479: jump @799\n      : @641 (gas: 17)\n 14482: a0 = 0xffffff00ffffffff\n 14492: a1 = u64 [s1 + 0x240]\n 14496: a0 = a0 & a1\n 14499: a1 = 0x100000000\n 14509: a0 = a0 | a1\n 14512: a2 = s1 + 0x31f8\n 14516: a1 = u64 [s1 + 0x200]\n 14520: a3 = a2 + 0x100\n 14524: u64 [a3 + 0x48] = a1\n 14527: a1 = u64 [s1 + 0x208]\n 14531: u64 [a3 + 0x50] = a1\n 14534: a1 = u64 [s1 + 0x248]\n 14538: u64 [a3 + 0x60] = a1\n 14541: u64 [a3 + 0x58] = a0\n 14544: a1 = s1 + 0x3340\n 14548: a0 = u64 [s1 + 0x210]\n 14552: ra = 588, jump @12\n      : @642 [@dyn 294] (gas: 22)\n 14558: a5 = s1 + 0x200\n 14562: a1 = u64 [a5 + 0x50]\n 14565: a0 = a1 + 0x4\n 14568: a1 = a0 <u a1\n 14571: a3 = u64 [a5 + 0x58]\n 14574: a2 = a3 + a1\n 14577: a3 = a2 <u a3\n 14580: a3 = a1 if a1 == 0\n 14583: a1 = u64 [a5 + 0x68]\n 14586: a3 = a3 + a1\n 14589: a1 = a3 <u a1\n 14592: a4 = u64 [a5 + 0x60]\n 14595: a1 = a1 + a4\n 14598: a4 = s1 + 0x31f8\n 14602: a5 = a4 + 0x100\n 14606: u64 [a5 + 0x78] = a3\n 14609: u64 [a5 + 0x70] = a2\n 14612: u64 [a5 + 0x68] = a0\n 14615: u64 [a5 + 0x80] = a1\n 14619: a0 = s1 + 0x2660\n 14623: a1 = s1 + 0x3360\n 14627: ra = 590, jump @11\n      : @643 [@dyn 295] (gas: 6)\n 14633: a0 = u64 [s1 + 0x1f8]\n 14637: a1 = a0 & 0xffffffffffffffff\n 14640: ra = u64 [s1 + 0x238]\n 14644: a0 = ra <u a1\n 14647: a2 = -a0\n 14649: jump @645 if a2 == 0\n      : @644 (gas: 1)\n 14652: jump @1154\n      : @645 (gas: 36)\n 14655: t2 = s1 + 0x21f8\n 14659: t0 = u64 [t2 + 0x468]\n 14663: a4 = u64 [t2 + 0x470]\n 14667: a1 = ra - a1\n 14670: a3 = t0 mulhu a1\n 14673: a5 = a4 * a1\n 14676: a0 = a5 + a3\n 14679: a3 = a0 <u a5\n 14682: a5 = a4 mulhu a1\n 14685: a5 = a5 + a3\n 14688: a3 = t0 * a2\n 14691: a0 = a0 + a3\n 14694: u64 [s1 + 0x268] = a0\n 14698: t1 = a0 <u a3\n 14701: a0 = a4 * a2\n 14704: a4 = a4 mulhu a2\n 14707: a2 = t0 mulhu a2\n 14710: t1 = t1 + a2\n 14713: t1 = t1 + a5\n 14716: a5 = t1 <u a5\n 14719: t1 = t1 + a0\n 14722: a4 = a4 + a5\n 14725: a5 = t1 <u a0\n 14728: a4 = a4 + a5\n 14731: a0 = a0 + a2\n 14734: a0 = a0 + a3\n 14737: a3 = a3 + t1\n 14740: a2 = a3 <u t1\n 14743: a0 = a0 + a4\n 14746: a0 = a0 + a2\n 14749: a2 = a0 >u 0\n 14751: a4 = a3 >u 0\n 14753: a4 = a2 if a0 != 0\n 14756: a0 = a0 | a3\n 14759: a4 = 0 if a0 == 0\n 14761: jump @647 if a4 == 0\n      : @646 (gas: 1)\n 14764: jump @1161\n      : @647 (gas: 1)\n 14767: jump @649 if ra != 0\n      : @648 (gas: 1)\n 14770: jump @1168\n      : @649 (gas: 5)\n 14773: a0 = t0 * a1\n 14776: u64 [s1 + 0x260] = a0\n 14780: a0 = s1 + 0x2640\n 14784: a1 = u64 [s1 + 0x270]\n 14788: ra = 592, jump @11\n      : @650 [@dyn 296] (gas: 12)\n 14794: a0 = s1 + 0x21f8\n 14798: a2 = a0 + 0x400\n 14802: a1 = u64 [a2 + 0x48]\n 14805: u64 [s1 + 0x270] = a1\n 14809: a1 = u64 [a2 + 0x58]\n 14812: u64 [s1 + 0x258] = a1\n 14816: a0 = u64 [a2 + 0x50]\n 14819: u64 [s1 + 0x250] = a0\n 14823: a0 = u64 [s1 + 0x260]\n 14827: a1 = u64 [s1 + 0x268]\n 14831: a2 = u64 [s1 + 0x238]\n 14835: ra = 594, jump @1838\n      : @651 [@dyn 297] (gas: 58)\n 14841: u64 [s1 + 0x268] = a0\n 14845: u64 [s1 + 0x260] = a1\n 14849: ecalli 10 // 'ref_time_left'\n 14851: a1 = u64 [s1 + 0x250]\n 14855: a1 = reverse a1\n 14857: a2 = a1 << 0x20\n 14860: a3 = u64 [s1 + 0x258]\n 14864: a3 = reverse a3\n 14866: a3 = a3 >> 0x20\n 14869: a2 = a2 | a3\n 14872: a1 = a1 >> 0x20\n 14875: a3 = u64 [s1 + 0x270]\n 14879: a3 = reverse a3\n 14881: a4 = a3 << 0x20\n 14884: a1 = a1 | a4\n 14887: a3 = a3 >> 0x20\n 14890: a4 = u64 [s1 + 0x278]\n 14894: u32 [a4 + 0x10] = a3\n 14897: u64 [a4 + 0x8] = a1\n 14900: u64 [a4] = a2\n 14902: a2 = s1 + 0x31f8\n 14906: u64 [a2 + 416] = 0\n 14910: u64 [a2 + 408] = 0\n 14914: a1 = u64 [s1 + 0x260]\n 14918: a3 = a2 + 0x100\n 14922: u64 [a3 + 0x90] = a1\n 14926: a1 = u64 [s1 + 0x268]\n 14930: u64 [a3 + 0x88] = a1\n 14934: u32 [a2 + 424] = 0\n 14938: a0 = a0 >u 0x8fc\n 14942: a1 = -a0\n 14944: u64 [a3 + 0xe0] = a1\n 14948: u64 [a3 + 0xd8] = a1\n 14952: u64 [a3 + 0xd0] = a1\n 14956: u64 [a3 + 0xc8] = a1\n 14960: a1 = a4 << 0x20\n 14963: a1 = a1 >> 0x20\n 14966: a0 = a0 << 0x23\n 14969: a0 = a0 | a1\n 14972: a1 = s1 + 0x3380\n 14976: a1 = a1 << 0x20\n 14979: a1 = a1 >> 0x20\n 14982: a4 = 0x20200\n 14987: a2 = s1 + 0x33c0\n 14991: a2 = a2 << 0x20\n 14994: a3 = a2 | a1\n 14997: u64 [s1 + 0x248] = a4\n 15001: a4 = a4 << 0x20\n 15004: a4 = a4 >> 0x20\n 15007: a1 = s1 + 0x33a0\n 15011: a1 = a1 << 0x20\n 15014: a5 = a1 | a4\n 15017: a1 = 0xffffffffffffffff\n 15020: a2 = 0xffffffffffffffff\n 15023: ecalli 0 // 'call'\n 15024: u64 [s1 + 0x278] = a0\n 15028: ecalli 12 // 'return_data_size'\n 15030: fallthrough\n      : @652 (gas: 2)\n 15031: a2 = u64 [s1 + 0x278]\n 15035: jump @728 if a0 != 0\n      : @653 (gas: 1)\n 15039: jump @655 if a2 != 0\n      : @654 (gas: 1)\n 15042: jump @1186\n      : @655 (gas: 3)\n 15045: a0 = s1 + 0x25a0\n 15049: a1 = 0x40\n 15052: ra = 596, jump @7\n      : @656 [@dyn 298] (gas: 14)\n 15058: a2 = s1 + 0x21f8\n 15062: t0 = u64 [a2 + 0x3c0]\n 15066: a1 = a2 + 0x300\n 15070: a5 = u64 [a1 + 0xb8]\n 15074: a4 = u64 [a1 + 0xb0]\n 15078: a0 = u64 [a1 + 0xa8]\n 15082: a3 = a4 | t0\n 15085: a1 = a0 | a5\n 15088: a1 = a1 | a3\n 15091: a1 = a1 >> 0x20\n 15094: a3 = a3 | a5\n 15097: a3 = a3 << 0x20\n 15100: a1 = a1 | a3\n 15103: jump @658 if a1 == 0\n      : @657 (gas: 1)\n 15106: jump @797\n      : @658 (gas: 11)\n 15109: u64 [a2 + 920] = 0\n 15113: u64 [a2 + 912] = 0\n 15117: u64 [a2 + 904] = 0\n 15121: a3 = 0x8c379a000000000\n 15131: a1 = s1 + 0x2580\n 15135: u64 [a2 + 0x3a0] = a3\n 15139: u64 [s1 + 0x278] = a0\n 15143: u64 [s1 + 0x270] = a4\n 15147: u64 [s1 + 0x260] = t0\n 15151: u64 [s1 + 0x268] = a5\n 15155: ra = 598, jump @9\n      : @659 [@dyn 299] (gas: 6)\n 15161: a5 = s1 + 0x200\n 15165: a1 = u64 [a5 + 0x78]\n 15168: a0 = u64 [a5 + 0x68]\n 15171: a3 = u64 [a5 + 0x60]\n 15174: a3 = a3 | a0\n 15177: t0 = 600, jump @1785\n      : @660 [@dyn 300] (gas: 1)\n 15183: jump @662 if a0 != 0\n      : @661 (gas: 1)\n 15186: jump @797\n      : @662 (gas: 10)\n 15189: i32 a0 = a1 + 0x4\n 15192: a2 = s1 + 0x21f8\n 15196: u64 [a2 + 896] = 0\n 15200: u64 [a2 + 888] = 0\n 15204: u64 [a2 + 872] = 0x20\n 15209: a1 = s1 + 0x2560\n 15213: u64 [a2 + 880] = 0\n 15217: u64 [s1 + 0x268] = a3\n 15221: u64 [s1 + 0x260] = a4\n 15225: ra = 602, jump @9\n      : @663 [@dyn 301] (gas: 1)\n 15231: t0 = 604, jump @1799\n      : @664 [@dyn 302] (gas: 1)\n 15237: jump @666 if a0 != 0\n      : @665 (gas: 1)\n 15240: jump @797\n      : @666 (gas: 8)\n 15243: i32 a0 = a1 + 0x24\n 15246: a3 = s1 + 0x21f8\n 15250: u64 [a3 + 864] = 0\n 15254: u64 [a3 + 856] = 0\n 15258: u64 [a3 + 840] = 0xf\n 15263: a1 = s1 + 0x2540\n 15267: u64 [a3 + 848] = 0\n 15271: ra = 606, jump @9\n      : @667 [@dyn 303] (gas: 1)\n 15277: t0 = 608, jump @1775\n      : @668 [@dyn 304] (gas: 1)\n 15283: jump @670 if a0 != 0\n      : @669 (gas: 1)\n 15286: jump @797\n      : @670 (gas: 10)\n 15289: i32 a0 = a3 + 0x44\n 15292: a1 = u64 [0x20000]\n 15297: a2 = u64 [0x20008]\n 15302: a4 = s1 + 0x21f8\n 15306: u64 [a4 + 0x340] = a1\n 15310: u64 [a4 + 816] = 0\n 15314: u64 [a4 + 0x338] = a2\n 15318: a1 = s1 + 0x2520\n 15322: u64 [a4 + 808] = 0\n 15326: ra = 610, jump @9\n      : @671 [@dyn 305] (gas: 3)\n 15332: a1 = 0x64\n 15335: a0 = u64 [s1 + 0x278]\n 15339: ra = 612, jump @18\n      : @672 [@dyn 306] (gas: 5)\n 15345: i32 a1 = a0 + 0\n 15347: a0 = 0x1\n 15350: a2 = 0x64\n 15353: ecalli 13 // 'seal_return'\n 15355: fallthrough\n      : @673 (gas: 7)\n 15356: u64 [a4 + 1408] = 0\n 15360: u64 [a4 + 1400] = 0\n 15364: u64 [a4 + 1392] = 0\n 15368: u64 [a4 + 1384] = 0x1\n 15373: a0 = s1 + 0x1f00\n 15377: a1 = s1 + 0x2f60\n 15381: ra = 614, jump @11\n      : @674 [@dyn 307] (gas: 12)\n 15387: t0 = s1 + 0x19f8\n 15391: a0 = t0 + 0x500\n 15395: a4 = u64 [a0 + 0x20]\n 15398: a5 = u64 [a0 + 0x18]\n 15401: a3 = u64 [a0 + 0x10]\n 15404: a0 = a4 >u 0\n 15406: a1 = a5 >u 0\n 15408: a1 = a0 if a4 != 0\n 15411: a0 = a5 | a4\n 15414: a2 = a3 >u 0\n 15416: a2 = a1 if a0 != 0\n 15419: jump @676 if a2 == 0\n      : @675 (gas: 1)\n 15422: jump @1175\n      : @676 (gas: 25)\n 15425: a0 = u64 [t0 + 0x508]\n 15429: u64 [s1 + 0x188] = a0\n 15433: a0 = a0 + 0x1\n 15436: a2 = s1 + 0x29f8\n 15440: u64 [a2 + 1416] = 0x1\n 15445: a1 = a0 <u 0x1\n 15448: a1 = a1 + a3\n 15451: u64 [a2 + 0x5a8] = a0\n 15455: a0 = a0 | a1\n 15458: u64 [a2 + 0x5b0] = a1\n 15462: a0 = a0 <u 0x1\n 15465: a0 = a0 + a5\n 15468: u64 [a2 + 0x5b8] = a0\n 15472: a0 = a0 <u a5\n 15475: a0 = a0 + a4\n 15478: u64 [a2 + 0x5c0] = a0\n 15482: u64 [a2 + 1440] = 0\n 15486: u64 [a2 + 1432] = 0\n 15490: u64 [a2 + 1424] = 0\n 15494: a0 = s1 + 0x2f80\n 15498: a1 = s1 + 0x2fa0\n 15502: u64 [s1 + 0x1a0] = a4\n 15506: u64 [s1 + 0x198] = a5\n 15510: u64 [s1 + 0x190] = a3\n 15514: ra = 616, jump @12\n      : @677 [@dyn 308] (gas: 13)\n 15520: a3 = s1 + 0x19f8\n 15524: a0 = u64 [s1 + 0x1a0]\n 15528: a4 = a3 + 0x400\n 15532: u64 [a4 + 0xc0] = a0\n 15536: a0 = u64 [s1 + 0x198]\n 15540: u64 [a4 + 0xb8] = a0\n 15544: a0 = u64 [s1 + 0x190]\n 15548: u64 [a4 + 0xb0] = a0\n 15552: a0 = s1 + 0x1ec0\n 15556: a1 = s1 + 0x1ea0\n 15560: a2 = u64 [s1 + 0x188]\n 15564: u64 [a4 + 0xa8] = a2\n 15568: ra = 618, jump @1373\n      : @678 [@dyn 309] (gas: 17)\n 15574: a0 = sp + 0xffffffffffffffe0\n 15577: a0 = a0 & 0xffffffffffffffe0\n 15580: u64 [s1 + 0x250] = a0\n 15584: sp = a0\n 15586: a3 = s1 + 0x19f8\n 15590: a0 = u64 [s1 + 0x1a0]\n 15594: a4 = a3 + 0x400\n 15598: u64 [a4 + 0x60] = a0\n 15601: a0 = u64 [s1 + 0x198]\n 15605: u64 [a4 + 0x58] = a0\n 15608: a0 = u64 [s1 + 0x190]\n 15612: u64 [a4 + 0x50] = a0\n 15615: a0 = s1 + 0x1e60\n 15619: a1 = s1 + 0x1e40\n 15623: a2 = u64 [s1 + 0x188]\n 15627: u64 [a4 + 0x48] = a2\n 15630: ra = 620, jump @1373\n      : @679 [@dyn 310] (gas: 40)\n 15636: a0 = s1 + 0x19f8\n 15640: a5 = a0 + 0x400\n 15644: a4 = u64 [a5 + 0x78]\n 15647: u64 [s1 + 0x268] = a4\n 15651: a1 = u64 [a5 + 0x80]\n 15655: u64 [s1 + 0x260] = a1\n 15659: a3 = u64 [a5 + 0x68]\n 15662: u64 [s1 + 0x248] = a3\n 15666: a2 = u64 [a5 + 0x70]\n 15669: u64 [s1 + 0x258] = a2\n 15673: a0 = u64 [s1 + 0x250]\n 15677: u64 [a0 + 0x10] = a4\n 15680: u64 [a0 + 0x18] = a1\n 15683: u64 [a0] = a3\n 15685: u64 [a0 + 0x8] = a2\n 15688: a0 = 0x30200\n 15693: u64 [s1 + 0x180] = a0\n 15697: i32 a0 = a0 + 0\n 15699: u64 [s1 + 0x178] = a0\n 15703: ecalli 4 // 'caller'\n 15705: a2 = u64 [s1 + 0x180]\n 15709: a0 = u64 [a2 + 0x8]\n 15712: a1 = i32 [a2 + 0x10]\n 15715: a2 = u64 [a2]\n 15717: a0 = reverse a0\n 15719: a3 = a0 << 0x20\n 15722: a1 = reverse a1\n 15724: a1 = a1 >> 0x20\n 15727: a1 = a1 | a3\n 15730: u64 [s1 + 0x210] = a1\n 15734: a0 = a0 >> 0x20\n 15737: a1 = reverse a2\n 15739: a2 = a1 << 0x20\n 15742: a0 = a0 | a2\n 15745: u64 [s1 + 0x208] = a0\n 15749: a1 = a1 >> 0x20\n 15752: u64 [s1 + 0x200] = a1\n 15756: a0 = s1 + 0x1e20\n 15760: a1 = u64 [s1 + 0x250]\n 15764: ra = 622, jump @11\n      : @680 [@dyn 311] (gas: 17)\n 15770: a1 = s1 + 0x19f8\n 15774: a0 = u32 [a1 + 0x43c]\n 15778: a1 = u64 [a1 + 0x440]\n 15782: a0 = a0 << 0x20\n 15785: a2 = u64 [s1 + 0x200]\n 15789: a0 = a0 | a2\n 15792: a2 = s1 + 0x29f8\n 15796: a3 = a2 + 0x500\n 15800: u64 [a3 + 0xe0] = a1\n 15804: a1 = u64 [s1 + 0x208]\n 15808: u64 [a3 + 0xd0] = a1\n 15812: a1 = u64 [s1 + 0x210]\n 15816: u64 [a3 + 0xc8] = a1\n 15820: u64 [a3 + 0xd8] = a0\n 15824: a1 = s1 + 0x2fc0\n 15828: a0 = u64 [s1 + 0x250]\n 15832: ra = 624, jump @12\n      : @681 [@dyn 312] (gas: 27)\n 15838: a0 = sp + 0xffffffffffffffe0\n 15841: a5 = a0 & 0xffffffffffffffe0\n 15844: sp = a5\n 15846: a0 = u64 [s1 + 0x248]\n 15850: a0 = a0 + 0x1\n 15853: a1 = a0 <u 0x1\n 15856: a2 = u64 [s1 + 0x258]\n 15860: a1 = a1 + a2\n 15863: a2 = a0 | a1\n 15866: a2 = a2 <u 0x1\n 15869: a3 = u64 [s1 + 0x268]\n 15873: a2 = a2 + a3\n 15876: a3 = a2 <u a3\n 15879: a4 = u64 [s1 + 0x260]\n 15883: a3 = a3 + a4\n 15886: u64 [a5 + 0x18] = a3\n 15889: u64 [a5 + 0x10] = a2\n 15892: u64 [a5 + 0x8] = a1\n 15895: u64 [a5] = a0\n 15897: a1 = a5\n 15899: u64 [s1 + 0x1a8] = a5\n 15903: a0 = u64 [s1 + 0x218]\n 15907: a0 = a0 << 0x20\n 15910: a0 = a0 >> 0x20\n 15913: u64 [s1 + 0x250] = a0\n 15917: a0 = s1 + 0x1e00\n 15921: ra = 626, jump @11\n      : @682 [@dyn 313] (gas: 17)\n 15927: a1 = s1 + 0x19f8\n 15931: a0 = u32 [a1 + 0x41c]\n 15935: a0 = a0 << 0x20\n 15938: a1 = u64 [a1 + 0x420]\n 15942: a2 = u64 [s1 + 0x250]\n 15946: a0 = a0 | a2\n 15949: a2 = u64 [s1 + 0x220]\n 15953: a3 = s1 + 0x29f8\n 15957: a4 = a3 + 0x500\n 15961: u64 [a4 + 0xf0] = a2\n 15965: a2 = u64 [s1 + 0x228]\n 15969: u64 [a4 + 0xe8] = a2\n 15973: u64 [a3 + 0x600] = a1\n 15977: u64 [a4 + 0xf8] = a0\n 15981: a1 = s1 + 0x2fe0\n 15985: a0 = u64 [s1 + 0x1a8]\n 15989: ra = 628, jump @12\n      : @683 [@dyn 314] (gas: 4)\n 15995: a0 = s1 + 0x1de0\n 15999: ra = 0x276\n 16003: t0 = 0x596\n 16007: jump @1793\n      : @684 [@dyn 315] (gas: 6)\n 16010: a0 = s1 + 0x19f8\n 16014: a0 = u64 [a0 + 0x3e8]\n 16018: u64 [s1 + 0x250] = a0\n 16022: a0 = s1 + 0x1dc0\n 16026: a1 = u64 [s1 + 0x1a8]\n 16030: ra = 632, jump @11\n      : @685 [@dyn 316] (gas: 24)\n 16036: a3 = s1 + 0x19f8\n 16040: a4 = a3 + 0x300\n 16044: a0 = u64 [a4 + 0xc8]\n 16048: a1 = u64 [a4 + 0xd0]\n 16052: a2 = u64 [a4 + 0xe0]\n 16056: a3 = u64 [a4 + 0xd8]\n 16060: a5 = u64 [s1 + 0x250]\n 16064: a4 = a5 >> 0x18\n 16067: a5 = a5 << 0x28\n 16070: a2 = a2 >> 0x28\n 16073: a2 = a2 << 0x28\n 16076: a3 = a3 << 0x18\n 16079: a3 = a3 >> 0x18\n 16082: a3 = a3 | a5\n 16085: a2 = a2 | a4\n 16088: a4 = s1 + 0x29f8\n 16092: a5 = a4 + 0x600\n 16096: u64 [a5 + 0x10] = a1\n 16099: u64 [a5 + 0x8] = a0\n 16102: u64 [a5 + 0x20] = a2\n 16105: u64 [a5 + 0x18] = a3\n 16108: a1 = s1 + 0x3000\n 16112: a0 = u64 [s1 + 0x1a8]\n 16116: ra = 634, jump @12\n      : @686 [@dyn 317] (gas: 5)\n 16122: a0 = sp + 0xffffffffffffffe0\n 16125: a5 = a0 & 0xffffffffffffffe0\n 16128: sp = a5\n 16130: a1 = u64 [s1 + 0x248]\n 16134: t0 = 636, jump @1790\n      : @687 [@dyn 318] (gas: 9)\n 16140: a4 = a4 + a1\n 16143: a1 = a5\n 16145: u64 [s1 + 0x250] = a5\n 16149: u64 [a5 + 0x18] = a4\n 16152: u64 [a5 + 0x10] = a3\n 16155: u64 [a5 + 0x8] = a2\n 16158: u64 [a5] = a0\n 16160: a0 = s1 + 0x1da0\n 16164: ra = 638, jump @11\n      : @688 [@dyn 319] (gas: 21)\n 16170: a2 = s1 + 0x19f8\n 16174: a3 = a2 + 0x300\n 16178: a0 = u64 [a3 + 0xb0]\n 16182: a1 = u64 [a3 + 0xb8]\n 16186: a2 = u64 [a3 + 0xc0]\n 16190: a3 = u64 [s1 + 0x230]\n 16194: a0 = a0 | a3\n 16197: a3 = u64 [s1 + 0x238]\n 16201: a1 = a1 | a3\n 16204: a3 = u64 [s1 + 0x240]\n 16208: a2 = a2 | a3\n 16211: a3 = s1 + 0x29f8\n 16215: a4 = u64 [s1 + 0x270]\n 16219: a5 = a3 + 0x600\n 16223: u64 [a5 + 0x28] = a4\n 16226: u64 [a5 + 0x40] = a2\n 16229: u64 [a5 + 0x38] = a1\n 16232: u64 [a5 + 0x30] = a0\n 16235: a1 = s1 + 0x3020\n 16239: a0 = u64 [s1 + 0x250]\n 16243: ra = 640, jump @12\n      : @689 [@dyn 320] (gas: 36)\n 16249: a0 = sp + 0xffffffffffffffe0\n 16252: a5 = a0 & 0xffffffffffffffe0\n 16255: sp = a5\n 16257: a1 = u64 [s1 + 0x248]\n 16261: a0 = a1 + 0x4\n 16264: a1 = a0 <u a1\n 16267: a3 = u64 [s1 + 0x258]\n 16271: a2 = a3 + a1\n 16274: a3 = a2 <u a3\n 16277: a3 = a1 if a1 == 0\n 16280: a1 = u64 [s1 + 0x268]\n 16284: a3 = a3 + a1\n 16287: a1 = a3 <u a1\n 16290: a4 = u64 [s1 + 0x260]\n 16294: a1 = a1 + a4\n 16297: u64 [s1 + 0x240] = a5\n 16301: u64 [a5 + 0x18] = a1\n 16304: u64 [a5 + 0x10] = a3\n 16307: u64 [a5 + 0x8] = a2\n 16310: u64 [a5] = a0\n 16312: a0 = s1 + 0x29f8\n 16316: u64 [a0 + 1632] = 0\n 16320: u64 [a0 + 1624] = 0\n 16324: u64 [a0 + 1616] = 0\n 16328: u64 [a0 + 1608] = 0\n 16332: a0 = s1 + 0x3000\n 16336: i32 a0 = a0 + 0x40\n 16339: ecalli 16 // 'value_transferred'\n 16341: a0 = s1 + 0x29f8\n 16345: a1 = u64 [a0 + 0x648]\n 16349: u64 [s1 + 0x238] = a1\n 16353: a1 = u64 [a0 + 0x650]\n 16357: u64 [s1 + 0x230] = a1\n 16361: a0 = s1 + 0x1d80\n 16365: a1 = u64 [s1 + 0x240]\n 16369: ra = 642, jump @11\n      : @690 [@dyn 321] (gas: 14)\n 16375: a1 = s1 + 0x19f8\n 16379: a0 = u64 [a1 + 0x3a0]\n 16383: a1 = u64 [a1 + 0x398]\n 16387: a2 = s1 + 0x29f8\n 16391: a3 = u64 [s1 + 0x230]\n 16395: a4 = a2 + 0x600\n 16399: u64 [a4 + 0x70] = a3\n 16402: a3 = u64 [s1 + 0x238]\n 16406: u64 [a4 + 0x68] = a3\n 16409: u64 [a4 + 0x80] = a0\n 16413: u64 [a4 + 0x78] = a1\n 16416: a1 = s1 + 0x3060\n 16420: a0 = u64 [s1 + 0x240]\n 16424: ra = 644, jump @12\n      : @691 [@dyn 322] (gas: 3)\n 16430: a0 = s1 + 0x1d60\n 16434: a1 = u64 [s1 + 0x250]\n 16438: ra = 646, jump @11\n      : @692 [@dyn 323] (gas: 14)\n 16444: a2 = s1 + 0x19f8\n 16448: a3 = a2 + 0x300\n 16452: a0 = u64 [a3 + 0x80]\n 16456: a1 = u64 [a3 + 0x78]\n 16459: a2 = u64 [a3 + 0x68]\n 16462: a3 = s1 + 0x29f8\n 16466: u64 [a3 + 1680] = 0\n 16470: a4 = a3 + 0x600\n 16474: u64 [a4 + 0xa0] = a0\n 16478: u64 [a4 + 0x98] = a1\n 16482: u64 [a4 + 0x88] = a2\n 16486: a1 = s1 + 0x3080\n 16490: a0 = u64 [s1 + 0x250]\n 16494: ra = 648, jump @12\n      : @693 [@dyn 324] (gas: 9)\n 16500: a2 = s1 + 0x19f8\n 16504: u64 [a2 + 832] = 0\n 16508: u64 [a2 + 824] = 0\n 16512: u64 [a2 + 816] = 0\n 16516: a0 = s1 + 0x1d40\n 16520: a1 = s1 + 0x1d20\n 16524: a3 = u64 [s1 + 0x270]\n 16528: u64 [a2 + 0x328] = a3\n 16532: ra = 650, jump @1467\n      : @694 [@dyn 325] (gas: 13)\n 16538: a0 = s1 + 0x19f8\n 16542: a2 = a0 + 0x300\n 16546: a1 = u64 [a2 + 0x48]\n 16549: u64 [s1 + 0x250] = a1\n 16553: a1 = u64 [a2 + 0x50]\n 16556: u64 [s1 + 0x230] = a1\n 16560: a1 = u64 [a2 + 0x58]\n 16563: u64 [s1 + 0x228] = a1\n 16567: a1 = u64 [a2 + 0x60]\n 16570: u64 [s1 + 0x220] = a1\n 16574: a0 = s1 + 0x1d00\n 16578: a1 = 0x40\n 16581: ra = 652, jump @7\n      : @695 [@dyn 326] (gas: 25)\n 16587: a0 = s1 + 0x19f8\n 16591: a2 = u64 [a0 + 0x320]\n 16595: u64 [s1 + 0x210] = a2\n 16599: a1 = u64 [a0 + 0x318]\n 16603: u64 [s1 + 0x218] = a1\n 16607: a5 = u64 [a0 + 0x310]\n 16611: u64 [s1 + 0x238] = a5\n 16615: a4 = u64 [a0 + 0x308]\n 16619: u64 [s1 + 0x240] = a4\n 16623: a3 = u64 [s1 + 0x220]\n 16627: u64 [a0 + 0x2e0] = a3\n 16631: a3 = u64 [s1 + 0x228]\n 16635: u64 [a0 + 0x2d8] = a3\n 16639: a3 = u64 [s1 + 0x230]\n 16643: u64 [a0 + 0x2d0] = a3\n 16647: a3 = u64 [s1 + 0x250]\n 16651: u64 [a0 + 0x2c8] = a3\n 16655: u64 [a0 + 0x300] = a2\n 16659: u64 [a0 + 0x2f8] = a1\n 16663: u64 [a0 + 0x2f0] = a5\n 16667: a2 = a0\n 16669: a0 = s1 + 0x1ce0\n 16673: a1 = s1 + 0x1cc0\n 16677: u64 [a2 + 0x2e8] = a4\n 16681: ra = 654, jump @1452\n      : @696 [@dyn 327] (gas: 7)\n 16687: a3 = s1 + 0x200\n 16691: a0 = u64 [a3 + 0x10]\n 16694: a1 = u64 [a3 + 0x38]\n 16697: a0 = a0 | a1\n 16700: a2 = u64 [a3 + 0x18]\n 16703: a1 = u64 [a3 + 0x40]\n 16706: t0 = 656, jump @1823\n      : @697 [@dyn 328] (gas: 1)\n 16712: jump @699 if a0 == 0\n      : @698 (gas: 1)\n 16715: jump @797\n      : @699 (gas: 9)\n 16718: a0 = s1 + 0x19f8\n 16722: u64 [a0 + 704] = 0\n 16726: u64 [a0 + 696] = 0\n 16730: u64 [a0 + 688] = 0\n 16734: a1 = s1 + 0x1ca0\n 16738: a2 = u64 [s1 + 0x270]\n 16742: u64 [a0 + 0x2a8] = a2\n 16746: a0 = u64 [s1 + 0x240]\n 16750: ra = 658, jump @9\n      : @700 [@dyn 329] (gas: 9)\n 16756: a2 = s1 + 0x19f8\n 16760: u64 [a2 + 640] = 0\n 16764: u64 [a2 + 632] = 0\n 16768: a0 = u64 [s1 + 0x270]\n 16772: u64 [a2 + 0x268] = a0\n 16776: a0 = s1 + 0x1c80\n 16780: a1 = s1 + 0x1c60\n 16784: u64 [a2 + 624] = 0\n 16788: ra = 660, jump @1467\n      : @701 [@dyn 330] (gas: 27)\n 16794: a3 = s1 + 0x19f8\n 16798: a4 = a3 + 0x200\n 16802: a0 = u64 [a4 + 0x88]\n 16806: a1 = u64 [a4 + 0xa0]\n 16810: a2 = u64 [a4 + 0x90]\n 16814: a3 = u64 [a4 + 0x98]\n 16818: t0 = a0 + 0xffffffffffffffe0\n 16821: a0 = t0 <u a0\n 16824: a4 = a2 + a0\n 16827: a4 = a4 + 0xffffffffffffffff\n 16830: a5 = a4 ^ a2\n 16833: a2 = a4 <u a2\n 16836: a2 = a0 if a5 == 0\n 16839: a0 = a3 + 0xffffffffffffffff\n 16842: a2 = a2 + a0\n 16845: a0 = a2 <u a0\n 16848: a3 = a3 <u 0x1\n 16851: a1 = a1 - a3\n 16854: a0 = a0 + a1\n 16857: a1 = t0 | a2\n 16860: a0 = a0 | a4\n 16863: a1 = a1 | a0\n 16866: a1 = a1 >> 0x20\n 16869: a0 = a0 | a2\n 16872: a0 = a0 << 0x20\n 16875: a0 = a0 | a1\n 16878: jump @703 if a0 == 0\n      : @702 (gas: 1)\n 16881: jump @797\n      : @703 (gas: 11)\n 16884: a3 = s1 + 0x200\n 16888: a0 = u64 [a3 + 0x10]\n 16891: a1 = u64 [a3 + 0x18]\n 16894: a0 = a0 | a1\n 16897: a1 = 0xffffffe0\n 16907: a2 = u64 [a3 + 0x40]\n 16910: a1 = a2 <u a1\n 16913: a2 = u64 [a3 + 0x38]\n 16916: a1 = 0 if a2 != 0\n 16918: a1 = 0 if a0 != 0\n 16920: jump @705 if a1 != 0\n      : @704 (gas: 1)\n 16923: jump @797\n      : @705 (gas: 9)\n 16926: a0 = u64 [s1 + 0x278]\n 16930: a0 = i32 [a0]\n 16932: u64 [s1 + 0x278] = a0\n 16936: a0 = u64 [s1 + 0x240]\n 16940: a0 = a0 + 0x20\n 16943: u64 [s1 + 0x250] = a0\n 16947: a1 = t0\n 16949: u64 [s1 + 0x270] = t0\n 16953: ra = 662, jump @18\n      : @706 [@dyn 331] (gas: 35)\n 16959: i32 a0 = a0 + 0\n 16961: a1 = i32 [s1 + 0x270]\n 16965: a2 = u64 [s1 + 0x278]\n 16969: ecalli 1 // 'call_data_copy'\n 16971: a0 = sp + 0xffffffffffffffe0\n 16974: a5 = a0 & 0xffffffffffffffe0\n 16977: sp = a5\n 16979: a0 = u64 [s1 + 0x248]\n 16983: a2 = a0 + 0x3\n 16986: a0 = a2 <u a0\n 16989: a1 = u64 [s1 + 0x258]\n 16993: a3 = a1 + a0\n 16996: a1 = a3 <u a1\n 16999: a1 = a0 if a0 == 0\n 17002: a0 = u64 [s1 + 0x268]\n 17006: a4 = a0 + a1\n 17009: a0 = a4 <u a0\n 17012: a1 = u64 [s1 + 0x260]\n 17016: a0 = a0 + a1\n 17019: u64 [s1 + 0x1e0] = a0\n 17023: u64 [a5 + 0x18] = a0\n 17026: u64 [s1 + 0x1d0] = a4\n 17030: u64 [a5 + 0x10] = a4\n 17033: u64 [s1 + 0x1d8] = a3\n 17037: u64 [a5 + 0x8] = a3\n 17040: u64 [s1 + 0x1e8] = a2\n 17044: u64 [s1 + 0x278] = a5\n 17048: u64 [a5] = a2\n 17050: a0 = sp + 0xffffffffffffffe0\n 17053: a0 = a0 & 0xffffffffffffffe0\n 17056: u64 [s1 + 0x270] = a0\n 17060: sp = a0\n 17062: a0 = s1 + 0x1c40\n 17066: a1 = u64 [s1 + 0x240]\n 17070: ra = 664, jump @7\n      : @707 [@dyn 332] (gas: 2)\n 17076: a1 = s1 + 0x19f8\n 17080: fallthrough\n      : @708 (gas: 22)\n 17081: a5 = a1 + 0x200\n 17085: a2 = u64 [a5 + 0x58]\n 17088: a3 = u64 [a5 + 0x60]\n 17091: a0 = u64 [a5 + 0x48]\n 17094: a4 = u64 [a5 + 0x50]\n 17097: a1 = u64 [s1 + 0x270]\n 17101: u64 [a1 + 0x10] = a2\n 17104: u64 [a1 + 0x18] = a3\n 17107: u64 [s1 + 0x1f0] = a0\n 17111: u64 [a1] = a0\n 17113: a5 = a1\n 17115: a0 = a3 >u 0\n 17117: a1 = a2 >u 0\n 17119: a1 = a0 if a3 != 0\n 17122: u64 [s1 + 0x208] = a2\n 17126: u64 [s1 + 0x200] = a3\n 17130: a0 = a2 | a3\n 17133: a2 = a4 >u 0\n 17135: a2 = a1 if a0 != 0\n 17138: u64 [s1 + 0x1f8] = a4\n 17142: u64 [a5 + 0x8] = a4\n 17145: jump @710 if a2 == 0\n      : @709 (gas: 1)\n 17148: jump @1212\n      : @710 (gas: 14)\n 17151: a0 = u64 [s1 + 0x240]\n 17155: a1 = u64 [s1 + 0x250]\n 17159: a0 = a1 <u a0\n 17162: a2 = u64 [s1 + 0x238]\n 17166: a1 = a2 + a0\n 17169: u64 [s1 + 0x240] = a1\n 17173: a1 = a1 <u a2\n 17176: a1 = a0 if a0 == 0\n 17179: a0 = u64 [s1 + 0x218]\n 17183: a1 = a1 + a0\n 17186: u64 [s1 + 0x248] = a1\n 17190: a0 = s1 + 0x1c20\n 17194: a1 = u64 [s1 + 0x278]\n 17198: ra = 666, jump @11\n      : @711 [@dyn 333] (gas: 13)\n 17204: a0 = s1 + 0x19f8\n 17208: a2 = a0 + 0x200\n 17212: a1 = u64 [a2 + 0x40]\n 17215: u64 [s1 + 0x260] = a1\n 17219: a1 = u64 [a2 + 0x38]\n 17222: u64 [s1 + 0x268] = a1\n 17226: a1 = u64 [a2 + 0x30]\n 17229: u64 [s1 + 0x258] = a1\n 17233: a0 = u64 [a2 + 0x28]\n 17236: u64 [s1 + 0x238] = a0\n 17240: a0 = u64 [s1 + 0x278]\n 17244: a1 = u64 [s1 + 0x270]\n 17248: ra = 668, jump @12\n      : @712 [@dyn 334] (gas: 22)\n 17254: a1 = u64 [s1 + 0x1f8]\n 17258: a2 = u64 [s1 + 0x258]\n 17262: a0 = a1 ^ a2\n 17265: a1 = a1 <u a2\n 17268: a4 = u64 [s1 + 0x1f0]\n 17272: a2 = u64 [s1 + 0x238]\n 17276: a2 = a4 <u a2\n 17279: a2 = a1 if a0 != 0\n 17282: a5 = u64 [s1 + 0x208]\n 17286: a0 = u64 [s1 + 0x268]\n 17290: t0 = a5 <u a0\n 17293: a3 = u64 [s1 + 0x200]\n 17297: a1 = u64 [s1 + 0x260]\n 17301: t1 = a3 ^ a1\n 17304: a3 = a3 <u a1\n 17307: a3 = t0 if t1 == 0\n 17310: a0 = a0 ^ a5\n 17313: a0 = a0 | t1\n 17316: a3 = a2 if a0 == 0\n 17319: a0 = a4 & 0x1f\n 17322: u64 [s1 + 0x1b0] = a0\n 17326: jump @739 if a3 == 0\n      : @713 (gas: 14)\n 17330: a0 = s1 + 0x19f8\n 17334: a3 = s1 + 0x100\n 17338: a1 = u64 [a3 + 0xe8]\n 17342: a4 = a0 + 0x200\n 17346: u64 [a4 + 0x8] = a1\n 17349: a1 = u64 [a3 + 0xd8]\n 17353: u64 [a4 + 0x10] = a1\n 17356: a1 = u64 [a3 + 0xd0]\n 17360: u64 [a4 + 0x18] = a1\n 17363: a1 = s1 + 0x1c00\n 17367: a2 = u64 [a3 + 0xe0]\n 17371: u64 [a4 + 0x20] = a2\n 17374: a0 = 0\n 17376: ra = 670, jump @9\n      : @714 [@dyn 335] (gas: 2)\n 17382: a1 = i32 [0x201f0]\n 17387: jump @716 if a1 >u 31\n      : @715 (gas: 2)\n 17391: u32 [0x201f0] = 0x20\n 17397: fallthrough\n      : @716 (gas: 10)\n 17398: a0 = sp + 0xffffffffffffffe0\n 17401: a2 = a0 & 0xffffffffffffffe0\n 17404: u64 [s1 + 0x230] = a2\n 17408: sp = a2\n 17410: a0 = 0x20200\n 17415: i32 a0 = a0 + 0\n 17417: i32 a2 = a2 + 0\n 17419: a1 = 0x20\n 17422: ecalli 8 // 'hash_keccak_256'\n 17424: fallthrough\n      : @717 (gas: 90)\n 17425: a0 = u64 [s1 + 0x1f0]\n 17429: a1 = a0 + 0x1f\n 17432: a0 = a1 <u a0\n 17435: a3 = u64 [s1 + 0x1f8]\n 17439: a2 = a3 + a0\n 17442: a3 = a2 <u a3\n 17445: a3 = a0 if a0 == 0\n 17448: t0 = u64 [s1 + 0x208]\n 17452: t0 = t0 + a3\n 17455: a3 = t0 << 0x3b\n 17458: a4 = a2 >> 0x5\n 17461: a3 = a3 | a4\n 17464: a0 = u64 [s1 + 0x230]\n 17468: a4 = u64 [a0 + 0x18]\n 17471: a2 = a2 << 0x3b\n 17474: a5 = u64 [a0 + 0x10]\n 17477: a1 = a1 >> 0x5\n 17480: a1 = a1 | a2\n 17483: a4 = reverse a4\n 17485: a2 = reverse a5\n 17487: a1 = a1 + a4\n 17490: u64 [s1 + 0x278] = a1\n 17494: a5 = a1 <u a4\n 17497: a1 = a2 + a5\n 17500: a1 = a1 + a3\n 17503: a3 = a1 ^ a2\n 17506: u64 [s1 + 0x270] = a1\n 17510: t1 = a1 <u a2\n 17513: t1 = a5 if a3 == 0\n 17516: a0 = u64 [s1 + 0x238]\n 17520: t2 = a0 + 0x1f\n 17523: a0 = t2 <u a0\n 17526: a1 = u64 [s1 + 0x258]\n 17530: a5 = a1 + a0\n 17533: a3 = a5 <u a1\n 17536: a3 = a0 if a0 == 0\n 17539: ra = u64 [s1 + 0x268]\n 17543: ra = ra + a3\n 17546: a0 = ra << 0x3b\n 17549: a1 = a5 >> 0x5\n 17552: a0 = a0 | a1\n 17555: a5 = a5 << 0x3b\n 17558: a1 = t2 >> 0x5\n 17561: a1 = a1 | a5\n 17564: a1 = a1 + a4\n 17567: u64 [s1 + 0x258] = a1\n 17571: a1 = a1 <u a4\n 17574: a4 = a2 + a1\n 17577: a4 = a4 + a0\n 17580: a0 = a4 ^ a2\n 17583: u64 [s1 + 0x238] = a4\n 17587: a2 = a4 <u a2\n 17590: a2 = a1 if a0 == 0\n 17593: a1 = u64 [s1 + 0x230]\n 17597: a0 = u64 [a1 + 0x8]\n 17600: a1 = u64 [a1]\n 17602: a3 = u64 [s1 + 0x208]\n 17606: a4 = t0 <u a3\n 17609: a3 = u64 [s1 + 0x200]\n 17613: a3 = a3 + a4\n 17616: a5 = t0 >> 0x5\n 17619: a4 = a3 << 0x3b\n 17622: a4 = a4 | a5\n 17625: a1 = reverse a1\n 17627: a0 = reverse a0\n 17629: a3 = a3 >> 0x5\n 17632: a4 = a4 + a0\n 17635: a3 = a3 + a1\n 17638: a5 = a4 <u a0\n 17641: a3 = a3 + a5\n 17644: t1 = t1 + a4\n 17647: a4 = t1 <u a4\n 17650: t0 = a3 + a4\n 17653: a3 = u64 [s1 + 0x268]\n 17657: a3 = ra <u a3\n 17660: a4 = u64 [s1 + 0x260]\n 17664: a3 = a3 + a4\n 17667: a4 = ra >> 0x5\n 17670: a5 = a3 << 0x3b\n 17673: a4 = a4 | a5\n 17676: a3 = a3 >> 0x5\n 17679: a1 = a1 + a3\n 17682: a4 = a4 + a0\n 17685: a0 = a4 <u a0\n 17688: a5 = a1 + a0\n 17691: a2 = a2 + a4\n 17694: u64 [s1 + 0x230] = a2\n 17698: a2 = a2 <u a4\n 17701: a0 = u64 [s1 + 0x1b0]\n 17705: jump @724 if a0 == 0\n      : @718 (gas: 24)\n 17709: a0 = sp + 0xffffffffffffffe0\n 17712: a1 = a0 & 0xffffffffffffffe0\n 17715: u64 [s1 + 0x1c0] = a1\n 17719: sp = a1\n 17721: a3 = u64 [s1 + 0x278]\n 17725: a0 = a3 <u 0x1\n 17728: u64 [s1 + 0x220] = a5\n 17732: a4 = u64 [s1 + 0x270]\n 17736: a0 = a4 - a0\n 17739: a4 = a4 | a3\n 17742: a4 = a4 <u 0x1\n 17745: u64 [s1 + 0x1c8] = a2\n 17749: a2 = t1 - a4\n 17752: a4 = t1 <u a4\n 17755: a4 = t0 - a4\n 17758: a3 = a3 + 0xffffffffffffffff\n 17761: u64 [a1 + 0x18] = a4\n 17764: u64 [a1 + 0x10] = a2\n 17767: u64 [a1 + 0x8] = a0\n 17770: u64 [a1] = a3\n 17772: a0 = s1 + 0x1be0\n 17776: u64 [s1 + 0x268] = t0\n 17780: u64 [s1 + 0x260] = t1\n 17784: ra = 672, jump @11\n      : @719 [@dyn 336] (gas: 18)\n 17790: a0 = s1 + 0x19f8\n 17794: a1 = u64 [a0 + 0x200]\n 17798: u64 [s1 + 0x1b8] = a1\n 17802: a2 = a0 + 0x100\n 17806: a1 = u64 [a2 + 0xf8]\n 17810: u64 [s1 + 0x170] = a1\n 17814: a1 = u64 [a2 + 0xf0]\n 17818: u64 [s1 + 0x168] = a1\n 17822: a0 = u64 [a2 + 0xe8]\n 17826: u64 [s1 + 0x160] = a0\n 17830: a0 = u64 [s1 + 0x1b0]\n 17834: a1 = a0 << 0x3\n 17837: u64 [s1 + 0x148] = a1\n 17841: a2 = 0x100 - a1\n 17845: u64 [s1 + 0x228] = a2\n 17849: a0 = 0xffffffffffffffff\n 17852: a1 = 0xffffffffffffffff\n 17855: ra = 674, jump @1828\n      : @720 [@dyn 337] (gas: 15)\n 17861: u64 [s1 + 0x140] = a0\n 17865: u64 [s1 + 0x128] = a1\n 17869: a3 = u64 [s1 + 0x228]\n 17873: a2 = a3 <u 0x80\n 17877: u64 [s1 + 0x138] = a2\n 17881: a4 = a1\n 17883: a4 = 0 if a2 == 0\n 17885: u64 [s1 + 0x158] = a4\n 17889: a1 = a0\n 17891: a1 = 0 if a2 == 0\n 17893: u64 [s1 + 0x150] = a1\n 17897: a2 = 0x80 - a3\n 17901: a0 = 0xffffffffffffffff\n 17904: a1 = 0xffffffffffffffff\n 17907: ra = 676, jump @1833\n      : @721 [@dyn 338] (gas: 9)\n 17913: u64 [s1 + 0x130] = a0\n 17917: a0 = u64 [s1 + 0x128]\n 17921: a0 = a0 | a1\n 17924: u64 [s1 + 0x128] = a0\n 17928: a0 = u64 [s1 + 0x148]\n 17932: a2 = 0x80 - a0\n 17936: a0 = 0xffffffffffffffff\n 17939: a1 = 0xffffffffffffffff\n 17942: ra = 678, jump @1828\n      : @722 [@dyn 339] (gas: 29)\n 17948: a3 = u64 [s1 + 0x138]\n 17952: a2 = u64 [s1 + 0x128]\n 17956: a1 = a2 if a3 != 0\n 17959: a2 = u64 [s1 + 0x140]\n 17963: a4 = u64 [s1 + 0x130]\n 17967: a2 = a2 | a4\n 17970: a2 = a0 if a3 == 0\n 17973: a3 = u64 [s1 + 0x228]\n 17977: a1 = 0xffffffffffffffff if a3 == 0\n 17980: a2 = 0xffffffffffffffff if a3 == 0\n 17983: a0 = u64 [s1 + 0x160]\n 17987: a0 = a0 & a2\n 17990: a2 = u64 [s1 + 0x168]\n 17994: a1 = a1 & a2\n 17997: a2 = u64 [s1 + 0x170]\n 18001: a3 = u64 [s1 + 0x150]\n 18005: a2 = a2 & a3\n 18008: a3 = u64 [s1 + 0x1b8]\n 18012: a4 = u64 [s1 + 0x158]\n 18016: a3 = a3 & a4\n 18019: a4 = s1 + 0x29f8\n 18023: a5 = a4 + 0x600\n 18027: u64 [a5 + 0xc0] = a3\n 18031: u64 [a5 + 0xb8] = a2\n 18035: u64 [a5 + 0xb0] = a1\n 18039: u64 [a5 + 0xa8] = a0\n 18043: a1 = s1 + 0x30a0\n 18047: a0 = u64 [s1 + 0x1c0]\n 18051: ra = 680, jump @12\n      : @723 [@dyn 340] (gas: 5)\n 18057: a2 = u64 [s1 + 0x1c8]\n 18061: a5 = u64 [s1 + 0x220]\n 18065: t1 = u64 [s1 + 0x260]\n 18069: t0 = u64 [s1 + 0x268]\n 18073: fallthrough\n      : @724 (gas: 10)\n 18074: a2 = a2 + a5\n 18077: a1 = s1 + 0x200\n 18081: u64 [a1 + 0x28] = a2\n 18084: a0 = sp + 0xffffffffffffffe0\n 18087: ra = a0 & 0xffffffffffffffe0\n 18090: sp = ra\n 18092: a4 = u64 [a1 + 0x78]\n 18095: a5 = u64 [a1 + 0x70]\n 18098: u64 [s1 + 0x220] = ra\n 18102: fallthrough\n      : @725 (gas: 22)\n 18103: a0 = u64 [s1 + 0x258]\n 18107: a0 = a4 <u a0\n 18110: a2 = u64 [s1 + 0x238]\n 18114: a1 = a5 ^ a2\n 18117: a2 = a5 <u a2\n 18120: a2 = a0 if a1 == 0\n 18123: a0 = u64 [s1 + 0x230]\n 18127: t2 = t1 <u a0\n 18130: a3 = u64 [s1 + 0x228]\n 18134: a1 = t0 ^ a3\n 18137: a3 = t0 <u a3\n 18140: a3 = t2 if a1 == 0\n 18143: a0 = t1 ^ a0\n 18146: a0 = a0 | a1\n 18149: a3 = a2 if a0 == 0\n 18152: a0 = ra\n 18154: u64 [a0] = a4\n 18156: u64 [a0 + 0x8] = a5\n 18159: u64 [ra + 0x10] = t1\n 18162: u64 [ra + 0x18] = t0\n 18165: a0 = s1 + 0x29f8\n 18169: jump @739 if a3 == 0\n      : @726 (gas: 11)\n 18173: u64 [a0 + 1760] = 0\n 18177: u64 [a0 + 1752] = 0\n 18181: u64 [a0 + 1744] = 0\n 18185: u64 [a0 + 1736] = 0\n 18189: a1 = s1 + 0x30c0\n 18193: a0 = ra\n 18195: u64 [s1 + 0x278] = a4\n 18199: u64 [s1 + 0x270] = a5\n 18203: u64 [s1 + 0x268] = t0\n 18207: u64 [s1 + 0x260] = t1\n 18211: ra = 682, jump @12\n      : @727 [@dyn 341] (gas: 16)\n 18217: ra = u64 [s1 + 0x220]\n 18221: t0 = u64 [s1 + 0x268]\n 18225: a2 = s1 + 0x200\n 18229: a5 = u64 [a2 + 0x70]\n 18232: a4 = u64 [a2 + 0x78]\n 18235: a4 = a4 + 0x1\n 18238: a0 = a4 <u 0x1\n 18241: a5 = a5 + a0\n 18244: a0 = a4 | a5\n 18247: a0 = a0 <u 0x1\n 18250: a1 = u64 [a2 + 0x60]\n 18253: a0 = a0 + a1\n 18256: a1 = a0 <u a1\n 18259: t0 = t0 + a1\n 18262: t1 = a0\n 18264: jump @725\n      : @728 (gas: 5)\n 18267: ecalli 12 // 'return_data_size'\n 18269: u64 [s1 + 0x258] = a0\n 18273: a0 = s1 + 0x2620\n 18277: a1 = 0x40\n 18280: ra = 684, jump @7\n      : @729 [@dyn 342] (gas: 29)\n 18286: a5 = s1 + 0x21f8\n 18290: t0 = u64 [a5 + 0x440]\n 18294: u64 [s1 + 0x260] = t0\n 18298: t1 = u64 [a5 + 0x438]\n 18302: u64 [s1 + 0x250] = t1\n 18306: t2 = u64 [a5 + 0x430]\n 18310: u64 [s1 + 0x268] = t2\n 18314: ra = u64 [a5 + 0x428]\n 18318: u64 [s1 + 0x270] = ra\n 18322: a1 = u64 [s1 + 0x258]\n 18326: a0 = a1 + 0x1f\n 18329: a1 = a0 <u a1\n 18332: a0 = a0 & 0xffffffffffffffe0\n 18335: a2 = a0 + 0x20\n 18338: a0 = a2 <u a0\n 18341: a3 = a1 + a0\n 18344: a4 = a3 <u a1\n 18347: a4 = a0 if a0 == 0\n 18350: u64 [a5 + 1024] = 0\n 18354: u64 [a5 + 0x3e8] = a2\n 18358: u64 [a5 + 0x420] = t0\n 18362: u64 [a5 + 0x418] = t1\n 18366: u64 [a5 + 0x410] = t2\n 18370: u64 [a5 + 0x408] = ra\n 18374: u64 [a5 + 0x3f0] = a3\n 18378: a0 = s1 + 0x2600\n 18382: a1 = s1 + 0x25e0\n 18386: u64 [a5 + 0x3f8] = a4\n 18390: ra = 686, jump @1452\n      : @730 [@dyn 343] (gas: 13)\n 18396: a4 = s1 + 0x200\n 18400: a2 = u64 [a4 + 0x70]\n 18403: a0 = u64 [a4 + 0x60]\n 18406: a1 = u64 [a4 + 0x68]\n 18409: a0 = a0 | a1\n 18412: a3 = u64 [a4 + 0x50]\n 18415: a1 = a2 | a3\n 18418: a1 = a1 | a0\n 18421: a1 = a1 >> 0x20\n 18424: a0 = a0 | a3\n 18427: a0 = a0 << 0x20\n 18430: a0 = a0 | a1\n 18433: jump @797 if a0 != 0\n      : @731 (gas: 9)\n 18437: a0 = s1 + 0x21f8\n 18441: u64 [a0 + 992] = 0\n 18445: u64 [a0 + 984] = 0\n 18449: u64 [a0 + 976] = 0\n 18453: a1 = s1 + 0x25c0\n 18457: a3 = u64 [s1 + 0x258]\n 18461: u64 [a0 + 0x3c8] = a3\n 18465: a0 = a2\n 18467: ra = 688, jump @9\n      : @732 [@dyn 344] (gas: 2)\n 18473: ecalli 12 // 'return_data_size'\n 18475: fallthrough\n      : @733 (gas: 11)\n 18476: a5 = s1 + 0x200\n 18480: a3 = u64 [a5 + 0x70]\n 18483: a1 = u64 [a5 + 0x60]\n 18486: a2 = u64 [a5 + 0x50]\n 18489: a1 = a1 | a2\n 18492: a2 = 0xffffffe0\n 18502: a2 = a3 <u a2\n 18505: a4 = u64 [a5 + 0x68]\n 18508: a2 = 0 if a4 != 0\n 18510: a2 = 0 if a1 != 0\n 18512: jump @797 if a2 == 0\n      : @734 (gas: 3)\n 18516: a1 = a0\n 18518: a0 = a0 >> 0x20\n 18521: jump @797 if a0 != 0\n      : @735 (gas: 7)\n 18525: i32 a0 = a3 + 0x20\n 18528: a2 = a1\n 18530: u64 [s1 + 0x268] = a1\n 18534: i32 a1 = a1 + 0\n 18536: u64 [s1 + 0x270] = a1\n 18540: a1 = a2\n 18542: ra = 690, jump @18\n      : @736 [@dyn 345] (gas: 9)\n 18548: a1 = s1 + 0x31f8\n 18552: a2 = u64 [s1 + 0x268]\n 18556: u32 [a1 + 0x1e8] = a2\n 18560: i32 a0 = a0 + 0\n 18562: a1 = s1 + 0x3000\n 18566: i32 a1 = a1 + 0x3e0\n 18570: a2 = 0\n 18572: ecalli 11 // 'return_data_copy'\n 18574: fallthrough\n      : @737 (gas: 5)\n 18575: a0 = s1 + 0x31f8\n 18579: a0 = i32 [a0 + 0x1e8]\n 18583: a2 = u64 [s1 + 0x278]\n 18587: a1 = u64 [s1 + 0x270]\n 18591: jump @797 if a0 <u a1\n      : @738 (gas: 1)\n 18595: jump @653\n      : @739 (gas: 19)\n 18598: a2 = s1 + 0x200\n 18602: a0 = u64 [a2 + 0x48]\n 18605: a1 = u64 [a2 + 0x18]\n 18608: a0 = a0 <u a1\n 18611: u64 [a2 + 0x78] = a0\n 18614: a0 = s1 + 0x19f8\n 18618: a3 = s1 + 0x100\n 18622: a1 = u64 [a3 + 0xe8]\n 18626: a4 = a0 + 0x100\n 18630: u64 [a4 + 0xc8] = a1\n 18634: a1 = u64 [a3 + 0xd8]\n 18638: u64 [a4 + 0xd0] = a1\n 18642: a1 = u64 [a3 + 0xd0]\n 18646: u64 [a4 + 0xd8] = a1\n 18650: a1 = s1 + 0x1bc0\n 18654: a2 = u64 [a3 + 0xe0]\n 18658: u64 [a4 + 0xe0] = a2\n 18662: a0 = 0\n 18664: ra = 692, jump @9\n      : @740 [@dyn 346] (gas: 2)\n 18670: a1 = i32 [0x201f0]\n 18675: jump @742 if a1 >u 31\n      : @741 (gas: 2)\n 18679: u32 [0x201f0] = 0x20\n 18685: fallthrough\n      : @742 (gas: 50)\n 18686: a0 = u64 [s1 + 0x210]\n 18690: a1 = u64 [s1 + 0x278]\n 18694: a0 = a0 + a1\n 18697: u64 [s1 + 0x268] = a0\n 18701: a0 = sp + 0xffffffffffffffe0\n 18704: a2 = a0 & 0xffffffffffffffe0\n 18707: u64 [s1 + 0x278] = a2\n 18711: sp = a2\n 18713: a0 = 0x20200\n 18718: i32 a0 = a0 + 0\n 18720: i32 a2 = a2 + 0\n 18722: a1 = 0x20\n 18725: ecalli 8 // 'hash_keccak_256'\n 18727: t0 = 0\n 18729: a5 = 0\n 18731: t1 = 0\n 18733: a0 = u64 [s1 + 0x1f0]\n 18737: a0 = a0 >> 0x5\n 18740: a2 = u64 [s1 + 0x1f8]\n 18744: a1 = a2 << 0x3b\n 18747: a0 = a0 | a1\n 18750: u64 [s1 + 0x1e0] = a0\n 18754: a0 = a2 >> 0x5\n 18757: a2 = u64 [s1 + 0x208]\n 18761: a1 = a2 << 0x3b\n 18764: a0 = a0 | a1\n 18767: u64 [s1 + 0x1d8] = a0\n 18771: a0 = a2 >> 0x5\n 18774: a4 = u64 [s1 + 0x200]\n 18778: a1 = a4 << 0x3b\n 18781: a0 = a0 | a1\n 18784: u64 [s1 + 0x1f0] = a0\n 18788: a3 = u64 [s1 + 0x278]\n 18792: a0 = u64 [a3]\n 18794: a1 = u64 [a3 + 0x8]\n 18797: a2 = u64 [a3 + 0x10]\n 18800: a3 = u64 [a3 + 0x18]\n 18803: a0 = reverse a0\n 18805: u64 [s1 + 0x1c8] = a0\n 18809: a0 = reverse a1\n 18811: a1 = s1 + 0x100\n 18815: u64 [a1 + 0xd0] = a0\n 18819: a0 = reverse a2\n 18821: u64 [a1 + 0xc0] = a0\n 18825: a0 = reverse a3\n 18827: a3 = 0\n 18829: u64 [a1 + 0xb8] = a0\n 18833: a4 = a4 >> 0x5\n 18836: u64 [a1 + 0xe8] = a4\n 18840: fallthrough\n      : @743 (gas: 18)\n 18841: a0 = u64 [s1 + 0x1e0]\n 18845: a0 = t0 <u a0\n 18848: a2 = u64 [s1 + 0x1d8]\n 18852: a1 = a5 ^ a2\n 18855: a2 = a5 <u a2\n 18858: a2 = a0 if a1 == 0\n 18861: a4 = u64 [s1 + 0x1f0]\n 18865: t2 = a3 <u a4\n 18868: a0 = a3\n 18870: a3 = u64 [s1 + 0x1e8]\n 18874: a1 = t1 ^ a3\n 18877: a3 = t1 <u a3\n 18880: a3 = t2 if a1 == 0\n 18883: u64 [s1 + 0x218] = a0\n 18887: a0 = a0 ^ a4\n 18890: a0 = a0 | a1\n 18893: a3 = a2 if a0 == 0\n 18896: jump @780 if a3 == 0\n      : @744 (gas: 20)\n 18900: a2 = s1 + 0x200\n 18904: u64 [a2 + 0x8] = a5\n 18907: u64 [s1 + 0x210] = t0\n 18911: a0 = sp + 0xffffffffffffffe0\n 18914: a0 = a0 & 0xffffffffffffffe0\n 18917: u64 [s1 + 0x1f8] = a0\n 18921: sp = a0\n 18923: u64 [s1 + 544] = 0\n 18927: u64 [s1 + 568] = 0\n 18931: u64 [s1 + 560] = 0\n 18935: u64 [s1 + 552] = 0\n 18939: t2 = 0\n 18941: ra = 0\n 18943: u64 [s1 + 0x200] = t1\n 18947: t1 = 0\n 18949: u64 [s1 + 632] = 0\n 18953: a1 = u64 [a2 + 0x50]\n 18956: a4 = u64 [a2 + 0x48]\n 18959: a5 = u64 [a2 + 0x40]\n 18962: fallthrough\n      : @745 (gas: 16)\n 18963: a0 = ra >u 0\n 18965: a2 = t2 <u 0x20\n 18968: a3 = a2 ^ 0x1\n 18971: a3 = a0 if ra != 0\n 18974: a0 = t1 >u 0\n 18976: t0 = u64 [s1 + 0x278]\n 18980: a2 = t0 >u 0\n 18982: a2 = a0 if t0 == 0\n 18985: u64 [s1 + 0x270] = t1\n 18989: a0 = t1 | t0\n 18992: a2 = a3 if a0 == 0\n 18995: a0 = s1 + 0x200\n 18999: u64 [a0 + 0x50] = a1\n 19002: u64 [a0 + 0x48] = a4\n 19005: u64 [a0 + 0x40] = a5\n 19008: jump @751 if a2 != 0\n      : @746 (gas: 9)\n 19012: a0 = a1 | a4\n 19015: a2 = u64 [s1 + 0x268]\n 19019: a2 = a2 | a5\n 19022: a0 = a0 | a2\n 19025: a0 = a0 >> 0x20\n 19028: a2 = a2 | a4\n 19031: a2 = a2 << 0x20\n 19034: a0 = a0 | a2\n 19037: jump @797 if a0 != 0\n      : @747 (gas: 4)\n 19041: a0 = s1 + 0x1a40\n 19045: u64 [s1 + 0x260] = t2\n 19049: u64 [s1 + 0x258] = ra\n 19053: ra = 694, jump @7\n      : @748 [@dyn 347] (gas: 2)\n 19059: a4 = s1 + 0x19f8\n 19063: t0 = 696, jump @1824\n      : @749 [@dyn 348] (gas: 28)\n 19069: t0 = a0 >u 0\n 19071: a5 = s1 + 0x11f8\n 19075: u64 [a5 + 2016] = 0\n 19079: u64 [a5 + 2008] = 0\n 19083: u64 [a5 + 2000] = 0\n 19087: a0 = u64 [s1 + 0x278]\n 19091: u64 [a4] = a0\n 19093: a0 = u64 [s1 + 0x270]\n 19097: a1 = a4 + 0xffffffffffffff00\n 19101: u64 [a1 + 0xf8] = a0\n 19105: a0 = u64 [s1 + 0x258]\n 19109: u64 [a1 + 0xf0] = a0\n 19113: a0 = u64 [s1 + 0x260]\n 19117: u64 [a1 + 0xe8] = a0\n 19121: a0 = u64 [s1 + 0x228]\n 19125: u64 [a4 + 0x20] = a0\n 19128: a0 = u64 [s1 + 0x230]\n 19132: u64 [a4 + 0x18] = a0\n 19135: a0 = u64 [s1 + 0x238]\n 19139: u64 [a4 + 0x10] = a0\n 19142: a0 = u64 [s1 + 0x220]\n 19146: u64 [a4 + 0x8] = a0\n 19149: a0 = s1 + 0x1a20\n 19153: a1 = s1 + 0x1a00\n 19157: a2 = s1 + 0x19e0\n 19161: a3 = s1 + 0x19c0\n 19165: u64 [a5 + 0x7c8] = t0\n 19169: ra = 698, jump @1436\n      : @750 [@dyn 349] (gas: 39)\n 19175: ra = u64 [s1 + 0x258]\n 19179: t2 = u64 [s1 + 0x260]\n 19183: a1 = s1 + 0x19f8\n 19187: a0 = u64 [a1 + 0x40]\n 19190: u64 [s1 + 0x228] = a0\n 19194: a0 = u64 [a1 + 0x38]\n 19197: u64 [s1 + 0x230] = a0\n 19201: a0 = u64 [a1 + 0x30]\n 19204: a4 = a1\n 19206: u64 [s1 + 0x238] = a0\n 19210: a1 = u64 [s1 + 0x250]\n 19214: a0 = a1 + 0x20\n 19217: a2 = a0 <u a1\n 19220: a1 = u64 [s1 + 0x240]\n 19224: a5 = a1 + a2\n 19227: a3 = a5 <u a1\n 19230: a3 = a2 if a2 == 0\n 19233: a1 = u64 [a4 + 0x28]\n 19236: u64 [s1 + 0x220] = a1\n 19240: a1 = u64 [s1 + 0x248]\n 19244: a3 = a3 + a1\n 19247: a2 = a3 <u a1\n 19250: a1 = u64 [s1 + 0x268]\n 19254: a1 = a1 + a2\n 19257: u64 [s1 + 0x268] = a1\n 19261: t2 = t2 + 0x1\n 19264: a2 = t2 <u 0x1\n 19267: ra = ra + a2\n 19270: a2 = t2 | ra\n 19273: a2 = a2 <u 0x1\n 19276: a1 = u64 [s1 + 0x270]\n 19280: t1 = a1 + a2\n 19283: a4 = t1 <u a1\n 19286: a1 = u64 [s1 + 0x278]\n 19290: a1 = a1 + a4\n 19293: u64 [s1 + 0x278] = a1\n 19297: a1 = a0\n 19299: a4 = a3\n 19301: jump @745\n      : @751 (gas: 39)\n 19304: a4 = u64 [s1 + 0x1f8]\n 19308: a0 = u64 [s1 + 0x220]\n 19312: u64 [a4] = a0\n 19314: a0 = u64 [s1 + 0x238]\n 19318: u64 [a4 + 0x8] = a0\n 19321: a0 = u64 [s1 + 0x230]\n 19325: u64 [a4 + 0x10] = a0\n 19328: a0 = u64 [s1 + 0x228]\n 19332: u64 [a4 + 0x18] = a0\n 19335: a0 = u64 [s1 + 0x1b8]\n 19339: a1 = u64 [s1 + 0x210]\n 19343: t0 = a1 + a0\n 19346: a1 = t0 <u a1\n 19349: a2 = u64 [s1 + 0x1c0]\n 19353: a0 = u64 [s1 + 0x208]\n 19357: a2 = a2 + a0\n 19360: a2 = a2 + a1\n 19363: a3 = a2 ^ a0\n 19366: a0 = a2 <u a0\n 19369: a0 = a1 if a3 == 0\n 19372: a1 = u64 [s1 + 0x1d0]\n 19376: a3 = u64 [s1 + 0x218]\n 19380: a1 = a1 + a3\n 19383: t1 = a1 <u a3\n 19386: a5 = u64 [s1 + 0x1c8]\n 19390: a3 = u64 [s1 + 0x200]\n 19394: a5 = a5 + a3\n 19397: a3 = a5 + t1\n 19400: a0 = a0 + a1\n 19403: a1 = a0 <u a1\n 19406: a1 = a1 + a3\n 19409: a3 = s1 + 0x29f8\n 19413: u64 [a3 + 0x6e8] = t0\n 19417: u64 [a3 + 0x6f0] = a2\n 19421: u64 [a3 + 0x6f8] = a0\n 19425: u64 [a3 + 0x700] = a1\n 19429: a0 = s1 + 0x30e0\n 19433: a1 = a4\n 19435: ra = 700, jump @12\n      : @752 [@dyn 350] (gas: 14)\n 19441: t1 = u64 [s1 + 0x200]\n 19445: a5 = u64 [s1 + 0x208]\n 19449: t0 = u64 [s1 + 0x210]\n 19453: t0 = t0 + 0x1\n 19456: a0 = t0 <u 0x1\n 19459: a5 = a5 + a0\n 19462: a0 = t0 | a5\n 19465: a0 = a0 <u 0x1\n 19468: a1 = u64 [s1 + 0x218]\n 19472: a0 = a0 + a1\n 19475: a1 = a0 <u a1\n 19478: t1 = t1 + a1\n 19481: a3 = a0\n 19483: jump @743\n      : @753 (gas: 27)\n 19486: a0 = u64 [s1 + 0x1e8]\n 19490: t1 = u64 [s1 + 0x270]\n 19494: t2 = t1 <u a0\n 19497: a5 = u64 [s1 + 0x1e0]\n 19501: a1 = u64 [s1 + 0x268]\n 19505: a3 = a1 ^ a5\n 19508: a2 = a1 <u a5\n 19511: a2 = t2 if a3 == 0\n 19514: a3 = u64 [s1 + 0x1d0]\n 19518: a4 = u64 [s1 + 0x260]\n 19522: ra = a4 - a3\n 19525: t0 = a4 <u a3\n 19528: a4 = u64 [s1 + 0x1d8]\n 19532: a3 = u64 [s1 + 0x278]\n 19536: a4 = a3 - a4\n 19539: a4 = a4 - t0\n 19542: a3 = ra <u a2\n 19545: a4 = a4 - a3\n 19548: u64 [s1 + 0x260] = a4\n 19552: a2 = ra - a2\n 19555: u64 [s1 + 0x258] = a2\n 19559: a1 = a1 - a5\n 19562: a1 = a1 - t2\n 19565: u64 [s1 + 0x268] = a1\n 19569: a0 = t1 - a0\n 19572: u64 [s1 + 0x278] = a0\n 19576: ra = 702, jump @0\n      : @754 [@dyn 351] (gas: 8)\n 19582: a1 = u64 [0x30220]\n 19587: u64 [s1 + 0x270] = a1\n 19591: a1 = u64 [0x30230]\n 19596: u64 [s1 + 0x250] = a1\n 19600: a0 = u64 [0x30228]\n 19605: u64 [s1 + 0x248] = a0\n 19609: ecalli 10 // 'ref_time_left'\n 19611: fallthrough\n      : @755 (gas: 35)\n 19612: a0 = u64 [s1 + 0x248]\n 19616: a0 = reverse a0\n 19618: a1 = a0 << 0x20\n 19621: a2 = u64 [s1 + 0x250]\n 19625: a2 = reverse a2\n 19627: a2 = a2 >> 0x20\n 19630: a1 = a1 | a2\n 19633: a0 = a0 >> 0x20\n 19636: a2 = u64 [s1 + 0x270]\n 19640: a2 = reverse a2\n 19642: a4 = 0x30200\n 19647: a3 = a2 << 0x20\n 19650: a0 = a0 | a3\n 19653: a2 = a2 >> 0x20\n 19656: u32 [0x30210] = a2\n 19661: u64 [0x30208] = a0\n 19666: u64 [0x30200] = a1\n 19671: a2 = s1 + 0x29f8\n 19675: u64 [a2 + 800] = 0\n 19679: u64 [a2 + 792] = 0\n 19683: u64 [a2 + 784] = 0\n 19687: a0 = u64 [s1 + 0x278]\n 19691: t0 = a0\n 19693: a5 = u64 [s1 + 0x258]\n 19697: a0 = a0 | a5\n 19700: a1 = u64 [s1 + 0x260]\n 19704: a3 = u64 [s1 + 0x268]\n 19708: a1 = a1 | a3\n 19711: a0 = a0 | a1\n 19714: a0 = a0 >> 0x20\n 19717: a1 = a1 | a5\n 19720: a1 = a1 << 0x20\n 19723: a0 = a0 | a1\n 19726: u64 [a2 + 776] = 0\n 19730: jump @797 if a0 != 0\n      : @756 (gas: 4)\n 19734: a0 = u64 [s1 + 0x1e8]\n 19738: a1 = t0\n 19740: u64 [s1 + 0x268] = a4\n 19744: ra = 704, jump @18\n      : @757 [@dyn 352] (gas: 4)\n 19750: u64 [s1 + 0x270] = a0\n 19754: a1 = 0x20\n 19757: a0 = u64 [s1 + 0x1e8]\n 19761: ra = 706, jump @18\n      : @758 [@dyn 353] (gas: 35)\n 19767: a2 = s1 + 0x29f8\n 19771: a3 = a2 + 0x300\n 19775: u32 [a3 + 40] = 0x20\n 19779: u64 [a3 + 96] = 0xffffffffffffffff\n 19783: u64 [a3 + 88] = 0xffffffffffffffff\n 19787: u64 [a3 + 80] = 0xffffffffffffffff\n 19791: u64 [a3 + 72] = 0xffffffffffffffff\n 19795: a5 = s1 + 0x200\n 19799: a1 = u64 [a5 + 0x68]\n 19802: a1 = a1 << 0x20\n 19805: a1 = a1 >> 0x20\n 19808: a2 = 0x800000000\n 19818: t0 = a1 | a2\n 19821: a1 = s1 + 0x2d00\n 19825: a1 = a1 << 0x20\n 19828: a1 = a1 >> 0x20\n 19831: a2 = s1 + 0x2d40\n 19835: a2 = a2 << 0x20\n 19838: a3 = a2 | a1\n 19841: a1 = u64 [a5 + 0x70]\n 19844: a1 = a1 << 0x20\n 19847: a1 = a1 >> 0x20\n 19850: a4 = u64 [a5 + 0x78]\n 19853: a4 = a4 << 0x20\n 19856: a4 = a4 | a1\n 19859: a0 = a0 << 0x20\n 19862: a0 = a0 >> 0x20\n 19865: a1 = s1 + 0x2d20\n 19869: a1 = a1 << 0x20\n 19872: a5 = a1 | a0\n 19875: a1 = 0xffffffffffffffff\n 19878: a2 = 0xffffffffffffffff\n 19881: a0 = t0\n 19883: ecalli 0 // 'call'\n 19884: fallthrough\n      : @759 (gas: 1)\n 19885: jump @772 if a0 != 0\n      : @760 (gas: 2)\n 19889: ecalli 12 // 'return_data_size'\n 19891: fallthrough\n      : @761 (gas: 2)\n 19892: a1 = 0x20\n 19895: jump @763 if a0 >=u a1\n      : @762 (gas: 3)\n 19898: ecalli 12 // 'return_data_size'\n 19900: a1 = a0\n 19902: fallthrough\n      : @763 (gas: 19)\n 19903: a4 = s1 + 0x100\n 19907: a2 = u64 [a4 + 0xe8]\n 19911: a3 = u64 [a4 + 0xd8]\n 19915: u64 [s1 + 0x270] = a1\n 19919: a5 = s1 + 0x600\n 19923: u64 [a5 + 0x20] = a1\n 19926: u64 [a5 + 0x40] = a2\n 19929: u64 [s1 + 1576] = 0\n 19933: u64 [s1 + 632] = 0\n 19937: a0 = u64 [a4 + 0xe0]\n 19941: u64 [a5 + 0x48] = a0\n 19944: u64 [s1 + 1584] = 0\n 19948: a0 = u64 [a4 + 0xd0]\n 19952: u64 [a5 + 0x50] = a0\n 19955: u64 [s1 + 1592] = 0\n 19959: a0 = s1 + 0x640\n 19963: a1 = s1 + 0x620\n 19967: u64 [a5 + 0x58] = a3\n 19970: ra = 708, jump @1452\n      : @764 [@dyn 354] (gas: 12)\n 19976: a3 = u64 [s1 + 0x278]\n 19980: a0 = a3 >u 0\n 19982: a1 = u64 [s1 + 0x270]\n 19986: a1 = a1 <u 0x20\n 19989: a1 = a1 ^ 0x1\n 19992: a1 = a0 if a3 != 0\n 19995: a0 = a3 >u 0\n 19997: a2 = a3 >u 0\n 19999: a2 = a0 if a3 == 0\n 20002: a0 = a3 | a3\n 20005: a2 = a1 if a0 == 0\n 20008: jump @766 if a2 != 0\n      : @765 (gas: 1)\n 20011: jump @1244\n      : @766 (gas: 3)\n 20014: a0 = s1 + 0x600\n 20018: a1 = u64 [s1 + 0x1e8]\n 20022: ra = 710, jump @7\n      : @767 [@dyn 355] (gas: 15)\n 20028: a4 = s1 + 0x600\n 20032: a0 = u64 [a4 + 0x18]\n 20035: a1 = u64 [a4 + 0x10]\n 20038: a2 = u64 [a4]\n 20040: a3 = u64 [a4 + 0x8]\n 20043: a4 = s1 + 0x200\n 20047: u64 [a4 + 0x78] = a0\n 20050: u64 [a4 + 0x70] = a1\n 20053: a0 = a0 | a1\n 20056: u64 [a4 + 0x68] = a2\n 20059: a1 = a2 <u 0x2\n 20062: u64 [a4 + 0x60] = a3\n 20065: a1 = 0 if a3 != 0\n 20067: a1 = 0 if a0 != 0\n 20069: jump @769 if a1 != 0\n      : @768 (gas: 1)\n 20072: jump @1245\n      : @769 (gas: 3)\n 20075: a0 = s1 + 0x5e0\n 20079: a1 = 0x40\n 20082: ra = 712, jump @7\n      : @770 [@dyn 356] (gas: 13)\n 20088: a4 = s1 + 0x500\n 20092: a0 = u64 [a4 + 0xf8]\n 20096: a1 = u64 [a4 + 0xf0]\n 20100: a2 = u64 [a4 + 0xe8]\n 20104: a3 = u64 [a4 + 0xe0]\n 20108: a0 = a0 | a2\n 20111: a2 = a3 | a1\n 20114: a2 = a2 | a0\n 20117: a2 = a2 >> 0x20\n 20120: a0 = a0 | a1\n 20123: a0 = a0 << 0x20\n 20126: a0 = a0 | a2\n 20129: jump @797 if a0 != 0\n      : @771 (gas: 15)\n 20133: a2 = s1 + 0x200\n 20137: a0 = u64 [a2 + 0x68]\n 20140: a4 = s1 + 0x500\n 20144: u64 [a4 + 0xc0] = a0\n 20148: a0 = u64 [a2 + 0x60]\n 20151: u64 [a4 + 0xc8] = a0\n 20155: a0 = u64 [a2 + 0x70]\n 20158: u64 [a4 + 0xd0] = a0\n 20162: a1 = s1 + 0x5c0\n 20166: a0 = u64 [a2 + 0x78]\n 20169: u64 [a4 + 0xd8] = a0\n 20173: a0 = a3\n 20175: u64 [a2 + 0x78] = a3\n 20178: ra = 0x22a\n 20182: jump @9\n      : @772 (gas: 3)\n 20185: a0 = s1 + 0x660\n 20189: a1 = 0x40\n 20192: ra = 714, jump @7\n      : @773 [@dyn 357] (gas: 13)\n 20198: a1 = s1 + 0x600\n 20202: a0 = u64 [a1 + 0x78]\n 20205: u64 [s1 + 0x270] = a0\n 20209: a0 = u64 [a1 + 0x70]\n 20212: u64 [s1 + 0x268] = a0\n 20216: a0 = u64 [a1 + 0x68]\n 20219: u64 [s1 + 0x260] = a0\n 20223: a0 = u64 [a1 + 0x60]\n 20226: u64 [s1 + 0x278] = a0\n 20230: ra = 0x2cc\n 20234: ecalli 12 // 'return_data_size'\n 20236: t0 = 0x2ce\n 20240: jump @1779\n      : @774 [@dyn 358] (gas: 1)\n 20243: t0 = 718, jump @1779\n      : @775 [@dyn 359] (gas: 1)\n 20249: jump @797 if a1 != 0\n      : @776 (gas: 3)\n 20253: a2 = a0\n 20255: a0 = a0 >> 0x20\n 20258: jump @797 if a0 != 0\n      : @777 (gas: 1)\n 20262: t0 = 720, jump @1805\n      : @778 [@dyn 360] (gas: 1)\n 20268: ra = 722, jump @18\n      : @779 [@dyn 361] (gas: 11)\n 20274: a1 = s1 + 0x29f8\n 20278: a2 = u64 [s1 + 0x268]\n 20282: u32 [a1 + 0x368] = a2\n 20286: i32 a0 = a0 + 0\n 20288: a1 = s1 + 0x3000\n 20292: i32 a1 = a1 + 0xfffffffffffffd60\n 20296: a2 = 0\n 20298: ecalli 11 // 'return_data_copy'\n 20300: a0 = s1 + 0x29f8\n 20304: a0 = i32 [a0 + 0x368]\n 20308: jump @634\n      : @780 (gas: 2)\n 20311: a0 = u64 [s1 + 0x1b0]\n 20315: jump @788 if a0 == 0\n      : @781 (gas: 18)\n 20319: a0 = sp + 0xffffffffffffffe0\n 20322: a0 = a0 & 0xffffffffffffffe0\n 20325: u64 [s1 + 0x218] = a0\n 20329: sp = a0\n 20331: u64 [s1 + 544] = 0\n 20335: u64 [s1 + 568] = 0\n 20339: u64 [s1 + 560] = 0\n 20343: u64 [s1 + 552] = 0\n 20347: a5 = 0\n 20349: a2 = 0\n 20351: t2 = 0\n 20353: t1 = 0\n 20355: a0 = s1 + 0x200\n 20359: a1 = u64 [a0 + 0x50]\n 20362: a3 = u64 [a0 + 0x48]\n 20365: t0 = u64 [s1 + 0x240]\n 20369: a4 = u64 [a0 + 0x68]\n 20372: fallthrough\n      : @782 (gas: 10)\n 20373: a0 = u64 [s1 + 0x1b0]\n 20377: a0 = a5 <u a0\n 20380: a0 = a0 ^ 0x1\n 20383: u64 [s1 + 0x278] = a2\n 20387: a0 = 0x1 if a2 != 0\n 20390: u64 [s1 + 0x270] = t1\n 20394: u64 [s1 + 0x260] = t2\n 20398: a2 = t2 | t1\n 20401: a0 = 0x1 if a2 != 0\n 20404: jump @787 if a0 != 0\n      : @783 (gas: 12)\n 20408: u64 [s1 + 0x258] = a5\n 20412: a0 = a1 | a3\n 20415: a2 = t0 | a4\n 20418: a0 = a0 | a2\n 20421: a0 = a0 >> 0x20\n 20424: a2 = a2 | a3\n 20427: a2 = a2 << 0x20\n 20430: a0 = a0 | a2\n 20433: u64 [s1 + 0x248] = a3\n 20437: u64 [s1 + 0x240] = t0\n 20441: u64 [s1 + 0x268] = a4\n 20445: jump @797 if a0 != 0\n      : @784 (gas: 3)\n 20449: a0 = s1 + 0x1ba0\n 20453: u64 [s1 + 0x250] = a1\n 20457: ra = 724, jump @7\n      : @785 [@dyn 362] (gas: 34)\n 20463: a5 = s1 + 0x19f8\n 20467: a0 = u64 [a5 + 0x1b8]\n 20471: a1 = u64 [a5 + 0x1c0]\n 20475: a2 = u64 [a5 + 0x1b0]\n 20479: a3 = u64 [a5 + 0x1a8]\n 20483: a1 = a1 | a2\n 20486: a0 = a0 | a3\n 20489: a0 = a0 | a1\n 20492: a4 = a0 >u 0\n 20494: u64 [a5 + 320] = 0\n 20498: u64 [a5 + 312] = 0\n 20502: u64 [a5 + 304] = 0\n 20506: a0 = u64 [s1 + 0x270]\n 20510: u64 [a5 + 0x160] = a0\n 20514: a0 = u64 [s1 + 0x260]\n 20518: u64 [a5 + 0x158] = a0\n 20522: a0 = u64 [s1 + 0x278]\n 20526: u64 [a5 + 0x150] = a0\n 20530: a0 = u64 [s1 + 0x258]\n 20534: u64 [a5 + 0x148] = a0\n 20538: a0 = u64 [s1 + 0x228]\n 20542: u64 [a5 + 0x180] = a0\n 20546: a0 = u64 [s1 + 0x230]\n 20550: u64 [a5 + 0x178] = a0\n 20554: a0 = u64 [s1 + 0x238]\n 20558: u64 [a5 + 0x170] = a0\n 20562: a0 = u64 [s1 + 0x220]\n 20566: u64 [a5 + 0x168] = a0\n 20570: a0 = s1 + 0x1b80\n 20574: a1 = s1 + 0x1b60\n 20578: a2 = s1 + 0x1b40\n 20582: a3 = s1 + 0x1b20\n 20586: u64 [a5 + 0x128] = a4\n 20590: ra = 726, jump @1436\n      : @786 [@dyn 363] (gas: 40)\n 20596: a4 = s1 + 0x200\n 20600: a5 = u64 [a4 + 0x58]\n 20603: a1 = s1 + 0x19f8\n 20607: a0 = u64 [a1 + 0x1a0]\n 20611: u64 [a4 + 0x28] = a0\n 20614: a0 = u64 [a1 + 0x198]\n 20618: u64 [a4 + 0x30] = a0\n 20621: a0 = u64 [a1 + 0x190]\n 20625: u64 [a4 + 0x38] = a0\n 20628: a0 = u64 [a4 + 0x50]\n 20631: t0 = a0 + 0x20\n 20634: a2 = t0 <u a0\n 20637: a0 = u64 [a4 + 0x40]\n 20640: t2 = a0 + a2\n 20643: a3 = t2 <u a0\n 20646: a3 = a2 if a2 == 0\n 20649: a1 = u64 [a1 + 0x188]\n 20653: u64 [a4 + 0x20] = a1\n 20656: a0 = u64 [a4 + 0x48]\n 20659: a3 = a3 + a0\n 20662: a2 = a3 <u a0\n 20665: a0 = u64 [a4 + 0x68]\n 20668: a0 = a0 + a2\n 20671: a5 = a5 + 0x1\n 20674: a2 = a5 <u 0x1\n 20677: ra = u64 [s1 + 0x278]\n 20681: ra = ra + a2\n 20684: a2 = a5 | ra\n 20687: a2 = a2 <u 0x1\n 20690: a1 = u64 [a4 + 0x60]\n 20693: a2 = a2 + a1\n 20696: a4 = a2 <u a1\n 20699: t1 = u64 [s1 + 0x270]\n 20703: t1 = t1 + a4\n 20706: a1 = t0\n 20708: t0 = t2\n 20710: t2 = a2\n 20712: a2 = ra\n 20714: a4 = a0\n 20716: jump @782\n      : @787 (gas: 40)\n 20719: a0 = u64 [s1 + 0x1e0]\n 20723: a1 = u64 [s1 + 0x1b8]\n 20727: t0 = a1 + a0\n 20730: a2 = t0 <u a1\n 20733: a1 = u64 [s1 + 0x1d8]\n 20737: a4 = u64 [s1 + 0x1c0]\n 20741: a1 = a1 + a4\n 20744: a0 = a1 + a2\n 20747: a3 = a0 ^ a4\n 20750: a4 = a0 <u a4\n 20753: a4 = a2 if a3 == 0\n 20756: a3 = s1 + 0x200\n 20760: a1 = u64 [a3 + 0x18]\n 20763: a2 = u64 [a3 + 0x20]\n 20766: u64 [a1] = a2\n 20768: a2 = u64 [a3 + 0x38]\n 20771: u64 [a1 + 0x8] = a2\n 20774: a2 = u64 [a3 + 0x30]\n 20777: u64 [a1 + 0x10] = a2\n 20780: a2 = u64 [a3 + 0x28]\n 20783: u64 [a1 + 0x18] = a2\n 20786: a2 = u64 [s1 + 0x1c8]\n 20790: a3 = u64 [s1 + 0x1e8]\n 20794: a2 = a2 + a3\n 20797: a3 = u64 [s1 + 0x1f0]\n 20801: a5 = u64 [s1 + 0x1d0]\n 20805: a3 = a3 + a5\n 20808: a5 = a3 <u a5\n 20811: a2 = a2 + a5\n 20814: a4 = a4 + a3\n 20817: a3 = a4 <u a3\n 20820: a2 = a2 + a3\n 20823: a3 = s1 + 0x29f8\n 20827: u64 [a3 + 0x708] = t0\n 20831: a5 = a3 + 0x700\n 20835: u64 [a5 + 0x10] = a0\n 20838: u64 [a5 + 0x18] = a4\n 20841: u64 [a5 + 0x20] = a2\n 20844: a0 = s1 + 0x3100\n 20848: ra = 728, jump @12\n      : @788 [@dyn 364] (gas: 3)\n 20854: a0 = s1 + 0x1b00\n 20858: a1 = u64 [s1 + 0x1a8]\n 20862: ra = 730, jump @11\n      : @789 [@dyn 365] (gas: 17)\n 20868: a3 = s1 + 0x19f8\n 20872: a4 = a3 + 0x100\n 20876: a0 = u64 [a4 + 0x8]\n 20879: a1 = u64 [a4 + 0x10]\n 20882: a2 = u64 [a4 + 0x18]\n 20885: a3 = u64 [a4 + 0x20]\n 20888: a4 = 0xffffff00ffffffff\n 20898: a2 = a2 & a4\n 20901: a4 = s1 + 0x29f8\n 20905: a5 = a4 + 0x700\n 20909: u64 [a5 + 0x40] = a3\n 20912: u64 [a5 + 0x30] = a1\n 20915: u64 [a5 + 0x28] = a0\n 20918: u64 [a5 + 0x38] = a2\n 20921: a1 = s1 + 0x3120\n 20925: a0 = u64 [s1 + 0x1a8]\n 20929: ra = 732, jump @12\n      : @790 [@dyn 366] (gas: 3)\n 20935: a0 = s1 + 0x1ae0\n 20939: a1 = 0x40\n 20942: ra = 734, jump @7\n      : @791 [@dyn 367] (gas: 15)\n 20948: a1 = s1 + 0x19f8\n 20952: a0 = u64 [a1 + 0x100]\n 20956: u64 [s1 + 0x278] = a0\n 20960: a0 = u64 [a1 + 0xf8]\n 20964: u64 [s1 + 0x270] = a0\n 20968: a0 = u64 [a1 + 0xf0]\n 20972: u64 [s1 + 0x268] = a0\n 20976: a0 = u64 [a1 + 0xe8]\n 20980: u64 [s1 + 0x260] = a0\n 20984: a0 = u64 [s1 + 0x178]\n 20988: ra = 0x2e0\n 20992: ecalli 4 // 'caller'\n 20994: a2 = u64 [s1 + 0x180]\n 20998: t0 = 0x2e2\n 21002: jump @1767\n      : @792 [@dyn 368] (gas: 2)\n 21005: a2 = u64 [s1 + 0x180]\n 21009: t0 = 738, jump @1767\n      : @793 [@dyn 369] (gas: 49)\n 21015: t0 = a1 | a0\n 21018: a3 = a3 >> 0x20\n 21021: a2 = reverse a2\n 21023: a1 = a2 << 0x20\n 21026: a1 = a1 | a3\n 21029: a2 = a2 >> 0x20\n 21032: a3 = u64 [s1 + 0x1a0]\n 21036: a0 = s1 + 0x19f8\n 21040: u64 [a0 + 0xa0] = a3\n 21044: a3 = u64 [0x20050]\n 21049: a4 = u64 [0x20058]\n 21054: a5 = u64 [s1 + 0x198]\n 21058: u64 [a0 + 0x98] = a5\n 21062: a5 = u64 [s1 + 0x190]\n 21066: u64 [a0 + 0x90] = a5\n 21070: u64 [a0 + 0xe0] = a3\n 21074: u64 [a0 + 0xd8] = a4\n 21078: a3 = u64 [0x20060]\n 21083: a4 = u64 [0x20068]\n 21088: a5 = u64 [s1 + 0x188]\n 21092: u64 [a0 + 0x88] = a5\n 21096: u64 [a0 + 192] = 0\n 21100: u64 [a0 + 0xd0] = a3\n 21104: u64 [a0 + 0xc8] = a4\n 21108: u64 [a0 + 0xb8] = a2\n 21112: u64 [a0 + 0xb0] = a1\n 21116: a2 = s1 + 0x1ac0\n 21120: a3 = s1 + 0x1aa0\n 21124: a4 = s1 + 0x1a80\n 21128: u64 [a0 + 0xa8] = t0\n 21132: a0 = 0\n 21134: a1 = 0\n 21136: ra = 0x2e4\n 21140: sp = sp + 0xffffffffffffff20\n 21144: u64 [sp + 0xd8] = ra\n 21148: u64 [sp + 0xd0] = s0\n 21152: u64 [sp + 0xc8] = s1\n 21156: s0 = sp + 0xe0\n 21160: sp = sp & 0xffffffffffffffe0\n 21163: a5 = u64 [a4]\n 21165: u64 [sp + 0x40] = a5\n 21168: a5 = u64 [a4 + 0x8]\n 21171: u64 [sp + 0x48] = a5\n 21174: a5 = u64 [a4 + 0x10]\n 21177: u64 [sp + 0x50] = a5\n 21180: a4 = u64 [a4 + 0x18]\n 21183: u64 [sp + 0x58] = a4\n 21186: t0 = 0x6\n 21189: jump @1796\n      : @794 [@dyn 370] (gas: 8)\n 21192: a4 = s1 + 0x200\n 21196: a0 = u64 [a4 + 0x78]\n 21199: a1 = u64 [a4 + 0x68]\n 21202: a0 = a0 | a1\n 21205: a1 = u64 [a4 + 0x60]\n 21208: a3 = a1\n 21210: a2 = u64 [a4 + 0x70]\n 21213: t0 = 742, jump @1823\n      : @795 [@dyn 371] (gas: 1)\n 21219: jump @797 if a0 != 0\n      : @796 (gas: 1)\n 21222: jump @1246\n      : @797 (gas: 1)\n 21225: trap\n      : @798 (gas: 6)\n 21226: a1 = 0x20200\n 21231: i32 a1 = a1 + 0\n 21233: a0 = 0x1\n 21236: a2 = 0\n 21238: ecalli 13 // 'seal_return'\n 21240: jump @800\n      : @799 (gas: 5)\n 21242: i32 a1 = a1 + 0\n 21244: a0 = 0x1\n 21247: a2 = 0\n 21249: ecalli 13 // 'seal_return'\n 21251: fallthrough\n      : @800 (gas: 16)\n 21252: a0 = u64 [s1 + 0x110]\n 21256: a1 = u64 [s1 + 0x190]\n 21260: a5 = a1 <u a0\n 21263: a0 = u64 [s1 + 0x278]\n 21267: a1 = u64 [a0 + 0x18]\n 21270: u64 [s1 + 0x270] = a1\n 21274: ra = u64 [a0 + 0x10]\n 21277: t1 = u64 [a0 + 0x8]\n 21280: a0 = u64 [a0]\n 21282: a1 = u64 [s1 + 0xb8]\n 21286: a2 = u64 [s1 + 0xa0]\n 21290: a5 = a2 if a1 != 0\n 21293: a1 = u64 [s1 + 0xb0]\n 21297: a2 = u64 [s1 + 0xa8]\n 21301: a5 = a1 if a2 != 0\n 21304: jump @805 if a5 == 0\n      : @801 (gas: 9)\n 21308: a5 = a0 | ra\n 21311: a1 = u64 [s1 + 0x270]\n 21315: a1 = t1 | a1\n 21318: a5 = a5 | a1\n 21321: a5 = a5 >> 0x20\n 21324: a1 = a1 | ra\n 21327: a1 = a1 << 0x20\n 21330: a1 = a1 | a5\n 21333: jump @797 if a1 != 0\n      : @802 (gas: 2)\n 21336: a1 = u64 [s1 + 0x268]\n 21340: t0 = 744, jump @1821\n      : @803 [@dyn 372] (gas: 6)\n 21346: u64 [a2 + 0x60] = a3\n 21349: u64 [a2 + 0x58] = a3\n 21352: u64 [a2 + 0x48] = a1\n 21355: a1 = s1 + 0x1240\n 21359: u64 [a2 + 0x50] = a3\n 21362: ra = 746, jump @9\n      : @804 [@dyn 373] (gas: 22)\n 21368: a3 = u64 [s1 + 0x278]\n 21372: a1 = u64 [a3]\n 21374: t0 = u64 [a3 + 0x18]\n 21377: a2 = u64 [a3 + 0x8]\n 21380: a4 = u64 [a3 + 0x10]\n 21383: a0 = a1 + 0x20\n 21386: a5 = a0 <u a1\n 21389: t1 = a2 + a5\n 21392: a2 = t1 <u a2\n 21395: a2 = a5 if a5 == 0\n 21398: ra = a4 + a2\n 21401: a4 = ra <u a4\n 21404: a4 = a4 + t0\n 21407: u64 [a3] = a0\n 21409: u64 [a3 + 0x8] = t1\n 21412: u64 [a3 + 0x10] = ra\n 21415: u64 [s1 + 0x270] = a4\n 21419: u64 [a3 + 0x18] = a4\n 21422: a1 = u64 [s1 + 0x190]\n 21426: a1 = a1 | 0x1\n 21429: u64 [s1 + 0x190] = a1\n 21433: fallthrough\n      : @805 (gas: 21)\n 21434: a1 = u64 [s1 + 0x110]\n 21438: a2 = u64 [s1 + 0x190]\n 21442: a4 = a2 <u a1\n 21445: a1 = u64 [s1 + 0xf8]\n 21449: a2 = u64 [s1 + 0x178]\n 21453: a5 = a2 ^ a1\n 21456: a3 = a2 <u a1\n 21459: a3 = a4 if a5 == 0\n 21462: t0 = u64 [s1 + 0x108]\n 21466: a2 = s1 + 0x100\n 21470: a4 = u64 [a2 + 0x70]\n 21473: t2 = a4 <u t0\n 21476: a1 = u64 [a2]\n 21478: a5 = u64 [a2 + 0x80]\n 21482: a2 = a5 ^ a1\n 21485: a1 = a5 <u a1\n 21488: a1 = t2 if a2 == 0\n 21491: a4 = a4 ^ t0\n 21494: a4 = a4 | a2\n 21497: a1 = a3 if a4 == 0\n 21500: jump @811 if a1 == 0\n      : @806 (gas: 1)\n 21504: t0 = 748, jump @1755\n      : @807 [@dyn 374] (gas: 1)\n 21510: jump @797 if a1 != 0\n      : @808 (gas: 2)\n 21514: a1 = u64 [s1 + 0x260]\n 21518: t0 = 750, jump @1821\n      : @809 [@dyn 375] (gas: 6)\n 21524: u64 [a2 + 0x40] = a3\n 21527: u64 [a2 + 0x38] = a3\n 21530: u64 [a2 + 0x28] = a1\n 21533: a1 = s1 + 0x1220\n 21537: u64 [a2 + 0x30] = a3\n 21540: ra = 752, jump @9\n      : @810 [@dyn 376] (gas: 37)\n 21546: a4 = u64 [s1 + 0x278]\n 21550: a1 = u64 [a4]\n 21552: t0 = u64 [a4 + 0x18]\n 21555: a2 = u64 [a4 + 0x8]\n 21558: a3 = u64 [a4 + 0x10]\n 21561: a0 = a1 + 0x20\n 21564: a1 = a0 <u a1\n 21567: t1 = a2 + a1\n 21570: a2 = t1 <u a2\n 21573: a2 = a1 if a1 == 0\n 21576: ra = a3 + a2\n 21579: a1 = ra <u a3\n 21582: t0 = t0 + a1\n 21585: a5 = s1 + 0x100\n 21589: a3 = u64 [a5 + 0x90]\n 21593: a3 = a3 + 0x1\n 21596: a1 = a3 <u 0x1\n 21599: a2 = u64 [a5 + 0x78]\n 21602: a2 = a2 + a1\n 21605: u64 [a5 + 0x78] = a2\n 21608: u64 [a5 + 0x90] = a3\n 21612: a1 = a3 | a2\n 21615: a1 = a1 <u 0x1\n 21618: a2 = u64 [a5 + 0x70]\n 21621: a1 = a1 + a2\n 21624: a3 = a1 <u a2\n 21627: a2 = u64 [a5 + 0x80]\n 21631: a2 = a2 + a3\n 21634: u64 [a5 + 0x80] = a2\n 21638: u64 [a4] = a0\n 21640: u64 [a4 + 0x8] = t1\n 21643: u64 [a4 + 0x10] = ra\n 21646: u64 [s1 + 0x270] = t0\n 21650: u64 [a4 + 0x18] = t0\n 21653: u64 [a5 + 0x70] = a1\n 21656: t0 = 0x2f2\n 21660: jump @1754\n      : @811 (gas: 1)\n 21663: t0 = 754, jump @1754\n      : @812 [@dyn 377] (gas: 13)\n 21669: t0 = u64 [s1 + 0x108]\n 21673: a2 = s1 + 0x100\n 21677: a1 = u64 [a2 + 0x70]\n 21680: t2 = a1 <u t0\n 21683: a5 = u64 [a2]\n 21685: a3 = u64 [a2 + 0x80]\n 21689: a2 = a3 ^ a5\n 21692: a5 = a3 <u a5\n 21695: a5 = t2 if a2 == 0\n 21698: a1 = a1 ^ t0\n 21701: a1 = a1 | a2\n 21704: a5 = a4 if a1 == 0\n 21707: jump @818 if a5 == 0\n      : @813 (gas: 1)\n 21711: t0 = 756, jump @1755\n      : @814 [@dyn 378] (gas: 1)\n 21717: jump @797 if a1 != 0\n      : @815 (gas: 2)\n 21721: a1 = u64 [s1 + 0x258]\n 21725: t0 = 758, jump @1821\n      : @816 [@dyn 379] (gas: 6)\n 21731: u64 [a2 + 0x20] = a3\n 21734: u64 [a2 + 0x18] = a3\n 21737: u64 [a2 + 0x8] = a1\n 21740: a1 = s1 + 0x1200\n 21744: u64 [a2 + 0x10] = a3\n 21747: ra = 760, jump @9\n      : @817 [@dyn 380] (gas: 37)\n 21753: a4 = u64 [s1 + 0x278]\n 21757: a1 = u64 [a4]\n 21759: t0 = u64 [a4 + 0x18]\n 21762: a2 = u64 [a4 + 0x8]\n 21765: a3 = u64 [a4 + 0x10]\n 21768: a0 = a1 + 0x20\n 21771: a1 = a0 <u a1\n 21774: t1 = a2 + a1\n 21777: a2 = t1 <u a2\n 21780: a2 = a1 if a1 == 0\n 21783: ra = a3 + a2\n 21786: a1 = ra <u a3\n 21789: t0 = t0 + a1\n 21792: a5 = s1 + 0x100\n 21796: a3 = u64 [a5 + 0x90]\n 21800: a3 = a3 + 0x1\n 21803: a1 = a3 <u 0x1\n 21806: a2 = u64 [a5 + 0x78]\n 21809: a2 = a2 + a1\n 21812: u64 [a5 + 0x78] = a2\n 21815: u64 [a5 + 0x90] = a3\n 21819: a1 = a3 | a2\n 21822: a1 = a1 <u 0x1\n 21825: a2 = u64 [a5 + 0x70]\n 21828: a1 = a1 + a2\n 21831: a3 = a1 <u a2\n 21834: a2 = u64 [a5 + 0x80]\n 21838: a2 = a2 + a3\n 21841: u64 [a5 + 0x80] = a2\n 21845: u64 [a4] = a0\n 21847: u64 [a4 + 0x8] = t1\n 21850: u64 [a4 + 0x10] = ra\n 21853: u64 [s1 + 0x270] = t0\n 21857: u64 [a4 + 0x18] = t0\n 21860: u64 [a5 + 0x70] = a1\n 21863: t0 = 0x2fa\n 21867: jump @1754\n      : @818 (gas: 1)\n 21870: t0 = 762, jump @1754\n      : @819 [@dyn 381] (gas: 13)\n 21876: t0 = u64 [s1 + 0x108]\n 21880: a2 = s1 + 0x100\n 21884: a1 = u64 [a2 + 0x70]\n 21887: t2 = a1 <u t0\n 21890: a5 = u64 [a2]\n 21892: a3 = u64 [a2 + 0x80]\n 21896: a2 = a3 ^ a5\n 21899: a5 = a3 <u a5\n 21902: a5 = t2 if a2 == 0\n 21905: a1 = a1 ^ t0\n 21908: a1 = a1 | a2\n 21911: a5 = a4 if a1 == 0\n 21914: jump @824 if a5 == 0\n      : @820 (gas: 1)\n 21918: t0 = 764, jump @1755\n      : @821 [@dyn 382] (gas: 1)\n 21924: jump @797 if a1 != 0\n      : @822 (gas: 9)\n 21928: a1 = u64 [s1 + 0x250]\n 21932: a1 = a1 >u 0\n 21934: a2 = s1 + 0x11f8\n 21938: u64 [a2 + 0] = 0\n 21940: u64 [a2 + 4294967288] = 0\n 21943: u64 [a2 + 0xffffffffffffffe8] = a1\n 21946: a1 = s1 + 0x11e0\n 21950: u64 [a2 + 4294967280] = 0\n 21953: ra = 766, jump @9\n      : @823 [@dyn 383] (gas: 37)\n 21959: a4 = u64 [s1 + 0x278]\n 21963: a1 = u64 [a4]\n 21965: t0 = u64 [a4 + 0x18]\n 21968: a2 = u64 [a4 + 0x8]\n 21971: a3 = u64 [a4 + 0x10]\n 21974: a0 = a1 + 0x20\n 21977: a1 = a0 <u a1\n 21980: t1 = a2 + a1\n 21983: a2 = t1 <u a2\n 21986: a2 = a1 if a1 == 0\n 21989: ra = a3 + a2\n 21992: a1 = ra <u a3\n 21995: t0 = t0 + a1\n 21998: a5 = s1 + 0x100\n 22002: a3 = u64 [a5 + 0x90]\n 22006: a3 = a3 + 0x1\n 22009: a1 = a3 <u 0x1\n 22012: a2 = u64 [a5 + 0x78]\n 22015: a2 = a2 + a1\n 22018: u64 [a5 + 0x78] = a2\n 22021: u64 [a5 + 0x90] = a3\n 22025: a1 = a3 | a2\n 22028: a1 = a1 <u 0x1\n 22031: a2 = u64 [a5 + 0x70]\n 22034: a1 = a1 + a2\n 22037: a3 = a1 <u a2\n 22040: a2 = u64 [a5 + 0x80]\n 22044: a2 = a2 + a3\n 22047: u64 [a5 + 0x80] = a2\n 22051: u64 [a4] = a0\n 22053: u64 [a4 + 0x8] = t1\n 22056: u64 [a4 + 0x10] = ra\n 22059: u64 [s1 + 0x270] = t0\n 22063: u64 [a4 + 0x18] = t0\n 22066: u64 [a5 + 0x70] = a1\n 22069: t0 = 0x300\n 22073: jump @1754\n      : @824 (gas: 1)\n 22076: t0 = 768, jump @1754\n      : @825 [@dyn 384] (gas: 13)\n 22082: t0 = u64 [s1 + 0x108]\n 22086: a2 = s1 + 0x100\n 22090: a1 = u64 [a2 + 0x70]\n 22093: t2 = a1 <u t0\n 22096: a5 = u64 [a2]\n 22098: a3 = u64 [a2 + 0x80]\n 22102: a2 = a3 ^ a5\n 22105: a5 = a3 <u a5\n 22108: a5 = t2 if a2 == 0\n 22111: a1 = a1 ^ t0\n 22114: a1 = a1 | a2\n 22117: a5 = a4 if a1 == 0\n 22120: jump @831 if a5 == 0\n      : @826 (gas: 1)\n 22124: t0 = 770, jump @1755\n      : @827 [@dyn 385] (gas: 1)\n 22130: jump @797 if a1 != 0\n      : @828 (gas: 2)\n 22134: a1 = u64 [s1 + 0x248]\n 22138: t0 = 772, jump @1757\n      : @829 [@dyn 386] (gas: 6)\n 22144: u64 [a2 + 2016] = 0\n 22148: u64 [a2 + 2008] = 0\n 22152: u64 [a2 + 0x7c8] = a1\n 22156: a1 = s1 + 0x11c0\n 22160: u64 [a2 + 2000] = 0\n 22164: ra = 774, jump @9\n      : @830 [@dyn 387] (gas: 37)\n 22170: a4 = u64 [s1 + 0x278]\n 22174: a1 = u64 [a4]\n 22176: t0 = u64 [a4 + 0x18]\n 22179: a2 = u64 [a4 + 0x8]\n 22182: a3 = u64 [a4 + 0x10]\n 22185: a0 = a1 + 0x20\n 22188: a1 = a0 <u a1\n 22191: t1 = a2 + a1\n 22194: a2 = t1 <u a2\n 22197: a2 = a1 if a1 == 0\n 22200: ra = a3 + a2\n 22203: a1 = ra <u a3\n 22206: t0 = t0 + a1\n 22209: a5 = s1 + 0x100\n 22213: a3 = u64 [a5 + 0x90]\n 22217: a3 = a3 + 0x1\n 22220: a1 = a3 <u 0x1\n 22223: a2 = u64 [a5 + 0x78]\n 22226: a2 = a2 + a1\n 22229: u64 [a5 + 0x78] = a2\n 22232: u64 [a5 + 0x90] = a3\n 22236: a1 = a3 | a2\n 22239: a1 = a1 <u 0x1\n 22242: a2 = u64 [a5 + 0x70]\n 22245: a1 = a1 + a2\n 22248: a3 = a1 <u a2\n 22251: a2 = u64 [a5 + 0x80]\n 22255: a2 = a2 + a3\n 22258: u64 [a5 + 0x80] = a2\n 22262: u64 [a4] = a0\n 22264: u64 [a4 + 0x8] = t1\n 22267: u64 [a4 + 0x10] = ra\n 22270: u64 [s1 + 0x270] = t0\n 22274: u64 [a4 + 0x18] = t0\n 22277: u64 [a5 + 0x70] = a1\n 22280: t0 = 0x308\n 22284: jump @1754\n      : @831 (gas: 1)\n 22287: t0 = 776, jump @1754\n      : @832 [@dyn 388] (gas: 13)\n 22293: t0 = u64 [s1 + 0x108]\n 22297: a2 = s1 + 0x100\n 22301: a1 = u64 [a2 + 0x70]\n 22304: t2 = a1 <u t0\n 22307: a5 = u64 [a2]\n 22309: a3 = u64 [a2 + 0x80]\n 22313: a2 = a3 ^ a5\n 22316: a5 = a3 <u a5\n 22319: a5 = t2 if a2 == 0\n 22322: a1 = a1 ^ t0\n 22325: a1 = a1 | a2\n 22328: a5 = a4 if a1 == 0\n 22331: jump @838 if a5 == 0\n      : @833 (gas: 1)\n 22335: t0 = 778, jump @1755\n      : @834 [@dyn 389] (gas: 1)\n 22341: jump @797 if a1 != 0\n      : @835 (gas: 2)\n 22345: a1 = u64 [s1 + 0x240]\n 22349: t0 = 780, jump @1757\n      : @836 [@dyn 390] (gas: 6)\n 22355: u64 [a2 + 1984] = 0\n 22359: u64 [a2 + 1976] = 0\n 22363: u64 [a2 + 0x7a8] = a1\n 22367: a1 = s1 + 0x11a0\n 22371: u64 [a2 + 1968] = 0\n 22375: ra = 782, jump @9\n      : @837 [@dyn 391] (gas: 37)\n 22381: a4 = u64 [s1 + 0x278]\n 22385: a1 = u64 [a4]\n 22387: t0 = u64 [a4 + 0x18]\n 22390: a2 = u64 [a4 + 0x8]\n 22393: a3 = u64 [a4 + 0x10]\n 22396: a0 = a1 + 0x20\n 22399: a1 = a0 <u a1\n 22402: t1 = a2 + a1\n 22405: a2 = t1 <u a2\n 22408: a2 = a1 if a1 == 0\n 22411: ra = a3 + a2\n 22414: a1 = ra <u a3\n 22417: t0 = t0 + a1\n 22420: a5 = s1 + 0x100\n 22424: a3 = u64 [a5 + 0x90]\n 22428: a3 = a3 + 0x1\n 22431: a1 = a3 <u 0x1\n 22434: a2 = u64 [a5 + 0x78]\n 22437: a2 = a2 + a1\n 22440: u64 [a5 + 0x78] = a2\n 22443: u64 [a5 + 0x90] = a3\n 22447: a1 = a3 | a2\n 22450: a1 = a1 <u 0x1\n 22453: a2 = u64 [a5 + 0x70]\n 22456: a1 = a1 + a2\n 22459: a3 = a1 <u a2\n 22462: a2 = u64 [a5 + 0x80]\n 22466: a2 = a2 + a3\n 22469: u64 [a5 + 0x80] = a2\n 22473: u64 [a4] = a0\n 22475: u64 [a4 + 0x8] = t1\n 22478: u64 [a4 + 0x10] = ra\n 22481: u64 [s1 + 0x270] = t0\n 22485: u64 [a4 + 0x18] = t0\n 22488: u64 [a5 + 0x70] = a1\n 22491: t0 = 0x310\n 22495: jump @1754\n      : @838 (gas: 1)\n 22498: t0 = 784, jump @1754\n      : @839 [@dyn 392] (gas: 13)\n 22504: t0 = u64 [s1 + 0x108]\n 22508: a2 = s1 + 0x100\n 22512: a1 = u64 [a2 + 0x70]\n 22515: t2 = a1 <u t0\n 22518: a5 = u64 [a2]\n 22520: a3 = u64 [a2 + 0x80]\n 22524: a2 = a3 ^ a5\n 22527: a5 = a3 <u a5\n 22530: a5 = t2 if a2 == 0\n 22533: a1 = a1 ^ t0\n 22536: a1 = a1 | a2\n 22539: a5 = a4 if a1 == 0\n 22542: jump @845 if a5 == 0\n      : @840 (gas: 1)\n 22546: t0 = 786, jump @1755\n      : @841 [@dyn 393] (gas: 1)\n 22552: jump @797 if a1 != 0\n      : @842 (gas: 2)\n 22556: a1 = u64 [s1 + 0x238]\n 22560: t0 = 788, jump @1757\n      : @843 [@dyn 394] (gas: 6)\n 22566: u64 [a2 + 1952] = 0\n 22570: u64 [a2 + 1944] = 0\n 22574: u64 [a2 + 0x788] = a1\n 22578: a1 = s1 + 0x1180\n 22582: u64 [a2 + 1936] = 0\n 22586: ra = 790, jump @9\n      : @844 [@dyn 395] (gas: 37)\n 22592: a4 = u64 [s1 + 0x278]\n 22596: a1 = u64 [a4]\n 22598: t0 = u64 [a4 + 0x18]\n 22601: a2 = u64 [a4 + 0x8]\n 22604: a3 = u64 [a4 + 0x10]\n 22607: a0 = a1 + 0x20\n 22610: a1 = a0 <u a1\n 22613: t1 = a2 + a1\n 22616: a2 = t1 <u a2\n 22619: a2 = a1 if a1 == 0\n 22622: ra = a3 + a2\n 22625: a1 = ra <u a3\n 22628: t0 = t0 + a1\n 22631: a5 = s1 + 0x100\n 22635: a3 = u64 [a5 + 0x90]\n 22639: a3 = a3 + 0x1\n 22642: a1 = a3 <u 0x1\n 22645: a2 = u64 [a5 + 0x78]\n 22648: a2 = a2 + a1\n 22651: u64 [a5 + 0x78] = a2\n 22654: u64 [a5 + 0x90] = a3\n 22658: a1 = a3 | a2\n 22661: a1 = a1 <u 0x1\n 22664: a2 = u64 [a5 + 0x70]\n 22667: a1 = a1 + a2\n 22670: a3 = a1 <u a2\n 22673: a2 = u64 [a5 + 0x80]\n 22677: a2 = a2 + a3\n 22680: u64 [a5 + 0x80] = a2\n 22684: u64 [a4] = a0\n 22686: u64 [a4 + 0x8] = t1\n 22689: u64 [a4 + 0x10] = ra\n 22692: u64 [s1 + 0x270] = t0\n 22696: u64 [a4 + 0x18] = t0\n 22699: u64 [a5 + 0x70] = a1\n 22702: t0 = 0x318\n 22706: jump @1754\n      : @845 (gas: 1)\n 22709: t0 = 792, jump @1754\n      : @846 [@dyn 396] (gas: 13)\n 22715: t0 = u64 [s1 + 0x108]\n 22719: a2 = s1 + 0x100\n 22723: a1 = u64 [a2 + 0x70]\n 22726: t2 = a1 <u t0\n 22729: a5 = u64 [a2]\n 22731: a3 = u64 [a2 + 0x80]\n 22735: a2 = a3 ^ a5\n 22738: a5 = a3 <u a5\n 22741: a5 = t2 if a2 == 0\n 22744: a1 = a1 ^ t0\n 22747: a1 = a1 | a2\n 22750: a5 = a4 if a1 == 0\n 22753: jump @852 if a5 == 0\n      : @847 (gas: 1)\n 22757: t0 = 794, jump @1755\n      : @848 [@dyn 397] (gas: 1)\n 22763: jump @797 if a1 != 0\n      : @849 (gas: 2)\n 22767: a1 = u64 [s1 + 0x230]\n 22771: t0 = 796, jump @1757\n      : @850 [@dyn 398] (gas: 6)\n 22777: u64 [a2 + 1920] = 0\n 22781: u64 [a2 + 1912] = 0\n 22785: u64 [a2 + 0x768] = a1\n 22789: a1 = s1 + 0x1160\n 22793: u64 [a2 + 1904] = 0\n 22797: ra = 798, jump @9\n      : @851 [@dyn 399] (gas: 37)\n 22803: a4 = u64 [s1 + 0x278]\n 22807: a1 = u64 [a4]\n 22809: t0 = u64 [a4 + 0x18]\n 22812: a2 = u64 [a4 + 0x8]\n 22815: a3 = u64 [a4 + 0x10]\n 22818: a0 = a1 + 0x20\n 22821: a1 = a0 <u a1\n 22824: t1 = a2 + a1\n 22827: a2 = t1 <u a2\n 22830: a2 = a1 if a1 == 0\n 22833: ra = a3 + a2\n 22836: a1 = ra <u a3\n 22839: t0 = t0 + a1\n 22842: a5 = s1 + 0x100\n 22846: a3 = u64 [a5 + 0x90]\n 22850: a3 = a3 + 0x1\n 22853: a1 = a3 <u 0x1\n 22856: a2 = u64 [a5 + 0x78]\n 22859: a2 = a2 + a1\n 22862: u64 [a5 + 0x78] = a2\n 22865: u64 [a5 + 0x90] = a3\n 22869: a1 = a3 | a2\n 22872: a1 = a1 <u 0x1\n 22875: a2 = u64 [a5 + 0x70]\n 22878: a1 = a1 + a2\n 22881: a3 = a1 <u a2\n 22884: a2 = u64 [a5 + 0x80]\n 22888: a2 = a2 + a3\n 22891: u64 [a5 + 0x80] = a2\n 22895: u64 [a4] = a0\n 22897: u64 [a4 + 0x8] = t1\n 22900: u64 [a4 + 0x10] = ra\n 22903: u64 [s1 + 0x270] = t0\n 22907: u64 [a4 + 0x18] = t0\n 22910: u64 [a5 + 0x70] = a1\n 22913: t0 = 0x320\n 22917: jump @1754\n      : @852 (gas: 1)\n 22920: t0 = 800, jump @1754\n      : @853 [@dyn 400] (gas: 13)\n 22926: t0 = u64 [s1 + 0x108]\n 22930: a2 = s1 + 0x100\n 22934: a1 = u64 [a2 + 0x70]\n 22937: t2 = a1 <u t0\n 22940: a5 = u64 [a2]\n 22942: a3 = u64 [a2 + 0x80]\n 22946: a2 = a3 ^ a5\n 22949: a5 = a3 <u a5\n 22952: a5 = t2 if a2 == 0\n 22955: a1 = a1 ^ t0\n 22958: a1 = a1 | a2\n 22961: a5 = a4 if a1 == 0\n 22964: jump @859 if a5 == 0\n      : @854 (gas: 1)\n 22968: t0 = 802, jump @1755\n      : @855 [@dyn 401] (gas: 1)\n 22974: jump @797 if a1 != 0\n      : @856 (gas: 2)\n 22978: a1 = u64 [s1 + 0x228]\n 22982: t0 = 804, jump @1757\n      : @857 [@dyn 402] (gas: 6)\n 22988: u64 [a2 + 1888] = 0\n 22992: u64 [a2 + 1880] = 0\n 22996: u64 [a2 + 0x748] = a1\n 23000: a1 = s1 + 0x1140\n 23004: u64 [a2 + 1872] = 0\n 23008: ra = 806, jump @9\n      : @858 [@dyn 403] (gas: 37)\n 23014: a4 = u64 [s1 + 0x278]\n 23018: a1 = u64 [a4]\n 23020: t0 = u64 [a4 + 0x18]\n 23023: a2 = u64 [a4 + 0x8]\n 23026: a3 = u64 [a4 + 0x10]\n 23029: a0 = a1 + 0x20\n 23032: a1 = a0 <u a1\n 23035: t1 = a2 + a1\n 23038: a2 = t1 <u a2\n 23041: a2 = a1 if a1 == 0\n 23044: ra = a3 + a2\n 23047: a1 = ra <u a3\n 23050: t0 = t0 + a1\n 23053: a5 = s1 + 0x100\n 23057: a3 = u64 [a5 + 0x90]\n 23061: a3 = a3 + 0x1\n 23064: a1 = a3 <u 0x1\n 23067: a2 = u64 [a5 + 0x78]\n 23070: a2 = a2 + a1\n 23073: u64 [a5 + 0x78] = a2\n 23076: u64 [a5 + 0x90] = a3\n 23080: a1 = a3 | a2\n 23083: a1 = a1 <u 0x1\n 23086: a2 = u64 [a5 + 0x70]\n 23089: a1 = a1 + a2\n 23092: a3 = a1 <u a2\n 23095: a2 = u64 [a5 + 0x80]\n 23099: a2 = a2 + a3\n 23102: u64 [a5 + 0x80] = a2\n 23106: u64 [a4] = a0\n 23108: u64 [a4 + 0x8] = t1\n 23111: u64 [a4 + 0x10] = ra\n 23114: u64 [s1 + 0x270] = t0\n 23118: u64 [a4 + 0x18] = t0\n 23121: u64 [a5 + 0x70] = a1\n 23124: t0 = 0x328\n 23128: jump @1754\n      : @859 (gas: 1)\n 23131: t0 = 808, jump @1754\n      : @860 [@dyn 404] (gas: 13)\n 23137: t0 = u64 [s1 + 0x108]\n 23141: a2 = s1 + 0x100\n 23145: a1 = u64 [a2 + 0x70]\n 23148: t2 = a1 <u t0\n 23151: a5 = u64 [a2]\n 23153: a3 = u64 [a2 + 0x80]\n 23157: a2 = a3 ^ a5\n 23160: a5 = a3 <u a5\n 23163: a5 = t2 if a2 == 0\n 23166: a1 = a1 ^ t0\n 23169: a1 = a1 | a2\n 23172: a5 = a4 if a1 == 0\n 23175: jump @866 if a5 == 0\n      : @861 (gas: 1)\n 23179: t0 = 810, jump @1755\n      : @862 [@dyn 405] (gas: 1)\n 23185: jump @797 if a1 != 0\n      : @863 (gas: 2)\n 23189: a1 = u64 [s1 + 0x220]\n 23193: t0 = 812, jump @1757\n      : @864 [@dyn 406] (gas: 6)\n 23199: u64 [a2 + 1856] = 0\n 23203: u64 [a2 + 1848] = 0\n 23207: u64 [a2 + 0x728] = a1\n 23211: a1 = s1 + 0x1120\n 23215: u64 [a2 + 1840] = 0\n 23219: ra = 814, jump @9\n      : @865 [@dyn 407] (gas: 37)\n 23225: a4 = u64 [s1 + 0x278]\n 23229: a1 = u64 [a4]\n 23231: t0 = u64 [a4 + 0x18]\n 23234: a2 = u64 [a4 + 0x8]\n 23237: a3 = u64 [a4 + 0x10]\n 23240: a0 = a1 + 0x20\n 23243: a1 = a0 <u a1\n 23246: t1 = a2 + a1\n 23249: a2 = t1 <u a2\n 23252: a2 = a1 if a1 == 0\n 23255: ra = a3 + a2\n 23258: a1 = ra <u a3\n 23261: t0 = t0 + a1\n 23264: a5 = s1 + 0x100\n 23268: a3 = u64 [a5 + 0x90]\n 23272: a3 = a3 + 0x1\n 23275: a1 = a3 <u 0x1\n 23278: a2 = u64 [a5 + 0x78]\n 23281: a2 = a2 + a1\n 23284: u64 [a5 + 0x78] = a2\n 23287: u64 [a5 + 0x90] = a3\n 23291: a1 = a3 | a2\n 23294: a1 = a1 <u 0x1\n 23297: a2 = u64 [a5 + 0x70]\n 23300: a1 = a1 + a2\n 23303: a3 = a1 <u a2\n 23306: a2 = u64 [a5 + 0x80]\n 23310: a2 = a2 + a3\n 23313: u64 [a5 + 0x80] = a2\n 23317: u64 [a4] = a0\n 23319: u64 [a4 + 0x8] = t1\n 23322: u64 [a4 + 0x10] = ra\n 23325: u64 [s1 + 0x270] = t0\n 23329: u64 [a4 + 0x18] = t0\n 23332: u64 [a5 + 0x70] = a1\n 23335: t0 = 0x330\n 23339: jump @1754\n      : @866 (gas: 1)\n 23342: t0 = 816, jump @1754\n      : @867 [@dyn 408] (gas: 13)\n 23348: t0 = u64 [s1 + 0x108]\n 23352: a2 = s1 + 0x100\n 23356: a1 = u64 [a2 + 0x70]\n 23359: t2 = a1 <u t0\n 23362: a5 = u64 [a2]\n 23364: a3 = u64 [a2 + 0x80]\n 23368: a2 = a3 ^ a5\n 23371: a5 = a3 <u a5\n 23374: a5 = t2 if a2 == 0\n 23377: a1 = a1 ^ t0\n 23380: a1 = a1 | a2\n 23383: a5 = a4 if a1 == 0\n 23386: jump @873 if a5 == 0\n      : @868 (gas: 1)\n 23390: t0 = 818, jump @1755\n      : @869 [@dyn 409] (gas: 1)\n 23396: jump @797 if a1 != 0\n      : @870 (gas: 2)\n 23400: a1 = u64 [s1 + 0x218]\n 23404: t0 = 820, jump @1757\n      : @871 [@dyn 410] (gas: 6)\n 23410: u64 [a2 + 1824] = 0\n 23414: u64 [a2 + 1816] = 0\n 23418: u64 [a2 + 0x708] = a1\n 23422: a1 = s1 + 0x1100\n 23426: u64 [a2 + 1808] = 0\n 23430: ra = 822, jump @9\n      : @872 [@dyn 411] (gas: 37)\n 23436: a4 = u64 [s1 + 0x278]\n 23440: a1 = u64 [a4]\n 23442: t0 = u64 [a4 + 0x18]\n 23445: a2 = u64 [a4 + 0x8]\n 23448: a3 = u64 [a4 + 0x10]\n 23451: a0 = a1 + 0x20\n 23454: a1 = a0 <u a1\n 23457: t1 = a2 + a1\n 23460: a2 = t1 <u a2\n 23463: a2 = a1 if a1 == 0\n 23466: ra = a3 + a2\n 23469: a1 = ra <u a3\n 23472: t0 = t0 + a1\n 23475: a5 = s1 + 0x100\n 23479: a3 = u64 [a5 + 0x90]\n 23483: a3 = a3 + 0x1\n 23486: a1 = a3 <u 0x1\n 23489: a2 = u64 [a5 + 0x78]\n 23492: a2 = a2 + a1\n 23495: u64 [a5 + 0x78] = a2\n 23498: u64 [a5 + 0x90] = a3\n 23502: a1 = a3 | a2\n 23505: a1 = a1 <u 0x1\n 23508: a2 = u64 [a5 + 0x70]\n 23511: a1 = a1 + a2\n 23514: a3 = a1 <u a2\n 23517: a2 = u64 [a5 + 0x80]\n 23521: a2 = a2 + a3\n 23524: u64 [a5 + 0x80] = a2\n 23528: u64 [a4] = a0\n 23530: u64 [a4 + 0x8] = t1\n 23533: u64 [a4 + 0x10] = ra\n 23536: u64 [s1 + 0x270] = t0\n 23540: u64 [a4 + 0x18] = t0\n 23543: u64 [a5 + 0x70] = a1\n 23546: t0 = 0x338\n 23550: jump @1754\n      : @873 (gas: 1)\n 23553: t0 = 824, jump @1754\n      : @874 [@dyn 412] (gas: 13)\n 23559: t0 = u64 [s1 + 0x108]\n 23563: a2 = s1 + 0x100\n 23567: a1 = u64 [a2 + 0x70]\n 23570: t2 = a1 <u t0\n 23573: a5 = u64 [a2]\n 23575: a3 = u64 [a2 + 0x80]\n 23579: a2 = a3 ^ a5\n 23582: a5 = a3 <u a5\n 23585: a5 = t2 if a2 == 0\n 23588: a1 = a1 ^ t0\n 23591: a1 = a1 | a2\n 23594: a5 = a4 if a1 == 0\n 23597: jump @880 if a5 == 0\n      : @875 (gas: 1)\n 23601: t0 = 826, jump @1755\n      : @876 [@dyn 413] (gas: 1)\n 23607: jump @797 if a1 != 0\n      : @877 (gas: 2)\n 23611: a1 = u64 [s1 + 0x210]\n 23615: t0 = 828, jump @1757\n      : @878 [@dyn 414] (gas: 6)\n 23621: u64 [a2 + 1792] = 0\n 23625: u64 [a2 + 1784] = 0\n 23629: u64 [a2 + 0x6e8] = a1\n 23633: a1 = s1 + 0x10e0\n 23637: u64 [a2 + 1776] = 0\n 23641: ra = 830, jump @9\n      : @879 [@dyn 415] (gas: 37)\n 23647: a4 = u64 [s1 + 0x278]\n 23651: a1 = u64 [a4]\n 23653: t0 = u64 [a4 + 0x18]\n 23656: a2 = u64 [a4 + 0x8]\n 23659: a3 = u64 [a4 + 0x10]\n 23662: a0 = a1 + 0x20\n 23665: a1 = a0 <u a1\n 23668: t1 = a2 + a1\n 23671: a2 = t1 <u a2\n 23674: a2 = a1 if a1 == 0\n 23677: ra = a3 + a2\n 23680: a1 = ra <u a3\n 23683: t0 = t0 + a1\n 23686: a5 = s1 + 0x100\n 23690: a3 = u64 [a5 + 0x90]\n 23694: a3 = a3 + 0x1\n 23697: a1 = a3 <u 0x1\n 23700: a2 = u64 [a5 + 0x78]\n 23703: a2 = a2 + a1\n 23706: u64 [a5 + 0x78] = a2\n 23709: u64 [a5 + 0x90] = a3\n 23713: a1 = a3 | a2\n 23716: a1 = a1 <u 0x1\n 23719: a2 = u64 [a5 + 0x70]\n 23722: a1 = a1 + a2\n 23725: a3 = a1 <u a2\n 23728: a2 = u64 [a5 + 0x80]\n 23732: a2 = a2 + a3\n 23735: u64 [a5 + 0x80] = a2\n 23739: u64 [a4] = a0\n 23741: u64 [a4 + 0x8] = t1\n 23744: u64 [a4 + 0x10] = ra\n 23747: u64 [s1 + 0x270] = t0\n 23751: u64 [a4 + 0x18] = t0\n 23754: u64 [a5 + 0x70] = a1\n 23757: t0 = 0x340\n 23761: jump @1754\n      : @880 (gas: 1)\n 23764: t0 = 832, jump @1754\n      : @881 [@dyn 416] (gas: 13)\n 23770: t0 = u64 [s1 + 0x108]\n 23774: a2 = s1 + 0x100\n 23778: a1 = u64 [a2 + 0x70]\n 23781: t2 = a1 <u t0\n 23784: a5 = u64 [a2]\n 23786: a3 = u64 [a2 + 0x80]\n 23790: a2 = a3 ^ a5\n 23793: a5 = a3 <u a5\n 23796: a5 = t2 if a2 == 0\n 23799: a1 = a1 ^ t0\n 23802: a1 = a1 | a2\n 23805: a5 = a4 if a1 == 0\n 23808: jump @887 if a5 == 0\n      : @882 (gas: 1)\n 23812: t0 = 834, jump @1755\n      : @883 [@dyn 417] (gas: 1)\n 23818: jump @797 if a1 != 0\n      : @884 (gas: 2)\n 23822: a1 = u64 [s1 + 0x208]\n 23826: t0 = 836, jump @1757\n      : @885 [@dyn 418] (gas: 6)\n 23832: u64 [a2 + 1760] = 0\n 23836: u64 [a2 + 1752] = 0\n 23840: u64 [a2 + 0x6c8] = a1\n 23844: a1 = s1 + 0x10c0\n 23848: u64 [a2 + 1744] = 0\n 23852: ra = 838, jump @9\n      : @886 [@dyn 419] (gas: 37)\n 23858: a4 = u64 [s1 + 0x278]\n 23862: a1 = u64 [a4]\n 23864: t0 = u64 [a4 + 0x18]\n 23867: a2 = u64 [a4 + 0x8]\n 23870: a3 = u64 [a4 + 0x10]\n 23873: a0 = a1 + 0x20\n 23876: a1 = a0 <u a1\n 23879: t1 = a2 + a1\n 23882: a2 = t1 <u a2\n 23885: a2 = a1 if a1 == 0\n 23888: ra = a3 + a2\n 23891: a1 = ra <u a3\n 23894: t0 = t0 + a1\n 23897: a5 = s1 + 0x100\n 23901: a3 = u64 [a5 + 0x90]\n 23905: a3 = a3 + 0x1\n 23908: a1 = a3 <u 0x1\n 23911: a2 = u64 [a5 + 0x78]\n 23914: a2 = a2 + a1\n 23917: u64 [a5 + 0x78] = a2\n 23920: u64 [a5 + 0x90] = a3\n 23924: a1 = a3 | a2\n 23927: a1 = a1 <u 0x1\n 23930: a2 = u64 [a5 + 0x70]\n 23933: a1 = a1 + a2\n 23936: a3 = a1 <u a2\n 23939: a2 = u64 [a5 + 0x80]\n 23943: a2 = a2 + a3\n 23946: u64 [a5 + 0x80] = a2\n 23950: u64 [a4] = a0\n 23952: u64 [a4 + 0x8] = t1\n 23955: u64 [a4 + 0x10] = ra\n 23958: u64 [s1 + 0x270] = t0\n 23962: u64 [a4 + 0x18] = t0\n 23965: u64 [a5 + 0x70] = a1\n 23968: t0 = 0x348\n 23972: jump @1754\n      : @887 (gas: 1)\n 23975: t0 = 840, jump @1754\n      : @888 [@dyn 420] (gas: 13)\n 23981: t0 = u64 [s1 + 0x108]\n 23985: a2 = s1 + 0x100\n 23989: a1 = u64 [a2 + 0x70]\n 23992: t2 = a1 <u t0\n 23995: a5 = u64 [a2]\n 23997: a3 = u64 [a2 + 0x80]\n 24001: a2 = a3 ^ a5\n 24004: a5 = a3 <u a5\n 24007: a5 = t2 if a2 == 0\n 24010: a1 = a1 ^ t0\n 24013: a1 = a1 | a2\n 24016: a5 = a4 if a1 == 0\n 24019: jump @894 if a5 == 0\n      : @889 (gas: 1)\n 24023: t0 = 842, jump @1755\n      : @890 [@dyn 421] (gas: 1)\n 24029: jump @797 if a1 != 0\n      : @891 (gas: 2)\n 24033: a1 = u64 [s1 + 0x200]\n 24037: t0 = 844, jump @1757\n      : @892 [@dyn 422] (gas: 6)\n 24043: u64 [a2 + 1728] = 0\n 24047: u64 [a2 + 1720] = 0\n 24051: u64 [a2 + 0x6a8] = a1\n 24055: a1 = s1 + 0x10a0\n 24059: u64 [a2 + 1712] = 0\n 24063: ra = 846, jump @9\n      : @893 [@dyn 423] (gas: 37)\n 24069: a4 = u64 [s1 + 0x278]\n 24073: a1 = u64 [a4]\n 24075: t0 = u64 [a4 + 0x18]\n 24078: a2 = u64 [a4 + 0x8]\n 24081: a3 = u64 [a4 + 0x10]\n 24084: a0 = a1 + 0x20\n 24087: a1 = a0 <u a1\n 24090: t1 = a2 + a1\n 24093: a2 = t1 <u a2\n 24096: a2 = a1 if a1 == 0\n 24099: ra = a3 + a2\n 24102: a1 = ra <u a3\n 24105: t0 = t0 + a1\n 24108: a5 = s1 + 0x100\n 24112: a3 = u64 [a5 + 0x90]\n 24116: a3 = a3 + 0x1\n 24119: a1 = a3 <u 0x1\n 24122: a2 = u64 [a5 + 0x78]\n 24125: a2 = a2 + a1\n 24128: u64 [a5 + 0x78] = a2\n 24131: u64 [a5 + 0x90] = a3\n 24135: a1 = a3 | a2\n 24138: a1 = a1 <u 0x1\n 24141: a2 = u64 [a5 + 0x70]\n 24144: a1 = a1 + a2\n 24147: a3 = a1 <u a2\n 24150: a2 = u64 [a5 + 0x80]\n 24154: a2 = a2 + a3\n 24157: u64 [a5 + 0x80] = a2\n 24161: u64 [a4] = a0\n 24163: u64 [a4 + 0x8] = t1\n 24166: u64 [a4 + 0x10] = ra\n 24169: u64 [s1 + 0x270] = t0\n 24173: u64 [a4 + 0x18] = t0\n 24176: u64 [a5 + 0x70] = a1\n 24179: t0 = 0x350\n 24183: jump @1754\n      : @894 (gas: 1)\n 24186: t0 = 848, jump @1754\n      : @895 [@dyn 424] (gas: 13)\n 24192: t0 = u64 [s1 + 0x108]\n 24196: a2 = s1 + 0x100\n 24200: a1 = u64 [a2 + 0x70]\n 24203: t2 = a1 <u t0\n 24206: a5 = u64 [a2]\n 24208: a3 = u64 [a2 + 0x80]\n 24212: a2 = a3 ^ a5\n 24215: a5 = a3 <u a5\n 24218: a5 = t2 if a2 == 0\n 24221: a1 = a1 ^ t0\n 24224: a1 = a1 | a2\n 24227: a5 = a4 if a1 == 0\n 24230: jump @901 if a5 == 0\n      : @896 (gas: 1)\n 24234: t0 = 850, jump @1755\n      : @897 [@dyn 425] (gas: 1)\n 24240: jump @797 if a1 != 0\n      : @898 (gas: 2)\n 24244: a1 = u64 [s1 + 0x1f8]\n 24248: t0 = 852, jump @1757\n      : @899 [@dyn 426] (gas: 6)\n 24254: u64 [a2 + 1696] = 0\n 24258: u64 [a2 + 1688] = 0\n 24262: u64 [a2 + 0x688] = a1\n 24266: a1 = s1 + 0x1080\n 24270: u64 [a2 + 1680] = 0\n 24274: ra = 854, jump @9\n      : @900 [@dyn 427] (gas: 37)\n 24280: a4 = u64 [s1 + 0x278]\n 24284: a1 = u64 [a4]\n 24286: t0 = u64 [a4 + 0x18]\n 24289: a2 = u64 [a4 + 0x8]\n 24292: a3 = u64 [a4 + 0x10]\n 24295: a0 = a1 + 0x20\n 24298: a1 = a0 <u a1\n 24301: t1 = a2 + a1\n 24304: a2 = t1 <u a2\n 24307: a2 = a1 if a1 == 0\n 24310: ra = a3 + a2\n 24313: a1 = ra <u a3\n 24316: t0 = t0 + a1\n 24319: a5 = s1 + 0x100\n 24323: a3 = u64 [a5 + 0x90]\n 24327: a3 = a3 + 0x1\n 24330: a1 = a3 <u 0x1\n 24333: a2 = u64 [a5 + 0x78]\n 24336: a2 = a2 + a1\n 24339: u64 [a5 + 0x78] = a2\n 24342: u64 [a5 + 0x90] = a3\n 24346: a1 = a3 | a2\n 24349: a1 = a1 <u 0x1\n 24352: a2 = u64 [a5 + 0x70]\n 24355: a1 = a1 + a2\n 24358: a3 = a1 <u a2\n 24361: a2 = u64 [a5 + 0x80]\n 24365: a2 = a2 + a3\n 24368: u64 [a5 + 0x80] = a2\n 24372: u64 [a4] = a0\n 24374: u64 [a4 + 0x8] = t1\n 24377: u64 [a4 + 0x10] = ra\n 24380: u64 [s1 + 0x270] = t0\n 24384: u64 [a4 + 0x18] = t0\n 24387: u64 [a5 + 0x70] = a1\n 24390: t0 = 0x358\n 24394: jump @1754\n      : @901 (gas: 1)\n 24397: t0 = 856, jump @1754\n      : @902 [@dyn 428] (gas: 13)\n 24403: t0 = u64 [s1 + 0x108]\n 24407: a2 = s1 + 0x100\n 24411: a1 = u64 [a2 + 0x70]\n 24414: t2 = a1 <u t0\n 24417: a5 = u64 [a2]\n 24419: a3 = u64 [a2 + 0x80]\n 24423: a2 = a3 ^ a5\n 24426: a5 = a3 <u a5\n 24429: a5 = t2 if a2 == 0\n 24432: a1 = a1 ^ t0\n 24435: a1 = a1 | a2\n 24438: a5 = a4 if a1 == 0\n 24441: jump @909 if a5 == 0\n      : @903 (gas: 1)\n 24445: t0 = 858, jump @1755\n      : @904 [@dyn 429] (gas: 1)\n 24451: jump @906 if a1 == 0\n      : @905 (gas: 1)\n 24454: jump @797\n      : @906 (gas: 2)\n 24457: a1 = u64 [s1 + 0x1f0]\n 24461: t0 = 860, jump @1757\n      : @907 [@dyn 430] (gas: 6)\n 24467: u64 [a2 + 1664] = 0\n 24471: u64 [a2 + 1656] = 0\n 24475: u64 [a2 + 0x668] = a1\n 24479: a1 = s1 + 0x1060\n 24483: u64 [a2 + 1648] = 0\n 24487: ra = 862, jump @9\n      : @908 [@dyn 431] (gas: 37)\n 24493: a4 = u64 [s1 + 0x278]\n 24497: a1 = u64 [a4]\n 24499: t0 = u64 [a4 + 0x18]\n 24502: a2 = u64 [a4 + 0x8]\n 24505: a3 = u64 [a4 + 0x10]\n 24508: a0 = a1 + 0x20\n 24511: a1 = a0 <u a1\n 24514: t1 = a2 + a1\n 24517: a2 = t1 <u a2\n 24520: a2 = a1 if a1 == 0\n 24523: ra = a3 + a2\n 24526: a1 = ra <u a3\n 24529: t0 = t0 + a1\n 24532: a5 = s1 + 0x100\n 24536: a3 = u64 [a5 + 0x90]\n 24540: a3 = a3 + 0x1\n 24543: a1 = a3 <u 0x1\n 24546: a2 = u64 [a5 + 0x78]\n 24549: a2 = a2 + a1\n 24552: u64 [a5 + 0x78] = a2\n 24555: u64 [a5 + 0x90] = a3\n 24559: a1 = a3 | a2\n 24562: a1 = a1 <u 0x1\n 24565: a2 = u64 [a5 + 0x70]\n 24568: a1 = a1 + a2\n 24571: a3 = a1 <u a2\n 24574: a2 = u64 [a5 + 0x80]\n 24578: a2 = a2 + a3\n 24581: u64 [a5 + 0x80] = a2\n 24585: u64 [a4] = a0\n 24587: u64 [a4 + 0x8] = t1\n 24590: u64 [a4 + 0x10] = ra\n 24593: u64 [s1 + 0x270] = t0\n 24597: u64 [a4 + 0x18] = t0\n 24600: u64 [a5 + 0x70] = a1\n 24603: t0 = 0x360\n 24607: jump @1754\n      : @909 (gas: 1)\n 24610: t0 = 864, jump @1754\n      : @910 [@dyn 432] (gas: 13)\n 24616: t0 = u64 [s1 + 0x108]\n 24620: a2 = s1 + 0x100\n 24624: a1 = u64 [a2 + 0x70]\n 24627: t2 = a1 <u t0\n 24630: a5 = u64 [a2]\n 24632: a3 = u64 [a2 + 0x80]\n 24636: a2 = a3 ^ a5\n 24639: a5 = a3 <u a5\n 24642: a5 = t2 if a2 == 0\n 24645: a1 = a1 ^ t0\n 24648: a1 = a1 | a2\n 24651: a5 = a4 if a1 == 0\n 24654: jump @917 if a5 == 0\n      : @911 (gas: 1)\n 24658: t0 = 866, jump @1755\n      : @912 [@dyn 433] (gas: 1)\n 24664: jump @914 if a1 == 0\n      : @913 (gas: 1)\n 24667: jump @797\n      : @914 (gas: 2)\n 24670: a1 = u64 [s1 + 0x1e8]\n 24674: t0 = 868, jump @1757\n      : @915 [@dyn 434] (gas: 6)\n 24680: u64 [a2 + 1632] = 0\n 24684: u64 [a2 + 1624] = 0\n 24688: u64 [a2 + 0x648] = a1\n 24692: a1 = s1 + 0x1040\n 24696: u64 [a2 + 1616] = 0\n 24700: ra = 870, jump @9\n      : @916 [@dyn 435] (gas: 37)\n 24706: a4 = u64 [s1 + 0x278]\n 24710: a1 = u64 [a4]\n 24712: t0 = u64 [a4 + 0x18]\n 24715: a2 = u64 [a4 + 0x8]\n 24718: a3 = u64 [a4 + 0x10]\n 24721: a0 = a1 + 0x20\n 24724: a1 = a0 <u a1\n 24727: t1 = a2 + a1\n 24730: a2 = t1 <u a2\n 24733: a2 = a1 if a1 == 0\n 24736: ra = a3 + a2\n 24739: a1 = ra <u a3\n 24742: t0 = t0 + a1\n 24745: a5 = s1 + 0x100\n 24749: a3 = u64 [a5 + 0x90]\n 24753: a3 = a3 + 0x1\n 24756: a1 = a3 <u 0x1\n 24759: a2 = u64 [a5 + 0x78]\n 24762: a2 = a2 + a1\n 24765: u64 [a5 + 0x78] = a2\n 24768: u64 [a5 + 0x90] = a3\n 24772: a1 = a3 | a2\n 24775: a1 = a1 <u 0x1\n 24778: a2 = u64 [a5 + 0x70]\n 24781: a1 = a1 + a2\n 24784: a3 = a1 <u a2\n 24787: a2 = u64 [a5 + 0x80]\n 24791: a2 = a2 + a3\n 24794: u64 [a5 + 0x80] = a2\n 24798: u64 [a4] = a0\n 24800: u64 [a4 + 0x8] = t1\n 24803: u64 [a4 + 0x10] = ra\n 24806: u64 [s1 + 0x270] = t0\n 24810: u64 [a4 + 0x18] = t0\n 24813: u64 [a5 + 0x70] = a1\n 24816: t0 = 0x368\n 24820: jump @1754\n      : @917 (gas: 1)\n 24823: t0 = 872, jump @1754\n      : @918 [@dyn 436] (gas: 13)\n 24829: t0 = u64 [s1 + 0x108]\n 24833: a2 = s1 + 0x100\n 24837: a1 = u64 [a2 + 0x70]\n 24840: t2 = a1 <u t0\n 24843: a5 = u64 [a2]\n 24845: a3 = u64 [a2 + 0x80]\n 24849: a2 = a3 ^ a5\n 24852: a5 = a3 <u a5\n 24855: a5 = t2 if a2 == 0\n 24858: a1 = a1 ^ t0\n 24861: a1 = a1 | a2\n 24864: a5 = a4 if a1 == 0\n 24867: jump @925 if a5 == 0\n      : @919 (gas: 1)\n 24871: t0 = 874, jump @1755\n      : @920 [@dyn 437] (gas: 1)\n 24877: jump @922 if a1 == 0\n      : @921 (gas: 1)\n 24880: jump @797\n      : @922 (gas: 2)\n 24883: a1 = u64 [s1 + 0x1e0]\n 24887: t0 = 876, jump @1757\n      : @923 [@dyn 438] (gas: 6)\n 24893: u64 [a2 + 1600] = 0\n 24897: u64 [a2 + 1592] = 0\n 24901: u64 [a2 + 0x628] = a1\n 24905: a1 = s1 + 0x1020\n 24909: u64 [a2 + 1584] = 0\n 24913: ra = 878, jump @9\n      : @924 [@dyn 439] (gas: 37)\n 24919: a4 = u64 [s1 + 0x278]\n 24923: a1 = u64 [a4]\n 24925: t0 = u64 [a4 + 0x18]\n 24928: a2 = u64 [a4 + 0x8]\n 24931: a3 = u64 [a4 + 0x10]\n 24934: a0 = a1 + 0x20\n 24937: a1 = a0 <u a1\n 24940: t1 = a2 + a1\n 24943: a2 = t1 <u a2\n 24946: a2 = a1 if a1 == 0\n 24949: ra = a3 + a2\n 24952: a1 = ra <u a3\n 24955: t0 = t0 + a1\n 24958: a5 = s1 + 0x100\n 24962: a3 = u64 [a5 + 0x90]\n 24966: a3 = a3 + 0x1\n 24969: a1 = a3 <u 0x1\n 24972: a2 = u64 [a5 + 0x78]\n 24975: a2 = a2 + a1\n 24978: u64 [a5 + 0x78] = a2\n 24981: u64 [a5 + 0x90] = a3\n 24985: a1 = a3 | a2\n 24988: a1 = a1 <u 0x1\n 24991: a2 = u64 [a5 + 0x70]\n 24994: a1 = a1 + a2\n 24997: a3 = a1 <u a2\n 25000: a2 = u64 [a5 + 0x80]\n 25004: a2 = a2 + a3\n 25007: u64 [a5 + 0x80] = a2\n 25011: u64 [a4] = a0\n 25013: u64 [a4 + 0x8] = t1\n 25016: u64 [a4 + 0x10] = ra\n 25019: u64 [s1 + 0x270] = t0\n 25023: u64 [a4 + 0x18] = t0\n 25026: u64 [a5 + 0x70] = a1\n 25029: t0 = 0x370\n 25033: jump @1754\n      : @925 (gas: 1)\n 25036: t0 = 880, jump @1754\n      : @926 [@dyn 440] (gas: 13)\n 25042: t0 = u64 [s1 + 0x108]\n 25046: a2 = s1 + 0x100\n 25050: a1 = u64 [a2 + 0x70]\n 25053: t2 = a1 <u t0\n 25056: a5 = u64 [a2]\n 25058: a3 = u64 [a2 + 0x80]\n 25062: a2 = a3 ^ a5\n 25065: a5 = a3 <u a5\n 25068: a5 = t2 if a2 == 0\n 25071: a1 = a1 ^ t0\n 25074: a1 = a1 | a2\n 25077: a5 = a4 if a1 == 0\n 25080: jump @933 if a5 == 0\n      : @927 (gas: 1)\n 25084: t0 = 882, jump @1755\n      : @928 [@dyn 441] (gas: 1)\n 25090: jump @930 if a1 == 0\n      : @929 (gas: 1)\n 25093: jump @797\n      : @930 (gas: 2)\n 25096: a1 = u64 [s1 + 0x1d8]\n 25100: t0 = 884, jump @1757\n      : @931 [@dyn 442] (gas: 6)\n 25106: u64 [a2 + 1568] = 0\n 25110: u64 [a2 + 1560] = 0\n 25114: u64 [a2 + 0x608] = a1\n 25118: a1 = s1 + 0x1000\n 25122: u64 [a2 + 1552] = 0\n 25126: ra = 886, jump @9\n      : @932 [@dyn 443] (gas: 37)\n 25132: a4 = u64 [s1 + 0x278]\n 25136: a1 = u64 [a4]\n 25138: t0 = u64 [a4 + 0x18]\n 25141: a2 = u64 [a4 + 0x8]\n 25144: a3 = u64 [a4 + 0x10]\n 25147: a0 = a1 + 0x20\n 25150: a1 = a0 <u a1\n 25153: t1 = a2 + a1\n 25156: a2 = t1 <u a2\n 25159: a2 = a1 if a1 == 0\n 25162: ra = a3 + a2\n 25165: a1 = ra <u a3\n 25168: t0 = t0 + a1\n 25171: a5 = s1 + 0x100\n 25175: a3 = u64 [a5 + 0x90]\n 25179: a3 = a3 + 0x1\n 25182: a1 = a3 <u 0x1\n 25185: a2 = u64 [a5 + 0x78]\n 25188: a2 = a2 + a1\n 25191: u64 [a5 + 0x78] = a2\n 25194: u64 [a5 + 0x90] = a3\n 25198: a1 = a3 | a2\n 25201: a1 = a1 <u 0x1\n 25204: a2 = u64 [a5 + 0x70]\n 25207: a1 = a1 + a2\n 25210: a3 = a1 <u a2\n 25213: a2 = u64 [a5 + 0x80]\n 25217: a2 = a2 + a3\n 25220: u64 [a5 + 0x80] = a2\n 25224: u64 [a4] = a0\n 25226: u64 [a4 + 0x8] = t1\n 25229: u64 [a4 + 0x10] = ra\n 25232: u64 [s1 + 0x270] = t0\n 25236: u64 [a4 + 0x18] = t0\n 25239: u64 [a5 + 0x70] = a1\n 25242: t0 = 0x378\n 25246: jump @1754\n      : @933 (gas: 1)\n 25249: t0 = 888, jump @1754\n      : @934 [@dyn 444] (gas: 13)\n 25255: t0 = u64 [s1 + 0x108]\n 25259: a2 = s1 + 0x100\n 25263: a1 = u64 [a2 + 0x70]\n 25266: t2 = a1 <u t0\n 25269: a5 = u64 [a2]\n 25271: a3 = u64 [a2 + 0x80]\n 25275: a2 = a3 ^ a5\n 25278: a5 = a3 <u a5\n 25281: a5 = t2 if a2 == 0\n 25284: a1 = a1 ^ t0\n 25287: a1 = a1 | a2\n 25290: a5 = a4 if a1 == 0\n 25293: jump @941 if a5 == 0\n      : @935 (gas: 1)\n 25297: t0 = 890, jump @1755\n      : @936 [@dyn 445] (gas: 1)\n 25303: jump @938 if a1 == 0\n      : @937 (gas: 1)\n 25306: jump @797\n      : @938 (gas: 2)\n 25309: a1 = u64 [s1 + 0x1d0]\n 25313: t0 = 892, jump @1757\n      : @939 [@dyn 446] (gas: 7)\n 25319: u64 [a2 + 1536] = 0\n 25323: u64 [a2 + 1528] = 0\n 25327: u64 [a2 + 0x5e8] = a1\n 25331: a1 = s1 + 0x7ff\n 25335: a1 = a1 + 0x7e1\n 25339: u64 [a2 + 1520] = 0\n 25343: ra = 894, jump @9\n      : @940 [@dyn 447] (gas: 37)\n 25349: a4 = u64 [s1 + 0x278]\n 25353: a1 = u64 [a4]\n 25355: t0 = u64 [a4 + 0x18]\n 25358: a2 = u64 [a4 + 0x8]\n 25361: a3 = u64 [a4 + 0x10]\n 25364: a0 = a1 + 0x20\n 25367: a1 = a0 <u a1\n 25370: t1 = a2 + a1\n 25373: a2 = t1 <u a2\n 25376: a2 = a1 if a1 == 0\n 25379: ra = a3 + a2\n 25382: a1 = ra <u a3\n 25385: t0 = t0 + a1\n 25388: a5 = s1 + 0x100\n 25392: a3 = u64 [a5 + 0x90]\n 25396: a3 = a3 + 0x1\n 25399: a1 = a3 <u 0x1\n 25402: a2 = u64 [a5 + 0x78]\n 25405: a2 = a2 + a1\n 25408: u64 [a5 + 0x78] = a2\n 25411: u64 [a5 + 0x90] = a3\n 25415: a1 = a3 | a2\n 25418: a1 = a1 <u 0x1\n 25421: a2 = u64 [a5 + 0x70]\n 25424: a1 = a1 + a2\n 25427: a3 = a1 <u a2\n 25430: a2 = u64 [a5 + 0x80]\n 25434: a2 = a2 + a3\n 25437: u64 [a5 + 0x80] = a2\n 25441: u64 [a4] = a0\n 25443: u64 [a4 + 0x8] = t1\n 25446: u64 [a4 + 0x10] = ra\n 25449: u64 [s1 + 0x270] = t0\n 25453: u64 [a4 + 0x18] = t0\n 25456: u64 [a5 + 0x70] = a1\n 25459: t0 = 0x380\n 25463: jump @1754\n      : @941 (gas: 1)\n 25466: t0 = 896, jump @1754\n      : @942 [@dyn 448] (gas: 13)\n 25472: t0 = u64 [s1 + 0x108]\n 25476: a2 = s1 + 0x100\n 25480: a1 = u64 [a2 + 0x70]\n 25483: t2 = a1 <u t0\n 25486: a5 = u64 [a2]\n 25488: a3 = u64 [a2 + 0x80]\n 25492: a2 = a3 ^ a5\n 25495: a5 = a3 <u a5\n 25498: a5 = t2 if a2 == 0\n 25501: a1 = a1 ^ t0\n 25504: a1 = a1 | a2\n 25507: a5 = a4 if a1 == 0\n 25510: jump @949 if a5 == 0\n      : @943 (gas: 1)\n 25514: t0 = 898, jump @1755\n      : @944 [@dyn 449] (gas: 1)\n 25520: jump @946 if a1 == 0\n      : @945 (gas: 1)\n 25523: jump @797\n      : @946 (gas: 2)\n 25526: a1 = u64 [s1 + 0x1c8]\n 25530: t0 = 900, jump @1757\n      : @947 [@dyn 450] (gas: 7)\n 25536: u64 [a2 + 1504] = 0\n 25540: u64 [a2 + 1496] = 0\n 25544: u64 [a2 + 0x5c8] = a1\n 25548: a1 = s1 + 0x7ff\n 25552: a1 = a1 + 0x7c1\n 25556: u64 [a2 + 1488] = 0\n 25560: ra = 902, jump @9\n      : @948 [@dyn 451] (gas: 37)\n 25566: a4 = u64 [s1 + 0x278]\n 25570: a1 = u64 [a4]\n 25572: t0 = u64 [a4 + 0x18]\n 25575: a2 = u64 [a4 + 0x8]\n 25578: a3 = u64 [a4 + 0x10]\n 25581: a0 = a1 + 0x20\n 25584: a1 = a0 <u a1\n 25587: t1 = a2 + a1\n 25590: a2 = t1 <u a2\n 25593: a2 = a1 if a1 == 0\n 25596: ra = a3 + a2\n 25599: a1 = ra <u a3\n 25602: t0 = t0 + a1\n 25605: a5 = s1 + 0x100\n 25609: a3 = u64 [a5 + 0x90]\n 25613: a3 = a3 + 0x1\n 25616: a1 = a3 <u 0x1\n 25619: a2 = u64 [a5 + 0x78]\n 25622: a2 = a2 + a1\n 25625: u64 [a5 + 0x78] = a2\n 25628: u64 [a5 + 0x90] = a3\n 25632: a1 = a3 | a2\n 25635: a1 = a1 <u 0x1\n 25638: a2 = u64 [a5 + 0x70]\n 25641: a1 = a1 + a2\n 25644: a3 = a1 <u a2\n 25647: a2 = u64 [a5 + 0x80]\n 25651: a2 = a2 + a3\n 25654: u64 [a5 + 0x80] = a2\n 25658: u64 [a4] = a0\n 25660: u64 [a4 + 0x8] = t1\n 25663: u64 [a4 + 0x10] = ra\n 25666: u64 [s1 + 0x270] = t0\n 25670: u64 [a4 + 0x18] = t0\n 25673: u64 [a5 + 0x70] = a1\n 25676: t0 = 0x388\n 25680: jump @1754\n      : @949 (gas: 1)\n 25683: t0 = 904, jump @1754\n      : @950 [@dyn 452] (gas: 13)\n 25689: t0 = u64 [s1 + 0x108]\n 25693: a2 = s1 + 0x100\n 25697: a1 = u64 [a2 + 0x70]\n 25700: t2 = a1 <u t0\n 25703: a5 = u64 [a2]\n 25705: a3 = u64 [a2 + 0x80]\n 25709: a2 = a3 ^ a5\n 25712: a5 = a3 <u a5\n 25715: a5 = t2 if a2 == 0\n 25718: a1 = a1 ^ t0\n 25721: a1 = a1 | a2\n 25724: a5 = a4 if a1 == 0\n 25727: jump @957 if a5 == 0\n      : @951 (gas: 1)\n 25731: t0 = 906, jump @1755\n      : @952 [@dyn 453] (gas: 1)\n 25737: jump @954 if a1 == 0\n      : @953 (gas: 1)\n 25740: jump @797\n      : @954 (gas: 2)\n 25743: a1 = u64 [s1 + 0x1c0]\n 25747: t0 = 908, jump @1757\n      : @955 [@dyn 454] (gas: 7)\n 25753: u64 [a2 + 1472] = 0\n 25757: u64 [a2 + 1464] = 0\n 25761: u64 [a2 + 0x5a8] = a1\n 25765: a1 = s1 + 0x7ff\n 25769: a1 = a1 + 0x7a1\n 25773: u64 [a2 + 1456] = 0\n 25777: ra = 910, jump @9\n      : @956 [@dyn 455] (gas: 37)\n 25783: a4 = u64 [s1 + 0x278]\n 25787: a1 = u64 [a4]\n 25789: t0 = u64 [a4 + 0x18]\n 25792: a2 = u64 [a4 + 0x8]\n 25795: a3 = u64 [a4 + 0x10]\n 25798: a0 = a1 + 0x20\n 25801: a1 = a0 <u a1\n 25804: t1 = a2 + a1\n 25807: a2 = t1 <u a2\n 25810: a2 = a1 if a1 == 0\n 25813: ra = a3 + a2\n 25816: a1 = ra <u a3\n 25819: t0 = t0 + a1\n 25822: a5 = s1 + 0x100\n 25826: a3 = u64 [a5 + 0x90]\n 25830: a3 = a3 + 0x1\n 25833: a1 = a3 <u 0x1\n 25836: a2 = u64 [a5 + 0x78]\n 25839: a2 = a2 + a1\n 25842: u64 [a5 + 0x78] = a2\n 25845: u64 [a5 + 0x90] = a3\n 25849: a1 = a3 | a2\n 25852: a1 = a1 <u 0x1\n 25855: a2 = u64 [a5 + 0x70]\n 25858: a1 = a1 + a2\n 25861: a3 = a1 <u a2\n 25864: a2 = u64 [a5 + 0x80]\n 25868: a2 = a2 + a3\n 25871: u64 [a5 + 0x80] = a2\n 25875: u64 [a4] = a0\n 25877: u64 [a4 + 0x8] = t1\n 25880: u64 [a4 + 0x10] = ra\n 25883: u64 [s1 + 0x270] = t0\n 25887: u64 [a4 + 0x18] = t0\n 25890: u64 [a5 + 0x70] = a1\n 25893: t0 = 0x390\n 25897: jump @1754\n      : @957 (gas: 1)\n 25900: t0 = 912, jump @1754\n      : @958 [@dyn 456] (gas: 13)\n 25906: t0 = u64 [s1 + 0x108]\n 25910: a2 = s1 + 0x100\n 25914: a1 = u64 [a2 + 0x70]\n 25917: t2 = a1 <u t0\n 25920: a5 = u64 [a2]\n 25922: a3 = u64 [a2 + 0x80]\n 25926: a2 = a3 ^ a5\n 25929: a5 = a3 <u a5\n 25932: a5 = t2 if a2 == 0\n 25935: a1 = a1 ^ t0\n 25938: a1 = a1 | a2\n 25941: a5 = a4 if a1 == 0\n 25944: jump @965 if a5 == 0\n      : @959 (gas: 1)\n 25948: t0 = 914, jump @1755\n      : @960 [@dyn 457] (gas: 1)\n 25954: jump @962 if a1 == 0\n      : @961 (gas: 1)\n 25957: jump @797\n      : @962 (gas: 2)\n 25960: a1 = u64 [s1 + 0x1b8]\n 25964: t0 = 916, jump @1757\n      : @963 [@dyn 458] (gas: 7)\n 25970: u64 [a2 + 1440] = 0\n 25974: u64 [a2 + 1432] = 0\n 25978: u64 [a2 + 0x588] = a1\n 25982: a1 = s1 + 0x7ff\n 25986: a1 = a1 + 0x781\n 25990: u64 [a2 + 1424] = 0\n 25994: ra = 918, jump @9\n      : @964 [@dyn 459] (gas: 37)\n 26000: a4 = u64 [s1 + 0x278]\n 26004: a1 = u64 [a4]\n 26006: t0 = u64 [a4 + 0x18]\n 26009: a2 = u64 [a4 + 0x8]\n 26012: a3 = u64 [a4 + 0x10]\n 26015: a0 = a1 + 0x20\n 26018: a1 = a0 <u a1\n 26021: t1 = a2 + a1\n 26024: a2 = t1 <u a2\n 26027: a2 = a1 if a1 == 0\n 26030: ra = a3 + a2\n 26033: a1 = ra <u a3\n 26036: t0 = t0 + a1\n 26039: a5 = s1 + 0x100\n 26043: a3 = u64 [a5 + 0x90]\n 26047: a3 = a3 + 0x1\n 26050: a1 = a3 <u 0x1\n 26053: a2 = u64 [a5 + 0x78]\n 26056: a2 = a2 + a1\n 26059: u64 [a5 + 0x78] = a2\n 26062: u64 [a5 + 0x90] = a3\n 26066: a1 = a3 | a2\n 26069: a1 = a1 <u 0x1\n 26072: a2 = u64 [a5 + 0x70]\n 26075: a1 = a1 + a2\n 26078: a3 = a1 <u a2\n 26081: a2 = u64 [a5 + 0x80]\n 26085: a2 = a2 + a3\n 26088: u64 [a5 + 0x80] = a2\n 26092: u64 [a4] = a0\n 26094: u64 [a4 + 0x8] = t1\n 26097: u64 [a4 + 0x10] = ra\n 26100: u64 [s1 + 0x270] = t0\n 26104: u64 [a4 + 0x18] = t0\n 26107: u64 [a5 + 0x70] = a1\n 26110: t0 = 0x398\n 26114: jump @1754\n      : @965 (gas: 1)\n 26117: t0 = 920, jump @1754\n      : @966 [@dyn 460] (gas: 13)\n 26123: t0 = u64 [s1 + 0x108]\n 26127: a2 = s1 + 0x100\n 26131: a1 = u64 [a2 + 0x70]\n 26134: t2 = a1 <u t0\n 26137: a5 = u64 [a2]\n 26139: a3 = u64 [a2 + 0x80]\n 26143: a2 = a3 ^ a5\n 26146: a5 = a3 <u a5\n 26149: a5 = t2 if a2 == 0\n 26152: a1 = a1 ^ t0\n 26155: a1 = a1 | a2\n 26158: a5 = a4 if a1 == 0\n 26161: jump @973 if a5 == 0\n      : @967 (gas: 1)\n 26165: t0 = 922, jump @1755\n      : @968 [@dyn 461] (gas: 1)\n 26171: jump @970 if a1 == 0\n      : @969 (gas: 1)\n 26174: jump @797\n      : @970 (gas: 2)\n 26177: a1 = u64 [s1 + 0x1b0]\n 26181: t0 = 924, jump @1757\n      : @971 [@dyn 462] (gas: 7)\n 26187: u64 [a2 + 1408] = 0\n 26191: u64 [a2 + 1400] = 0\n 26195: u64 [a2 + 0x568] = a1\n 26199: a1 = s1 + 0x7ff\n 26203: a1 = a1 + 0x761\n 26207: u64 [a2 + 1392] = 0\n 26211: ra = 926, jump @9\n      : @972 [@dyn 463] (gas: 37)\n 26217: a4 = u64 [s1 + 0x278]\n 26221: a1 = u64 [a4]\n 26223: t0 = u64 [a4 + 0x18]\n 26226: a2 = u64 [a4 + 0x8]\n 26229: a3 = u64 [a4 + 0x10]\n 26232: a0 = a1 + 0x20\n 26235: a1 = a0 <u a1\n 26238: t1 = a2 + a1\n 26241: a2 = t1 <u a2\n 26244: a2 = a1 if a1 == 0\n 26247: ra = a3 + a2\n 26250: a1 = ra <u a3\n 26253: t0 = t0 + a1\n 26256: a5 = s1 + 0x100\n 26260: a3 = u64 [a5 + 0x90]\n 26264: a3 = a3 + 0x1\n 26267: a1 = a3 <u 0x1\n 26270: a2 = u64 [a5 + 0x78]\n 26273: a2 = a2 + a1\n 26276: u64 [a5 + 0x78] = a2\n 26279: u64 [a5 + 0x90] = a3\n 26283: a1 = a3 | a2\n 26286: a1 = a1 <u 0x1\n 26289: a2 = u64 [a5 + 0x70]\n 26292: a1 = a1 + a2\n 26295: a3 = a1 <u a2\n 26298: a2 = u64 [a5 + 0x80]\n 26302: a2 = a2 + a3\n 26305: u64 [a5 + 0x80] = a2\n 26309: u64 [a4] = a0\n 26311: u64 [a4 + 0x8] = t1\n 26314: u64 [a4 + 0x10] = ra\n 26317: u64 [s1 + 0x270] = t0\n 26321: u64 [a4 + 0x18] = t0\n 26324: u64 [a5 + 0x70] = a1\n 26327: t0 = 0x3a0\n 26331: jump @1754\n      : @973 (gas: 1)\n 26334: t0 = 928, jump @1754\n      : @974 [@dyn 464] (gas: 13)\n 26340: t0 = u64 [s1 + 0x108]\n 26344: a2 = s1 + 0x100\n 26348: a1 = u64 [a2 + 0x70]\n 26351: t2 = a1 <u t0\n 26354: a5 = u64 [a2]\n 26356: a3 = u64 [a2 + 0x80]\n 26360: a2 = a3 ^ a5\n 26363: a5 = a3 <u a5\n 26366: a5 = t2 if a2 == 0\n 26369: a1 = a1 ^ t0\n 26372: a1 = a1 | a2\n 26375: a5 = a4 if a1 == 0\n 26378: jump @981 if a5 == 0\n      : @975 (gas: 1)\n 26382: t0 = 930, jump @1755\n      : @976 [@dyn 465] (gas: 1)\n 26388: jump @978 if a1 == 0\n      : @977 (gas: 1)\n 26391: jump @797\n      : @978 (gas: 2)\n 26394: a1 = u64 [s1 + 0x1a8]\n 26398: t0 = 932, jump @1757\n      : @979 [@dyn 466] (gas: 7)\n 26404: u64 [a2 + 1376] = 0\n 26408: u64 [a2 + 1368] = 0\n 26412: u64 [a2 + 0x548] = a1\n 26416: a1 = s1 + 0x7ff\n 26420: a1 = a1 + 0x741\n 26424: u64 [a2 + 1360] = 0\n 26428: ra = 934, jump @9\n      : @980 [@dyn 467] (gas: 37)\n 26434: a4 = u64 [s1 + 0x278]\n 26438: a1 = u64 [a4]\n 26440: t0 = u64 [a4 + 0x18]\n 26443: a2 = u64 [a4 + 0x8]\n 26446: a3 = u64 [a4 + 0x10]\n 26449: a0 = a1 + 0x20\n 26452: a1 = a0 <u a1\n 26455: t1 = a2 + a1\n 26458: a2 = t1 <u a2\n 26461: a2 = a1 if a1 == 0\n 26464: ra = a3 + a2\n 26467: a1 = ra <u a3\n 26470: t0 = t0 + a1\n 26473: a5 = s1 + 0x100\n 26477: a3 = u64 [a5 + 0x90]\n 26481: a3 = a3 + 0x1\n 26484: a1 = a3 <u 0x1\n 26487: a2 = u64 [a5 + 0x78]\n 26490: a2 = a2 + a1\n 26493: u64 [a5 + 0x78] = a2\n 26496: u64 [a5 + 0x90] = a3\n 26500: a1 = a3 | a2\n 26503: a1 = a1 <u 0x1\n 26506: a2 = u64 [a5 + 0x70]\n 26509: a1 = a1 + a2\n 26512: a3 = a1 <u a2\n 26515: a2 = u64 [a5 + 0x80]\n 26519: a2 = a2 + a3\n 26522: u64 [a5 + 0x80] = a2\n 26526: u64 [a4] = a0\n 26528: u64 [a4 + 0x8] = t1\n 26531: u64 [a4 + 0x10] = ra\n 26534: u64 [s1 + 0x270] = t0\n 26538: u64 [a4 + 0x18] = t0\n 26541: u64 [a5 + 0x70] = a1\n 26544: t0 = 0x3a8\n 26548: jump @1754\n      : @981 (gas: 1)\n 26551: t0 = 936, jump @1754\n      : @982 [@dyn 468] (gas: 13)\n 26557: t0 = u64 [s1 + 0x108]\n 26561: a2 = s1 + 0x100\n 26565: a1 = u64 [a2 + 0x70]\n 26568: t2 = a1 <u t0\n 26571: a5 = u64 [a2]\n 26573: a3 = u64 [a2 + 0x80]\n 26577: a2 = a3 ^ a5\n 26580: a5 = a3 <u a5\n 26583: a5 = t2 if a2 == 0\n 26586: a1 = a1 ^ t0\n 26589: a1 = a1 | a2\n 26592: a5 = a4 if a1 == 0\n 26595: jump @989 if a5 == 0\n      : @983 (gas: 1)\n 26599: t0 = 938, jump @1755\n      : @984 [@dyn 469] (gas: 1)\n 26605: jump @986 if a1 == 0\n      : @985 (gas: 1)\n 26608: jump @797\n      : @986 (gas: 2)\n 26611: a1 = u64 [s1 + 0x1a0]\n 26615: t0 = 940, jump @1757\n      : @987 [@dyn 470] (gas: 7)\n 26621: u64 [a2 + 1344] = 0\n 26625: u64 [a2 + 1336] = 0\n 26629: u64 [a2 + 0x528] = a1\n 26633: a1 = s1 + 0x7ff\n 26637: a1 = a1 + 0x721\n 26641: u64 [a2 + 1328] = 0\n 26645: ra = 942, jump @9\n      : @988 [@dyn 471] (gas: 37)\n 26651: a4 = u64 [s1 + 0x278]\n 26655: a1 = u64 [a4]\n 26657: t0 = u64 [a4 + 0x18]\n 26660: a2 = u64 [a4 + 0x8]\n 26663: a3 = u64 [a4 + 0x10]\n 26666: a0 = a1 + 0x20\n 26669: a1 = a0 <u a1\n 26672: t1 = a2 + a1\n 26675: a2 = t1 <u a2\n 26678: a2 = a1 if a1 == 0\n 26681: ra = a3 + a2\n 26684: a1 = ra <u a3\n 26687: t0 = t0 + a1\n 26690: a5 = s1 + 0x100\n 26694: a3 = u64 [a5 + 0x90]\n 26698: a3 = a3 + 0x1\n 26701: a1 = a3 <u 0x1\n 26704: a2 = u64 [a5 + 0x78]\n 26707: a2 = a2 + a1\n 26710: u64 [a5 + 0x78] = a2\n 26713: u64 [a5 + 0x90] = a3\n 26717: a1 = a3 | a2\n 26720: a1 = a1 <u 0x1\n 26723: a2 = u64 [a5 + 0x70]\n 26726: a1 = a1 + a2\n 26729: a3 = a1 <u a2\n 26732: a2 = u64 [a5 + 0x80]\n 26736: a2 = a2 + a3\n 26739: u64 [a5 + 0x80] = a2\n 26743: u64 [a4] = a0\n 26745: u64 [a4 + 0x8] = t1\n 26748: u64 [a4 + 0x10] = ra\n 26751: u64 [s1 + 0x270] = t0\n 26755: u64 [a4 + 0x18] = t0\n 26758: u64 [a5 + 0x70] = a1\n 26761: t0 = 0x3b0\n 26765: jump @1754\n      : @989 (gas: 1)\n 26768: t0 = 944, jump @1754\n      : @990 [@dyn 472] (gas: 13)\n 26774: t0 = u64 [s1 + 0x108]\n 26778: a2 = s1 + 0x100\n 26782: a1 = u64 [a2 + 0x70]\n 26785: t2 = a1 <u t0\n 26788: a5 = u64 [a2]\n 26790: a3 = u64 [a2 + 0x80]\n 26794: a2 = a3 ^ a5\n 26797: a5 = a3 <u a5\n 26800: a5 = t2 if a2 == 0\n 26803: a1 = a1 ^ t0\n 26806: a1 = a1 | a2\n 26809: a5 = a4 if a1 == 0\n 26812: jump @997 if a5 == 0\n      : @991 (gas: 1)\n 26816: t0 = 946, jump @1755\n      : @992 [@dyn 473] (gas: 1)\n 26822: jump @994 if a1 == 0\n      : @993 (gas: 1)\n 26825: jump @797\n      : @994 (gas: 2)\n 26828: a1 = u64 [s1 + 0x198]\n 26832: t0 = 948, jump @1757\n      : @995 [@dyn 474] (gas: 7)\n 26838: u64 [a2 + 1312] = 0\n 26842: u64 [a2 + 1304] = 0\n 26846: u64 [a2 + 0x508] = a1\n 26850: a1 = s1 + 0x7ff\n 26854: a1 = a1 + 0x701\n 26858: u64 [a2 + 1296] = 0\n 26862: ra = 950, jump @9\n      : @996 [@dyn 475] (gas: 37)\n 26868: a4 = u64 [s1 + 0x278]\n 26872: a1 = u64 [a4]\n 26874: t0 = u64 [a4 + 0x18]\n 26877: a2 = u64 [a4 + 0x8]\n 26880: a3 = u64 [a4 + 0x10]\n 26883: a0 = a1 + 0x20\n 26886: a1 = a0 <u a1\n 26889: t1 = a2 + a1\n 26892: a2 = t1 <u a2\n 26895: a2 = a1 if a1 == 0\n 26898: ra = a3 + a2\n 26901: a1 = ra <u a3\n 26904: t0 = t0 + a1\n 26907: a5 = s1 + 0x100\n 26911: a3 = u64 [a5 + 0x90]\n 26915: a3 = a3 + 0x1\n 26918: a1 = a3 <u 0x1\n 26921: a2 = u64 [a5 + 0x78]\n 26924: a2 = a2 + a1\n 26927: u64 [a5 + 0x78] = a2\n 26930: u64 [a5 + 0x90] = a3\n 26934: a1 = a3 | a2\n 26937: a1 = a1 <u 0x1\n 26940: a2 = u64 [a5 + 0x70]\n 26943: a1 = a1 + a2\n 26946: a3 = a1 <u a2\n 26949: a2 = u64 [a5 + 0x80]\n 26953: a2 = a2 + a3\n 26956: u64 [a5 + 0x80] = a2\n 26960: u64 [a4] = a0\n 26962: u64 [a4 + 0x8] = t1\n 26965: u64 [a4 + 0x10] = ra\n 26968: u64 [s1 + 0x270] = t0\n 26972: u64 [a4 + 0x18] = t0\n 26975: u64 [a5 + 0x70] = a1\n 26978: t0 = 0x3b8\n 26982: jump @1754\n      : @997 (gas: 1)\n 26985: t0 = 952, jump @1754\n      : @998 [@dyn 476] (gas: 13)\n 26991: t0 = u64 [s1 + 0x108]\n 26995: a2 = s1 + 0x100\n 26999: a1 = u64 [a2 + 0x70]\n 27002: t2 = a1 <u t0\n 27005: a5 = u64 [a2]\n 27007: a3 = u64 [a2 + 0x80]\n 27011: a2 = a3 ^ a5\n 27014: a5 = a3 <u a5\n 27017: a5 = t2 if a2 == 0\n 27020: a1 = a1 ^ t0\n 27023: a1 = a1 | a2\n 27026: a5 = a4 if a1 == 0\n 27029: jump @1005 if a5 == 0\n      : @999 (gas: 1)\n 27033: t0 = 954, jump @1755\n      : @1000 [@dyn 477] (gas: 1)\n 27039: jump @1002 if a1 == 0\n      : @1001 (gas: 1)\n 27042: jump @797\n      : @1002 (gas: 2)\n 27045: a1 = u64 [s1 + 0x188]\n 27049: t0 = 956, jump @1757\n      : @1003 [@dyn 478] (gas: 7)\n 27055: u64 [a2 + 1280] = 0\n 27059: u64 [a2 + 1272] = 0\n 27063: u64 [a2 + 0x4e8] = a1\n 27067: a1 = s1 + 0x7ff\n 27071: a1 = a1 + 0x6e1\n 27075: u64 [a2 + 1264] = 0\n 27079: ra = 958, jump @9\n      : @1004 [@dyn 479] (gas: 37)\n 27085: a4 = u64 [s1 + 0x278]\n 27089: a1 = u64 [a4]\n 27091: t0 = u64 [a4 + 0x18]\n 27094: a2 = u64 [a4 + 0x8]\n 27097: a3 = u64 [a4 + 0x10]\n 27100: a0 = a1 + 0x20\n 27103: a1 = a0 <u a1\n 27106: t1 = a2 + a1\n 27109: a2 = t1 <u a2\n 27112: a2 = a1 if a1 == 0\n 27115: ra = a3 + a2\n 27118: a1 = ra <u a3\n 27121: t0 = t0 + a1\n 27124: a5 = s1 + 0x100\n 27128: a3 = u64 [a5 + 0x90]\n 27132: a3 = a3 + 0x1\n 27135: a1 = a3 <u 0x1\n 27138: a2 = u64 [a5 + 0x78]\n 27141: a2 = a2 + a1\n 27144: u64 [a5 + 0x78] = a2\n 27147: u64 [a5 + 0x90] = a3\n 27151: a1 = a3 | a2\n 27154: a1 = a1 <u 0x1\n 27157: a2 = u64 [a5 + 0x70]\n 27160: a1 = a1 + a2\n 27163: a3 = a1 <u a2\n 27166: a2 = u64 [a5 + 0x80]\n 27170: a2 = a2 + a3\n 27173: u64 [a5 + 0x80] = a2\n 27177: u64 [a4] = a0\n 27179: u64 [a4 + 0x8] = t1\n 27182: u64 [a4 + 0x10] = ra\n 27185: u64 [s1 + 0x270] = t0\n 27189: u64 [a4 + 0x18] = t0\n 27192: u64 [a5 + 0x70] = a1\n 27195: t0 = 0x3c0\n 27199: jump @1754\n      : @1005 (gas: 1)\n 27202: t0 = 960, jump @1754\n      : @1006 [@dyn 480] (gas: 13)\n 27208: t0 = u64 [s1 + 0x108]\n 27212: a2 = s1 + 0x100\n 27216: a1 = u64 [a2 + 0x70]\n 27219: t2 = a1 <u t0\n 27222: a5 = u64 [a2]\n 27224: a3 = u64 [a2 + 0x80]\n 27228: a2 = a3 ^ a5\n 27231: a5 = a3 <u a5\n 27234: a5 = t2 if a2 == 0\n 27237: a1 = a1 ^ t0\n 27240: a1 = a1 | a2\n 27243: a5 = a4 if a1 == 0\n 27246: jump @1013 if a5 == 0\n      : @1007 (gas: 1)\n 27250: t0 = 962, jump @1755\n      : @1008 [@dyn 481] (gas: 1)\n 27256: jump @1010 if a1 == 0\n      : @1009 (gas: 1)\n 27259: jump @797\n      : @1010 (gas: 2)\n 27262: a1 = u64 [s1 + 0x168]\n 27266: t0 = 964, jump @1757\n      : @1011 [@dyn 482] (gas: 7)\n 27272: u64 [a2 + 1248] = 0\n 27276: u64 [a2 + 1240] = 0\n 27280: u64 [a2 + 0x4c8] = a1\n 27284: a1 = s1 + 0x7ff\n 27288: a1 = a1 + 0x6c1\n 27292: u64 [a2 + 1232] = 0\n 27296: ra = 966, jump @9\n      : @1012 [@dyn 483] (gas: 37)\n 27302: a4 = u64 [s1 + 0x278]\n 27306: a1 = u64 [a4]\n 27308: t0 = u64 [a4 + 0x18]\n 27311: a2 = u64 [a4 + 0x8]\n 27314: a3 = u64 [a4 + 0x10]\n 27317: a0 = a1 + 0x20\n 27320: a1 = a0 <u a1\n 27323: t1 = a2 + a1\n 27326: a2 = t1 <u a2\n 27329: a2 = a1 if a1 == 0\n 27332: ra = a3 + a2\n 27335: a1 = ra <u a3\n 27338: t0 = t0 + a1\n 27341: a5 = s1 + 0x100\n 27345: a3 = u64 [a5 + 0x90]\n 27349: a3 = a3 + 0x1\n 27352: a1 = a3 <u 0x1\n 27355: a2 = u64 [a5 + 0x78]\n 27358: a2 = a2 + a1\n 27361: u64 [a5 + 0x78] = a2\n 27364: u64 [a5 + 0x90] = a3\n 27368: a1 = a3 | a2\n 27371: a1 = a1 <u 0x1\n 27374: a2 = u64 [a5 + 0x70]\n 27377: a1 = a1 + a2\n 27380: a3 = a1 <u a2\n 27383: a2 = u64 [a5 + 0x80]\n 27387: a2 = a2 + a3\n 27390: u64 [a5 + 0x80] = a2\n 27394: u64 [a4] = a0\n 27396: u64 [a4 + 0x8] = t1\n 27399: u64 [a4 + 0x10] = ra\n 27402: u64 [s1 + 0x270] = t0\n 27406: u64 [a4 + 0x18] = t0\n 27409: u64 [a5 + 0x70] = a1\n 27412: t0 = 0x3c8\n 27416: jump @1754\n      : @1013 (gas: 1)\n 27419: t0 = 968, jump @1754\n      : @1014 [@dyn 484] (gas: 13)\n 27425: t0 = u64 [s1 + 0x108]\n 27429: a2 = s1 + 0x100\n 27433: a1 = u64 [a2 + 0x70]\n 27436: t2 = a1 <u t0\n 27439: a5 = u64 [a2]\n 27441: a3 = u64 [a2 + 0x80]\n 27445: a2 = a3 ^ a5\n 27448: a5 = a3 <u a5\n 27451: a5 = t2 if a2 == 0\n 27454: a1 = a1 ^ t0\n 27457: a1 = a1 | a2\n 27460: a5 = a4 if a1 == 0\n 27463: jump @1021 if a5 == 0\n      : @1015 (gas: 1)\n 27467: t0 = 970, jump @1755\n      : @1016 [@dyn 485] (gas: 1)\n 27473: jump @1018 if a1 == 0\n      : @1017 (gas: 1)\n 27476: jump @797\n      : @1018 (gas: 2)\n 27479: a1 = u64 [s1 + 0x160]\n 27483: t0 = 972, jump @1757\n      : @1019 [@dyn 486] (gas: 7)\n 27489: u64 [a2 + 1216] = 0\n 27493: u64 [a2 + 1208] = 0\n 27497: u64 [a2 + 0x4a8] = a1\n 27501: a1 = s1 + 0x7ff\n 27505: a1 = a1 + 0x6a1\n 27509: u64 [a2 + 1200] = 0\n 27513: ra = 974, jump @9\n      : @1020 [@dyn 487] (gas: 37)\n 27519: a4 = u64 [s1 + 0x278]\n 27523: a1 = u64 [a4]\n 27525: t0 = u64 [a4 + 0x18]\n 27528: a2 = u64 [a4 + 0x8]\n 27531: a3 = u64 [a4 + 0x10]\n 27534: a0 = a1 + 0x20\n 27537: a1 = a0 <u a1\n 27540: t1 = a2 + a1\n 27543: a2 = t1 <u a2\n 27546: a2 = a1 if a1 == 0\n 27549: ra = a3 + a2\n 27552: a1 = ra <u a3\n 27555: t0 = t0 + a1\n 27558: a5 = s1 + 0x100\n 27562: a3 = u64 [a5 + 0x90]\n 27566: a3 = a3 + 0x1\n 27569: a1 = a3 <u 0x1\n 27572: a2 = u64 [a5 + 0x78]\n 27575: a2 = a2 + a1\n 27578: u64 [a5 + 0x78] = a2\n 27581: u64 [a5 + 0x90] = a3\n 27585: a1 = a3 | a2\n 27588: a1 = a1 <u 0x1\n 27591: a2 = u64 [a5 + 0x70]\n 27594: a1 = a1 + a2\n 27597: a3 = a1 <u a2\n 27600: a2 = u64 [a5 + 0x80]\n 27604: a2 = a2 + a3\n 27607: u64 [a5 + 0x80] = a2\n 27611: u64 [a4] = a0\n 27613: u64 [a4 + 0x8] = t1\n 27616: u64 [a4 + 0x10] = ra\n 27619: u64 [s1 + 0x270] = t0\n 27623: u64 [a4 + 0x18] = t0\n 27626: u64 [a5 + 0x70] = a1\n 27629: t0 = 0x3d0\n 27633: jump @1754\n      : @1021 (gas: 1)\n 27636: t0 = 976, jump @1754\n      : @1022 [@dyn 488] (gas: 13)\n 27642: t0 = u64 [s1 + 0x108]\n 27646: a2 = s1 + 0x100\n 27650: a1 = u64 [a2 + 0x70]\n 27653: t2 = a1 <u t0\n 27656: a5 = u64 [a2]\n 27658: a3 = u64 [a2 + 0x80]\n 27662: a2 = a3 ^ a5\n 27665: a5 = a3 <u a5\n 27668: a5 = t2 if a2 == 0\n 27671: a1 = a1 ^ t0\n 27674: a1 = a1 | a2\n 27677: a5 = a4 if a1 == 0\n 27680: jump @1029 if a5 == 0\n      : @1023 (gas: 1)\n 27684: t0 = 978, jump @1755\n      : @1024 [@dyn 489] (gas: 1)\n 27690: jump @1026 if a1 == 0\n      : @1025 (gas: 1)\n 27693: jump @797\n      : @1026 (gas: 2)\n 27696: a1 = u64 [s1 + 0x158]\n 27700: t0 = 980, jump @1757\n      : @1027 [@dyn 490] (gas: 7)\n 27706: u64 [a2 + 1184] = 0\n 27710: u64 [a2 + 1176] = 0\n 27714: u64 [a2 + 0x488] = a1\n 27718: a1 = s1 + 0x7ff\n 27722: a1 = a1 + 0x681\n 27726: u64 [a2 + 1168] = 0\n 27730: ra = 982, jump @9\n      : @1028 [@dyn 491] (gas: 37)\n 27736: a4 = u64 [s1 + 0x278]\n 27740: a1 = u64 [a4]\n 27742: t0 = u64 [a4 + 0x18]\n 27745: a2 = u64 [a4 + 0x8]\n 27748: a3 = u64 [a4 + 0x10]\n 27751: a0 = a1 + 0x20\n 27754: a1 = a0 <u a1\n 27757: t1 = a2 + a1\n 27760: a2 = t1 <u a2\n 27763: a2 = a1 if a1 == 0\n 27766: ra = a3 + a2\n 27769: a1 = ra <u a3\n 27772: t0 = t0 + a1\n 27775: a5 = s1 + 0x100\n 27779: a3 = u64 [a5 + 0x90]\n 27783: a3 = a3 + 0x1\n 27786: a1 = a3 <u 0x1\n 27789: a2 = u64 [a5 + 0x78]\n 27792: a2 = a2 + a1\n 27795: u64 [a5 + 0x78] = a2\n 27798: u64 [a5 + 0x90] = a3\n 27802: a1 = a3 | a2\n 27805: a1 = a1 <u 0x1\n 27808: a2 = u64 [a5 + 0x70]\n 27811: a1 = a1 + a2\n 27814: a3 = a1 <u a2\n 27817: a2 = u64 [a5 + 0x80]\n 27821: a2 = a2 + a3\n 27824: u64 [a5 + 0x80] = a2\n 27828: u64 [a4] = a0\n 27830: u64 [a4 + 0x8] = t1\n 27833: u64 [a4 + 0x10] = ra\n 27836: u64 [s1 + 0x270] = t0\n 27840: u64 [a4 + 0x18] = t0\n 27843: u64 [a5 + 0x70] = a1\n 27846: t0 = 0x3d8\n 27850: jump @1754\n      : @1029 (gas: 1)\n 27853: t0 = 984, jump @1754\n      : @1030 [@dyn 492] (gas: 13)\n 27859: t0 = u64 [s1 + 0x108]\n 27863: a2 = s1 + 0x100\n 27867: a1 = u64 [a2 + 0x70]\n 27870: t2 = a1 <u t0\n 27873: a5 = u64 [a2]\n 27875: a3 = u64 [a2 + 0x80]\n 27879: a2 = a3 ^ a5\n 27882: a5 = a3 <u a5\n 27885: a5 = t2 if a2 == 0\n 27888: a1 = a1 ^ t0\n 27891: a1 = a1 | a2\n 27894: a5 = a4 if a1 == 0\n 27897: jump @1036 if a5 == 0\n      : @1031 (gas: 1)\n 27901: t0 = 986, jump @1755\n      : @1032 [@dyn 493] (gas: 1)\n 27907: jump @1034 if a1 == 0\n      : @1033 (gas: 1)\n 27910: jump @797\n      : @1034 (gas: 18)\n 27913: a1 = 0xffffffffffffff\n 27923: a3 = s1 + 0x100\n 27927: a2 = u64 [a3 + 0x48]\n 27930: a1 = a1 ^ a2\n 27933: a2 = u64 [a3 + 0x50]\n 27936: a1 = a1 | ~a2\n 27939: a2 = u64 [a3 + 0x40]\n 27942: a2 = a2 >u 0\n 27944: a2 = 0 if a1 == 0\n 27946: a3 = s1 + 0x7ff\n 27950: a3 = a3 + 0x1f9\n 27954: u64 [a3 + 1152] = 0\n 27958: u64 [a3 + 1144] = 0\n 27962: u64 [a3 + 0x468] = a2\n 27966: a1 = s1 + 0x7ff\n 27970: a1 = a1 + 0x661\n 27974: u64 [a3 + 1136] = 0\n 27978: ra = 988, jump @9\n      : @1035 [@dyn 494] (gas: 19)\n 27984: a4 = u64 [s1 + 0x278]\n 27988: a1 = u64 [a4]\n 27990: t0 = u64 [a4 + 0x18]\n 27993: a2 = u64 [a4 + 0x8]\n 27996: a3 = u64 [a4 + 0x10]\n 27999: a0 = a1 + 0x20\n 28002: a1 = a0 <u a1\n 28005: t1 = a2 + a1\n 28008: a2 = t1 <u a2\n 28011: a2 = a1 if a1 == 0\n 28014: ra = a3 + a2\n 28017: a1 = ra <u a3\n 28020: a1 = a1 + t0\n 28023: u64 [a4] = a0\n 28025: u64 [a4 + 0x8] = t1\n 28028: u64 [a4 + 0x10] = ra\n 28031: u64 [s1 + 0x270] = a1\n 28035: u64 [a4 + 0x18] = a1\n 28038: fallthrough\n      : @1036 (gas: 38)\n 28039: t0 = u64 [s1 + 0x28]\n 28042: a2 = a0 <u t0\n 28045: u64 [s1 + 0x278] = a2\n 28049: a3 = u64 [s1 + 0x20]\n 28052: a1 = t1 ^ a3\n 28055: a4 = t1 <u a3\n 28058: a4 = a2 if a1 == 0\n 28061: t2 = u64 [s1 + 0x30]\n 28064: a1 = ra - t2\n 28067: ra = ra <u t2\n 28070: a5 = u64 [s1 + 0x270]\n 28074: a2 = u64 [s1 + 0x38]\n 28077: a5 = a5 - a2\n 28080: a5 = a5 - ra\n 28083: a2 = a1 <u a4\n 28086: ra = a5 - a2\n 28089: a5 = a1 - a4\n 28092: a2 = t1 - a3\n 28095: a1 = u64 [s1 + 0x278]\n 28099: a2 = a2 - a1\n 28102: a0 = a0 - t0\n 28105: a4 = s1 + 0x7ff\n 28109: a4 = a4 + 0x1f9\n 28113: u64 [a4 + 0x448] = t0\n 28117: a1 = a4 + 0x400\n 28121: u64 [a1 + 0x28] = a0\n 28124: u64 [a1 + 0x50] = a3\n 28127: u64 [a4 + 0x458] = t2\n 28131: u64 [a1 + 0x30] = a2\n 28134: a0 = u64 [s1 + 0x38]\n 28137: u64 [a1 + 0x60] = a0\n 28140: u64 [a1 + 0x38] = a5\n 28143: a0 = s1 + 0x7ff\n 28147: a0 = a0 + 0x641\n 28151: a1 = s1 + 0x7ff\n 28155: a1 = a1 + 0x621\n 28159: u64 [a4 + 0x440] = ra\n 28163: ra = 990, jump @1452\n      : @1037 [@dyn 495] (gas: 4)\n 28169: a0 = 0x100000000\n 28179: u64 [s1 + 0x278] = a0\n 28183: a0 = 0xffffff40\n 28193: t0 = 992, jump @1770\n      : @1038 [@dyn 496] (gas: 1)\n 28199: jump @1040 if a0 != 0\n      : @1039 (gas: 1)\n 28202: jump @797\n      : @1040 (gas: 18)\n 28205: a0 = u64 [s1 + 0x98]\n 28209: i32 a3 = a0 + 0xc0\n 28213: a0 = s1 + 0x7ff\n 28217: a0 = a0 + 0x1f9\n 28221: a1 = u64 [s1 + 0x28]\n 28224: a4 = a0 + 0x400\n 28228: u64 [a4 + 0x8] = a1\n 28231: a1 = u64 [s1 + 0x20]\n 28234: u64 [a4 + 0x10] = a1\n 28237: a1 = u64 [s1 + 0x30]\n 28240: u64 [a4 + 0x18] = a1\n 28243: a1 = s1 + 0x7ff\n 28247: a1 = a1 + 0x601\n 28251: a2 = u64 [s1 + 0x38]\n 28254: u64 [a4 + 0x20] = a2\n 28257: u64 [s1 + 0x270] = a3\n 28261: a0 = a3\n 28263: ra = 994, jump @9\n      : @1041 [@dyn 497] (gas: 3)\n 28269: a1 = u64 [s1 + 0x70]\n 28272: a0 = a1 + 0x4\n 28275: t0 = 996, jump @1789\n      : @1042 [@dyn 498] (gas: 9)\n 28281: a5 = a4 + 0x400\n 28285: u64 [a5 + 0x10] = a2\n 28288: u64 [a5 + 0x8] = a0\n 28291: u64 [a5 + 0x18] = a3\n 28294: u64 [a5 + 0x20] = a1\n 28297: a0 = s1 + 0x7ff\n 28301: a0 = a0 + 0x5e1\n 28305: a1 = s1 + 0x2e00\n 28309: ra = 998, jump @11\n      : @1043 [@dyn 499] (gas: 3)\n 28315: a0 = u64 [s1 + 0x278]\n 28319: a0 = a0 + 0xffffffffffffff20\n 28323: t0 = 1000, jump @1770\n      : @1044 [@dyn 500] (gas: 1)\n 28329: jump @1046 if a0 != 0\n      : @1045 (gas: 1)\n 28332: jump @797\n      : @1046 (gas: 15)\n 28335: a4 = s1 + 0x7ff\n 28339: a4 = a4 + 0x1f9\n 28343: a5 = a4 + 0x300\n 28347: a3 = u64 [a5 + 0xf0]\n 28351: a1 = u64 [a5 + 0xe8]\n 28355: a2 = u64 [s1 + 0x98]\n 28359: i32 a0 = a2 + 0xe0\n 28363: u64 [a4 + 992] = 0\n 28367: u64 [a4 + 984] = 0\n 28371: u64 [a5 + 0xc8] = a1\n 28375: a1 = s1 + 0x7ff\n 28379: a1 = a1 + 0x5c1\n 28383: u64 [a5 + 0xd0] = a3\n 28387: u64 [s1 + 0x1b8] = a0\n 28391: ra = 1002, jump @9\n      : @1047 [@dyn 501] (gas: 4)\n 28397: a0 = s1 + 0x7ff\n 28401: a0 = a0 + 0x5a1\n 28405: a1 = 0x40\n 28408: ra = 1004, jump @7\n      : @1048 [@dyn 502] (gas: 20)\n 28414: a1 = s1 + 0x7ff\n 28418: a1 = a1 + 0x1f9\n 28422: a4 = a1 + 0x300\n 28426: a2 = u64 [a4 + 0xc0]\n 28430: a3 = u64 [a4 + 0xb8]\n 28434: a0 = u64 [a4 + 0xb0]\n 28438: a1 = u64 [a4 + 0xa8]\n 28442: a4 = s1 + 0x100\n 28446: u64 [a4 + 0xd0] = a0\n 28450: u64 [a4 + 0xc8] = a2\n 28454: a0 = a0 | a2\n 28457: u64 [a4 + 0xd8] = a1\n 28461: a1 = a1 | a3\n 28464: a1 = a1 | a0\n 28467: a1 = a1 >> 0x20\n 28470: u64 [a4 + 0xc0] = a3\n 28474: a0 = a0 | a3\n 28477: a0 = a0 << 0x20\n 28480: a0 = a0 | a1\n 28483: jump @1050 if a0 == 0\n      : @1049 (gas: 1)\n 28486: jump @797\n      : @1050 (gas: 10)\n 28489: a2 = s1 + 0x7ff\n 28493: a2 = a2 + 0x1f9\n 28497: u64 [a2 + 928] = 0\n 28501: u64 [a2 + 920] = 0\n 28505: u64 [a2 + 912] = 0\n 28509: a1 = s1 + 0x7ff\n 28513: a1 = a1 + 0x581\n 28517: u64 [a2 + 904] = 0x20\n 28522: a0 = u64 [s1 + 0x1d8]\n 28526: ra = 1006, jump @9\n      : @1051 [@dyn 503] (gas: 4)\n 28532: a0 = s1 + 0x7ff\n 28536: a0 = a0 + 0x561\n 28540: a1 = u64 [s1 + 0x98]\n 28544: ra = 1008, jump @7\n      : @1052 [@dyn 504] (gas: 14)\n 28550: a3 = s1 + 0x100\n 28554: a0 = u64 [a3 + 0xc8]\n 28558: a1 = u64 [a3 + 0xc0]\n 28562: a2 = a1 | a0\n 28565: a0 = 0x100000000\n 28575: u64 [s1 + 0x278] = a0\n 28579: a0 = 0xffffffe0\n 28589: a1 = u64 [a3 + 0xd8]\n 28593: a0 = a1 <u a0\n 28596: a1 = u64 [a3 + 0xd0]\n 28600: a0 = 0 if a1 != 0\n 28602: u64 [s1 + 0x250] = a2\n 28606: a0 = 0 if a2 != 0\n 28608: jump @1054 if a0 != 0\n      : @1053 (gas: 1)\n 28611: jump @797\n      : @1054 (gas: 19)\n 28614: a4 = s1 + 0x7ff\n 28618: a4 = a4 + 0x1f9\n 28622: a5 = a4 + 0x300\n 28626: a0 = u64 [a5 + 0x78]\n 28629: a1 = u64 [a5 + 0x70]\n 28632: a2 = u64 [a5 + 0x68]\n 28635: a3 = u64 [s1 + 0x60]\n 28638: a3 = a3 & a0\n 28641: a1 = a1 & 0xffffffffffffffff\n 28644: a2 = a2 & 0xffffffffffffffff\n 28647: a0 = u64 [s1 + 0x1d8]\n 28651: i32 a0 = a0 + 0x20\n 28654: u64 [a4 + 864] = 0\n 28658: u64 [a5 + 0x48] = a2\n 28661: u64 [a5 + 0x50] = a1\n 28664: a1 = s1 + 0x7ff\n 28668: a1 = a1 + 0x541\n 28672: u64 [a5 + 0x58] = a3\n 28675: ra = 1010, jump @9\n      : @1055 [@dyn 505] (gas: 4)\n 28681: a0 = s1 + 0x7ff\n 28685: a0 = a0 + 0x521\n 28689: a1 = u64 [s1 + 0x58]\n 28692: ra = 1012, jump @7\n      : @1056 [@dyn 506] (gas: 3)\n 28698: a0 = u64 [s1 + 0x278]\n 28702: a0 = a0 + 0xffffffffffffffc0\n 28705: t0 = 1014, jump @1759\n      : @1057 [@dyn 507] (gas: 1)\n 28711: jump @1059 if a0 != 0\n      : @1058 (gas: 1)\n 28714: jump @797\n      : @1059 (gas: 19)\n 28717: a4 = s1 + 0x7ff\n 28721: a4 = a4 + 0x1f9\n 28725: a5 = a4 + 0x300\n 28729: a0 = u64 [a5 + 0x38]\n 28732: a1 = u64 [a5 + 0x30]\n 28735: a2 = u64 [a5 + 0x28]\n 28738: a3 = u64 [s1 + 0x60]\n 28741: a3 = a3 & a0\n 28744: a1 = a1 & 0xffffffffffffffff\n 28747: a2 = a2 & 0xffffffffffffffff\n 28750: a0 = u64 [s1 + 0x1d8]\n 28754: i32 a0 = a0 + 0x40\n 28757: u64 [a4 + 800] = 0\n 28761: u64 [a5 + 0x8] = a2\n 28764: u64 [a5 + 0x10] = a1\n 28767: a1 = s1 + 0x7ff\n 28771: a1 = a1 + 0x501\n 28775: u64 [a5 + 0x18] = a3\n 28778: ra = 1016, jump @9\n      : @1060 [@dyn 508] (gas: 4)\n 28784: a0 = s1 + 0x7ff\n 28788: a0 = a0 + 0x4e1\n 28792: a1 = u64 [s1 + 0x50]\n 28795: ra = 1018, jump @7\n      : @1061 [@dyn 509] (gas: 4)\n 28801: a0 = 0x100000000\n 28811: u64 [s1 + 0x278] = a0\n 28815: a0 = 0xffffffa0\n 28825: t0 = 1020, jump @1759\n      : @1062 [@dyn 510] (gas: 1)\n 28831: jump @1064 if a0 != 0\n      : @1063 (gas: 1)\n 28834: jump @797\n      : @1064 (gas: 20)\n 28837: a4 = s1 + 0x7ff\n 28841: a4 = a4 + 0x1f9\n 28845: a0 = u64 [a4 + 0x300]\n 28849: a5 = a4 + 0x200\n 28853: a1 = u64 [a5 + 0xf8]\n 28857: a2 = u64 [a5 + 0xe8]\n 28861: a3 = u64 [a5 + 0xf0]\n 28865: a1 = a1 | a2\n 28868: a0 = a0 | a3\n 28871: a0 = a0 | a1\n 28874: a1 = a0 >u 0\n 28876: a0 = u64 [s1 + 0x1d8]\n 28880: i32 a0 = a0 + 0x60\n 28883: u64 [a4 + 736] = 0\n 28887: u64 [a4 + 728] = 0\n 28891: u64 [a5 + 0xc8] = a1\n 28895: a1 = s1 + 0x7ff\n 28899: a1 = a1 + 0x4c1\n 28903: u64 [a4 + 720] = 0\n 28907: ra = 1022, jump @9\n      : @1065 [@dyn 511] (gas: 4)\n 28913: a0 = s1 + 0x7ff\n 28917: a0 = a0 + 0x4a1\n 28921: a1 = u64 [s1 + 0x48]\n 28924: ra = 1024, jump @7\n      : @1066 [@dyn 512] (gas: 3)\n 28930: a0 = u64 [s1 + 0x278]\n 28934: a0 = a0 + 0xffffffffffffff80\n 28937: t0 = 1026, jump @1759\n      : @1067 [@dyn 513] (gas: 1)\n 28943: jump @1069 if a0 != 0\n      : @1068 (gas: 1)\n 28946: jump @797\n      : @1069 (gas: 13)\n 28949: a2 = s1 + 0x7ff\n 28953: a2 = a2 + 0x1f9\n 28957: a0 = u64 [a2 + 0x2a8]\n 28961: a1 = a0 & 0xffffffffffffffff\n 28964: a0 = u64 [s1 + 0x1d8]\n 28968: i32 a0 = a0 + 0x80\n 28972: u64 [a2 + 672] = 0\n 28976: u64 [a2 + 664] = 0\n 28980: u64 [a2 + 0x288] = a1\n 28984: a1 = s1 + 0x7ff\n 28988: a1 = a1 + 0x481\n 28992: u64 [a2 + 656] = 0\n 28996: ra = 1028, jump @9\n      : @1070 [@dyn 514] (gas: 4)\n 29002: a0 = s1 + 0x7ff\n 29006: a0 = a0 + 0x461\n 29010: a1 = u64 [s1 + 0x40]\n 29013: ra = 1030, jump @7\n      : @1071 [@dyn 515] (gas: 4)\n 29019: a0 = 0x100000000\n 29029: u64 [s1 + 0x278] = a0\n 29033: a0 = 0xffffff60\n 29043: t0 = 1032, jump @1759\n      : @1072 [@dyn 516] (gas: 1)\n 29049: jump @1074 if a0 != 0\n      : @1073 (gas: 1)\n 29052: jump @797\n      : @1074 (gas: 13)\n 29055: a2 = s1 + 0x7ff\n 29059: a2 = a2 + 0x1f9\n 29063: a0 = u64 [a2 + 0x268]\n 29067: a1 = a0 & 0xffffffffffffffff\n 29070: a0 = u64 [s1 + 0x1d8]\n 29074: i32 a0 = a0 + 0xa0\n 29078: u64 [a2 + 608] = 0\n 29082: u64 [a2 + 600] = 0\n 29086: u64 [a2 + 0x248] = a1\n 29090: a1 = s1 + 0x7ff\n 29094: a1 = a1 + 0x441\n 29098: u64 [a2 + 592] = 0\n 29102: ra = 1034, jump @9\n      : @1075 [@dyn 517] (gas: 4)\n 29108: a0 = s1 + 0x7ff\n 29112: a0 = a0 + 0x421\n 29116: a1 = u64 [s1 + 0x18]\n 29119: ra = 1036, jump @7\n      : @1076 [@dyn 518] (gas: 3)\n 29125: a0 = u64 [s1 + 0x278]\n 29129: a0 = a0 + 0xffffffffffffff40\n 29133: t0 = 1038, jump @1759\n      : @1077 [@dyn 519] (gas: 1)\n 29139: jump @1079 if a0 != 0\n      : @1078 (gas: 1)\n 29142: jump @797\n      : @1079 (gas: 13)\n 29145: a2 = s1 + 0x7ff\n 29149: a2 = a2 + 0x1f9\n 29153: a0 = u64 [a2 + 0x228]\n 29157: a1 = a0 & 0xffffffffffffffff\n 29160: a0 = u64 [s1 + 0x1d8]\n 29164: i32 a0 = a0 + 0xc0\n 29168: u64 [a2 + 544] = 0\n 29172: u64 [a2 + 536] = 0\n 29176: u64 [a2 + 0x208] = a1\n 29180: a1 = s1 + 0x7ff\n 29184: a1 = a1 + 0x401\n 29188: u64 [a2 + 528] = 0\n 29192: ra = 1040, jump @9\n      : @1080 [@dyn 520] (gas: 4)\n 29198: a0 = s1 + 0x7ff\n 29202: a0 = a0 + 0x3e1\n 29206: a1 = u64 [s1 + 0x270]\n 29210: ra = 1042, jump @7\n      : @1081 [@dyn 521] (gas: 2)\n 29216: a0 = 0xffffff20\n 29226: t0 = 1044, jump @1759\n      : @1082 [@dyn 522] (gas: 1)\n 29232: jump @1084 if a0 != 0\n      : @1083 (gas: 1)\n 29235: jump @797\n      : @1084 (gas: 20)\n 29238: a2 = s1 + 0x7ff\n 29242: a2 = a2 + 0x1f9\n 29246: a0 = u64 [a2 + 0x200]\n 29250: u64 [s1 + 0x268] = a0\n 29254: a3 = a2 + 0x100\n 29258: a0 = u64 [a3 + 0xf8]\n 29262: u64 [s1 + 0x260] = a0\n 29266: a0 = u64 [a3 + 0xf0]\n 29270: u64 [s1 + 0x258] = a0\n 29274: a0 = u64 [a3 + 0xe8]\n 29278: u64 [s1 + 0x278] = a0\n 29282: a0 = u64 [s1 + 0x1d8]\n 29286: i32 a0 = a0 + 0xe0\n 29290: u64 [a2 + 480] = 0\n 29294: u64 [a2 + 472] = 0\n 29298: u64 [a3 + 200] = 0x100\n 29304: a1 = s1 + 0x7ff\n 29308: a1 = a1 + 0x3c1\n 29312: u64 [a2 + 464] = 0\n 29316: ra = 1046, jump @9\n      : @1085 [@dyn 523] (gas: 13)\n 29322: a4 = s1 + 0x200\n 29326: a2 = u64 [a4 + 0x60]\n 29329: a0 = u64 [a4 + 0x78]\n 29332: a0 = a0 | a2\n 29335: a1 = u64 [a4 + 0x68]\n 29338: a3 = u64 [a4 + 0x58]\n 29341: a1 = a1 | a3\n 29344: a0 = a0 | a1\n 29347: a0 = a0 >> 0x20\n 29350: a1 = a1 | a2\n 29353: a1 = a1 << 0x20\n 29356: a0 = a0 | a1\n 29359: jump @1087 if a0 == 0\n      : @1086 (gas: 1)\n 29362: jump @797\n      : @1087 (gas: 4)\n 29365: a0 = s1 + 0x7ff\n 29369: a0 = a0 + 0x3a1\n 29373: a1 = u64 [s1 + 0x278]\n 29377: ra = 1048, jump @7\n      : @1088 [@dyn 524] (gas: 4)\n 29383: a0 = 0x100000000\n 29393: u64 [s1 + 0x218] = a0\n 29397: a0 = 0xfffffee0\n 29407: t0 = 1050, jump @1759\n      : @1089 [@dyn 525] (gas: 1)\n 29413: jump @1091 if a0 != 0\n      : @1090 (gas: 1)\n 29416: jump @797\n      : @1091 (gas: 20)\n 29419: a2 = s1 + 0x7ff\n 29423: a2 = a2 + 0x1f9\n 29427: t0 = u64 [a2 + 0x1c0]\n 29431: a3 = a2 + 0x100\n 29435: a1 = u64 [a3 + 0xb8]\n 29439: a4 = u64 [a3 + 0xb0]\n 29443: a5 = u64 [a3 + 0xa8]\n 29447: a0 = u64 [s1 + 0x1d8]\n 29451: i32 a0 = a0 + 0x120\n 29455: u64 [s1 + 0x1e8] = a5\n 29459: u64 [a3 + 0x88] = a5\n 29463: u64 [s1 + 0x1f0] = a4\n 29467: u64 [a3 + 0x90] = a4\n 29471: u64 [s1 + 0x1f8] = a1\n 29475: u64 [a3 + 0x98] = a1\n 29479: a1 = s1 + 0x7ff\n 29483: a1 = a1 + 0x381\n 29487: u64 [s1 + 0x200] = t0\n 29491: u64 [a2 + 0x1a0] = t0\n 29495: ra = 1052, jump @9\n      : @1092 [@dyn 526] (gas: 26)\n 29501: u64 [s1 + 568] = 0\n 29505: u64 [s1 + 560] = 0\n 29509: u64 [s1 + 544] = 0\n 29513: u64 [s1 + 552] = 0\n 29517: a3 = s1 + 0x100\n 29521: a1 = u64 [a3 + 0xd8]\n 29525: a0 = a1 + 0x140\n 29529: a4 = s1 + 0x200\n 29533: u64 [a4 + 0x70] = a0\n 29536: a0 = a0 <u a1\n 29539: a1 = u64 [a3 + 0xd0]\n 29543: a2 = a1 + a0\n 29546: u64 [a4 + 0x48] = a2\n 29549: a1 = a2 <u a1\n 29552: a1 = a0 if a0 == 0\n 29555: a0 = u64 [a3 + 0xc0]\n 29559: a1 = a1 + a0\n 29562: u64 [a4 + 0x40] = a1\n 29565: a0 = a1 <u a0\n 29568: a1 = u64 [a3 + 0xc8]\n 29572: a0 = a0 + a1\n 29575: u64 [a4 + 0x50] = a0\n 29578: a0 = u64 [a4 + 0x18]\n 29581: a0 = a0 + 0xffffffffffffffe0\n 29584: u64 [a3 + 0xe0] = a0\n 29588: fallthrough\n      : @1093 (gas: 22)\n 29589: a5 = s1 + 0x100\n 29593: a0 = u64 [a5 + 0xe8]\n 29597: a1 = u64 [s1 + 0x238]\n 29601: a0 = a1 <u a0\n 29604: a2 = u64 [a5 + 0xf0]\n 29608: a3 = u64 [s1 + 0x230]\n 29612: a1 = a3 ^ a2\n 29615: a2 = a3 <u a2\n 29618: a2 = a0 if a1 == 0\n 29621: a4 = u64 [a5 + 0xf8]\n 29625: a1 = s1 + 0x200\n 29629: a0 = u64 [a1 + 0x20]\n 29632: t0 = a0 <u a4\n 29635: a3 = u64 [a1]\n 29637: a5 = u64 [a1 + 0x28]\n 29640: a1 = a5 ^ a3\n 29643: a3 = a5 <u a3\n 29646: a3 = t0 if a1 == 0\n 29649: a0 = a0 ^ a4\n 29652: a0 = a0 | a1\n 29655: a3 = a2 if a0 == 0\n 29658: jump @1248 if a3 == 0\n      : @1094 (gas: 11)\n 29662: a3 = s1 + 0x200\n 29666: a0 = u64 [a3 + 0x68]\n 29669: a1 = u64 [a3 + 0x60]\n 29672: a0 = a0 | a1\n 29675: a1 = u64 [a3 + 0x78]\n 29678: a2 = u64 [s1 + 0x1e0]\n 29682: a1 = a1 <u a2\n 29685: a2 = u64 [a3 + 0x58]\n 29688: a1 = 0 if a2 != 0\n 29690: a1 = 0 if a0 != 0\n 29692: jump @1096 if a1 != 0\n      : @1095 (gas: 1)\n 29695: jump @797\n      : @1096 (gas: 6)\n 29698: a0 = u64 [s1 + 0x278]\n 29702: a1 = a0 + 0x20\n 29705: a0 = s1 + 0x7ff\n 29709: a0 = a0 + 0x321\n 29713: u64 [s1 + 0x218] = a1\n 29717: ra = 1054, jump @7\n      : @1097 [@dyn 527] (gas: 13)\n 29723: a4 = s1 + 0x200\n 29727: a0 = u64 [a4 + 0x70]\n 29730: a3 = u64 [a4 + 0x40]\n 29733: a0 = a0 | a3\n 29736: a1 = u64 [a4 + 0x50]\n 29739: a2 = u64 [a4 + 0x48]\n 29742: a1 = a1 | a2\n 29745: a0 = a0 | a1\n 29748: a0 = a0 >> 0x20\n 29751: a1 = a1 | a3\n 29754: a1 = a1 << 0x20\n 29757: a0 = a0 | a1\n 29760: jump @1099 if a0 == 0\n      : @1098 (gas: 1)\n 29763: jump @797\n      : @1099 (gas: 33)\n 29766: a0 = u64 [s1 + 0x278]\n 29770: a1 = u64 [s1 + 0x218]\n 29774: a0 = a1 <u a0\n 29777: a1 = u64 [s1 + 0x258]\n 29781: a2 = a1 + a0\n 29784: u64 [s1 + 0x210] = a2\n 29788: a1 = a2 <u a1\n 29791: a1 = a0 if a0 == 0\n 29794: a4 = u64 [s1 + 0x260]\n 29798: a1 = a1 + a4\n 29801: u64 [s1 + 0x208] = a1\n 29805: a5 = s1 + 0x7ff\n 29809: a5 = a5 + 0x1f9\n 29813: t0 = u64 [a5 + 0x140]\n 29817: t1 = u64 [a5 + 0x138]\n 29821: a2 = u64 [a5 + 0x128]\n 29825: a3 = u64 [a5 + 0x130]\n 29829: a4 = a1 <u a4\n 29832: a0 = u64 [s1 + 0x268]\n 29836: a0 = a0 + a4\n 29839: u64 [s1 + 0x268] = a0\n 29843: a1 = a2 | t1\n 29846: a0 = a3 | t0\n 29849: a0 = a0 | a1\n 29852: a0 = a0 >u 0\n 29854: u64 [a5 + 288] = 0\n 29858: u64 [a5 + 280] = 0\n 29862: u64 [a5 + 272] = 0\n 29866: a1 = s1 + 0x7ff\n 29870: a1 = a1 + 0x301\n 29874: u64 [a5 + 0x108] = a0\n 29878: a0 = u64 [s1 + 0x270]\n 29882: ra = 1056, jump @9\n      : @1100 [@dyn 528] (gas: 40)\n 29888: a1 = u64 [s1 + 0x270]\n 29892: a0 = a1 + 0x20\n 29895: a1 = a0 <u a1\n 29898: a3 = u64 [s1 + 0x248]\n 29902: a2 = a3 + a1\n 29905: a3 = a2 <u a3\n 29908: a3 = a1 if a1 == 0\n 29911: a1 = u64 [s1 + 0x240]\n 29915: a3 = a3 + a1\n 29918: a1 = a3 <u a1\n 29921: a4 = u64 [s1 + 0x250]\n 29925: a4 = a4 + a1\n 29928: u64 [s1 + 0x250] = a4\n 29932: a4 = u64 [s1 + 0x238]\n 29936: a4 = a4 + 0x1\n 29939: a1 = a4 <u 0x1\n 29942: a5 = u64 [s1 + 0x230]\n 29946: a5 = a5 + a1\n 29949: u64 [s1 + 0x238] = a4\n 29953: u64 [s1 + 0x230] = a5\n 29957: a1 = a4 | a5\n 29960: a1 = a1 <u 0x1\n 29963: a4 = u64 [s1 + 0x220]\n 29967: a1 = a1 + a4\n 29970: a4 = a1 <u a4\n 29973: a5 = u64 [s1 + 0x228]\n 29977: a5 = a5 + a4\n 29980: a4 = s1 + 0x200\n 29984: u64 [a4 + 0x28] = a5\n 29987: u64 [a4 + 0x70] = a0\n 29990: u64 [a4 + 0x48] = a2\n 29993: u64 [a4 + 0x40] = a3\n 29996: a0 = u64 [a4 + 0x18]\n 29999: u64 [a4 + 0x78] = a0\n 30002: a0 = u64 [a4 + 0x10]\n 30005: u64 [a4 + 0x58] = a0\n 30008: a0 = u64 [a4 + 0x8]\n 30011: u64 [a4 + 0x60] = a0\n 30014: u64 [a4 + 0x20] = a1\n 30017: jump @1093\n      : @1101 (gas: 2)\n 30020: a1 = 0x20200\n 30025: jump @799\n      : @1102 (gas: 2)\n 30028: a1 = 0x20200\n 30033: jump @799\n      : @1103 (gas: 2)\n 30036: a1 = 0x20200\n 30041: jump @799\n      : @1104 (gas: 2)\n 30044: a1 = 0x20200\n 30049: jump @799\n      : @1105 (gas: 2)\n 30052: a1 = 0x20200\n 30057: jump @799\n      : @1106 (gas: 2)\n 30060: a1 = 0x20200\n 30065: jump @799\n      : @1107 (gas: 2)\n 30068: a1 = 0x20200\n 30073: jump @799\n      : @1108 (gas: 2)\n 30076: a1 = 0x20200\n 30081: jump @799\n      : @1109 (gas: 2)\n 30084: a1 = 0x20200\n 30089: jump @799\n      : @1110 (gas: 2)\n 30092: a1 = 0x20200\n 30097: jump @799\n      : @1111 (gas: 7)\n 30100: u64 [a2 + 440] = 0\n 30104: u64 [a2 + 432] = 0\n 30108: u64 [a2 + 424] = 0\n 30112: t0 = 0x422\n 30116: a0 = 0x4e487b7100000000\n 30126: a1 = 0x2000\n 30130: fallthrough\n      : @1112 [@dyn 529] (gas: 5)\n 30131: i32 a1 = a1 + 0x3a0\n 30135: a1 = a1 + s1\n 30138: u64 [a2 + 0x1c0] = a0\n 30142: a0 = 0\n 30144: ra = 1060, jump @9\n      : @1113 [@dyn 530] (gas: 3)\n 30150: t0 = 0x426\n 30154: a1 = s1 + 0x21f8\n 30158: fallthrough\n      : @1114 [@dyn 531] (gas: 8)\n 30159: u64 [a1 + 416] = 0\n 30163: u64 [a1 + 408] = 0\n 30167: u64 [a1 + 392] = 0x11\n 30172: a2 = a1\n 30174: a0 = 0x4\n 30177: a1 = s1 + 0x2380\n 30181: u64 [a2 + 400] = 0\n 30185: ra = 1064, jump @9\n      : @1115 [@dyn 532] (gas: 2)\n 30191: a1 = i32 [0x201f0]\n 30196: jump @1117 if a1 >u 63\n      : @1116 (gas: 3)\n 30200: u32 [0x201f0] = 0x40\n 30206: a1 = 0x20200\n 30211: jump @1181\n      : @1117 (gas: 2)\n 30214: a1 = 0x20200\n 30219: jump @1181\n      : @1118 (gas: 2)\n 30222: a1 = 0x20200\n 30227: jump @799\n      : @1119 (gas: 2)\n 30230: a1 = 0x20200\n 30235: jump @799\n      : @1120 (gas: 2)\n 30238: a1 = 0x20200\n 30243: jump @799\n      : @1121 (gas: 2)\n 30246: a1 = 0x20200\n 30251: jump @799\n      : @1122 (gas: 2)\n 30254: a1 = 0x20200\n 30259: jump @799\n      : @1123 (gas: 2)\n 30262: a1 = 0x20200\n 30267: jump @799\n      : @1124 (gas: 2)\n 30270: a1 = 0x20200\n 30275: jump @799\n      : @1125 (gas: 1)\n 30278: jump @1182 if a0 != 2439880275\n      : @1126 (gas: 11)\n 30286: a0 = s1 + 0x31f8\n 30290: u64 [a0 + 64] = 0\n 30293: u64 [a0 + 56] = 0\n 30296: u64 [a0 + 48] = 0\n 30299: u64 [a0 + 40] = 0\n 30302: a0 = s1 + 0x3000\n 30306: i32 a0 = a0 + 0x220\n 30310: ra = 0x42a\n 30314: ecalli 16 // 'value_transferred'\n 30316: a3 = s1 + 0x31f8\n 30320: jump @1128\n      : @1127 [@dyn 533] (gas: 2)\n 30322: a3 = s1 + 0x31f8\n 30326: fallthrough\n      : @1128 (gas: 8)\n 30327: a0 = u64 [a3 + 0x38]\n 30330: a1 = u64 [a3 + 0x40]\n 30333: a2 = u64 [a3 + 0x30]\n 30336: a3 = u64 [a3 + 0x28]\n 30339: a1 = a1 | a2\n 30342: a0 = a0 | a3\n 30345: a0 = a0 | a1\n 30348: jump @1198 if a0 == 0\n      : @1129 (gas: 2)\n 30352: a1 = 0x20200\n 30357: jump @799\n      : @1130 (gas: 2)\n 30360: a1 = 0x20200\n 30365: jump @799\n      : @1131 (gas: 2)\n 30368: a1 = 0x20200\n 30373: jump @799\n      : @1132 (gas: 2)\n 30376: a1 = 0x20200\n 30381: jump @799\n      : @1133 (gas: 2)\n 30384: a1 = 0x20200\n 30389: jump @799\n      : @1134 (gas: 2)\n 30392: a1 = 0x20200\n 30397: jump @799\n      : @1135 (gas: 2)\n 30400: a1 = 0x20200\n 30405: jump @799\n      : @1136 (gas: 2)\n 30408: a1 = 0x20200\n 30413: jump @799\n      : @1137 (gas: 6)\n 30416: a1 = 0x20200\n 30421: i32 a1 = a1 + 0\n 30423: a0 = 0x1\n 30426: ecalli 13 // 'seal_return'\n 30428: a1 = 0x20200\n 30433: jump @799\n      : @1138 (gas: 2)\n 30436: a1 = 0x20200\n 30441: jump @799\n      : @1139 (gas: 2)\n 30444: a1 = 0x20200\n 30449: jump @799\n      : @1140 (gas: 2)\n 30452: a1 = 0x20200\n 30457: jump @799\n      : @1141 (gas: 2)\n 30460: a1 = 0x20200\n 30465: jump @799\n      : @1142 (gas: 2)\n 30468: a1 = 0x20200\n 30473: jump @799\n      : @1143 (gas: 2)\n 30476: a1 = 0x20200\n 30481: jump @799\n      : @1144 (gas: 2)\n 30484: a1 = 0x20200\n 30489: jump @799\n      : @1145 (gas: 2)\n 30492: a1 = 0x20200\n 30497: jump @799\n      : @1146 (gas: 2)\n 30500: a1 = 0x20200\n 30505: jump @799\n      : @1147 (gas: 2)\n 30508: a1 = 0x20200\n 30513: jump @799\n      : @1148 (gas: 3)\n 30516: u64 [s1 + 624] = 0x20\n 30521: ecalli 12 // 'return_data_size'\n 30523: fallthrough\n      : @1149 (gas: 1)\n 30524: jump @1151 if a0 >u 31\n      : @1150 (gas: 3)\n 30528: ecalli 12 // 'return_data_size'\n 30530: u64 [s1 + 0x270] = a0\n 30534: fallthrough\n      : @1151 (gas: 19)\n 30535: a2 = s1 + 0x21f8\n 30539: a0 = u64 [s1 + 0x270]\n 30543: a4 = a2 + 0x700\n 30547: u64 [a4 + 0x48] = a0\n 30550: a0 = u64 [s1 + 0x278]\n 30554: u64 [a4 + 0x68] = a0\n 30557: u64 [s1 + 616] = 0\n 30561: u64 [a2 + 1872] = 0\n 30565: a0 = u64 [s1 + 0x248]\n 30569: u64 [a4 + 0x70] = a0\n 30572: u64 [a2 + 1880] = 0\n 30576: a0 = u64 [s1 + 0x240]\n 30580: u64 [a4 + 0x78] = a0\n 30583: u64 [a2 + 1888] = 0\n 30587: a0 = s1 + 0x2960\n 30591: a1 = s1 + 0x2940\n 30595: a3 = u64 [s1 + 0x238]\n 30599: u64 [a4 + 0x80] = a3\n 30603: ra = 1068, jump @1452\n      : @1152 [@dyn 534] (gas: 34)\n 30609: t0 = u64 [s1 + 0x278]\n 30613: a0 = u64 [s1 + 0x270]\n 30617: ra = a0 + t0\n 30620: a1 = ra <u a0\n 30623: t1 = u64 [s1 + 0x248]\n 30627: a5 = u64 [s1 + 0x268]\n 30631: a2 = a5 + t1\n 30634: a2 = a2 + a1\n 30637: a3 = a2 ^ a5\n 30640: a4 = a2 <u a5\n 30643: a4 = a1 if a3 == 0\n 30646: a3 = u64 [s1 + 0x240]\n 30650: a1 = a5 + a3\n 30653: a4 = a4 + a1\n 30656: t2 = a4 <u a1\n 30659: a1 = a1 <u a5\n 30662: a0 = u64 [s1 + 0x238]\n 30666: a5 = a5 + a0\n 30669: a1 = a1 + a5\n 30672: t2 = t2 + a1\n 30675: a1 = s1 + 0x21f8\n 30679: u64 [a1 + 0x6f8] = a4\n 30683: u64 [a1 + 0x6f0] = a2\n 30687: u64 [a1 + 0x6e8] = ra\n 30691: u64 [a1 + 0x720] = a0\n 30695: u64 [a1 + 0x718] = a3\n 30699: u64 [a1 + 0x710] = t1\n 30703: u64 [a1 + 0x708] = t0\n 30707: a4 = a1\n 30709: a0 = s1 + 0x2920\n 30713: a1 = s1 + 0x2900\n 30717: a2 = s1 + 0x28e0\n 30721: u64 [a4 + 0x700] = t2\n 30725: ra = 1070, jump @1477\n      : @1153 [@dyn 535] (gas: 6)\n 30731: a1 = 0x20200\n 30736: i32 a1 = a1 + 0\n 30738: a0 = 0\n 30740: a2 = 0\n 30742: ecalli 13 // 'seal_return'\n 30744: jump @800\n      : @1154 (gas: 9)\n 30747: a0 = s1 + 0x21f8\n 30751: u64 [a0 + 664] = 0\n 30755: u64 [a0 + 656] = 0\n 30759: u64 [a0 + 648] = 0\n 30763: a2 = a0\n 30765: t0 = 0x430\n 30769: a0 = 0x4e487b7100000000\n 30779: a1 = 0x2000\n 30783: fallthrough\n      : @1155 [@dyn 536] (gas: 5)\n 30784: i32 a1 = a1 + 0x480\n 30788: a1 = a1 + s1\n 30791: u64 [a2 + 0x2a0] = a0\n 30795: a0 = 0\n 30797: ra = 1074, jump @9\n      : @1156 [@dyn 537] (gas: 3)\n 30803: t0 = 0x434\n 30807: a1 = s1 + 0x21f8\n 30811: fallthrough\n      : @1157 [@dyn 538] (gas: 8)\n 30812: u64 [a1 + 640] = 0\n 30816: u64 [a1 + 632] = 0\n 30820: u64 [a1 + 616] = 0x11\n 30825: a2 = a1\n 30827: a0 = 0x4\n 30830: a1 = s1 + 0x2460\n 30834: u64 [a2 + 624] = 0\n 30838: ra = 1078, jump @9\n      : @1158 [@dyn 539] (gas: 2)\n 30844: a1 = i32 [0x201f0]\n 30849: jump @1160 if a1 >u 63\n      : @1159 (gas: 3)\n 30853: u32 [0x201f0] = 0x40\n 30859: a1 = 0x20200\n 30864: jump @1181\n      : @1160 (gas: 2)\n 30867: a1 = 0x20200\n 30872: jump @1181\n      : @1161 (gas: 7)\n 30875: u64 [t2 + 728] = 0\n 30879: u64 [t2 + 720] = 0\n 30883: u64 [t2 + 712] = 0\n 30887: t0 = 0x438\n 30891: a0 = 0x4e487b7100000000\n 30901: a1 = 0x2000\n 30905: fallthrough\n      : @1162 [@dyn 540] (gas: 5)\n 30906: i32 a1 = a1 + 0x4c0\n 30910: a1 = a1 + s1\n 30913: u64 [t2 + 0x2e0] = a0\n 30917: a0 = 0\n 30919: ra = 1082, jump @9\n      : @1163 [@dyn 541] (gas: 3)\n 30925: t0 = 0x43c\n 30929: a1 = s1 + 0x21f8\n 30933: fallthrough\n      : @1164 [@dyn 542] (gas: 8)\n 30934: u64 [a1 + 704] = 0\n 30938: u64 [a1 + 696] = 0\n 30942: u64 [a1 + 680] = 0x11\n 30947: a2 = a1\n 30949: a0 = 0x4\n 30952: a1 = s1 + 0x24a0\n 30956: u64 [a2 + 688] = 0\n 30960: ra = 1086, jump @9\n      : @1165 [@dyn 543] (gas: 2)\n 30966: a1 = i32 [0x201f0]\n 30971: jump @1167 if a1 >u 63\n      : @1166 (gas: 3)\n 30975: u32 [0x201f0] = 0x40\n 30981: a1 = 0x20200\n 30986: jump @1181\n      : @1167 (gas: 2)\n 30989: a1 = 0x20200\n 30994: jump @1181\n      : @1168 (gas: 9)\n 30997: a0 = s1 + 0x21f8\n 31001: u64 [a0 + 792] = 0\n 31005: u64 [a0 + 784] = 0\n 31009: u64 [a0 + 776] = 0\n 31013: a2 = a0\n 31015: t0 = 0x440\n 31019: a0 = 0x4e487b7100000000\n 31029: a1 = 0x2000\n 31033: fallthrough\n      : @1169 [@dyn 544] (gas: 5)\n 31034: i32 a1 = a1 + 0x500\n 31038: a1 = a1 + s1\n 31041: u64 [a2 + 0x320] = a0\n 31045: a0 = 0\n 31047: ra = 1090, jump @9\n      : @1170 [@dyn 545] (gas: 3)\n 31053: t0 = 0x444\n 31057: a1 = s1 + 0x21f8\n 31061: fallthrough\n      : @1171 [@dyn 546] (gas: 8)\n 31062: u64 [a1 + 768] = 0\n 31066: u64 [a1 + 760] = 0\n 31070: u64 [a1 + 744] = 0x12\n 31075: a2 = a1\n 31077: a0 = 0x4\n 31080: a1 = s1 + 0x24e0\n 31084: u64 [a2 + 752] = 0\n 31088: ra = 1094, jump @9\n      : @1172 [@dyn 547] (gas: 2)\n 31094: a1 = i32 [0x201f0]\n 31099: jump @1174 if a1 >u 63\n      : @1173 (gas: 3)\n 31103: u32 [0x201f0] = 0x40\n 31109: a1 = 0x20200\n 31114: jump @1181\n      : @1174 (gas: 2)\n 31117: a1 = 0x20200\n 31122: jump @1181\n      : @1175 (gas: 9)\n 31124: a0 = s1 + 0x11f8\n 31128: u64 [a0 + 1912] = 0\n 31132: u64 [a0 + 1904] = 0\n 31136: u64 [a0 + 1896] = 0\n 31140: a2 = a0\n 31142: t0 = 0x448\n 31146: a0 = 0x4e487b7100000000\n 31156: a1 = 0x2000\n 31160: fallthrough\n      : @1176 [@dyn 548] (gas: 5)\n 31161: i32 a1 = a1 + 0xfffffffffffff960\n 31165: a1 = a1 + s1\n 31168: u64 [a2 + 0x780] = a0\n 31172: a0 = 0\n 31174: ra = 1098, jump @9\n      : @1177 [@dyn 549] (gas: 9)\n 31180: a1 = s1 + 0x11f8\n 31184: u64 [a1 + 1888] = 0\n 31188: u64 [a1 + 1880] = 0\n 31192: u64 [a1 + 1864] = 0x41\n 31197: a2 = a1\n 31199: a0 = 0x4\n 31202: a1 = s1 + 0x1940\n 31206: u64 [a2 + 1872] = 0\n 31210: ra = 1100, jump @9\n      : @1178 [@dyn 550] (gas: 2)\n 31216: a1 = i32 [0x201f0]\n 31221: jump @1180 if a1 >u 63\n      : @1179 (gas: 3)\n 31225: u32 [0x201f0] = 0x40\n 31231: a1 = 0x20200\n 31236: jump @1181\n      : @1180 (gas: 2)\n 31238: a1 = 0x20200\n 31243: fallthrough\n      : @1181 (gas: 6)\n 31244: i32 a1 = a1 + 0\n 31246: a0 = 0x1\n 31249: a2 = 0x24\n 31252: ra = 0x44e\n 31256: ecalli 13 // 'seal_return'\n 31258: fallthrough\n      : @1182 [@dyn 551] (gas: 1)\n 31259: jump @1193 if a0 != 3578229791\n      : @1183 (gas: 9)\n 31267: a0 = s1 + 0x31f8\n 31271: u64 [a0 + 544] = 0\n 31275: u64 [a0 + 536] = 0\n 31279: u64 [a0 + 528] = 0\n 31283: u64 [a0 + 520] = 0\n 31287: a0 = s1 + 0x3000\n 31291: i32 a0 = a0 + 0x400\n 31295: ecalli 16 // 'value_transferred'\n 31297: fallthrough\n      : @1184 (gas: 10)\n 31298: a3 = s1 + 0x31f8\n 31302: a4 = a3 + 0x200\n 31306: a0 = u64 [a4 + 0x18]\n 31309: a1 = u64 [a4 + 0x20]\n 31312: a2 = u64 [a4 + 0x10]\n 31315: a3 = u64 [a4 + 0x8]\n 31318: a1 = a1 | a2\n 31321: a0 = a0 | a3\n 31324: a0 = a0 | a1\n 31327: jump @1206 if a0 == 0\n      : @1185 (gas: 2)\n 31331: a1 = 0x20200\n 31336: jump @799\n      : @1186 (gas: 4)\n 31339: a1 = i32 [s1 + 0x248]\n 31343: a0 = 0\n 31345: ecalli 13 // 'seal_return'\n 31347: jump @603\n      : @1187 (gas: 3)\n 31350: u64 [s1 + 624] = 0x20\n 31355: ecalli 12 // 'return_data_size'\n 31357: fallthrough\n      : @1188 (gas: 1)\n 31358: jump @1190 if a0 >u 31\n      : @1189 (gas: 3)\n 31362: ecalli 12 // 'return_data_size'\n 31364: u64 [s1 + 0x270] = a0\n 31368: fallthrough\n      : @1190 (gas: 19)\n 31369: a0 = s1 + 0x29f8\n 31373: a1 = u64 [s1 + 0x270]\n 31377: u64 [a0 + 0x48] = a1\n 31380: a1 = u64 [s1 + 0x278]\n 31384: u64 [a0 + 0x68] = a1\n 31387: u64 [s1 + 616] = 0\n 31391: u64 [a0 + 80] = 0\n 31394: a1 = u64 [s1 + 0x260]\n 31398: u64 [a0 + 0x70] = a1\n 31401: u64 [a0 + 88] = 0\n 31404: a1 = u64 [s1 + 0x258]\n 31408: u64 [a0 + 0x78] = a1\n 31411: u64 [a0 + 96] = 0\n 31414: a2 = a0\n 31416: a0 = s1 + 0x2a60\n 31420: a1 = s1 + 0x2a40\n 31424: a3 = u64 [s1 + 0x250]\n 31428: u64 [a2 + 0x80] = a3\n 31432: ra = 1104, jump @1452\n      : @1191 [@dyn 552] (gas: 36)\n 31438: t0 = u64 [s1 + 0x278]\n 31442: a1 = u64 [s1 + 0x270]\n 31446: a0 = a1 + t0\n 31449: a1 = a0 <u a1\n 31452: t1 = u64 [s1 + 0x260]\n 31456: a5 = u64 [s1 + 0x268]\n 31460: a2 = a5 + t1\n 31463: a2 = a2 + a1\n 31466: a3 = a2 ^ a5\n 31469: a4 = a2 <u a5\n 31472: a4 = a1 if a3 == 0\n 31475: ra = u64 [s1 + 0x258]\n 31479: a1 = a5 + ra\n 31482: a4 = a4 + a1\n 31485: t2 = a4 <u a1\n 31488: a1 = a1 <u a5\n 31491: a3 = u64 [s1 + 0x250]\n 31495: a5 = a5 + a3\n 31498: a1 = a1 + a5\n 31501: t2 = t2 + a1\n 31504: a1 = s1 + 0x21f8\n 31508: a5 = a1 + 0x700\n 31512: u64 [a5 + 0xf8] = a4\n 31516: u64 [a5 + 0xf0] = a2\n 31520: u64 [a5 + 0xe8] = a0\n 31524: a0 = s1 + 0x29f8\n 31528: u64 [a0 + 0x20] = a3\n 31531: u64 [a0 + 0x18] = ra\n 31534: u64 [a0 + 0x10] = t1\n 31537: u64 [a0 + 0x8] = t0\n 31540: a4 = a0\n 31542: a0 = s1 + 0x2a20\n 31546: a1 = s1 + 0x2a00\n 31550: a2 = s1 + 0x29e0\n 31554: u64 [a4] = t2\n 31556: ra = 1106, jump @1477\n      : @1192 [@dyn 553] (gas: 6)\n 31562: a1 = 0x20200\n 31567: i32 a1 = a1 + 0\n 31569: a0 = 0\n 31571: a2 = 0\n 31573: ecalli 13 // 'seal_return'\n 31575: jump @800\n      : @1193 (gas: 1)\n 31578: jump @1201 if a0 != 33540519\n      : @1194 (gas: 10)\n 31585: a0 = s1 + 0x29f8\n 31589: u64 [a0 + 416] = 0\n 31593: u64 [a0 + 408] = 0\n 31597: u64 [a0 + 400] = 0\n 31601: u64 [a0 + 392] = 0\n 31605: a0 = s1 + 0x3000\n 31609: i32 a0 = a0 + 0xfffffffffffffb80\n 31613: ra = 0x454\n 31617: ecalli 16 // 'value_transferred'\n 31619: fallthrough\n      : @1195 [@dyn 554] (gas: 3)\n 31620: a3 = s1 + 0x29f8\n 31624: a4 = a3 + 0x100\n 31628: t0 = 1110, jump @1807\n      : @1196 [@dyn 555] (gas: 1)\n 31634: jump @1224 if a0 == 0\n      : @1197 (gas: 2)\n 31638: a1 = 0x20200\n 31643: jump @799\n      : @1198 (gas: 1)\n 31646: t0 = 1112, jump @1808\n      : @1199 [@dyn 556] (gas: 1)\n 31652: jump @1208 if a1 <u a0\n      : @1200 (gas: 2)\n 31655: a1 = 0x20200\n 31660: jump @799\n      : @1201 (gas: 1)\n 31663: jump @1218 if a0 != 292064369\n      : @1202 (gas: 10)\n 31671: a0 = s1 + 0x29f8\n 31675: u64 [a0 + 480] = 0\n 31679: u64 [a0 + 472] = 0\n 31683: u64 [a0 + 464] = 0\n 31687: u64 [a0 + 456] = 0\n 31691: a0 = s1 + 0x3000\n 31695: i32 a0 = a0 + 0xfffffffffffffbc0\n 31699: ra = 0x45a\n 31703: ecalli 16 // 'value_transferred'\n 31705: fallthrough\n      : @1203 [@dyn 557] (gas: 3)\n 31706: a3 = s1 + 0x29f8\n 31710: a4 = a3 + 0x100\n 31714: t0 = 1116, jump @1827\n      : @1204 [@dyn 558] (gas: 1)\n 31720: jump @1239 if a0 == 0\n      : @1205 (gas: 2)\n 31724: a1 = 0x20200\n 31729: jump @799\n      : @1206 (gas: 3)\n 31732: a0 = u64 [s1 + 0x278]\n 31736: a0 = i32 [a0]\n 31738: jump @1227 if a0 >u 67\n      : @1207 (gas: 2)\n 31743: a1 = 0x20200\n 31748: jump @799\n      : @1208 (gas: 4)\n 31751: a0 = s1 + 0x21c0\n 31755: ra = 0x45e\n 31759: t0 = 0x516\n 31763: jump @1793\n      : @1209 [@dyn 559] (gas: 13)\n 31766: a0 = s1 + 0x19f8\n 31770: a2 = a0 + 0x700\n 31774: a1 = u64 [a2 + 0xc8]\n 31778: u64 [s1 + 0x278] = a1\n 31782: a1 = u64 [a2 + 0xd0]\n 31786: u64 [s1 + 0x270] = a1\n 31790: a1 = u64 [a2 + 0xd8]\n 31794: u64 [s1 + 0x268] = a1\n 31798: a1 = u64 [a2 + 0xe0]\n 31802: u64 [s1 + 0x260] = a1\n 31806: ra = 0x460\n 31810: t0 = 0x5ca\n 31814: jump @1810\n      : @1210 [@dyn 560] (gas: 17)\n 31817: a0 = s1 + 0x19f8\n 31821: a4 = s1 + 0x200\n 31825: a1 = u64 [a4 + 0x60]\n 31828: a2 = a0 + 0x700\n 31832: u64 [a2 + 0xa0] = a1\n 31836: a1 = u64 [a4 + 0x68]\n 31839: u64 [a2 + 0x98] = a1\n 31843: a1 = u64 [a4 + 0x70]\n 31846: u64 [a2 + 0x90] = a1\n 31850: a3 = a0\n 31852: a0 = s1 + 0x21a0\n 31856: a1 = s1 + 0x2180\n 31860: a2 = u64 [a4 + 0x78]\n 31863: u64 [a3 + 0x788] = a2\n 31867: ra = 0x462\n 31871: t0 = 0x6a8\n 31875: jump @1815\n      : @1211 [@dyn 561] (gas: 6)\n 31878: a1 = 0x20200\n 31883: i32 a1 = a1 + 0\n 31885: a0 = 0\n 31887: a2 = 0\n 31889: ecalli 13 // 'seal_return'\n 31891: jump @800\n      : @1212 (gas: 9)\n 31894: a0 = s1 + 0x11f8\n 31898: u64 [a0 + 1976] = 0\n 31902: u64 [a0 + 1968] = 0\n 31906: u64 [a0 + 1960] = 0\n 31910: a2 = a0\n 31912: t0 = 0x464\n 31916: a0 = 0x4e487b7100000000\n 31926: a1 = 0x2000\n 31930: fallthrough\n      : @1213 [@dyn 562] (gas: 5)\n 31931: i32 a1 = a1 + 0xfffffffffffff9a0\n 31935: a1 = a1 + s1\n 31938: u64 [a2 + 0x7c0] = a0\n 31942: a0 = 0\n 31944: ra = 1126, jump @9\n      : @1214 [@dyn 563] (gas: 9)\n 31950: a1 = s1 + 0x11f8\n 31954: u64 [a1 + 1952] = 0\n 31958: u64 [a1 + 1944] = 0\n 31962: u64 [a1 + 1928] = 0x41\n 31967: a2 = a1\n 31969: a0 = 0x4\n 31972: a1 = s1 + 0x1980\n 31976: u64 [a2 + 1936] = 0\n 31980: ra = 1128, jump @9\n      : @1215 [@dyn 564] (gas: 2)\n 31986: a1 = i32 [0x201f0]\n 31991: jump @1217 if a1 >u 63\n      : @1216 (gas: 3)\n 31995: u32 [0x201f0] = 0x40\n 32001: a1 = 0x20200\n 32006: jump @1181\n      : @1217 (gas: 2)\n 32009: a1 = 0x20200\n 32014: jump @1181\n      : @1218 (gas: 1)\n 32017: jump @1233 if a0 != 791671133\n      : @1219 (gas: 11)\n 32025: a0 = s1 + 0x29f8\n 32029: u64 [a0 + 1184] = 0\n 32033: u64 [a0 + 1176] = 0\n 32037: u64 [a0 + 1168] = 0\n 32041: u64 [a0 + 1160] = 0\n 32045: a0 = s1 + 0x3000\n 32049: i32 a0 = a0 + 0xfffffffffffffe80\n 32053: ra = 0x46a\n 32057: ecalli 16 // 'value_transferred'\n 32059: t0 = 0x46c\n 32063: jump @1788\n      : @1220 [@dyn 565] (gas: 1)\n 32066: t0 = 1132, jump @1788\n      : @1221 [@dyn 566] (gas: 1)\n 32072: t0 = 1134, jump @1807\n      : @1222 [@dyn 567] (gas: 1)\n 32078: jump @1254 if a0 == 0\n      : @1223 (gas: 2)\n 32082: a1 = 0x20200\n 32087: jump @799\n      : @1224 (gas: 1)\n 32090: t0 = 1136, jump @1808\n      : @1225 [@dyn 568] (gas: 1)\n 32096: jump @1241 if a1 <u a0\n      : @1226 (gas: 2)\n 32100: a1 = 0x20200\n 32105: jump @799\n      : @1227 (gas: 18)\n 32108: a0 = s1 + 0x3000\n 32112: i32 a0 = a0 + 0x420\n 32116: a1 = 0x4\n 32119: ecalli 2 // 'call_data_load'\n 32121: a0 = s1 + 0x31f8\n 32125: a2 = a0 + 0x200\n 32129: a1 = u64 [a2 + 0x28]\n 32132: u64 [s1 + 0x278] = a1\n 32136: a1 = u64 [a2 + 0x30]\n 32139: u64 [s1 + 0x270] = a1\n 32143: a1 = u64 [a2 + 0x38]\n 32146: u64 [s1 + 0x268] = a1\n 32150: a0 = u64 [a2 + 0x40]\n 32153: u64 [s1 + 0x260] = a0\n 32157: a0 = s1 + 0x28c0\n 32161: ra = 0x472\n 32165: t0 = 0x50c\n 32169: jump @1793\n      : @1228 [@dyn 569] (gas: 3)\n 32172: t0 = 0x474\n 32176: a1 = s1 + 0x21f8\n 32180: fallthrough\n      : @1229 [@dyn 570] (gas: 21)\n 32181: a2 = a1 + 0x600\n 32185: a0 = u64 [a2 + 0xc8]\n 32189: u64 [s1 + 0x258] = a0\n 32193: a0 = u64 [a2 + 0xd0]\n 32197: u64 [s1 + 0x250] = a0\n 32201: a0 = u64 [a2 + 0xd8]\n 32205: u64 [s1 + 0x248] = a0\n 32209: a0 = u64 [a2 + 0xe0]\n 32213: u64 [s1 + 0x240] = a0\n 32217: a0 = u64 [s1 + 0x260]\n 32221: u64 [a2 + 0xa0] = a0\n 32225: a0 = u64 [s1 + 0x268]\n 32229: u64 [a2 + 0x98] = a0\n 32233: a0 = u64 [s1 + 0x270]\n 32237: u64 [a2 + 0x90] = a0\n 32241: a3 = a1\n 32243: a0 = s1 + 0x28a0\n 32247: a1 = s1 + 0x2880\n 32251: a2 = u64 [s1 + 0x278]\n 32255: u64 [a3 + 0x688] = a2\n 32259: ra = 1142, jump @1461\n      : @1230 [@dyn 571] (gas: 14)\n 32265: a4 = s1 + 0x21f8\n 32269: a5 = a4 + 0x600\n 32273: a1 = u64 [a5 + 0xa8]\n 32277: a0 = u64 [a5 + 0xb0]\n 32281: a2 = u64 [a5 + 0xb8]\n 32285: a3 = u64 [a5 + 0xc0]\n 32289: u64 [a5 + 0x80] = a3\n 32293: u64 [a5 + 0x78] = a2\n 32296: u64 [a5 + 0x70] = a0\n 32299: a0 = s1 + 0x2860\n 32303: u64 [a5 + 0x68] = a1\n 32306: ra = 0x478\n 32310: t0 = 0x5f8\n 32314: jump @1810\n      : @1231 [@dyn 572] (gas: 26)\n 32317: a0 = s1 + 0x21f8\n 32321: a5 = s1 + 0x200\n 32325: a1 = u64 [a5 + 0x40]\n 32328: a2 = a0 + 0x600\n 32332: u64 [a2 + 0x20] = a1\n 32335: a1 = u64 [a5 + 0x48]\n 32338: u64 [a2 + 0x18] = a1\n 32341: a1 = u64 [a5 + 0x50]\n 32344: u64 [a2 + 0x10] = a1\n 32347: a1 = u64 [a5 + 0x58]\n 32350: u64 [a2 + 0x8] = a1\n 32353: a1 = u64 [a5 + 0x60]\n 32356: u64 [a2 + 0x40] = a1\n 32359: a1 = u64 [a5 + 0x68]\n 32362: u64 [a2 + 0x38] = a1\n 32365: a1 = u64 [a5 + 0x70]\n 32368: u64 [a2 + 0x30] = a1\n 32371: a4 = a0\n 32373: a0 = s1 + 0x2840\n 32377: a1 = s1 + 0x2820\n 32381: a2 = s1 + 0x2800\n 32385: a3 = u64 [a5 + 0x78]\n 32388: u64 [a4 + 0x628] = a3\n 32392: ra = 0x47a\n 32396: t0 = 0x6ea\n 32400: jump @1816\n      : @1232 [@dyn 573] (gas: 6)\n 32403: a1 = 0x20200\n 32408: i32 a1 = a1 + 0\n 32410: a0 = 0\n 32412: a2 = 0\n 32414: ecalli 13 // 'seal_return'\n 32416: jump @800\n      : @1233 (gas: 1)\n 32419: jump @1256 if a0 != 911613028\n      : @1234 (gas: 11)\n 32427: a0 = s1 + 0x29f8\n 32431: u64 [a0 + 1248] = 0\n 32435: u64 [a0 + 1240] = 0\n 32439: u64 [a0 + 1232] = 0\n 32443: u64 [a0 + 1224] = 0\n 32447: a0 = s1 + 0x3000\n 32451: i32 a0 = a0 + 0xfffffffffffffec0\n 32455: ra = 0x47c\n 32459: ecalli 16 // 'value_transferred'\n 32461: t0 = 0x47e\n 32465: jump @1788\n      : @1235 [@dyn 574] (gas: 1)\n 32468: t0 = 1150, jump @1788\n      : @1236 [@dyn 575] (gas: 1)\n 32474: t0 = 1152, jump @1827\n      : @1237 [@dyn 576] (gas: 1)\n 32480: jump @1262 if a0 == 0\n      : @1238 (gas: 2)\n 32484: a1 = 0x20200\n 32489: jump @799\n      : @1239 (gas: 3)\n 32492: a0 = u64 [s1 + 0x278]\n 32496: a0 = i32 [a0]\n 32498: jump @1265 if a0 >u 67\n      : @1240 (gas: 2)\n 32503: a1 = 0x20200\n 32508: jump @799\n      : @1241 (gas: 5)\n 32511: a0 = s1 + 0x3000\n 32515: i32 a0 = a0 + 0xfffffffffffffba0\n 32519: a1 = 0x4\n 32522: ecalli 2 // 'call_data_load'\n 32524: fallthrough\n      : @1242 (gas: 12)\n 32525: a1 = s1 + 0x29f8\n 32529: a4 = a1 + 0x100\n 32533: a0 = u64 [a4 + 0xc0]\n 32537: a2 = u64 [a4 + 0xb8]\n 32541: a3 = u64 [a4 + 0xa8]\n 32545: a1 = u64 [a4 + 0xb0]\n 32549: a4 = a0 << 0x20\n 32552: a4 = a4 >> 0x20\n 32555: a2 = a2 | a3\n 32558: a4 = a4 | a1\n 32561: a4 = a4 | a2\n 32564: jump @1268 if a4 == 0\n      : @1243 (gas: 2)\n 32568: a1 = 0x20200\n 32573: jump @799\n      : @1244 (gas: 6)\n 32576: a1 = 0x20200\n 32581: i32 a1 = a1 + 0\n 32583: a0 = 0x1\n 32586: ecalli 13 // 'seal_return'\n 32588: a1 = 0x20200\n 32593: jump @799\n      : @1245 (gas: 2)\n 32596: a1 = 0x20200\n 32601: jump @799\n      : @1246 (gas: 13)\n 32604: a0 = s1 + 0x19f8\n 32608: a4 = s1 + 0x100\n 32612: a1 = u64 [a4 + 0x88]\n 32616: u64 [a0 + 0x68] = a1\n 32619: a1 = u64 [a4 + 0x90]\n 32623: u64 [a0 + 0x70] = a1\n 32626: a1 = u64 [a4 + 0x98]\n 32630: u64 [a0 + 0x78] = a1\n 32633: a1 = s1 + 0x1a60\n 32637: a2 = u64 [a4 + 0xa0]\n 32641: u64 [a0 + 0x80] = a2\n 32645: a0 = a3\n 32647: ra = 1154, jump @9\n      : @1247 [@dyn 577] (gas: 4)\n 32653: a1 = 0x20\n 32656: a0 = u64 [s1 + 0x260]\n 32660: ra = 0x22c\n 32664: jump @18\n      : @1248 (gas: 4)\n 32667: a0 = s1 + 0x7ff\n 32671: a0 = a0 + 0x361\n 32675: a1 = u64 [s1 + 0x1b8]\n 32679: ra = 1156, jump @7\n      : @1249 [@dyn 578] (gas: 17)\n 32685: a3 = s1 + 0x7ff\n 32689: a3 = a3 + 0x1f9\n 32693: a5 = a3 + 0x100\n 32697: a0 = u64 [a5 + 0x68]\n 32700: a1 = u64 [a5 + 0x70]\n 32703: a4 = 0xffffffffffffffff\n 32706: a2 = a0 & a4\n 32709: a1 = a1 & a4\n 32712: a0 = u64 [s1 + 0x1d8]\n 32716: i32 a0 = a0 + 0x100\n 32720: u64 [a3 + 352] = 0\n 32724: u64 [a3 + 344] = 0\n 32728: u64 [a5 + 0x50] = a1\n 32731: a1 = s1 + 0x7ff\n 32735: a1 = a1 + 0x341\n 32739: u64 [a5 + 0x48] = a2\n 32742: ra = 1158, jump @9\n      : @1250 [@dyn 579] (gas: 31)\n 32748: t1 = u64 [s1 + 0x270]\n 32752: ra = u64 [s1 + 0x1d8]\n 32756: t2 = t1 <u ra\n 32759: a5 = u64 [s1 + 0x1d0]\n 32763: a1 = u64 [s1 + 0x248]\n 32767: a3 = a1 ^ a5\n 32770: a2 = a1 <u a5\n 32773: a2 = t2 if a3 == 0\n 32776: a3 = u64 [s1 + 0x1c0]\n 32780: a4 = u64 [s1 + 0x240]\n 32784: a0 = a4 - a3\n 32787: t0 = a4 <u a3\n 32790: a4 = u64 [s1 + 0x1c8]\n 32794: a3 = u64 [s1 + 0x250]\n 32798: a4 = a3 - a4\n 32801: a4 = a4 - t0\n 32804: a3 = a0 <u a2\n 32807: a4 = a4 - a3\n 32810: a3 = a0 - a2\n 32813: a2 = a1 - a5\n 32816: a2 = a2 - t2\n 32819: a0 = t1 - ra\n 32822: a2 = a2 | a4\n 32825: a4 = a0\n 32827: a0 = a0 | a3\n 32830: a0 = a0 | a2\n 32833: a1 = a2 | a3\n 32836: a0 = a0 >> 0x20\n 32839: a1 = a1 << 0x20\n 32842: a0 = a0 | a1\n 32845: jump @1252 if a0 == 0\n      : @1251 (gas: 1)\n 32848: jump @797\n      : @1252 (gas: 4)\n 32851: a0 = u64 [s1 + 0x1d8]\n 32855: a1 = a4\n 32857: u64 [s1 + 0x278] = a4\n 32861: ra = 1160, jump @18\n      : @1253 [@dyn 580] (gas: 5)\n 32867: i32 a1 = a0 + 0\n 32869: a2 = i32 [s1 + 0x278]\n 32873: a0 = 0\n 32875: ecalli 13 // 'seal_return'\n 32877: jump @603\n      : @1254 (gas: 3)\n 32880: a0 = u64 [s1 + 0x278]\n 32884: a0 = i32 [a0]\n 32886: jump @1272 if a0 >u 67\n      : @1255 (gas: 2)\n 32891: a1 = 0x20200\n 32896: jump @799\n      : @1256 (gas: 2)\n 32899: a2 = s1 + 0x29f8\n 32903: jump @1261 if a0 != 911641278\n      : @1257 (gas: 10)\n 32910: u64 [a2 + 1280] = 0\n 32914: u64 [a2 + 1272] = 0\n 32918: u64 [a2 + 1264] = 0\n 32922: u64 [a2 + 1256] = 0\n 32926: a0 = s1 + 0x3000\n 32930: i32 a0 = a0 + 0xfffffffffffffee0\n 32934: ra = 0x48a\n 32938: ecalli 16 // 'value_transferred'\n 32940: t0 = 0x48c\n 32944: jump @1788\n      : @1258 [@dyn 581] (gas: 1)\n 32947: t0 = 1164, jump @1788\n      : @1259 [@dyn 582] (gas: 8)\n 32953: a0 = u64 [a4 + 0xf8]\n 32957: a1 = u64 [a3 + 0x500]\n 32961: a2 = u64 [a4 + 0xf0]\n 32965: a3 = u64 [a4 + 0xe8]\n 32969: a1 = a1 | a2\n 32972: a0 = a0 | a3\n 32975: a0 = a0 | a1\n 32978: jump @1277 if a0 == 0\n      : @1260 (gas: 2)\n 32982: a1 = 0x20200\n 32987: jump @799\n      : @1261 (gas: 2)\n 32990: a1 = 0x20200\n 32995: jump @799\n      : @1262 (gas: 1)\n 32998: t0 = 1166, jump @1808\n      : @1263 [@dyn 583] (gas: 1)\n 33004: jump @1279 if a1 <u a0\n      : @1264 (gas: 2)\n 33008: a1 = 0x20200\n 33013: jump @799\n      : @1265 (gas: 19)\n 33016: a0 = s1 + 0x3000\n 33020: i32 a0 = a0 + 0xfffffffffffffbe0\n 33024: a1 = 0x4\n 33027: ecalli 2 // 'call_data_load'\n 33029: a1 = s1 + 0x29f8\n 33033: a0 = u64 [a1 + 0x200]\n 33037: u64 [s1 + 0x240] = a0\n 33041: a2 = a1 + 0x100\n 33045: a0 = u64 [a2 + 0xf8]\n 33049: u64 [s1 + 0x248] = a0\n 33053: a0 = u64 [a2 + 0xf0]\n 33057: u64 [s1 + 0x250] = a0\n 33061: a0 = u64 [a2 + 0xe8]\n 33065: u64 [s1 + 0x258] = a0\n 33069: a0 = s1 + 0x3000\n 33073: i32 a0 = a0 + 0xfffffffffffffc00\n 33077: a1 = 0x24\n 33080: ecalli 2 // 'call_data_load'\n 33082: fallthrough\n      : @1266 (gas: 13)\n 33083: a1 = s1 + 0x29f8\n 33087: a3 = a1 + 0x200\n 33091: a2 = u64 [a3 + 0x20]\n 33094: a0 = u64 [a3 + 0x18]\n 33097: a1 = u64 [a3 + 0x10]\n 33100: a3 = s1 + 0x200\n 33104: u64 [a3 + 0x70] = a0\n 33107: u64 [a3 + 0x68] = a2\n 33110: a0 = a0 | a2\n 33113: u64 [a3 + 0x78] = a1\n 33116: a1 = a1 <u 0x1\n 33119: a1 = 0 if a0 != 0\n 33121: jump @1283 if a1 != 0\n      : @1267 (gas: 2)\n 33125: a1 = 0x20200\n 33130: jump @799\n      : @1268 (gas: 18)\n 33133: a3 = 0x7965db0b00000000\n 33143: a3 = a3 ^ a0\n 33146: a3 = a3 | a1\n 33149: a3 = a3 | a2\n 33152: a3 = a3 <u 0x1\n 33155: a4 = 0x1ffc9a700000000\n 33165: a0 = a0 ^ a4\n 33168: a0 = a0 | a1\n 33171: a0 = a0 | a2\n 33174: a0 = a0 <u 0x1\n 33177: a0 = a0 | a3\n 33180: u64 [s1 + 664] = 0\n 33184: u64 [s1 + 656] = 0\n 33188: u64 [s1 + 0x280] = a0\n 33192: a0 = 0x80\n 33196: a1 = s1 + 0x280\n 33200: u64 [s1 + 648] = 0\n 33204: ra = 1168, jump @9\n      : @1269 [@dyn 584] (gas: 2)\n 33211: a1 = i32 [0x201f0]\n 33216: jump @1271 if a1 >u 159\n      : @1270 (gas: 4)\n 33221: u32 [0x201f0] = 0xa0\n 33228: a0 = 0x20200\n 33233: i32 a1 = a0 + 0x80\n 33237: jump @602\n      : @1271 (gas: 3)\n 33240: a0 = 0x20200\n 33245: i32 a1 = a0 + 0x80\n 33249: jump @602\n      : @1272 (gas: 18)\n 33252: a0 = s1 + 0x3000\n 33256: i32 a0 = a0 + 0xfffffffffffffea0\n 33260: a1 = 0x4\n 33263: ecalli 2 // 'call_data_load'\n 33265: a0 = s1 + 0x29f8\n 33269: a2 = a0 + 0x400\n 33273: a1 = u64 [a2 + 0xa8]\n 33277: u64 [s1 + 0x278] = a1\n 33281: a1 = u64 [a2 + 0xb0]\n 33285: u64 [s1 + 0x270] = a1\n 33289: a1 = u64 [a2 + 0xb8]\n 33293: u64 [s1 + 0x268] = a1\n 33297: a0 = u64 [a2 + 0xc0]\n 33301: u64 [s1 + 0x260] = a0\n 33305: a0 = s1 + 0x1780\n 33309: ra = 0x492\n 33313: t0 = 0x50c\n 33317: jump @1793\n      : @1273 [@dyn 585] (gas: 22)\n 33320: a1 = s1 + 0x11f8\n 33324: a2 = a1 + 0x500\n 33328: a0 = u64 [a2 + 0x88]\n 33332: u64 [s1 + 0x258] = a0\n 33336: a0 = u64 [a2 + 0x90]\n 33340: u64 [s1 + 0x250] = a0\n 33344: a0 = u64 [a2 + 0x98]\n 33348: u64 [s1 + 0x248] = a0\n 33352: a0 = u64 [a2 + 0xa0]\n 33356: u64 [s1 + 0x240] = a0\n 33360: a0 = u64 [s1 + 0x260]\n 33364: u64 [a2 + 0x60] = a0\n 33367: a0 = u64 [s1 + 0x268]\n 33371: u64 [a2 + 0x58] = a0\n 33374: a0 = u64 [s1 + 0x270]\n 33378: u64 [a2 + 0x50] = a0\n 33381: a3 = a1\n 33383: a0 = s1 + 0x1760\n 33387: a1 = s1 + 0x1740\n 33391: a2 = u64 [s1 + 0x278]\n 33395: u64 [a3 + 0x548] = a2\n 33399: ra = 1172, jump @1461\n      : @1274 [@dyn 586] (gas: 14)\n 33405: a4 = s1 + 0x11f8\n 33409: a5 = a4 + 0x500\n 33413: a1 = u64 [a5 + 0x68]\n 33416: a0 = u64 [a5 + 0x70]\n 33419: a2 = u64 [a5 + 0x78]\n 33422: a3 = u64 [a5 + 0x80]\n 33426: u64 [a5 + 0x40] = a3\n 33429: u64 [a5 + 0x38] = a2\n 33432: u64 [a5 + 0x30] = a0\n 33435: a0 = s1 + 0x1720\n 33439: u64 [a5 + 0x28] = a1\n 33442: ra = 0x496\n 33446: t0 = 0x5f8\n 33450: jump @1810\n      : @1275 [@dyn 587] (gas: 26)\n 33453: a0 = s1 + 0x11f8\n 33457: a5 = s1 + 0x200\n 33461: a1 = u64 [a5 + 0x40]\n 33464: a2 = a0 + 0x400\n 33468: u64 [a2 + 0xe0] = a1\n 33472: a1 = u64 [a5 + 0x48]\n 33475: u64 [a2 + 0xd8] = a1\n 33479: a1 = u64 [a5 + 0x50]\n 33482: u64 [a2 + 0xd0] = a1\n 33486: a1 = u64 [a5 + 0x58]\n 33489: u64 [a2 + 0xc8] = a1\n 33493: a1 = u64 [a5 + 0x60]\n 33496: u64 [a0 + 0x500] = a1\n 33500: a1 = u64 [a5 + 0x68]\n 33503: u64 [a2 + 0xf8] = a1\n 33507: a1 = u64 [a5 + 0x70]\n 33510: u64 [a2 + 0xf0] = a1\n 33514: a4 = a0\n 33516: a0 = s1 + 0x1700\n 33520: a1 = s1 + 0x16e0\n 33524: a2 = s1 + 0x16c0\n 33528: a3 = u64 [a5 + 0x78]\n 33531: u64 [a4 + 0x4e8] = a3\n 33535: ra = 0x498\n 33539: t0 = 0x666\n 33543: jump @1816\n      : @1276 [@dyn 588] (gas: 6)\n 33546: a1 = 0x20200\n 33551: i32 a1 = a1 + 0\n 33553: a0 = 0\n 33555: a2 = 0\n 33557: ecalli 13 // 'seal_return'\n 33559: jump @800\n      : @1277 (gas: 4)\n 33562: a0 = u64 [s1 + 0x278]\n 33566: a0 = i32 [a0]\n 33568: a1 = 0x43\n 33571: jump @1316 if a1 <u a0\n      : @1278 (gas: 2)\n 33575: a1 = 0x20200\n 33580: jump @799\n      : @1279 (gas: 4)\n 33583: a0 = s1 + 0x17e0\n 33587: ra = 0x49a\n 33591: t0 = 0x516\n 33595: jump @1793\n      : @1280 [@dyn 589] (gas: 13)\n 33598: a0 = s1 + 0x11f8\n 33602: a2 = a0 + 0x500\n 33606: a1 = u64 [a2 + 0xe8]\n 33610: u64 [s1 + 0x278] = a1\n 33614: a1 = u64 [a2 + 0xf0]\n 33618: u64 [s1 + 0x270] = a1\n 33622: a1 = u64 [a2 + 0xf8]\n 33626: u64 [s1 + 0x268] = a1\n 33630: a1 = u64 [a0 + 0x600]\n 33634: u64 [s1 + 0x260] = a1\n 33638: ra = 0x49c\n 33642: t0 = 0x5ca\n 33646: jump @1810\n      : @1281 [@dyn 590] (gas: 17)\n 33649: a0 = s1 + 0x11f8\n 33653: a4 = s1 + 0x200\n 33657: a1 = u64 [a4 + 0x60]\n 33660: a2 = a0 + 0x500\n 33664: u64 [a2 + 0xc0] = a1\n 33668: a1 = u64 [a4 + 0x68]\n 33671: u64 [a2 + 0xb8] = a1\n 33675: a1 = u64 [a4 + 0x70]\n 33678: u64 [a2 + 0xb0] = a1\n 33682: a3 = a0\n 33684: a0 = s1 + 0x17c0\n 33688: a1 = s1 + 0x17a0\n 33692: a2 = u64 [a4 + 0x78]\n 33695: u64 [a3 + 0x5a8] = a2\n 33699: ra = 0x49e\n 33703: t0 = 0x624\n 33707: jump @1815\n      : @1282 [@dyn 591] (gas: 6)\n 33710: a1 = 0x20200\n 33715: i32 a1 = a1 + 0\n 33717: a0 = 0\n 33719: a2 = 0\n 33721: ecalli 13 // 'seal_return'\n 33723: jump @800\n      : @1283 (gas: 14)\n 33726: a0 = s1 + 0x29f8\n 33730: a0 = u64 [a0 + 0x208]\n 33734: u64 [s1 + 0x260] = a0\n 33738: a0 = u64 [s1 + 0x258]\n 33742: u64 [s1 + 0x540] = a0\n 33746: a0 = u64 [s1 + 0x250]\n 33750: u64 [s1 + 0x548] = a0\n 33754: a0 = u64 [s1 + 0x248]\n 33758: u64 [s1 + 0x550] = a0\n 33762: a0 = s1 + 0x560\n 33766: a1 = s1 + 0x540\n 33770: a2 = u64 [s1 + 0x240]\n 33774: u64 [s1 + 0x558] = a2\n 33778: ra = 1184, jump @1373\n      : @1284 [@dyn 592] (gas: 5)\n 33784: a0 = u64 [s1 + 0x560]\n 33788: a1 = u64 [s1 + 0x578]\n 33792: a2 = u64 [s1 + 0x568]\n 33796: a3 = u64 [s1 + 0x570]\n 33800: t0 = 1186, jump @1809\n      : @1285 [@dyn 593] (gas: 10)\n 33806: i32 a3 = a3 + 0xfffffffffffff9f8\n 33810: a3 = a3 + s1\n 33813: a5 = a3 + 0x200\n 33817: u64 [a5 + 0x28] = a0\n 33820: u64 [a5 + 0x30] = a2\n 33823: u64 [a5 + 0x38] = a4\n 33826: u64 [a5 + 0x40] = a1\n 33829: a0 = s1 + 0x520\n 33833: a1 = s1 + 0x2c20\n 33837: ra = 1188, jump @11\n      : @1286 [@dyn 594] (gas: 14)\n 33844: a0 = u64 [s1 + 0x528]\n 33848: u64 [s1 + 0x238] = a0\n 33852: a0 = u64 [s1 + 0x520]\n 33856: u64 [s1 + 0x230] = a0\n 33860: a0 = u32 [s1 + 0x530]\n 33864: u64 [s1 + 0x228] = a0\n 33868: a0 = 0x30200\n 33873: u64 [s1 + 0x220] = a0\n 33877: i32 a0 = a0 + 0\n 33879: ra = 0x4a6\n 33883: ecalli 4 // 'caller'\n 33885: a2 = u64 [s1 + 0x220]\n 33889: t0 = 0x4a8\n 33893: jump @1768\n      : @1287 [@dyn 595] (gas: 2)\n 33896: a2 = u64 [s1 + 0x220]\n 33900: t0 = 1192, jump @1768\n      : @1288 [@dyn 596] (gas: 17)\n 33906: a2 = u64 [s1 + 0x228]\n 33910: a1 = a1 ^ a2\n 33913: a2 = u64 [s1 + 0x230]\n 33917: a0 = a0 ^ a2\n 33920: a0 = a0 | a1\n 33923: a1 = u64 [s1 + 0x238]\n 33927: a1 = a1 ^ a3\n 33930: a0 = a0 | a1\n 33933: a0 = a0 <u 0x1\n 33936: u64 [s1 + 1304] = 0\n 33940: u64 [s1 + 1296] = 0\n 33944: u64 [s1 + 0x500] = a0\n 33948: a0 = s1 + 0x500\n 33952: u64 [s1 + 1288] = 0\n 33956: ra = 0x4aa\n 33960: t0 = 0x52a\n 33964: jump @1806\n      : @1289 [@dyn 597] (gas: 11)\n 33967: a0 = u64 [s1 + 0x240]\n 33971: u64 [s1 + 0x4b8] = a0\n 33975: a0 = u64 [s1 + 0x248]\n 33979: u64 [s1 + 0x4b0] = a0\n 33983: a0 = u64 [s1 + 0x250]\n 33987: u64 [s1 + 0x4a8] = a0\n 33991: a0 = s1 + 0x4c0\n 33995: a1 = s1 + 0x4a0\n 33999: a2 = u64 [s1 + 0x258]\n 34003: u64 [s1 + 0x4a0] = a2\n 34007: ra = 1196, jump @1373\n      : @1290 [@dyn 598] (gas: 25)\n 34013: a0 = u64 [s1 + 0x4c0]\n 34017: u64 [s1 + 0x248] = a0\n 34021: a4 = u64 [s1 + 0x4d8]\n 34025: u64 [s1 + 0x258] = a4\n 34029: a2 = u64 [s1 + 0x4c8]\n 34033: u64 [s1 + 0x240] = a2\n 34037: a3 = u64 [s1 + 0x4d0]\n 34041: u64 [s1 + 0x250] = a3\n 34045: a0 = a0 + 0x1\n 34048: a1 = a0 <u 0x1\n 34051: a1 = a1 + a2\n 34054: a2 = a0 | a1\n 34057: a2 = a2 <u 0x1\n 34060: a2 = a2 + a3\n 34063: a3 = a2 <u a3\n 34066: a3 = a3 + a4\n 34069: a4 = s1 + 0x29f8\n 34073: a5 = a4 + 0x200\n 34077: u64 [a5 + 0x48] = a0\n 34080: u64 [a5 + 0x50] = a1\n 34083: u64 [a5 + 0x58] = a2\n 34086: u64 [a5 + 0x60] = a3\n 34089: a0 = s1 + 0x480\n 34093: a1 = s1 + 0x2c40\n 34097: ra = 1198, jump @11\n      : @1291 [@dyn 599] (gas: 10)\n 34104: a0 = u8 [s1 + 0x494]\n 34108: a0 = a0 <u 0x1\n 34111: u64 [s1 + 1144] = 0\n 34115: u64 [s1 + 1136] = 0\n 34119: u64 [s1 + 0x460] = a0\n 34123: a0 = s1 + 0x460\n 34127: u64 [s1 + 1128] = 0\n 34131: ra = 0x4b0\n 34135: t0 = 0x544\n 34139: jump @1806\n      : @1292 [@dyn 600] (gas: 38)\n 34142: a0 = u64 [s1 + 0x248]\n 34146: a3 = a0 + 0x3\n 34149: a0 = a3 <u a0\n 34152: a1 = u64 [s1 + 0x240]\n 34156: a2 = a1 + a0\n 34159: a1 = a2 <u a1\n 34162: a1 = a0 if a0 == 0\n 34165: a0 = u64 [s1 + 0x250]\n 34169: a1 = a1 + a0\n 34172: a0 = a1 <u a0\n 34175: a4 = u64 [s1 + 0x258]\n 34179: a4 = a4 + a0\n 34182: a0 = sp + 0xffffffffffffffe0\n 34185: a0 = a0 & 0xffffffffffffffe0\n 34188: u64 [s1 + 0x208] = a0\n 34192: sp = a0\n 34194: a0 = u64 [s1 + 0x268]\n 34198: u64 [s1 + 0x3f8] = a0\n 34202: a0 = u64 [s1 + 0x270]\n 34206: u64 [s1 + 0x3f0] = a0\n 34210: a0 = u64 [s1 + 0x278]\n 34214: u64 [s1 + 0x3e8] = a0\n 34218: a0 = u64 [s1 + 0x260]\n 34222: u64 [s1 + 0x3e0] = a0\n 34226: u64 [s1 + 0x210] = a4\n 34230: u64 [s1 + 0x418] = a4\n 34234: u64 [s1 + 0x218] = a1\n 34238: u64 [s1 + 0x410] = a1\n 34242: u64 [s1 + 0x220] = a2\n 34246: u64 [s1 + 0x408] = a2\n 34250: a0 = s1 + 0x420\n 34254: a1 = s1 + 0x400\n 34258: a2 = s1 + 0x3e0\n 34262: u64 [s1 + 0x228] = a3\n 34266: u64 [s1 + 0x400] = a3\n 34270: ra = 0x4b2\n 34274: t0 = 0x55e\n 34278: jump @1825\n      : @1293 [@dyn 601] (gas: 21)\n 34281: a4 = s1 + 0x400\n 34285: a0 = u64 [a4 + 0x58]\n 34288: u64 [s1 + 0x238] = a0\n 34292: a0 = u64 [a4 + 0x50]\n 34295: u64 [s1 + 0x1e8] = a0\n 34299: a0 = u64 [a4 + 0x48]\n 34302: u64 [s1 + 0x1e0] = a0\n 34306: a0 = u64 [a4 + 0x40]\n 34309: u64 [s1 + 0x230] = a0\n 34313: a0 = u64 [a4 + 0x30]\n 34316: a1 = u64 [a4 + 0x38]\n 34319: a2 = u64 [a4 + 0x20]\n 34322: a3 = u64 [a4 + 0x28]\n 34325: a4 = u64 [s1 + 0x208]\n 34329: u64 [a4 + 0x10] = a0\n 34332: u64 [a4 + 0x18] = a1\n 34335: u64 [a4] = a2\n 34337: u64 [a4 + 0x8] = a3\n 34340: a1 = a4\n 34342: a0 = s1 + 0x3c0\n 34346: ra = 1204, jump @11\n      : @1294 [@dyn 602] (gas: 38)\n 34353: a1 = s1 + 0x300\n 34357: a0 = u64 [a1 + 0xd0]\n 34361: u64 [s1 + 0x208] = a0\n 34365: a0 = u64 [a1 + 0xd8]\n 34369: u64 [s1 + 0x200] = a0\n 34373: a0 = u64 [a1 + 0xc0]\n 34377: u64 [s1 + 0x1f8] = a0\n 34381: a0 = u64 [a1 + 0xc8]\n 34385: u64 [s1 + 0x1f0] = a0\n 34389: a4 = u64 [s1 + 0x230]\n 34393: a0 = a4 >> 0x3d\n 34396: a2 = u64 [s1 + 0x1e0]\n 34400: a1 = a2 << 0x3\n 34403: a0 = a0 | a1\n 34406: a1 = a2 >> 0x3d\n 34409: a3 = u64 [s1 + 0x1e8]\n 34413: a2 = a3 << 0x3\n 34416: a1 = a1 | a2\n 34419: a2 = a3 >> 0x3d\n 34422: a3 = u64 [s1 + 0x238]\n 34426: a3 = a3 << 0x3\n 34429: a2 = a2 | a3\n 34432: a5 = a4 << 0x3\n 34435: u64 [s1 + 0x238] = a5\n 34439: a3 = a0 >u 0\n 34441: a4 = a5 <u 0x100\n 34445: a4 = a4 ^ 0x1\n 34448: a4 = a3 if a0 != 0\n 34451: a0 = a2 >u 0\n 34453: a3 = a1 >u 0\n 34455: a3 = a0 if a2 != 0\n 34458: a1 = a1 | a2\n 34461: a4 = a3 if a1 != 0\n 34464: u64 [s1 + 0x1d0] = a4\n 34468: i32 a2 = a5 + 0xffffffffffffff80\n 34471: a0 = 0xff\n 34475: a1 = 0\n 34477: ra = 1206, jump @1833\n      : @1295 [@dyn 603] (gas: 7)\n 34483: u64 [s1 + 0x1c8] = a0\n 34487: u64 [s1 + 0x1e0] = a1\n 34491: a1 = u64 [s1 + 0x238]\n 34495: i32 a2 = 0x80 - a1\n 34499: a0 = 0xff\n 34503: a1 = 0\n 34505: ra = 1208, jump @1828\n      : @1296 [@dyn 604] (gas: 7)\n 34511: u64 [s1 + 0x1e8] = a0\n 34515: u64 [s1 + 0x1d8] = a1\n 34519: a0 = u64 [s1 + 0x230]\n 34523: i32 a2 = a0 << 0x3\n 34526: a0 = 0xff\n 34530: a1 = 0\n 34532: ra = 1210, jump @1833\n      : @1297 [@dyn 605] (gas: 2)\n 34538: a2 = u64 [s1 + 0x1d0]\n 34542: jump @1299 if a2 != 0\n      : @1298 (gas: 24)\n 34545: t0 = u64 [s1 + 0x238]\n 34549: a2 = t0 <u 0x80\n 34553: a4 = u64 [s1 + 0x1e8]\n 34557: a3 = u64 [s1 + 0x1c8]\n 34561: a4 = a3 if a2 == 0\n 34564: a5 = u64 [s1 + 0x1e0]\n 34568: a3 = u64 [s1 + 0x1d8]\n 34572: a3 = a5 if a2 == 0\n 34575: a4 = 0 if t0 == 0\n 34577: a3 = 0 if t0 == 0\n 34579: a0 = 0 if a2 == 0\n 34581: a1 = 0 if a2 == 0\n 34583: a2 = u64 [s1 + 0x1f0]\n 34587: a1 = a1 & a2\n 34590: a2 = u64 [s1 + 0x1f8]\n 34594: a0 = a0 & a2\n 34597: a2 = u64 [s1 + 0x200]\n 34601: a2 = a2 & a3\n 34604: a3 = u64 [s1 + 0x208]\n 34608: a3 = a3 & a4\n 34611: a0 = a0 | a3\n 34614: a1 = a1 | a2\n 34617: a0 = a0 | a1\n 34620: jump @1324 if a0 != 0\n      : @1299 (gas: 26)\n 34624: a0 = sp + 0xffffffffffffffe0\n 34627: a0 = a0 & 0xffffffffffffffe0\n 34630: u64 [s1 + 0x238] = a0\n 34634: sp = a0\n 34636: a0 = u64 [s1 + 0x268]\n 34640: u64 [s1 + 0x358] = a0\n 34644: a0 = u64 [s1 + 0x270]\n 34648: u64 [s1 + 0x350] = a0\n 34652: a0 = u64 [s1 + 0x278]\n 34656: u64 [s1 + 0x348] = a0\n 34660: a0 = u64 [s1 + 0x260]\n 34664: u64 [s1 + 0x340] = a0\n 34668: a0 = u64 [s1 + 0x210]\n 34672: u64 [s1 + 0x378] = a0\n 34676: a0 = u64 [s1 + 0x218]\n 34680: u64 [s1 + 0x370] = a0\n 34684: a0 = u64 [s1 + 0x220]\n 34688: u64 [s1 + 0x368] = a0\n 34692: a0 = s1 + 0x380\n 34696: a1 = s1 + 0x360\n 34700: a2 = s1 + 0x340\n 34704: a3 = u64 [s1 + 0x228]\n 34708: u64 [s1 + 0x360] = a3\n 34712: ra = 0x4bc\n 34716: t0 = 0x55e\n 34720: jump @1825\n      : @1300 [@dyn 606] (gas: 19)\n 34723: a0 = u64 [s1 + 0x3b8]\n 34727: u64 [s1 + 0x278] = a0\n 34731: a0 = u64 [s1 + 0x3b0]\n 34735: u64 [s1 + 0x270] = a0\n 34739: a0 = u64 [s1 + 0x3a8]\n 34743: u64 [s1 + 0x268] = a0\n 34747: a0 = u64 [s1 + 0x3a0]\n 34751: u64 [s1 + 0x260] = a0\n 34755: a0 = u64 [s1 + 0x390]\n 34759: a4 = u64 [s1 + 0x398]\n 34763: a2 = u64 [s1 + 0x380]\n 34767: a3 = u64 [s1 + 0x388]\n 34771: a1 = u64 [s1 + 0x238]\n 34775: u64 [a1 + 0x10] = a0\n 34778: u64 [a1 + 0x18] = a4\n 34781: u64 [a1] = a2\n 34783: u64 [a1 + 0x8] = a3\n 34786: a0 = s1 + 0x320\n 34790: ra = 1214, jump @11\n      : @1301 [@dyn 607] (gas: 43)\n 34797: a0 = u64 [s1 + 0x320]\n 34801: u64 [s1 + 0x220] = a0\n 34805: a0 = u64 [s1 + 0x328]\n 34809: u64 [s1 + 0x218] = a0\n 34813: a0 = u64 [s1 + 0x330]\n 34817: u64 [s1 + 0x210] = a0\n 34821: a0 = u64 [s1 + 0x338]\n 34825: u64 [s1 + 0x200] = a0\n 34829: a0 = sp + 0xffffffffffffffe0\n 34832: a0 = a0 & 0xffffffffffffffe0\n 34835: u64 [s1 + 0x208] = a0\n 34839: sp = a0\n 34841: a4 = u64 [s1 + 0x260]\n 34845: a0 = a4 >> 0x3d\n 34848: a2 = u64 [s1 + 0x268]\n 34852: a1 = a2 << 0x3\n 34855: a0 = a0 | a1\n 34858: a1 = a2 >> 0x3d\n 34861: a3 = u64 [s1 + 0x270]\n 34865: a2 = a3 << 0x3\n 34868: a1 = a1 | a2\n 34871: a2 = a3 >> 0x3d\n 34874: a3 = u64 [s1 + 0x278]\n 34878: a3 = a3 << 0x3\n 34881: a2 = a2 | a3\n 34884: a3 = a4 << 0x3\n 34887: u64 [s1 + 0x278] = a3\n 34891: t0 = a4\n 34893: a5 = a2 >u 0\n 34895: a4 = a1 >u 0\n 34897: a4 = a5 if a2 != 0\n 34900: t1 = a0 >u 0\n 34902: a5 = a3 <u 0x100\n 34906: a5 = a5 ^ 0x1\n 34909: a5 = t1 if a0 != 0\n 34912: a1 = a1 | a2\n 34915: a5 = a4 if a1 != 0\n 34918: u64 [s1 + 0x228] = a5\n 34922: i32 a2 = t0 << 0x3\n 34925: u64 [s1 + 0x230] = a2\n 34929: a0 = 0x1\n 34932: a1 = 0\n 34934: ra = 1216, jump @1833\n      : @1302 [@dyn 608] (gas: 12)\n 34940: a3 = u64 [s1 + 0x278]\n 34944: a2 = a3 <u 0x80\n 34948: u64 [s1 + 0x260] = a2\n 34952: a0 = 0 if a2 == 0\n 34954: u64 [s1 + 0x270] = a0\n 34958: a1 = 0 if a2 == 0\n 34960: u64 [s1 + 0x268] = a1\n 34964: i32 a2 = a3 + 0xffffffffffffff80\n 34967: u64 [s1 + 0x1e8] = a2\n 34971: a0 = 0x1\n 34974: a1 = 0\n 34976: ra = 1218, jump @1833\n      : @1303 [@dyn 609] (gas: 8)\n 34982: u64 [s1 + 0x1f0] = a0\n 34986: u64 [s1 + 0x1f8] = a1\n 34990: a1 = u64 [s1 + 0x278]\n 34994: i32 a2 = 0x80 - a1\n 34998: u64 [s1 + 0x1e0] = a2\n 35002: a0 = 0x1\n 35005: a1 = 0\n 35007: ra = 1220, jump @1828\n      : @1304 [@dyn 610] (gas: 24)\n 35013: a2 = a0\n 35015: a3 = u64 [s1 + 0x260]\n 35019: a0 = u64 [s1 + 0x1f0]\n 35023: a2 = a0 if a3 == 0\n 35026: a0 = u64 [s1 + 0x278]\n 35030: a2 = 0 if a0 == 0\n 35032: a4 = u64 [s1 + 0x1f8]\n 35036: a1 = a4 if a3 == 0\n 35039: a1 = 0 if a0 == 0\n 35041: a0 = u64 [s1 + 0x228]\n 35045: a1 = 0 if a0 != 0\n 35047: u64 [s1 + 0x1f8] = a1\n 35051: a2 = 0 if a0 != 0\n 35053: u64 [s1 + 0x1f0] = a2\n 35057: a1 = u64 [s1 + 0x268]\n 35061: a1 = 0 if a0 != 0\n 35063: u64 [s1 + 0x268] = a1\n 35067: a1 = u64 [s1 + 0x270]\n 35071: a1 = 0 if a0 != 0\n 35073: u64 [s1 + 0x270] = a1\n 35077: a0 = 0xff\n 35081: a1 = 0\n 35083: a2 = u64 [s1 + 0x1e8]\n 35087: ra = 1222, jump @1833\n      : @1305 [@dyn 611] (gas: 6)\n 35093: u64 [s1 + 0x1d8] = a0\n 35097: u64 [s1 + 0x1e8] = a1\n 35101: a0 = 0xff\n 35105: a1 = 0\n 35107: a2 = u64 [s1 + 0x1e0]\n 35111: ra = 1224, jump @1828\n      : @1306 [@dyn 612] (gas: 6)\n 35117: u64 [s1 + 0x1e0] = a0\n 35121: u64 [s1 + 0x1d0] = a1\n 35125: a0 = 0\n 35127: a1 = 0\n 35129: a2 = u64 [s1 + 0x230]\n 35133: ra = 1226, jump @1833\n      : @1307 [@dyn 613] (gas: 18)\n 35139: a3 = u64 [s1 + 0x1e0]\n 35143: a3 = a3 | a0\n 35146: a0 = u64 [s1 + 0x260]\n 35150: a2 = u64 [s1 + 0x1d8]\n 35154: a3 = a2 if a0 == 0\n 35157: a2 = u64 [s1 + 0x278]\n 35161: a3 = 0 if a2 == 0\n 35163: u64 [s1 + 0x1e0] = a3\n 35167: a3 = u64 [s1 + 0x1d0]\n 35171: a3 = a3 | a1\n 35174: a1 = u64 [s1 + 0x1e8]\n 35178: a3 = a1 if a0 == 0\n 35181: a3 = 0 if a2 == 0\n 35183: u64 [s1 + 0x278] = a3\n 35187: a0 = 0xff\n 35191: a1 = 0\n 35193: a2 = u64 [s1 + 0x230]\n 35197: ra = 1228, jump @1833\n      : @1308 [@dyn 614] (gas: 38)\n 35203: a2 = u64 [s1 + 0x260]\n 35207: a0 = 0 if a2 == 0\n 35209: a1 = 0 if a2 == 0\n 35211: a2 = u64 [s1 + 0x278]\n 35215: a2 = a2 ^ 0xffffffffffffffff\n 35218: a3 = u64 [s1 + 0x1e0]\n 35222: a3 = a3 ^ 0xffffffffffffffff\n 35225: a1 = a1 ^ 0xffffffffffffffff\n 35228: a0 = a0 ^ 0xffffffffffffffff\n 35231: a4 = u64 [s1 + 0x228]\n 35235: a3 = 0xffffffffffffffff if a4 != 0\n 35238: a2 = 0xffffffffffffffff if a4 != 0\n 35241: a0 = 0xffffffffffffffff if a4 != 0\n 35244: a1 = 0xffffffffffffffff if a4 != 0\n 35247: a4 = u64 [s1 + 0x200]\n 35251: a2 = a2 & a4\n 35254: a4 = u64 [s1 + 0x210]\n 35258: a3 = a3 & a4\n 35261: a4 = u64 [s1 + 0x218]\n 35265: a1 = a1 & a4\n 35268: a4 = u64 [s1 + 0x220]\n 35272: a0 = a0 & a4\n 35275: a4 = u64 [s1 + 0x270]\n 35279: a0 = a0 | a4\n 35282: a4 = u64 [s1 + 0x268]\n 35286: a1 = a1 | a4\n 35289: a4 = u64 [s1 + 0x1f0]\n 35293: a3 = a3 | a4\n 35296: a4 = u64 [s1 + 0x1f8]\n 35300: a2 = a2 | a4\n 35303: a4 = u64 [s1 + 0x208]\n 35307: u64 [a4 + 0x18] = a2\n 35310: u64 [a4 + 0x10] = a3\n 35313: u64 [a4 + 0x8] = a1\n 35316: u64 [a4] = a0\n 35318: a1 = a4\n 35320: a0 = u64 [s1 + 0x238]\n 35324: ra = 1230, jump @12\n      : @1309 [@dyn 615] (gas: 22)\n 35331: a0 = sp + 0xffffffffffffffe0\n 35334: a1 = a0 & 0xffffffffffffffe0\n 35337: sp = a1\n 35339: a2 = u64 [s1 + 0x248]\n 35343: a0 = a2 + 0x2\n 35346: a4 = a0 <u a2\n 35349: a3 = u64 [s1 + 0x240]\n 35353: a2 = a3 + a4\n 35356: a3 = a2 <u a3\n 35359: a3 = a4 if a4 == 0\n 35362: a4 = u64 [s1 + 0x250]\n 35366: a3 = a3 + a4\n 35369: a5 = a3 <u a4\n 35372: a4 = u64 [s1 + 0x258]\n 35376: a4 = a4 + a5\n 35379: u64 [a1 + 0x18] = a4\n 35382: u64 [a1 + 0x10] = a3\n 35385: u64 [a1 + 0x8] = a2\n 35388: u64 [a1] = a0\n 35390: a0 = s1 + 0x300\n 35394: u64 [s1 + 0x278] = a1\n 35398: ra = 1232, jump @11\n      : @1310 [@dyn 616] (gas: 3)\n 35405: a1 = u64 [s1 + 0x308]\n 35409: u64 [s1 + 0x270] = a1\n 35413: jump @1322 if a1 != 4294967295\n      : @1311 (gas: 8)\n 35418: u64 [s1 + 720] = 0\n 35422: u64 [s1 + 712] = 0\n 35426: u64 [s1 + 704] = 0\n 35430: a0 = 0x4e487b7100000000\n 35440: a1 = s1 + 0x2c0\n 35444: u64 [s1 + 0x2d8] = a0\n 35448: a0 = 0\n 35450: ra = 1234, jump @9\n      : @1312 [@dyn 617] (gas: 7)\n 35457: u64 [s1 + 696] = 0\n 35461: u64 [s1 + 688] = 0\n 35465: u64 [s1 + 672] = 0x11\n 35470: a0 = 0x4\n 35473: a1 = s1 + 0x2a0\n 35477: u64 [s1 + 680] = 0\n 35481: ra = 1236, jump @9\n      : @1313 [@dyn 618] (gas: 2)\n 35488: a1 = i32 [0x201f0]\n 35493: jump @1315 if a1 >u 63\n      : @1314 (gas: 3)\n 35497: u32 [0x201f0] = 0x40\n 35503: a1 = 0x20200\n 35508: jump @1181\n      : @1315 (gas: 2)\n 35511: a1 = 0x20200\n 35516: jump @1181\n      : @1316 (gas: 4)\n 35519: a0 = s1 + 0x1880\n 35523: ra = 0x4d6\n 35527: t0 = 0x50c\n 35531: jump @1793\n      : @1317 [@dyn 619] (gas: 16)\n 35534: a0 = s1 + 0x11f8\n 35538: a2 = a0 + 0x600\n 35542: a1 = u64 [a2 + 0xa0]\n 35546: u64 [s1 + 0x260] = a1\n 35550: a1 = u64 [a2 + 0x98]\n 35554: u64 [s1 + 0x268] = a1\n 35558: a1 = u64 [a2 + 0x90]\n 35562: u64 [s1 + 0x270] = a1\n 35566: a0 = u64 [a2 + 0x88]\n 35570: u64 [s1 + 0x278] = a0\n 35574: a0 = 0x30200\n 35579: u64 [s1 + 0x258] = a0\n 35583: i32 a0 = a0 + 0\n 35585: ra = 0x4d8\n 35589: ecalli 4 // 'caller'\n 35591: fallthrough\n      : @1318 [@dyn 620] (gas: 3)\n 35592: a5 = s1 + 0x200\n 35596: a2 = u64 [a5 + 0x58]\n 35599: t0 = 1242, jump @1768\n      : @1319 [@dyn 621] (gas: 11)\n 35605: a2 = u64 [a5 + 0x68]\n 35608: a2 = a2 << 0x20\n 35611: a2 = a2 >> 0x20\n 35614: a1 = a1 ^ a2\n 35617: a2 = u64 [a5 + 0x78]\n 35620: a0 = a0 ^ a2\n 35623: a0 = a0 | a1\n 35626: a1 = u64 [a5 + 0x70]\n 35629: a1 = a1 ^ a3\n 35632: a0 = a0 | a1\n 35635: jump @1325 if a0 != 0\n      : @1320 (gas: 30)\n 35639: a0 = s1 + 0x3000\n 35643: i32 a0 = a0 + 0xffffffffffffff00\n 35647: a1 = 0x4\n 35650: ecalli 2 // 'call_data_load'\n 35652: a2 = s1 + 0x29f8\n 35656: a4 = a2 + 0x500\n 35660: a3 = u64 [a4 + 0x8]\n 35663: a0 = u64 [a4 + 0x10]\n 35666: a1 = u64 [a4 + 0x18]\n 35669: a2 = u64 [a4 + 0x20]\n 35672: a4 = s1 + 0x11f8\n 35676: a5 = u64 [s1 + 0x260]\n 35680: u64 [a4 + 0x620] = a5\n 35684: a5 = u64 [s1 + 0x268]\n 35688: u64 [a4 + 0x618] = a5\n 35692: a5 = u64 [s1 + 0x270]\n 35696: u64 [a4 + 0x610] = a5\n 35700: a5 = u64 [s1 + 0x278]\n 35704: u64 [a4 + 0x608] = a5\n 35708: a5 = a4 + 0x600\n 35712: u64 [a5 + 0x40] = a2\n 35715: u64 [a5 + 0x38] = a1\n 35718: u64 [a5 + 0x30] = a0\n 35721: a0 = s1 + 0x1840\n 35725: a1 = s1 + 0x1820\n 35729: a2 = s1 + 0x1800\n 35733: u64 [a5 + 0x28] = a3\n 35736: ra = 0x4dc\n 35740: t0 = 0x6ea\n 35744: jump @1816\n      : @1321 [@dyn 622] (gas: 6)\n 35747: a1 = 0x20200\n 35752: i32 a1 = a1 + 0\n 35754: a0 = 0\n 35756: a2 = 0\n 35758: ecalli 13 // 'seal_return'\n 35760: jump @800\n      : @1322 (gas: 3)\n 35763: a0 = s1 + 0x2e0\n 35767: a1 = u64 [s1 + 0x278]\n 35771: ra = 1246, jump @11\n      : @1323 [@dyn 623] (gas: 15)\n 35778: a5 = s1 + 0x200\n 35782: a0 = u64 [a5 + 0xe0]\n 35786: a1 = u64 [a5 + 0xf8]\n 35790: a2 = u64 [a5 + 0xf0]\n 35794: a3 = u64 [a5 + 0x70]\n 35797: a3 = a3 + 0x1\n 35800: a4 = s1 + 0x29f8\n 35804: u64 [a4 + 0x270] = a3\n 35808: a3 = a4 + 0x200\n 35812: u64 [a3 + 0x80] = a1\n 35816: u64 [a3 + 0x78] = a2\n 35819: u64 [a3 + 0x68] = a0\n 35822: a1 = s1 + 0x2c60\n 35826: a0 = u64 [a5 + 0x78]\n 35829: ra = 1248, jump @12\n      : @1324 [@dyn 624] (gas: 6)\n 35836: a1 = 0x20200\n 35841: i32 a1 = a1 + 0\n 35843: a0 = 0\n 35845: a2 = 0\n 35847: ecalli 13 // 'seal_return'\n 35849: jump @800\n      : @1325 (gas: 9)\n 35852: a2 = s1 + 0x11f8\n 35856: u64 [a2 + 1656] = 0\n 35860: u64 [a2 + 1648] = 0\n 35864: a0 = 0x6697b23200000000\n 35874: u64 [a2 + 0x680] = a0\n 35878: a1 = s1 + 0x1860\n 35882: u64 [a2 + 1640] = 0\n 35886: a0 = 0\n 35888: ra = 1250, jump @9\n      : @1326 [@dyn 625] (gas: 2)\n 35895: a1 = i32 [0x201f0]\n 35900: jump @1328 if a1 >u 31\n      : @1327 (gas: 2)\n 35904: u32 [0x201f0] = 0x20\n 35910: fallthrough\n      : @1328 (gas: 7)\n 35911: a1 = 0x20200\n 35916: i32 a1 = a1 + 0\n 35918: a0 = 0x1\n 35921: a2 = 0x4\n 35924: ra = 0x4e4\n 35928: ecalli 13 // 'seal_return'\n 35930: fallthrough\n      : @1329 [@dyn 626] (gas: 22)\n 35931: sp = sp + 0xfffffffffffffda0\n 35935: a2 = sp + 0x200\n 35939: u64 [a2 + 0x58] = ra\n 35942: u64 [a2 + 0x50] = s0\n 35945: u64 [a2 + 0x48] = s1\n 35948: s0 = sp + 0x260\n 35952: sp = sp & 0xffffffffffffffe0\n 35955: s1 = sp\n 35957: a2 = u64 [a1 + 0x10]\n 35960: u64 [s1 + 0x30] = a2\n 35963: a2 = u64 [a1 + 0x8]\n 35966: u64 [s1 + 0x50] = a2\n 35969: a1 = u64 [a1]\n 35971: u64 [s1 + 0x58] = a1\n 35974: u64 [s1 + 0x38] = a0\n 35977: u64 [s1 + 536] = 0\n 35981: u64 [s1 + 528] = 0\n 35985: u64 [s1 + 520] = 0\n 35989: a1 = s1 + 0x200\n 35993: u64 [s1 + 512] = 0\n 35997: a0 = 0\n 35999: ra = 1254, jump @9\n      : @1330 [@dyn 627] (gas: 7)\n 36006: u64 [s1 + 504] = 0\n 36010: u64 [s1 + 496] = 0\n 36014: u64 [s1 + 488] = 0\n 36018: a0 = 0x20\n 36021: a1 = s1 + 0x1e0\n 36025: u64 [s1 + 480] = 0\n 36029: ra = 1256, jump @9\n      : @1331 [@dyn 628] (gas: 3)\n 36036: a1 = 0x201f0\n 36041: a0 = i32 [0x201f0]\n 36046: jump @1333 if a0 >u 63\n      : @1332 (gas: 2)\n 36050: u32 [0x201f0] = 0x40\n 36056: fallthrough\n      : @1333 (gas: 41)\n 36057: a0 = sp + 0xffffffffffffffe0\n 36060: a2 = a0 & 0xffffffffffffffe0\n 36063: u64 [s1 + 0x28] = a2\n 36066: sp = a2\n 36068: a0 = 0x20200\n 36073: i32 a0 = a0 + 0\n 36075: i32 a2 = a2 + 0\n 36077: u64 [s1 + 0x48] = a1\n 36080: a1 = 0x40\n 36083: u64 [s1 + 0x40] = a0\n 36086: ecalli 8 // 'hash_keccak_256'\n 36088: a3 = u64 [s1 + 0x28]\n 36091: a0 = u64 [a3 + 0x18]\n 36094: a1 = u64 [a3 + 0x10]\n 36097: a2 = u64 [a3 + 0x8]\n 36100: a3 = u64 [a3]\n 36102: a0 = reverse a0\n 36104: u64 [s1 + 0x20] = a0\n 36107: a0 = reverse a1\n 36109: u64 [s1 + 0x18] = a0\n 36112: a0 = reverse a2\n 36114: u64 [s1 + 0x10] = a0\n 36117: a0 = reverse a3\n 36119: u64 [s1 + 0x8] = a0\n 36122: a0 = sp + 0xffffffffffffffe0\n 36125: a0 = a0 & 0xffffffffffffffe0\n 36128: u64 [s1 + 0x28] = a0\n 36131: sp = a0\n 36133: a0 = u64 [s1 + 0x30]\n 36136: a0 = a0 << 0x20\n 36139: a0 = a0 >> 0x20\n 36142: u64 [s1 + 472] = 0\n 36146: u64 [s1] = a0\n 36148: u64 [s1 + 0x1d0] = a0\n 36152: a0 = u64 [s1 + 0x50]\n 36155: u64 [s1 + 0x1c8] = a0\n 36159: a1 = s1 + 0x1c0\n 36163: a0 = u64 [s1 + 0x58]\n 36166: u64 [s1 + 0x1c0] = a0\n 36170: a0 = 0\n 36172: ra = 1258, jump @9\n      : @1334 [@dyn 629] (gas: 12)\n 36179: a0 = u64 [s1 + 0x8]\n 36182: a3 = s1 + 0x100\n 36186: u64 [a3 + 0xb8] = a0\n 36190: a0 = u64 [s1 + 0x10]\n 36193: u64 [a3 + 0xb0] = a0\n 36197: a0 = u64 [s1 + 0x18]\n 36200: u64 [a3 + 0xa8] = a0\n 36204: a0 = 0x20\n 36207: a1 = s1 + 0x1a0\n 36211: a2 = u64 [s1 + 0x20]\n 36214: u64 [a3 + 0xa0] = a2\n 36218: ra = 1260, jump @9\n      : @1335 [@dyn 630] (gas: 3)\n 36225: a1 = u64 [s1 + 0x48]\n 36228: a0 = i32 [a1]\n 36230: jump @1337 if a0 >u 63\n      : @1336 (gas: 3)\n 36234: u32 [a1 + 0] = 0x40\n 36237: t0 = 0x4ee\n 36241: jump @1826\n      : @1337 (gas: 1)\n 36244: t0 = 1262, jump @1826\n      : @1338 [@dyn 631] (gas: 17)\n 36250: ecalli 8 // 'hash_keccak_256'\n 36252: a3 = u64 [s1 + 0x30]\n 36255: a0 = u64 [a3 + 0x18]\n 36258: a1 = u64 [a3 + 0x10]\n 36261: a2 = u64 [a3 + 0x8]\n 36264: a3 = u64 [a3]\n 36266: a0 = reverse a0\n 36268: a4 = reverse a1\n 36270: a2 = reverse a2\n 36272: a3 = reverse a3\n 36274: a1 = u64 [s1 + 0x28]\n 36277: u64 [a1 + 0x18] = a3\n 36280: u64 [a1 + 0x10] = a2\n 36283: u64 [a1 + 0x8] = a4\n 36286: u64 [a1] = a0\n 36288: a0 = s1 + 0x180\n 36292: ra = 1264, jump @11\n      : @1339 [@dyn 632] (gas: 2)\n 36299: a0 = u8 [s1 + 0x180]\n 36303: jump @1341 if a0 == 0\n      : @1340 (gas: 2)\n 36306: a1 = 0\n 36308: jump @1359\n      : @1341 (gas: 6)\n 36311: u64 [s1 + 376] = 0\n 36315: u64 [s1 + 368] = 0\n 36319: u64 [s1 + 360] = 0\n 36323: a1 = s1 + 0x160\n 36327: u64 [s1 + 352] = 0\n 36331: ra = 1266, jump @9\n      : @1342 [@dyn 633] (gas: 1)\n 36338: t0 = 1268, jump @1771\n      : @1343 [@dyn 634] (gas: 1)\n 36344: ra = 1270, jump @9\n      : @1344 [@dyn 635] (gas: 3)\n 36351: a1 = u64 [s1 + 0x48]\n 36354: a0 = i32 [a1]\n 36356: jump @1346 if a0 >u 63\n      : @1345 (gas: 3)\n 36360: u32 [a1 + 0] = 0x40\n 36363: t0 = 0x4f8\n 36367: jump @1826\n      : @1346 (gas: 1)\n 36370: t0 = 1272, jump @1826\n      : @1347 [@dyn 636] (gas: 28)\n 36376: ecalli 8 // 'hash_keccak_256'\n 36378: a3 = u64 [s1 + 0x30]\n 36381: a0 = u64 [a3 + 0x18]\n 36384: a1 = u64 [a3 + 0x10]\n 36387: a2 = u64 [a3 + 0x8]\n 36390: a3 = u64 [a3]\n 36392: a0 = reverse a0\n 36394: u64 [s1 + 0x28] = a0\n 36397: a0 = reverse a1\n 36399: u64 [s1 + 0x20] = a0\n 36402: a0 = reverse a2\n 36404: u64 [s1 + 0x18] = a0\n 36407: a0 = reverse a3\n 36409: u64 [s1 + 0x10] = a0\n 36412: a0 = sp + 0xffffffffffffffe0\n 36415: a0 = a0 & 0xffffffffffffffe0\n 36418: u64 [s1 + 0x30] = a0\n 36421: sp = a0\n 36423: u64 [s1 + 312] = 0\n 36427: a0 = u64 [s1]\n 36429: u64 [s1 + 0x130] = a0\n 36433: a0 = u64 [s1 + 0x50]\n 36436: u64 [s1 + 0x128] = a0\n 36440: a1 = s1 + 0x120\n 36444: a0 = u64 [s1 + 0x58]\n 36447: u64 [s1 + 0x120] = a0\n 36451: a0 = 0\n 36453: ra = 1274, jump @9\n      : @1348 [@dyn 637] (gas: 12)\n 36460: a0 = u64 [s1 + 0x10]\n 36463: a3 = s1 + 0x100\n 36467: u64 [a3 + 0x18] = a0\n 36470: a0 = u64 [s1 + 0x18]\n 36473: u64 [a3 + 0x10] = a0\n 36476: a0 = u64 [s1 + 0x20]\n 36479: u64 [a3 + 0x8] = a0\n 36482: a0 = 0x20\n 36485: a1 = s1 + 0x100\n 36489: a2 = u64 [s1 + 0x28]\n 36492: u64 [a3] = a2\n 36494: ra = 1276, jump @9\n      : @1349 [@dyn 638] (gas: 3)\n 36501: a1 = u64 [s1 + 0x48]\n 36504: a0 = i32 [a1]\n 36506: jump @1351 if a0 >u 63\n      : @1350 (gas: 2)\n 36510: u32 [a1 + 0] = 0x40\n 36513: fallthrough\n      : @1351 (gas: 12)\n 36514: a0 = sp + 0xffffffffffffffe0\n 36517: a0 = a0 & 0xffffffffffffffe0\n 36520: u64 [s1 + 0x48] = a0\n 36523: sp = a0\n 36525: i32 a2 = a0 + 0\n 36527: a1 = 0x40\n 36530: a0 = u64 [s1 + 0x40]\n 36533: ra = 0x4fe\n 36537: ecalli 8 // 'hash_keccak_256'\n 36539: a3 = u64 [s1 + 0x48]\n 36542: t0 = 0x500\n 36546: jump @1811\n      : @1352 [@dyn 639] (gas: 2)\n 36549: a3 = u64 [s1 + 0x48]\n 36552: t0 = 1280, jump @1811\n      : @1353 [@dyn 640] (gas: 7)\n 36558: a1 = u64 [s1 + 0x30]\n 36561: u64 [a1 + 0x18] = a3\n 36564: u64 [a1 + 0x10] = a2\n 36567: u64 [a1 + 0x8] = a4\n 36570: u64 [a1] = a0\n 36572: a0 = s1 + 0xe0\n 36576: ra = 1282, jump @11\n      : @1354 [@dyn 641] (gas: 14)\n 36583: a0 = u64 [s1 + 0xe0]\n 36587: a1 = u64 [s1 + 0xe8]\n 36591: a2 = u64 [s1 + 0xf8]\n 36595: a3 = u64 [s1 + 0xf0]\n 36599: a0 = a0 & 0xffffffffffffff00\n 36603: a0 = a0 | 0x1\n 36606: a4 = s1 + 0x200\n 36610: u64 [a4 + 0x38] = a2\n 36613: u64 [a4 + 0x30] = a3\n 36616: u64 [a4 + 0x28] = a1\n 36619: u64 [a4 + 0x20] = a0\n 36622: a1 = s1 + 0x220\n 36626: a0 = u64 [s1 + 0x30]\n 36629: ra = 1284, jump @12\n      : @1355 [@dyn 642] (gas: 8)\n 36636: a0 = 0x30200\n 36641: u64 [s1 + 0x48] = a0\n 36644: i32 a0 = a0 + 0\n 36646: ra = 0x506\n 36650: ecalli 4 // 'caller'\n 36652: a2 = u64 [s1 + 0x48]\n 36655: t0 = 0x508\n 36659: jump @1767\n      : @1356 [@dyn 643] (gas: 2)\n 36662: a2 = u64 [s1 + 0x48]\n 36665: t0 = 1288, jump @1767\n      : @1357 [@dyn 644] (gas: 38)\n 36671: t0 = a1 | a0\n 36674: a3 = a3 >> 0x20\n 36677: a2 = reverse a2\n 36679: a1 = a2 << 0x20\n 36682: a1 = a1 | a3\n 36685: a2 = a2 >> 0x20\n 36688: u64 [s1 + 120] = 0\n 36691: u64 [s1 + 152] = 0\n 36695: a0 = u64 [s1]\n 36697: u64 [s1 + 0x90] = a0\n 36701: a0 = u64 [s1 + 0x50]\n 36704: u64 [s1 + 0x88] = a0\n 36708: a0 = u64 [s1 + 0x58]\n 36711: u64 [s1 + 0x80] = a0\n 36715: u64 [s1 + 184] = 0\n 36719: u64 [s1 + 176] = 0\n 36723: u64 [s1 + 168] = 0\n 36727: u64 [s1 + 160] = 0\n 36731: a3 = u64 [0x200a0]\n 36736: a4 = u64 [0x200a8]\n 36741: a5 = u64 [0x200b0]\n 36746: a0 = u64 [0x200b8]\n 36751: u64 [s1 + 0xd8] = a3\n 36755: u64 [s1 + 0xd0] = a4\n 36759: u64 [s1 + 0xc8] = a5\n 36763: u64 [s1 + 0xc0] = a0\n 36767: u64 [s1 + 0x70] = a2\n 36770: u64 [s1 + 0x68] = a1\n 36773: a2 = s1 + 0xc0\n 36777: a3 = s1 + 0xa0\n 36781: a4 = s1 + 0x80\n 36785: a5 = s1 + 0x60\n 36788: u64 [s1 + 0x60] = t0\n 36791: a0 = 0\n 36793: a1 = 0\n 36795: ra = 0x50a\n 36799: t0 = 0xa\n 36802: jump @1825\n      : @1358 [@dyn 645] (gas: 2)\n 36805: a1 = 0x1\n 36808: fallthrough\n      : @1359 (gas: 12)\n 36809: a2 = u64 [s1 + 0x38]\n 36812: u64 [a2] = a1\n 36814: u64 [a2 + 8] = 0\n 36817: u64 [a2 + 16] = 0\n 36820: u64 [a2 + 24] = 0\n 36823: sp = s0 + 0xfffffffffffffda0\n 36827: a0 = sp + 0x200\n 36831: ra = u64 [a0 + 0x58]\n 36834: s0 = u64 [a0 + 0x50]\n 36837: s1 = u64 [a0 + 0x48]\n 36840: sp = sp + 0x260\n 36844: ret\n      : @1360 [@dyn 646] (gas: 5)\n 36846: a1 = 0x24\n 36849: ra = 0x50e\n 36853: ecalli 2 // 'call_data_load'\n 36855: t0 = 0x510\n 36859: jump @1800\n      : @1361 [@dyn 647] (gas: 1)\n 36862: t0 = 1296, jump @1800\n      : @1362 [@dyn 648] (gas: 1)\n 36868: jump @1365 if a3 == 0\n      : @1363 (gas: 1)\n 36871: t0 = 1298, jump @1814\n      : @1364 [@dyn 649] (gas: 1)\n 36877: ret\n      : @1365 (gas: 8)\n 36879: a1 = 0x20200\n 36884: i32 a1 = a1 + 0\n 36886: a0 = 0x1\n 36889: a2 = 0\n 36891: ra = 0x514\n 36895: ecalli 13 // 'seal_return'\n 36897: t0 = 0x516\n 36901: jump @1793\n      : @1366 [@dyn 650] (gas: 1)\n 36904: t0 = 1302, jump @1793\n      : @1367 [@dyn 651] (gas: 5)\n 36910: a1 = 0x4\n 36913: ra = 0x518\n 36917: ecalli 2 // 'call_data_load'\n 36919: t0 = 0x51a\n 36923: jump @1800\n      : @1368 [@dyn 652] (gas: 1)\n 36926: t0 = 1306, jump @1800\n      : @1369 [@dyn 653] (gas: 1)\n 36932: jump @1372 if a3 == 0\n      : @1370 (gas: 1)\n 36935: t0 = 1308, jump @1814\n      : @1371 [@dyn 654] (gas: 1)\n 36941: ret\n      : @1372 (gas: 7)\n 36943: a1 = 0x20200\n 36948: i32 a1 = a1 + 0\n 36950: a0 = 0x1\n 36953: a2 = 0\n 36955: ra = 0x51e\n 36959: ecalli 13 // 'seal_return'\n 36961: fallthrough\n      : @1373 [@dyn 655] (gas: 23)\n 36962: sp = sp + 0xffffffffffffff00\n 36966: u64 [sp + 0xf8] = ra\n 36970: u64 [sp + 0xf0] = s0\n 36974: u64 [sp + 0xe8] = s1\n 36978: s0 = sp + 0x100\n 36982: sp = sp & 0xffffffffffffffe0\n 36985: s1 = sp\n 36987: u64 [s1 + 0x18] = a0\n 36990: a0 = u64 [a1]\n 36992: u64 [s1 + 0x20] = a0\n 36995: a0 = u64 [a1 + 0x8]\n 36998: u64 [s1 + 0x28] = a0\n 37001: a0 = u64 [a1 + 0x10]\n 37004: u64 [s1 + 0x30] = a0\n 37007: a0 = u64 [a1 + 0x18]\n 37010: u64 [s1 + 0x38] = a0\n 37013: u64 [s1 + 216] = 0\n 37017: u64 [s1 + 208] = 0\n 37021: u64 [s1 + 200] = 0\n 37025: u64 [s1 + 192] = 0x1\n 37030: a0 = s1 + 0xa0\n 37034: a1 = s1 + 0xc0\n 37038: ra = 1312, jump @11\n      : @1374 [@dyn 656] (gas: 20)\n 37045: a0 = u64 [s1 + 0xb8]\n 37049: t0 = u64 [s1 + 0xa0]\n 37053: a2 = u64 [s1 + 0xb0]\n 37057: a3 = u64 [s1 + 0xa8]\n 37061: a1 = u64 [s1 + 0x38]\n 37064: a4 = a0 ^ a1\n 37067: a1 = a1 <u a0\n 37070: a0 = u64 [s1 + 0x30]\n 37073: a5 = a0 <u a2\n 37076: a5 = a1 if a4 != 0\n 37079: a1 = u64 [s1 + 0x28]\n 37082: t1 = a3 ^ a1\n 37085: a3 = a1 <u a3\n 37088: a1 = u64 [s1 + 0x20]\n 37091: a1 = a1 <u t0\n 37094: a1 = a3 if t1 != 0\n 37097: a0 = a0 ^ a2\n 37100: a0 = a0 | a4\n 37103: a1 = a5 if a0 != 0\n 37106: jump @1379 if a1 == 0\n      : @1375 (gas: 7)\n 37110: u64 [s1 + 88] = 0\n 37113: u64 [s1 + 80] = 0\n 37116: u64 [s1 + 72] = 0\n 37119: a1 = s1 + 0x40\n 37122: u64 [s1 + 64] = 0x1\n 37126: a0 = 0\n 37128: ra = 1314, jump @9\n      : @1376 [@dyn 657] (gas: 2)\n 37135: a1 = i32 [0x201f0]\n 37140: jump @1378 if a1 >u 31\n      : @1377 (gas: 2)\n 37144: u32 [0x201f0] = 0x20\n 37150: fallthrough\n      : @1378 (gas: 72)\n 37151: a0 = sp + 0xffffffffffffffe0\n 37154: a2 = a0 & 0xffffffffffffffe0\n 37157: u64 [s1 + 0x10] = a2\n 37160: sp = a2\n 37162: a0 = 0x20200\n 37167: i32 a0 = a0 + 0\n 37169: i32 a2 = a2 + 0\n 37171: a1 = 0x20\n 37174: ecalli 8 // 'hash_keccak_256'\n 37176: t0 = u64 [s1 + 0x10]\n 37179: a0 = u64 [t0 + 0x18]\n 37182: a1 = u64 [t0 + 0x10]\n 37185: a3 = reverse a0\n 37187: a1 = reverse a1\n 37189: a4 = 0x5\n 37192: a0 = u64 [s1 + 0x20]\n 37195: a2 = a0 << 0x2\n 37198: t1 = a2 + a0\n 37201: a4 = a0 mulhu a4\n 37204: a2 = u64 [s1 + 0x28]\n 37207: a5 = a2 << 0x2\n 37210: a5 = a5 + a2\n 37213: a4 = a4 + a5\n 37216: t1 = t1 + a3\n 37219: a3 = t1 <u a3\n 37222: a0 = a1 + a4\n 37225: ra = a0 + a3\n 37228: a0 = ra ^ a1\n 37231: a1 = ra <u a1\n 37234: a1 = a3 if a0 == 0\n 37237: a0 = a4 <u a5\n 37240: a4 = 0x5\n 37243: a3 = a2 mulhu a4\n 37246: a0 = a0 + a3\n 37249: a2 = u64 [s1 + 0x30]\n 37252: a3 = a2 << 0x2\n 37255: t2 = a3 + a2\n 37258: a4 = a2 mulhu a4\n 37261: a5 = u64 [t0]\n 37263: a2 = u64 [s1 + 0x38]\n 37266: a3 = a2 << 0x2\n 37269: a3 = a3 + a2\n 37272: a3 = a3 + a4\n 37275: a4 = reverse a5\n 37277: a3 = a3 + a4\n 37280: a4 = u64 [t0 + 0x8]\n 37283: t2 = t2 + a0\n 37286: a0 = t2 <u a0\n 37289: a0 = a0 + a3\n 37292: a3 = reverse a4\n 37294: t2 = t2 + a3\n 37297: a3 = t2 <u a3\n 37300: a0 = a0 + a3\n 37303: a1 = a1 + t2\n 37306: a3 = a1 <u t2\n 37309: a0 = a0 + a3\n 37312: a3 = u64 [s1 + 0x18]\n 37315: u64 [a3] = t1\n 37317: u64 [a3 + 0x8] = ra\n 37320: u64 [a3 + 0x10] = a1\n 37323: u64 [a3 + 0x18] = a0\n 37326: a0 = 0\n 37328: u64 [a3 + 56] = 0\n 37331: u64 [a3 + 48] = 0\n 37334: u64 [a3 + 40] = 0\n 37337: u64 [a3 + 32] = 0\n 37340: sp = s0 + 0xffffffffffffff00\n 37344: ra = u64 [sp + 0xf8]\n 37348: s0 = u64 [sp + 0xf0]\n 37352: s1 = u64 [sp + 0xe8]\n 37356: sp = sp + 0x100\n 37360: ret\n      : @1379 (gas: 8)\n 37362: u64 [s1 + 144] = 0\n 37366: u64 [s1 + 136] = 0\n 37370: u64 [s1 + 128] = 0\n 37374: a0 = 0x4e487b7100000000\n 37384: a1 = s1 + 0x80\n 37388: u64 [s1 + 0x98] = a0\n 37392: a0 = 0\n 37394: ra = 1316, jump @9\n      : @1380 [@dyn 658] (gas: 7)\n 37401: u64 [s1 + 120] = 0\n 37404: u64 [s1 + 112] = 0\n 37407: u64 [s1 + 96] = 0x32\n 37411: a0 = 0x4\n 37414: a1 = s1 + 0x60\n 37417: u64 [s1 + 104] = 0\n 37420: ra = 1318, jump @9\n      : @1381 [@dyn 659] (gas: 2)\n 37427: a1 = i32 [0x201f0]\n 37432: jump @1383 if a1 >u 63\n      : @1382 (gas: 2)\n 37436: u32 [0x201f0] = 0x40\n 37442: fallthrough\n      : @1383 (gas: 8)\n 37443: a1 = 0x20200\n 37448: i32 a1 = a1 + 0\n 37450: a0 = 0x1\n 37453: a2 = 0x24\n 37456: ra = 0x528\n 37460: ecalli 13 // 'seal_return'\n 37462: t0 = 0x52a\n 37466: jump @1806\n      : @1384 [@dyn 660] (gas: 1)\n 37469: t0 = 1322, jump @1806\n      : @1385 [@dyn 661] (gas: 1)\n 37475: jump @1387 if a0 == 0\n      : @1386 (gas: 6)\n 37478: sp = s0 + 0xffffffffffffff20\n 37482: ra = u64 [sp + 0xd8]\n 37486: s0 = u64 [sp + 0xd0]\n 37490: s1 = u64 [sp + 0xc8]\n 37494: sp = sp + 0xe0\n 37498: ret\n      : @1387 (gas: 3)\n 37500: a0 = sp + 0xa0\n 37504: a1 = 0x40\n 37507: ra = 1324, jump @7\n      : @1388 [@dyn 662] (gas: 1)\n 37514: t0 = 1326, jump @1804\n      : @1389 [@dyn 663] (gas: 1)\n 37520: jump @1400 if a0 != 0\n      : @1390 (gas: 1)\n 37523: t0 = 1328, jump @1820\n      : @1391 [@dyn 664] (gas: 1)\n 37529: ra = 1330, jump @9\n      : @1392 [@dyn 665] (gas: 1)\n 37536: t0 = 1332, jump @1795\n      : @1393 [@dyn 666] (gas: 1)\n 37542: jump @1400 if a0 == 0\n      : @1394 (gas: 8)\n 37545: a0 = u64 [sp + 0x18]\n 37548: i32 a0 = a0 + 0x4\n 37551: u64 [sp + 120] = 0\n 37554: u64 [sp + 112] = 0\n 37557: u64 [sp + 96] = 0x20\n 37561: a1 = sp + 0x60\n 37564: u64 [sp + 104] = 0\n 37567: ra = 1334, jump @9\n      : @1395 [@dyn 667] (gas: 1)\n 37574: t0 = 1336, jump @1819\n      : @1396 [@dyn 668] (gas: 1)\n 37580: jump @1400 if a0 == 0\n      : @1397 (gas: 8)\n 37583: s1 = u64 [sp + 0x18]\n 37586: i32 a0 = s1 + 0x24\n 37589: u64 [sp + 88] = 0\n 37592: u64 [sp + 80] = 0\n 37595: u64 [sp + 64] = 0xe\n 37599: a1 = sp + 0x40\n 37602: u64 [sp + 72] = 0\n 37605: ra = 1338, jump @9\n      : @1398 [@dyn 669] (gas: 1)\n 37612: t0 = 1340, jump @1812\n      : @1399 [@dyn 670] (gas: 1)\n 37618: jump @1401 if a0 != 0\n      : @1400 (gas: 1)\n 37621: trap\n      : @1401 (gas: 10)\n 37622: s1 = u64 [sp + 0x18]\n 37625: i32 a0 = s1 + 0x44\n 37628: a1 = u64 [0x200c0]\n 37633: a2 = u64 [0x200c8]\n 37638: u64 [sp + 0x38] = a1\n 37641: u64 [sp + 40] = 0\n 37644: u64 [sp + 0x30] = a2\n 37647: a1 = sp + 0x20\n 37650: u64 [sp + 32] = 0\n 37653: ra = 1342, jump @9\n      : @1402 [@dyn 671] (gas: 3)\n 37660: a1 = 0x64\n 37663: a0 = s1\n 37665: ra = 1344, jump @18\n      : @1403 [@dyn 672] (gas: 7)\n 37672: i32 a1 = a0 + 0\n 37674: a0 = 0x1\n 37677: a2 = 0x64\n 37680: ra = 0x542\n 37684: ecalli 13 // 'seal_return'\n 37686: t0 = 0x544\n 37690: jump @1806\n      : @1404 [@dyn 673] (gas: 1)\n 37693: t0 = 1348, jump @1806\n      : @1405 [@dyn 674] (gas: 1)\n 37699: jump @1407 if a0 == 0\n      : @1406 (gas: 6)\n 37702: sp = s0 + 0xffffffffffffff20\n 37706: ra = u64 [sp + 0xd8]\n 37710: s0 = u64 [sp + 0xd0]\n 37714: s1 = u64 [sp + 0xc8]\n 37718: sp = sp + 0xe0\n 37722: ret\n      : @1407 (gas: 3)\n 37724: a0 = sp + 0xa0\n 37728: a1 = 0x40\n 37731: ra = 1350, jump @7\n      : @1408 [@dyn 675] (gas: 1)\n 37738: t0 = 1352, jump @1804\n      : @1409 [@dyn 676] (gas: 1)\n 37744: jump @1420 if a0 != 0\n      : @1410 (gas: 1)\n 37747: t0 = 1354, jump @1820\n      : @1411 [@dyn 677] (gas: 1)\n 37753: ra = 1356, jump @9\n      : @1412 [@dyn 678] (gas: 1)\n 37760: t0 = 1358, jump @1795\n      : @1413 [@dyn 679] (gas: 1)\n 37766: jump @1420 if a0 == 0\n      : @1414 (gas: 8)\n 37769: a0 = u64 [sp + 0x18]\n 37772: i32 a0 = a0 + 0x4\n 37775: u64 [sp + 120] = 0\n 37778: u64 [sp + 112] = 0\n 37781: u64 [sp + 96] = 0x20\n 37785: a1 = sp + 0x60\n 37788: u64 [sp + 104] = 0\n 37791: ra = 1360, jump @9\n      : @1415 [@dyn 680] (gas: 1)\n 37798: t0 = 1362, jump @1819\n      : @1416 [@dyn 681] (gas: 1)\n 37804: jump @1420 if a0 == 0\n      : @1417 (gas: 8)\n 37807: s1 = u64 [sp + 0x18]\n 37810: i32 a0 = s1 + 0x24\n 37813: u64 [sp + 88] = 0\n 37816: u64 [sp + 80] = 0\n 37819: u64 [sp + 64] = 0x1b\n 37823: a1 = sp + 0x40\n 37826: u64 [sp + 72] = 0\n 37829: ra = 1364, jump @9\n      : @1418 [@dyn 682] (gas: 1)\n 37836: t0 = 1366, jump @1812\n      : @1419 [@dyn 683] (gas: 1)\n 37842: jump @1421 if a0 != 0\n      : @1420 (gas: 1)\n 37845: trap\n      : @1421 (gas: 12)\n 37846: s1 = u64 [sp + 0x18]\n 37849: i32 a0 = s1 + 0x44\n 37852: a1 = u64 [0x200d0]\n 37857: a2 = u64 [0x200d8]\n 37862: a3 = u64 [0x200e0]\n 37867: u64 [sp + 0x38] = a1\n 37870: u64 [sp + 0x30] = a2\n 37873: u64 [sp + 0x28] = a3\n 37876: a2 = 0x7465640000000000\n 37886: a1 = sp + 0x20\n 37889: u64 [sp + 0x20] = a2\n 37892: ra = 1368, jump @9\n      : @1422 [@dyn 684] (gas: 3)\n 37899: a1 = 0x64\n 37902: a0 = s1\n 37904: ra = 1370, jump @18\n      : @1423 [@dyn 685] (gas: 7)\n 37911: i32 a1 = a0 + 0\n 37913: a0 = 0x1\n 37916: a2 = 0x64\n 37919: ra = 0x55c\n 37923: ecalli 13 // 'seal_return'\n 37925: t0 = 0x55e\n 37929: jump @1825\n      : @1424 [@dyn 686] (gas: 1)\n 37932: t0 = 1374, jump @1825\n      : @1425 [@dyn 687] (gas: 25)\n 37938: s1 = sp\n 37940: u64 [s1 + 0x38] = a0\n 37943: a0 = u64 [a2]\n 37945: u64 [s1 + 0x58] = a0\n 37948: a0 = u64 [a2 + 0x8]\n 37951: u64 [s1 + 0x40] = a0\n 37954: a0 = u64 [a2 + 0x10]\n 37957: u64 [s1 + 0x48] = a0\n 37960: a0 = u64 [a2 + 0x18]\n 37963: u64 [s1 + 0x50] = a0\n 37966: a0 = u64 [a1 + 0x18]\n 37969: a2 = u64 [a1 + 0x10]\n 37972: a3 = u64 [a1 + 0x8]\n 37975: a1 = u64 [a1]\n 37977: u64 [s1 + 0x30] = a0\n 37980: u64 [s1 + 0xf8] = a0\n 37984: u64 [s1 + 0x28] = a2\n 37987: u64 [s1 + 0xf0] = a2\n 37991: u64 [s1 + 0x20] = a3\n 37994: u64 [s1 + 0xe8] = a3\n 37998: u64 [s1 + 0x18] = a1\n 38001: u64 [s1 + 0xe0] = a1\n 38005: a0 = s1 + 0xc0\n 38009: a1 = s1 + 0xe0\n 38013: ra = 1376, jump @11\n      : @1426 [@dyn 688] (gas: 20)\n 38020: a0 = u64 [s1 + 0xd8]\n 38024: t0 = u64 [s1 + 0xc0]\n 38028: a2 = u64 [s1 + 0xd0]\n 38032: a3 = u64 [s1 + 0xc8]\n 38036: a1 = u64 [s1 + 0x50]\n 38039: a4 = a0 ^ a1\n 38042: a1 = a1 <u a0\n 38045: a0 = u64 [s1 + 0x48]\n 38048: a5 = a0 <u a2\n 38051: a5 = a1 if a4 != 0\n 38054: a1 = u64 [s1 + 0x40]\n 38057: t1 = a3 ^ a1\n 38060: a3 = a1 <u a3\n 38063: a1 = u64 [s1 + 0x58]\n 38066: a1 = a1 <u t0\n 38069: a1 = a3 if t1 != 0\n 38072: a0 = a0 ^ a2\n 38075: a0 = a0 | a4\n 38078: a1 = a5 if a0 != 0\n 38081: jump @1431 if a1 == 0\n      : @1427 (gas: 11)\n 38085: a0 = u64 [s1 + 0x18]\n 38088: u64 [s1 + 0x60] = a0\n 38091: a0 = u64 [s1 + 0x20]\n 38094: u64 [s1 + 0x68] = a0\n 38097: a0 = u64 [s1 + 0x28]\n 38100: u64 [s1 + 0x70] = a0\n 38103: a1 = s1 + 0x60\n 38106: a0 = u64 [s1 + 0x30]\n 38109: u64 [s1 + 0x78] = a0\n 38112: a0 = 0\n 38114: ra = 1378, jump @9\n      : @1428 [@dyn 689] (gas: 2)\n 38121: a1 = i32 [0x201f0]\n 38126: jump @1430 if a1 >u 31\n      : @1429 (gas: 2)\n 38130: u32 [0x201f0] = 0x20\n 38136: fallthrough\n      : @1430 (gas: 63)\n 38137: a0 = sp + 0xffffffffffffffe0\n 38140: a2 = a0 & 0xffffffffffffffe0\n 38143: u64 [s1 + 0x30] = a2\n 38146: sp = a2\n 38148: a0 = 0x20200\n 38153: i32 a0 = a0 + 0\n 38155: i32 a2 = a2 + 0\n 38157: a1 = 0x20\n 38160: ecalli 8 // 'hash_keccak_256'\n 38162: t2 = u64 [s1 + 0x30]\n 38165: a0 = u64 [t2 + 0x18]\n 38168: a1 = u64 [t2 + 0x10]\n 38171: a2 = reverse a0\n 38173: a3 = reverse a1\n 38175: t1 = u64 [s1 + 0x58]\n 38178: a0 = t1 >> 0x5\n 38181: a4 = u64 [s1 + 0x40]\n 38184: a1 = a4 << 0x3b\n 38187: a0 = a0 | a1\n 38190: a1 = a4 >> 0x5\n 38193: a5 = u64 [s1 + 0x48]\n 38196: a4 = a5 << 0x3b\n 38199: a1 = a1 | a4\n 38202: a1 = a1 + a3\n 38205: t0 = a2 + a0\n 38208: a2 = t0 <u a2\n 38211: a1 = a1 + a2\n 38214: a4 = a1 ^ a3\n 38217: a3 = a1 <u a3\n 38220: a3 = a2 if a4 == 0\n 38223: a2 = u64 [t2]\n 38225: a4 = a5 >> 0x5\n 38228: a0 = u64 [s1 + 0x50]\n 38231: a5 = a0 << 0x3b\n 38234: a4 = a4 | a5\n 38237: a5 = u64 [t2 + 0x8]\n 38240: a2 = reverse a2\n 38242: a0 = a0 >> 0x5\n 38245: a0 = a0 + a2\n 38248: a2 = reverse a5\n 38250: a4 = a4 + a2\n 38253: a2 = a4 <u a2\n 38256: a0 = a0 + a2\n 38259: a3 = a3 + a4\n 38262: a2 = a3 <u a4\n 38265: a0 = a0 + a2\n 38268: a2 = t1 & 0x1f\n 38271: a4 = u64 [s1 + 0x38]\n 38274: u64 [a4 + 0x20] = a2\n 38277: u64 [a4] = t0\n 38279: u64 [a4 + 0x8] = a1\n 38282: u64 [a4 + 0x10] = a3\n 38285: u64 [a4 + 0x18] = a0\n 38288: a0 = 0\n 38290: u64 [a4 + 56] = 0\n 38293: u64 [a4 + 48] = 0\n 38296: u64 [a4 + 40] = 0\n 38299: sp = s0 + 0xfffffffffffffee0\n 38303: ra = u64 [sp + 0x118]\n 38307: s0 = u64 [sp + 0x110]\n 38311: s1 = u64 [sp + 0x108]\n 38315: sp = sp + 0x120\n 38319: ret\n      : @1431 (gas: 8)\n 38321: u64 [s1 + 176] = 0\n 38325: u64 [s1 + 168] = 0\n 38329: u64 [s1 + 160] = 0\n 38333: a0 = 0x4e487b7100000000\n 38343: a1 = s1 + 0xa0\n 38347: u64 [s1 + 0xb8] = a0\n 38351: a0 = 0\n 38353: ra = 1380, jump @9\n      : @1432 [@dyn 690] (gas: 7)\n 38360: u64 [s1 + 152] = 0\n 38364: u64 [s1 + 144] = 0\n 38368: u64 [s1 + 128] = 0x32\n 38373: a0 = 0x4\n 38376: a1 = s1 + 0x80\n 38380: u64 [s1 + 136] = 0\n 38384: ra = 1382, jump @9\n      : @1433 [@dyn 691] (gas: 2)\n 38391: a1 = i32 [0x201f0]\n 38396: jump @1435 if a1 >u 63\n      : @1434 (gas: 2)\n 38400: u32 [0x201f0] = 0x40\n 38406: fallthrough\n      : @1435 (gas: 7)\n 38407: a1 = 0x20200\n 38412: i32 a1 = a1 + 0\n 38414: a0 = 0x1\n 38417: a2 = 0x24\n 38420: ra = 0x568\n 38424: ecalli 13 // 'seal_return'\n 38426: fallthrough\n      : @1436 [@dyn 692] (gas: 48)\n 38427: sp = sp + 0xffffffffffffff68\n 38431: u64 [sp + 0x90] = ra\n 38435: u64 [sp + 0x88] = s0\n 38439: u64 [sp + 0x80] = s1\n 38443: u64 [sp + 0x58] = a0\n 38446: a5 = u64 [a2]\n 38448: u64 [sp + 0x30] = a5\n 38451: s0 = u64 [a2 + 0x8]\n 38454: a0 = u64 [a1 + 0x10]\n 38457: u64 [sp + 0x50] = a0\n 38460: t0 = u64 [a2 + 0x10]\n 38463: s1 = a5 >> 0x3d\n 38466: a4 = s0 << 0x3\n 38469: a4 = a4 | s1\n 38472: a5 = a5 << 0x3\n 38475: a0 = a4 >u 0\n 38477: s1 = a5 <u 0x100\n 38481: t1 = a5\n 38483: a5 = s1 ^ 0x1\n 38486: a5 = a0 if a4 != 0\n 38489: s1 = a5\n 38491: a4 = u64 [a1 + 0x18]\n 38494: u64 [sp + 0x48] = a4\n 38497: s0 = s0 >> 0x3d\n 38500: a4 = t0 << 0x3\n 38503: a4 = a4 | s0\n 38506: a5 = u64 [a1]\n 38508: u64 [sp + 0x40] = a5\n 38511: a2 = u64 [a2 + 0x18]\n 38514: a1 = u64 [a1 + 0x8]\n 38517: u64 [sp + 0x38] = a1\n 38520: s0 = u8 [a3]\n 38522: u64 [sp + 0x28] = s0\n 38525: a0 = t0 >> 0x3d\n 38528: a2 = a2 << 0x3\n 38531: a0 = a0 | a2\n 38534: a1 = a0 >u 0\n 38536: a2 = a4 >u 0\n 38538: a2 = a1 if a0 != 0\n 38541: a0 = a0 | a4\n 38544: s1 = a2 if a0 != 0\n 38547: u64 [sp + 0x68] = s1\n 38550: i32 a2 = t1 + 0xffffffffffffff80\n 38553: s1 = t1\n 38555: u64 [sp + 0x20] = a2\n 38558: a0 = s0\n 38560: a1 = 0\n 38562: ra = 1386, jump @1833\n      : @1437 [@dyn 693] (gas: 7)\n 38568: u64 [sp + 0x70] = a0\n 38571: u64 [sp + 0x78] = a1\n 38574: i32 a2 = 0x80 - s1\n 38578: u64 [sp + 0x18] = a2\n 38581: a0 = s0\n 38583: a1 = 0\n 38585: ra = 1388, jump @1828\n      : @1438 [@dyn 694] (gas: 16)\n 38591: u64 [sp + 0x8] = s1\n 38594: s0 = s1 <u 0x80\n 38598: a3 = u64 [sp + 0x70]\n 38601: a0 = a3 if s0 == 0\n 38604: a0 = 0 if s1 == 0\n 38606: u64 [sp + 0x70] = a0\n 38609: a0 = u64 [sp + 0x78]\n 38612: a1 = a0 if s0 == 0\n 38615: a1 = 0 if s1 == 0\n 38617: u64 [sp + 0x78] = a1\n 38620: a0 = u64 [sp + 0x30]\n 38623: i32 a2 = a0 << 0x3\n 38626: u64 [sp + 0x10] = a2\n 38629: a0 = u64 [sp + 0x28]\n 38632: a1 = 0\n 38634: ra = 1390, jump @1833\n      : @1439 [@dyn 695] (gas: 18)\n 38640: u64 [sp + 0x60] = s0\n 38643: a0 = 0 if s0 == 0\n 38645: a1 = 0 if s0 == 0\n 38647: s1 = u64 [sp + 0x68]\n 38650: a1 = 0 if s1 != 0\n 38652: u64 [sp + 0x30] = a1\n 38655: a0 = 0 if s1 != 0\n 38657: u64 [sp + 0x28] = a0\n 38660: a0 = u64 [sp + 0x78]\n 38663: a0 = 0 if s1 != 0\n 38665: u64 [sp + 0x78] = a0\n 38668: a0 = u64 [sp + 0x70]\n 38671: a0 = 0 if s1 != 0\n 38673: u64 [sp + 0x70] = a0\n 38676: a0 = 0xff\n 38680: a1 = 0\n 38682: a2 = u64 [sp + 0x20]\n 38685: ra = 1392, jump @1833\n      : @1440 [@dyn 696] (gas: 6)\n 38691: u64 [sp] = a0\n 38693: u64 [sp + 0x20] = a1\n 38696: a0 = 0xff\n 38700: a1 = 0\n 38702: a2 = u64 [sp + 0x18]\n 38705: ra = 1394, jump @1828\n      : @1441 [@dyn 697] (gas: 14)\n 38711: s0 = a0\n 38713: s1 = a1\n 38715: a1 = u64 [sp + 0x60]\n 38718: a0 = u64 [sp]\n 38720: s0 = a0 if a1 == 0\n 38723: a0 = u64 [sp + 0x8]\n 38726: s0 = 0 if a0 == 0\n 38728: a2 = u64 [sp + 0x20]\n 38731: s1 = a2 if a1 == 0\n 38734: s1 = 0 if a0 == 0\n 38736: a0 = 0xff\n 38740: a1 = 0\n 38742: a2 = u64 [sp + 0x10]\n 38745: ra = 1396, jump @1833\n      : @1442 [@dyn 698] (gas: 38)\n 38751: a2 = u64 [sp + 0x60]\n 38754: a0 = 0 if a2 == 0\n 38756: a1 = 0 if a2 == 0\n 38758: a1 = a1 ^ 0xffffffffffffffff\n 38761: a0 = a0 ^ 0xffffffffffffffff\n 38764: a2 = s1 ^ 0xffffffffffffffff\n 38767: a3 = s0 ^ 0xffffffffffffffff\n 38770: a5 = u64 [sp + 0x68]\n 38773: a3 = 0xffffffffffffffff if a5 != 0\n 38776: a2 = 0xffffffffffffffff if a5 != 0\n 38779: a0 = 0xffffffffffffffff if a5 != 0\n 38782: a1 = 0xffffffffffffffff if a5 != 0\n 38785: a4 = u64 [sp + 0x38]\n 38788: a1 = a1 & a4\n 38791: a4 = u64 [sp + 0x40]\n 38794: a0 = a0 & a4\n 38797: a4 = u64 [sp + 0x48]\n 38800: a2 = a2 & a4\n 38803: a4 = u64 [sp + 0x50]\n 38806: a3 = a3 & a4\n 38809: a4 = u64 [sp + 0x70]\n 38812: a3 = a3 | a4\n 38815: a4 = u64 [sp + 0x78]\n 38818: a2 = a2 | a4\n 38821: a4 = u64 [sp + 0x28]\n 38824: a0 = a0 | a4\n 38827: a4 = u64 [sp + 0x30]\n 38830: a1 = a1 | a4\n 38833: a4 = u64 [sp + 0x58]\n 38836: u64 [a4 + 0x8] = a1\n 38839: u64 [a4] = a0\n 38841: u64 [a4 + 0x18] = a2\n 38844: u64 [a4 + 0x10] = a3\n 38847: ra = u64 [sp + 0x90]\n 38851: s0 = u64 [sp + 0x88]\n 38855: s1 = u64 [sp + 0x80]\n 38859: sp = sp + 0x98\n 38863: ret\n      : @1443 (gas: 19)\n 38865: sp = sp + 0xffffffffffffff90\n 38868: u64 [sp + 0x68] = ra\n 38871: u64 [sp + 0x60] = s0\n 38874: s0 = sp + 0x70\n 38877: sp = sp & 0xfffffffffffffff0\n 38880: a3 = u64 [a0 + 0x18]\n 38883: a2 = u64 [a0 + 0x10]\n 38886: t1 = u64 [a0]\n 38888: a0 = u64 [a0 + 0x8]\n 38891: a4 = a3 >u 0\n 38893: a5 = a2 >u 0\n 38895: a5 = a4 if a3 != 0\n 38898: t0 = a0 >u 0\n 38900: a4 = t1 <u 0xffffffffffffff00\n 38904: a4 = a4 ^ 0x1\n 38907: a4 = t0 if a0 != 0\n 38910: a1 = a2 | a3\n 38913: a4 = a5 if a1 != 0\n 38916: jump @1446 if a4 != 0\n      : @1444 (gas: 15)\n 38919: a1 = t1 + 0x100\n 38923: a4 = a1 <u t1\n 38926: a5 = a0 + a4\n 38929: a0 = a5 <u a0\n 38932: a0 = a4 if a4 == 0\n 38935: a0 = a0 + a2\n 38938: a2 = a0 <u a2\n 38941: a2 = a2 + a3\n 38944: u64 [sp + 0x40] = a1\n 38947: u64 [sp + 0x48] = a5\n 38950: u64 [sp + 0x50] = a0\n 38953: a0 = 0x40\n 38956: a1 = sp + a0\n 38959: u64 [sp + 0x58] = a2\n 38962: ra = 1398, jump @9\n      : @1445 [@dyn 699] (gas: 5)\n 38969: sp = s0 + 0xffffffffffffff90\n 38972: ra = u64 [sp + 0x68]\n 38975: s0 = u64 [sp + 0x60]\n 38978: sp = sp + 0x70\n 38981: ret\n      : @1446 (gas: 1)\n 38983: t0 = 1400, jump @1818\n      : @1447 [@dyn 700] (gas: 1)\n 38989: ra = 1402, jump @9\n      : @1448 [@dyn 701] (gas: 7)\n 38996: u64 [sp + 24] = 0\n 38999: u64 [sp + 16] = 0\n 39002: u64 [sp + 0] = 0x41\n 39005: a0 = 0x4\n 39008: a1 = sp\n 39010: u64 [sp + 8] = 0\n 39013: ra = 1404, jump @9\n      : @1449 [@dyn 702] (gas: 2)\n 39020: a1 = i32 [0x201f0]\n 39025: jump @1451 if a1 >u 63\n      : @1450 (gas: 2)\n 39029: u32 [0x201f0] = 0x40\n 39035: fallthrough\n      : @1451 (gas: 7)\n 39036: a1 = 0x20200\n 39041: i32 a1 = a1 + 0\n 39043: a0 = 0x1\n 39046: a2 = 0x24\n 39049: ra = 0x57e\n 39053: ecalli 13 // 'seal_return'\n 39055: fallthrough\n      : @1452 [@dyn 703] (gas: 46)\n 39056: sp = sp + 0xffffffffffffff70\n 39060: u64 [sp + 0x88] = ra\n 39064: u64 [sp + 0x80] = s0\n 39068: u64 [sp + 0x78] = s1\n 39071: s0 = sp + 0x90\n 39075: sp = sp & 0xfffffffffffffff0\n 39078: t0 = a0\n 39080: a2 = u64 [a1]\n 39082: t2 = u64 [a0 + 0x8]\n 39085: a5 = u64 [a1 + 0x8]\n 39088: t1 = u64 [a0]\n 39090: a3 = a2 + 0x1f\n 39093: ra = a3 <u a2\n 39096: a2 = a5 + ra\n 39099: a3 = a3 & 0xffffffffffffffe0\n 39102: u64 [sp + 0x8] = t1\n 39105: t1 = t1 + a3\n 39108: a4 = t1 <u a3\n 39111: a3 = a2 + t2\n 39114: a3 = a3 + a4\n 39117: s1 = a3 ^ a2\n 39120: a0 = a3 <u a2\n 39123: a0 = a4 if s1 == 0\n 39126: a4 = u64 [t0 + 0x18]\n 39129: a5 = a2 <u a5\n 39132: s1 = u64 [a1 + 0x10]\n 39135: t0 = u64 [t0 + 0x10]\n 39138: a1 = u64 [a1 + 0x18]\n 39141: a5 = ra if ra == 0\n 39144: a5 = a5 + s1\n 39147: s1 = a5 <u s1\n 39150: a2 = a5 + t0\n 39153: a0 = a0 + a2\n 39156: a5 = a2 <u a5\n 39159: a2 = a0 <u a2\n 39162: a1 = a1 + a4\n 39165: a1 = a1 + s1\n 39168: a1 = a1 + a5\n 39171: a5 = a1 + a2\n 39174: a1 = a5 >u 0\n 39176: a2 = a0 >u 0\n 39178: a2 = a1 if a5 != 0\n 39181: a1 = a0 | a5\n 39184: s1 = a3 >u 0\n 39186: s1 = a2 if a1 != 0\n 39189: jump @1456 if s1 != 0\n      : @1453 (gas: 13)\n 39192: a1 = u64 [sp + 0x8]\n 39195: a1 = t1 <u a1\n 39198: a2 = a3 ^ t2\n 39201: s1 = a3 <u t2\n 39204: s1 = a1 if a2 == 0\n 39207: a1 = a0 <u t0\n 39210: a2 = a5 ^ a4\n 39213: a4 = a5 <u a4\n 39216: a4 = a1 if a2 == 0\n 39219: a1 = a0 ^ t0\n 39222: a1 = a1 | a2\n 39225: a4 = s1 if a1 == 0\n 39228: jump @1456 if a4 != 0\n      : @1454 (gas: 7)\n 39231: u64 [sp + 0x50] = t1\n 39234: u64 [sp + 0x58] = a3\n 39237: u64 [sp + 0x60] = a0\n 39240: a0 = 0x40\n 39243: a1 = sp + 0x50\n 39246: u64 [sp + 0x68] = a5\n 39249: ra = 1408, jump @9\n      : @1455 [@dyn 704] (gas: 6)\n 39256: sp = s0 + 0xffffffffffffff70\n 39260: ra = u64 [sp + 0x88]\n 39264: s0 = u64 [sp + 0x80]\n 39268: s1 = u64 [sp + 0x78]\n 39271: sp = sp + 0x90\n 39275: ret\n      : @1456 (gas: 8)\n 39277: u64 [sp + 64] = 0\n 39280: u64 [sp + 56] = 0\n 39283: u64 [sp + 48] = 0\n 39286: a0 = 0x4e487b7100000000\n 39296: a1 = sp + 0x30\n 39299: u64 [sp + 0x48] = a0\n 39302: a0 = 0\n 39304: ra = 1410, jump @9\n      : @1457 [@dyn 705] (gas: 7)\n 39311: u64 [sp + 40] = 0\n 39314: u64 [sp + 32] = 0\n 39317: u64 [sp + 16] = 0x41\n 39321: a0 = 0x4\n 39324: a1 = sp + 0x10\n 39327: u64 [sp + 24] = 0\n 39330: ra = 1412, jump @9\n      : @1458 [@dyn 706] (gas: 2)\n 39337: a1 = i32 [0x201f0]\n 39342: jump @1460 if a1 >u 63\n      : @1459 (gas: 2)\n 39346: u32 [0x201f0] = 0x40\n 39352: fallthrough\n      : @1460 (gas: 7)\n 39353: a1 = 0x20200\n 39358: i32 a1 = a1 + 0\n 39360: a0 = 0x1\n 39363: a2 = 0x24\n 39366: ra = 0x586\n 39370: ecalli 13 // 'seal_return'\n 39372: fallthrough\n      : @1461 [@dyn 707] (gas: 19)\n 39373: sp = sp + 0xffffffffffffff40\n 39377: u64 [sp + 0xb8] = ra\n 39381: u64 [sp + 0xb0] = s0\n 39385: u64 [sp + 0xa8] = s1\n 39389: s0 = sp + 0xc0\n 39393: sp = sp & 0xffffffffffffffe0\n 39396: s1 = sp\n 39398: a2 = u64 [a1]\n 39400: a3 = u64 [a1 + 0x8]\n 39403: a4 = u64 [a1 + 0x10]\n 39406: a1 = u64 [a1 + 0x18]\n 39409: u64 [s1 + 0x18] = a0\n 39412: u64 [s1 + 0x78] = a1\n 39415: u64 [s1 + 0x70] = a4\n 39418: u64 [s1 + 0x68] = a3\n 39421: a1 = s1 + 0x60\n 39424: u64 [s1 + 0x60] = a2\n 39427: a0 = 0\n 39429: ra = 1416, jump @9\n      : @1462 [@dyn 708] (gas: 7)\n 39436: u64 [s1 + 88] = 0\n 39439: u64 [s1 + 80] = 0\n 39442: u64 [s1 + 72] = 0\n 39445: a0 = 0x20\n 39448: a1 = s1 + 0x40\n 39451: u64 [s1 + 64] = 0\n 39454: ra = 1418, jump @9\n      : @1463 [@dyn 709] (gas: 2)\n 39461: a1 = i32 [0x201f0]\n 39466: jump @1465 if a1 >u 63\n      : @1464 (gas: 2)\n 39470: u32 [0x201f0] = 0x40\n 39476: fallthrough\n      : @1465 (gas: 33)\n 39477: a0 = sp + 0xffffffffffffffe0\n 39480: a2 = a0 & 0xffffffffffffffe0\n 39483: u64 [s1 + 0x10] = a2\n 39486: sp = a2\n 39488: a0 = 0x20200\n 39493: i32 a0 = a0 + 0\n 39495: i32 a2 = a2 + 0\n 39497: a1 = 0x40\n 39500: ecalli 8 // 'hash_keccak_256'\n 39502: a3 = u64 [s1 + 0x10]\n 39505: a0 = u64 [a3]\n 39507: a1 = u64 [a3 + 0x8]\n 39510: a2 = u64 [a3 + 0x10]\n 39513: a3 = u64 [a3 + 0x18]\n 39516: a0 = reverse a0\n 39518: a1 = reverse a1\n 39520: a2 = reverse a2\n 39522: a3 = reverse a3\n 39524: a3 = a3 + 0x1\n 39527: a4 = a3 <u 0x1\n 39530: a2 = a2 + a4\n 39533: a4 = a3 | a2\n 39536: a4 = a4 <u 0x1\n 39539: a4 = a4 + a1\n 39542: a1 = a4 <u a1\n 39545: a0 = a0 + a1\n 39548: u64 [s1 + 0x80] = a3\n 39552: u64 [s1 + 0x88] = a2\n 39556: u64 [s1 + 0x90] = a4\n 39560: u64 [s1 + 0x98] = a0\n 39564: a0 = s1 + 0x20\n 39567: a1 = s1 + 0x80\n 39571: ra = 1420, jump @11\n      : @1466 [@dyn 710] (gas: 15)\n 39578: a0 = u64 [s1 + 0x30]\n 39581: a1 = u64 [s1 + 0x38]\n 39584: a2 = u64 [s1 + 0x20]\n 39587: a3 = u64 [s1 + 0x28]\n 39590: a4 = u64 [s1 + 0x18]\n 39593: u64 [a4 + 0x10] = a0\n 39596: u64 [a4 + 0x18] = a1\n 39599: u64 [a4] = a2\n 39601: u64 [a4 + 0x8] = a3\n 39604: sp = s0 + 0xffffffffffffff40\n 39608: ra = u64 [sp + 0xb8]\n 39612: s0 = u64 [sp + 0xb0]\n 39616: s1 = u64 [sp + 0xa8]\n 39620: sp = sp + 0xc0\n 39624: ret\n      : @1467 (gas: 10)\n 39626: a4 = u64 [a1 + 0x18]\n 39629: a3 = u64 [a1 + 0x10]\n 39632: t1 = u64 [a1 + 0x8]\n 39635: t0 = a4 >u 0\n 39637: a5 = a3 >u 0\n 39639: a5 = t0 if a4 != 0\n 39642: t0 = a3 | a4\n 39645: a2 = t1 >u 0\n 39647: a2 = a5 if t0 != 0\n 39650: jump @1469 if a2 != 0\n      : @1468 (gas: 24)\n 39653: a1 = u64 [a1]\n 39655: a2 = a3 >> 0x3b\n 39658: a4 = a4 << 0x5\n 39661: t0 = a4 | a2\n 39664: a4 = t1 >> 0x3b\n 39667: a3 = a3 << 0x5\n 39670: a3 = a3 | a4\n 39673: a4 = a1 >> 0x3b\n 39676: t1 = t1 << 0x5\n 39679: a4 = t1 | a4\n 39682: a1 = a1 << 0x5\n 39685: a5 = a1 + 0x20\n 39688: a1 = a5 <u a1\n 39691: a2 = a4 + a1\n 39694: a4 = a2 <u a4\n 39697: a4 = a1 if a1 == 0\n 39700: a4 = a4 + a3\n 39703: a1 = a4 <u a3\n 39706: a1 = a1 + t0\n 39709: u64 [a0] = a5\n 39711: u64 [a0 + 0x8] = a2\n 39714: u64 [a0 + 0x10] = a4\n 39717: u64 [a0 + 0x18] = a1\n 39720: ret\n      : @1469 (gas: 6)\n 39722: sp = sp + 0xffffffffffffffb0\n 39725: u64 [sp + 0x48] = ra\n 39728: u64 [sp + 0x40] = s0\n 39731: s0 = sp + 0x50\n 39734: sp = sp & 0xfffffffffffffff0\n 39737: t0 = 1422, jump @1818\n      : @1470 [@dyn 711] (gas: 1)\n 39743: ra = 1424, jump @9\n      : @1471 [@dyn 712] (gas: 7)\n 39750: u64 [sp + 24] = 0\n 39753: u64 [sp + 16] = 0\n 39756: u64 [sp + 0] = 0x41\n 39759: a0 = 0x4\n 39762: a1 = sp\n 39764: u64 [sp + 8] = 0\n 39767: ra = 1426, jump @9\n      : @1472 [@dyn 713] (gas: 2)\n 39774: a1 = i32 [0x201f0]\n 39779: jump @1474 if a1 >u 63\n      : @1473 (gas: 2)\n 39783: u32 [0x201f0] = 0x40\n 39789: fallthrough\n      : @1474 (gas: 8)\n 39790: a1 = 0x20200\n 39795: i32 a1 = a1 + 0\n 39797: a0 = 0x1\n 39800: a2 = 0x24\n 39803: ra = 0x594\n 39807: ecalli 13 // 'seal_return'\n 39809: t0 = 0x596\n 39813: jump @1793\n      : @1475 [@dyn 714] (gas: 1)\n 39816: t0 = 1430, jump @1793\n      : @1476 [@dyn 715] (gas: 15)\n 39822: ecalli 9 // 'now'\n 39824: a0 = u64 [sp]\n 39826: a1 = 0x5265c00\n 39832: a0 = a0 /u a1\n 39835: a1 = 0\n 39837: u64 [s1 + 24] = 0\n 39840: u64 [s1 + 16] = 0\n 39843: u64 [s1 + 8] = 0\n 39846: u64 [s1] = a0\n 39848: sp = s0 + 0xffffffffffffffc0\n 39851: ra = u64 [sp + 0x38]\n 39854: s0 = u64 [sp + 0x30]\n 39857: s1 = u64 [sp + 0x28]\n 39860: sp = sp + 0x40\n 39863: ret\n      : @1477 (gas: 53)\n 39865: sp = sp + 0xffffffffffffff90\n 39868: u64 [sp + 0x68] = ra\n 39871: u64 [sp + 0x60] = s0\n 39874: u64 [sp + 0x58] = s1\n 39877: s0 = sp + 0x70\n 39880: sp = sp & 0xfffffffffffffff0\n 39883: a3 = a1\n 39885: t2 = u64 [a1 + 0x10]\n 39888: a1 = u64 [a1 + 0x8]\n 39891: t0 = u64 [a2 + 0x8]\n 39894: s1 = u64 [a3]\n 39896: u64 [sp] = s1\n 39898: a4 = u64 [a2]\n 39900: u64 [sp + 0x8] = a4\n 39903: ra = u64 [a2 + 0x10]\n 39906: a5 = t0 ^ a1\n 39909: u64 [sp + 0x28] = a5\n 39912: a5 = t0 <u a1\n 39915: a4 = a4 <u s1\n 39918: t1 = u64 [sp + 0x28]\n 39921: a5 = a4 if t1 == 0\n 39924: s1 = a4\n 39926: a3 = u64 [a3 + 0x18]\n 39929: u64 [sp + 0x18] = a3\n 39932: a2 = u64 [a2 + 0x18]\n 39935: u64 [sp + 0x10] = a2\n 39938: a3 = ra - t2\n 39941: a2 = a3 - a5\n 39944: u64 [sp + 0x20] = a2\n 39947: a2 = a3 <u a5\n 39950: u64 [sp + 0x28] = t2\n 39953: a4 = ra <u t2\n 39956: t2 = u64 [sp + 0x18]\n 39959: a3 = u64 [sp + 0x10]\n 39962: a3 = a3 - t2\n 39965: a3 = a3 - a4\n 39968: a3 = a3 - a2\n 39971: a2 = t0 - a1\n 39974: a2 = a2 - s1\n 39977: t0 = u64 [sp]\n 39979: a4 = u64 [sp + 0x8]\n 39982: a4 = a4 - t0\n 39985: a5 = a2 >u 0\n 39987: a4 = a4 <u 0x20\n 39990: a4 = a4 ^ 0x1\n 39993: a4 = a5 if a2 != 0\n 39996: s1 = a3 >s 0\n 39998: a2 = u64 [sp + 0x20]\n 40001: a5 = a2 >u 0\n 40003: a5 = s1 if a3 != 0\n 40006: a2 = a2 | a3\n 40009: a4 = a5 if a2 != 0\n 40012: jump @1483 if a4 == 0\n      : @1478 (gas: 10)\n 40015: s1 = a0\n 40017: a3 = u64 [sp + 0x28]\n 40020: a0 = t0 | a3\n 40023: a2 = a1 | t2\n 40026: a0 = a0 | a2\n 40029: a0 = a0 >> 0x20\n 40032: a2 = a2 | a3\n 40035: a2 = a2 << 0x20\n 40038: a0 = a0 | a2\n 40041: jump @1482 if a0 != 0\n      : @1479 (gas: 3)\n 40044: a0 = sp + 0x30\n 40047: a1 = t0\n 40049: ra = 1432, jump @7\n      : @1480 [@dyn 716] (gas: 8)\n 40056: a0 = u64 [sp + 0x40]\n 40059: a1 = u64 [sp + 0x48]\n 40062: a2 = a0 ^ 0x1\n 40065: a2 = a2 | a1\n 40068: a3 = a0 <u 0x1\n 40071: a3 = 0 if a1 != 0\n 40073: a3 = 0 if a2 == 0\n 40075: jump @1484 if a3 == 0\n      : @1481 (gas: 12)\n 40078: a2 = u64 [sp + 0x30]\n 40081: a3 = u64 [sp + 0x38]\n 40084: u64 [s1] = a2\n 40086: u64 [s1 + 0x8] = a3\n 40089: u64 [s1 + 0x10] = a0\n 40092: u64 [s1 + 0x18] = a1\n 40095: sp = s0 + 0xffffffffffffff90\n 40098: ra = u64 [sp + 0x68]\n 40101: s0 = u64 [sp + 0x60]\n 40104: s1 = u64 [sp + 0x58]\n 40107: sp = sp + 0x70\n 40110: ret\n      : @1482 (gas: 1)\n 40112: trap\n      : @1483 (gas: 2)\n 40113: a1 = 0x20200\n 40118: jump @1485\n      : @1484 (gas: 2)\n 40120: a1 = 0x20200\n 40125: fallthrough\n      : @1485 (gas: 7)\n 40126: i32 a1 = a1 + 0\n 40128: a0 = 0x1\n 40131: a2 = 0\n 40133: ra = 0x59a\n 40137: ecalli 13 // 'seal_return'\n 40139: t0 = 0x59c\n 40143: jump @1810\n      : @1486 [@dyn 717] (gas: 1)\n 40146: t0 = 1436, jump @1810\n      : @1487 [@dyn 718] (gas: 16)\n 40152: a0 = u64 [0x200e8]\n 40157: u64 [s1 + 0x38] = a0\n 40160: a3 = s1 + 0x100\n 40164: u64 [a3 + 0x78] = a0\n 40167: a1 = u64 [0x200f0]\n 40172: a2 = u64 [0x200f8]\n 40177: a0 = u64 [0x20100]\n 40182: u64 [s1 + 0x28] = a1\n 40185: u64 [a3 + 0x70] = a1\n 40188: u64 [s1 + 0x20] = a2\n 40191: u64 [a3 + 0x68] = a2\n 40194: a1 = s1 + 0x160\n 40198: u64 [s1 + 0x30] = a0\n 40201: u64 [a3 + 0x60] = a0\n 40204: a0 = 0\n 40206: ra = 1438, jump @9\n      : @1488 [@dyn 719] (gas: 1)\n 40213: t0 = 1440, jump @1771\n      : @1489 [@dyn 720] (gas: 1)\n 40219: ra = 1442, jump @9\n      : @1490 [@dyn 721] (gas: 3)\n 40226: a1 = 0x201f0\n 40231: a0 = i32 [0x201f0]\n 40236: jump @1492 if a0 >u 63\n      : @1491 (gas: 2)\n 40240: u32 [0x201f0] = 0x40\n 40246: fallthrough\n      : @1492 (gas: 14)\n 40247: a0 = sp + 0xffffffffffffffe0\n 40250: a2 = a0 & 0xffffffffffffffe0\n 40253: u64 [s1 + 0x68] = a2\n 40256: sp = a2\n 40258: a0 = 0x20200\n 40263: i32 a0 = a0 + 0\n 40265: i32 a2 = a2 + 0\n 40267: u64 [s1 + 0x78] = a1\n 40270: a1 = 0x40\n 40273: u64 [s1 + 0x70] = a0\n 40276: ra = 0x5a4\n 40280: ecalli 8 // 'hash_keccak_256'\n 40282: t0 = 0x5a6\n 40286: jump @1761\n      : @1493 [@dyn 722] (gas: 1)\n 40289: t0 = 1446, jump @1761\n      : @1494 [@dyn 723] (gas: 8)\n 40295: a0 = 0x30200\n 40300: u64 [s1 + 0x68] = a0\n 40303: i32 a0 = a0 + 0\n 40305: u64 [s1 + 0x18] = a0\n 40308: ra = 0x5a8\n 40312: ecalli 4 // 'caller'\n 40314: t0 = 0x5aa\n 40318: jump @1758\n      : @1495 [@dyn 724] (gas: 1)\n 40321: t0 = 1450, jump @1758\n      : @1496 [@dyn 725] (gas: 1)\n 40327: ra = 1452, jump @9\n      : @1497 [@dyn 726] (gas: 1)\n 40334: t0 = 1454, jump @1777\n      : @1498 [@dyn 727] (gas: 1)\n 40340: ra = 1456, jump @9\n      : @1499 [@dyn 728] (gas: 3)\n 40347: a1 = u64 [s1 + 0x78]\n 40350: a0 = i32 [a1]\n 40352: jump @1501 if a0 >u 63\n      : @1500 (gas: 3)\n 40356: u32 [a1 + 0] = 0x40\n 40359: t0 = 0x5b2\n 40363: jump @1794\n      : @1501 (gas: 1)\n 40366: t0 = 1458, jump @1794\n      : @1502 [@dyn 729] (gas: 4)\n 40372: ra = 0x5b4\n 40376: ecalli 8 // 'hash_keccak_256'\n 40378: t0 = 0x5b6\n 40382: jump @1765\n      : @1503 [@dyn 730] (gas: 1)\n 40385: t0 = 1462, jump @1765\n      : @1504 [@dyn 731] (gas: 1)\n 40391: ra = 1464, jump @11\n      : @1505 [@dyn 732] (gas: 2)\n 40398: a0 = u8 [s1 + 0xe0]\n 40402: jump @1507 if a0 == 0\n      : @1506 (gas: 6)\n 40405: sp = s0 + 0xfffffffffffffe60\n 40409: ra = u64 [sp + 0x198]\n 40413: s0 = u64 [sp + 0x190]\n 40417: s1 = u64 [sp + 0x188]\n 40421: sp = sp + 0x1a0\n 40425: ret\n      : @1507 (gas: 1)\n 40427: t0 = 1466, jump @1774\n      : @1508 [@dyn 733] (gas: 1)\n 40433: ra = 1468, jump @9\n      : @1509 [@dyn 734] (gas: 5)\n 40440: a0 = u64 [s1 + 0x18]\n 40443: ra = 0x5be\n 40447: ecalli 4 // 'caller'\n 40449: t0 = 0x5c0\n 40453: jump @1760\n      : @1510 [@dyn 735] (gas: 1)\n 40456: t0 = 1472, jump @1760\n      : @1511 [@dyn 736] (gas: 1)\n 40462: ra = 1474, jump @9\n      : @1512 [@dyn 737] (gas: 1)\n 40469: t0 = 1476, jump @1813\n      : @1513 [@dyn 738] (gas: 1)\n 40475: ra = 1478, jump @9\n      : @1514 [@dyn 739] (gas: 3)\n 40482: a0 = u64 [s1 + 0x78]\n 40485: a0 = i32 [a0]\n 40487: jump @1516 if a0 >u 95\n      : @1515 (gas: 3)\n 40491: a1 = u64 [s1 + 0x78]\n 40494: u32 [a1 + 0] = 0x60\n 40497: fallthrough\n      : @1516 (gas: 7)\n 40498: a0 = 0x1\n 40501: a2 = 0x44\n 40504: a1 = u64 [s1 + 0x70]\n 40507: ra = 0x5c8\n 40511: ecalli 13 // 'seal_return'\n 40513: t0 = 0x5ca\n 40517: jump @1810\n      : @1517 [@dyn 740] (gas: 1)\n 40520: t0 = 1482, jump @1810\n      : @1518 [@dyn 741] (gas: 16)\n 40526: a0 = u64 [0x20108]\n 40531: u64 [s1 + 0x38] = a0\n 40534: a3 = s1 + 0x100\n 40538: u64 [a3 + 0x78] = a0\n 40541: a1 = u64 [0x20110]\n 40546: a2 = u64 [0x20118]\n 40551: a0 = u64 [0x20120]\n 40556: u64 [s1 + 0x28] = a1\n 40559: u64 [a3 + 0x70] = a1\n 40562: u64 [s1 + 0x20] = a2\n 40565: u64 [a3 + 0x68] = a2\n 40568: a1 = s1 + 0x160\n 40572: u64 [s1 + 0x30] = a0\n 40575: u64 [a3 + 0x60] = a0\n 40578: a0 = 0\n 40580: ra = 1484, jump @9\n      : @1519 [@dyn 742] (gas: 1)\n 40587: t0 = 1486, jump @1771\n      : @1520 [@dyn 743] (gas: 1)\n 40593: ra = 1488, jump @9\n      : @1521 [@dyn 744] (gas: 3)\n 40600: a1 = 0x201f0\n 40605: a0 = i32 [0x201f0]\n 40610: jump @1523 if a0 >u 63\n      : @1522 (gas: 2)\n 40614: u32 [0x201f0] = 0x40\n 40620: fallthrough\n      : @1523 (gas: 14)\n 40621: a0 = sp + 0xffffffffffffffe0\n 40624: a2 = a0 & 0xffffffffffffffe0\n 40627: u64 [s1 + 0x68] = a2\n 40630: sp = a2\n 40632: a0 = 0x20200\n 40637: i32 a0 = a0 + 0\n 40639: i32 a2 = a2 + 0\n 40641: u64 [s1 + 0x78] = a1\n 40644: a1 = 0x40\n 40647: u64 [s1 + 0x70] = a0\n 40650: ra = 0x5d2\n 40654: ecalli 8 // 'hash_keccak_256'\n 40656: t0 = 0x5d4\n 40660: jump @1761\n      : @1524 [@dyn 745] (gas: 1)\n 40663: t0 = 1492, jump @1761\n      : @1525 [@dyn 746] (gas: 8)\n 40669: a0 = 0x30200\n 40674: u64 [s1 + 0x68] = a0\n 40677: i32 a0 = a0 + 0\n 40679: u64 [s1 + 0x18] = a0\n 40682: ra = 0x5d6\n 40686: ecalli 4 // 'caller'\n 40688: t0 = 0x5d8\n 40692: jump @1758\n      : @1526 [@dyn 747] (gas: 1)\n 40695: t0 = 1496, jump @1758\n      : @1527 [@dyn 748] (gas: 1)\n 40701: ra = 1498, jump @9\n      : @1528 [@dyn 749] (gas: 1)\n 40708: t0 = 1500, jump @1777\n      : @1529 [@dyn 750] (gas: 1)\n 40714: ra = 1502, jump @9\n      : @1530 [@dyn 751] (gas: 3)\n 40721: a1 = u64 [s1 + 0x78]\n 40724: a0 = i32 [a1]\n 40726: jump @1532 if a0 >u 63\n      : @1531 (gas: 3)\n 40730: u32 [a1 + 0] = 0x40\n 40733: t0 = 0x5e0\n 40737: jump @1794\n      : @1532 (gas: 1)\n 40740: t0 = 1504, jump @1794\n      : @1533 [@dyn 752] (gas: 4)\n 40746: ra = 0x5e2\n 40750: ecalli 8 // 'hash_keccak_256'\n 40752: t0 = 0x5e4\n 40756: jump @1765\n      : @1534 [@dyn 753] (gas: 1)\n 40759: t0 = 1508, jump @1765\n      : @1535 [@dyn 754] (gas: 1)\n 40765: ra = 1510, jump @11\n      : @1536 [@dyn 755] (gas: 2)\n 40772: a0 = u8 [s1 + 0xe0]\n 40776: jump @1538 if a0 == 0\n      : @1537 (gas: 6)\n 40779: sp = s0 + 0xfffffffffffffe60\n 40783: ra = u64 [sp + 0x198]\n 40787: s0 = u64 [sp + 0x190]\n 40791: s1 = u64 [sp + 0x188]\n 40795: sp = sp + 0x1a0\n 40799: ret\n      : @1538 (gas: 1)\n 40801: t0 = 1512, jump @1774\n      : @1539 [@dyn 756] (gas: 1)\n 40807: ra = 1514, jump @9\n      : @1540 [@dyn 757] (gas: 5)\n 40814: a0 = u64 [s1 + 0x18]\n 40817: ra = 0x5ec\n 40821: ecalli 4 // 'caller'\n 40823: t0 = 0x5ee\n 40827: jump @1760\n      : @1541 [@dyn 758] (gas: 1)\n 40830: t0 = 1518, jump @1760\n      : @1542 [@dyn 759] (gas: 1)\n 40836: ra = 1520, jump @9\n      : @1543 [@dyn 760] (gas: 1)\n 40843: t0 = 1522, jump @1813\n      : @1544 [@dyn 761] (gas: 1)\n 40849: ra = 1524, jump @9\n      : @1545 [@dyn 762] (gas: 3)\n 40856: a0 = u64 [s1 + 0x78]\n 40859: a0 = i32 [a0]\n 40861: jump @1547 if a0 >u 95\n      : @1546 (gas: 3)\n 40865: a1 = u64 [s1 + 0x78]\n 40868: u32 [a1 + 0] = 0x60\n 40871: fallthrough\n      : @1547 (gas: 7)\n 40872: a0 = 0x1\n 40875: a2 = 0x44\n 40878: a1 = u64 [s1 + 0x70]\n 40881: ra = 0x5f6\n 40885: ecalli 13 // 'seal_return'\n 40887: t0 = 0x5f8\n 40891: jump @1810\n      : @1548 [@dyn 763] (gas: 1)\n 40894: t0 = 1528, jump @1810\n      : @1549 [@dyn 764] (gas: 16)\n 40900: a2 = u64 [a0]\n 40902: a1 = u64 [a0 + 0x8]\n 40905: a3 = u64 [a0 + 0x10]\n 40908: a0 = u64 [a0 + 0x18]\n 40911: u64 [s1 + 0x20] = a0\n 40914: a4 = s1 + 0x100\n 40918: u64 [a4 + 0x78] = a0\n 40921: u64 [s1 + 0x28] = a3\n 40924: u64 [a4 + 0x70] = a3\n 40927: u64 [s1 + 0x30] = a1\n 40930: u64 [a4 + 0x68] = a1\n 40933: a1 = s1 + 0x160\n 40937: u64 [s1 + 0x38] = a2\n 40940: u64 [a4 + 0x60] = a2\n 40943: a0 = 0\n 40945: ra = 1530, jump @9\n      : @1550 [@dyn 765] (gas: 1)\n 40952: t0 = 1532, jump @1771\n      : @1551 [@dyn 766] (gas: 1)\n 40958: ra = 1534, jump @9\n      : @1552 [@dyn 767] (gas: 3)\n 40965: a1 = 0x201f0\n 40970: a0 = i32 [0x201f0]\n 40975: jump @1554 if a0 >u 63\n      : @1553 (gas: 2)\n 40979: u32 [0x201f0] = 0x40\n 40985: fallthrough\n      : @1554 (gas: 14)\n 40986: a0 = sp + 0xffffffffffffffe0\n 40989: a2 = a0 & 0xffffffffffffffe0\n 40992: u64 [s1 + 0x68] = a2\n 40995: sp = a2\n 40997: a0 = 0x20200\n 41002: i32 a0 = a0 + 0\n 41004: i32 a2 = a2 + 0\n 41006: u64 [s1 + 0x78] = a1\n 41009: a1 = 0x40\n 41012: u64 [s1 + 0x70] = a0\n 41015: ra = 0x600\n 41019: ecalli 8 // 'hash_keccak_256'\n 41021: t0 = 0x602\n 41025: jump @1761\n      : @1555 [@dyn 768] (gas: 1)\n 41028: t0 = 1538, jump @1761\n      : @1556 [@dyn 769] (gas: 8)\n 41034: a0 = 0x30200\n 41039: u64 [s1 + 0x68] = a0\n 41042: i32 a0 = a0 + 0\n 41044: u64 [s1 + 0x18] = a0\n 41047: ra = 0x604\n 41051: ecalli 4 // 'caller'\n 41053: t0 = 0x606\n 41057: jump @1758\n      : @1557 [@dyn 770] (gas: 1)\n 41060: t0 = 1542, jump @1758\n      : @1558 [@dyn 771] (gas: 1)\n 41066: ra = 1544, jump @9\n      : @1559 [@dyn 772] (gas: 1)\n 41073: t0 = 1546, jump @1777\n      : @1560 [@dyn 773] (gas: 1)\n 41079: ra = 1548, jump @9\n      : @1561 [@dyn 774] (gas: 3)\n 41086: a1 = u64 [s1 + 0x78]\n 41089: a0 = i32 [a1]\n 41091: jump @1563 if a0 >u 63\n      : @1562 (gas: 3)\n 41095: u32 [a1 + 0] = 0x40\n 41098: t0 = 0x60e\n 41102: jump @1794\n      : @1563 (gas: 1)\n 41105: t0 = 1550, jump @1794\n      : @1564 [@dyn 775] (gas: 4)\n 41111: ra = 0x610\n 41115: ecalli 8 // 'hash_keccak_256'\n 41117: t0 = 0x612\n 41121: jump @1765\n      : @1565 [@dyn 776] (gas: 1)\n 41124: t0 = 1554, jump @1765\n      : @1566 [@dyn 777] (gas: 1)\n 41130: ra = 1556, jump @11\n      : @1567 [@dyn 778] (gas: 2)\n 41137: a0 = u8 [s1 + 0xe0]\n 41141: jump @1569 if a0 == 0\n      : @1568 (gas: 6)\n 41144: sp = s0 + 0xfffffffffffffe60\n 41148: ra = u64 [sp + 0x198]\n 41152: s0 = u64 [sp + 0x190]\n 41156: s1 = u64 [sp + 0x188]\n 41160: sp = sp + 0x1a0\n 41164: ret\n      : @1569 (gas: 1)\n 41166: t0 = 1558, jump @1774\n      : @1570 [@dyn 779] (gas: 1)\n 41172: ra = 1560, jump @9\n      : @1571 [@dyn 780] (gas: 5)\n 41179: a0 = u64 [s1 + 0x18]\n 41182: ra = 0x61a\n 41186: ecalli 4 // 'caller'\n 41188: t0 = 0x61c\n 41192: jump @1760\n      : @1572 [@dyn 781] (gas: 1)\n 41195: t0 = 1564, jump @1760\n      : @1573 [@dyn 782] (gas: 1)\n 41201: ra = 1566, jump @9\n      : @1574 [@dyn 783] (gas: 11)\n 41208: a0 = u64 [s1 + 0x20]\n 41211: u64 [s1 + 0x98] = a0\n 41215: a0 = u64 [s1 + 0x28]\n 41218: u64 [s1 + 0x90] = a0\n 41222: a0 = u64 [s1 + 0x30]\n 41225: u64 [s1 + 0x88] = a0\n 41229: a0 = 0x24\n 41232: a1 = s1 + 0x80\n 41236: a2 = u64 [s1 + 0x38]\n 41239: u64 [s1 + 0x80] = a2\n 41243: ra = 1568, jump @9\n      : @1575 [@dyn 784] (gas: 3)\n 41250: a0 = u64 [s1 + 0x78]\n 41253: a0 = i32 [a0]\n 41255: jump @1577 if a0 >u 95\n      : @1576 (gas: 3)\n 41259: a1 = u64 [s1 + 0x78]\n 41262: u32 [a1 + 0] = 0x60\n 41265: fallthrough\n      : @1577 (gas: 7)\n 41266: a0 = 0x1\n 41269: a2 = 0x44\n 41272: a1 = u64 [s1 + 0x70]\n 41275: ra = 0x622\n 41279: ecalli 13 // 'seal_return'\n 41281: t0 = 0x624\n 41285: jump @1815\n      : @1578 [@dyn 785] (gas: 1)\n 41288: t0 = 1572, jump @1815\n      : @1579 [@dyn 786] (gas: 22)\n 41294: u64 [s1 + 0x50] = a2\n 41297: a2 = u64 [a1 + 0x8]\n 41300: u64 [s1 + 0x70] = a2\n 41303: a1 = u64 [a1]\n 41305: u64 [s1 + 0x78] = a1\n 41308: u64 [s1 + 0x58] = a0\n 41311: a0 = u64 [0x20128]\n 41316: u64 [s1 + 0x20] = a0\n 41319: a3 = s1 + 0x200\n 41323: u64 [a3 + 0x38] = a0\n 41326: a1 = u64 [0x20130]\n 41331: a2 = u64 [0x20138]\n 41336: a0 = u64 [0x20140]\n 41341: u64 [s1 + 0x18] = a1\n 41344: u64 [a3 + 0x30] = a1\n 41347: u64 [s1 + 0x10] = a2\n 41350: u64 [a3 + 0x28] = a2\n 41353: a1 = s1 + 0x220\n 41357: u64 [s1 + 0x8] = a0\n 41360: u64 [a3 + 0x20] = a0\n 41363: a0 = 0\n 41365: ra = 1574, jump @9\n      : @1580 [@dyn 787] (gas: 1)\n 41372: t0 = 1576, jump @1773\n      : @1581 [@dyn 788] (gas: 1)\n 41378: ra = 1578, jump @9\n      : @1582 [@dyn 789] (gas: 3)\n 41385: a1 = 0x201f0\n 41390: a0 = i32 [0x201f0]\n 41395: jump @1584 if a0 >u 63\n      : @1583 (gas: 2)\n 41399: u32 [0x201f0] = 0x40\n 41405: fallthrough\n      : @1584 (gas: 6)\n 41406: a0 = sp + 0xffffffffffffffe0\n 41409: a2 = a0 & 0xffffffffffffffe0\n 41412: u64 [s1 + 0x48] = a2\n 41415: sp = a2\n 41417: a0 = 0x20200\n 41422: t0 = 1580, jump @1822\n      : @1585 [@dyn 790] (gas: 4)\n 41428: ra = 0x62e\n 41432: ecalli 8 // 'hash_keccak_256'\n 41434: t0 = 0x630\n 41438: jump @1763\n      : @1586 [@dyn 791] (gas: 1)\n 41441: t0 = 1584, jump @1763\n      : @1587 [@dyn 792] (gas: 1)\n 41447: ra = 1586, jump @9\n      : @1588 [@dyn 793] (gas: 1)\n 41454: t0 = 1588, jump @1803\n      : @1589 [@dyn 794] (gas: 1)\n 41460: ra = 1590, jump @9\n      : @1590 [@dyn 795] (gas: 3)\n 41467: a1 = u64 [s1 + 0x68]\n 41470: a0 = i32 [a1]\n 41472: jump @1592 if a0 >u 63\n      : @1591 (gas: 2)\n 41476: u32 [a1 + 0] = 0x40\n 41479: fallthrough\n      : @1592 (gas: 4)\n 41480: a0 = sp + 0xffffffffffffffe0\n 41483: a0 = a0 & 0xffffffffffffffe0\n 41486: u64 [s1 + 0x50] = a0\n 41489: t0 = 1592, jump @1776\n      : @1593 [@dyn 796] (gas: 4)\n 41495: ra = 0x63a\n 41499: ecalli 8 // 'hash_keccak_256'\n 41501: t0 = 0x63c\n 41505: jump @1787\n      : @1594 [@dyn 797] (gas: 1)\n 41508: t0 = 1596, jump @1787\n      : @1595 [@dyn 798] (gas: 1)\n 41514: ra = 1598, jump @11\n      : @1596 [@dyn 799] (gas: 2)\n 41521: a0 = u8 [s1 + 0x1a0]\n 41525: jump @1598 if a0 == 0\n      : @1597 (gas: 5)\n 41528: a1 = 0\n 41530: a0 = 0\n 41532: a2 = u64 [s1 + 0x58]\n 41535: t0 = 0x664\n 41539: jump @1769\n      : @1598 (gas: 12)\n 41542: a0 = u64 [s1 + 0x20]\n 41545: a2 = s1 + 0x100\n 41549: u64 [a2 + 0x98] = a0\n 41553: a0 = u64 [s1 + 0x18]\n 41556: u64 [a2 + 0x90] = a0\n 41560: a0 = u64 [s1 + 0x10]\n 41563: u64 [a2 + 0x88] = a0\n 41567: a1 = s1 + 0x180\n 41571: a0 = u64 [s1 + 0x8]\n 41574: u64 [a2 + 0x80] = a0\n 41578: a0 = 0\n 41580: ra = 1600, jump @9\n      : @1599 [@dyn 800] (gas: 1)\n 41587: t0 = 1602, jump @1772\n      : @1600 [@dyn 801] (gas: 1)\n 41593: ra = 1604, jump @9\n      : @1601 [@dyn 802] (gas: 3)\n 41600: a1 = u64 [s1 + 0x68]\n 41603: a0 = i32 [a1]\n 41605: jump @1603 if a0 >u 63\n      : @1602 (gas: 2)\n 41609: u32 [a1 + 0] = 0x40\n 41612: fallthrough\n      : @1603 (gas: 4)\n 41613: a0 = sp + 0xffffffffffffffe0\n 41616: a0 = a0 & 0xffffffffffffffe0\n 41619: u64 [s1 + 0x50] = a0\n 41622: t0 = 1606, jump @1776\n      : @1604 [@dyn 803] (gas: 4)\n 41628: ra = 0x648\n 41632: ecalli 8 // 'hash_keccak_256'\n 41634: t0 = 0x64a\n 41638: jump @1766\n      : @1605 [@dyn 804] (gas: 1)\n 41641: t0 = 1610, jump @1766\n      : @1606 [@dyn 805] (gas: 1)\n 41647: ra = 1612, jump @9\n      : @1607 [@dyn 806] (gas: 1)\n 41654: t0 = 1614, jump @1798\n      : @1608 [@dyn 807] (gas: 1)\n 41660: ra = 1616, jump @9\n      : @1609 [@dyn 808] (gas: 3)\n 41667: a1 = u64 [s1 + 0x68]\n 41670: a0 = i32 [a1]\n 41672: jump @1611 if a0 >u 63\n      : @1610 (gas: 2)\n 41676: u32 [a1 + 0] = 0x40\n 41679: fallthrough\n      : @1611 (gas: 4)\n 41680: a0 = sp + 0xffffffffffffffe0\n 41683: a0 = a0 & 0xffffffffffffffe0\n 41686: u64 [s1 + 0x68] = a0\n 41689: t0 = 1618, jump @1776\n      : @1612 [@dyn 809] (gas: 4)\n 41695: ra = 0x654\n 41699: ecalli 8 // 'hash_keccak_256'\n 41701: t0 = 0x656\n 41705: jump @1783\n      : @1613 [@dyn 810] (gas: 1)\n 41708: t0 = 1622, jump @1783\n      : @1614 [@dyn 811] (gas: 1)\n 41714: ra = 1624, jump @11\n      : @1615 [@dyn 812] (gas: 1)\n 41721: t0 = 1626, jump @1791\n      : @1616 [@dyn 813] (gas: 1)\n 41727: ra = 1628, jump @12\n      : @1617 [@dyn 814] (gas: 8)\n 41734: a0 = 0x30200\n 41739: u64 [s1 + 0x68] = a0\n 41742: i32 a0 = a0 + 0\n 41744: ra = 0x65e\n 41748: ecalli 4 // 'caller'\n 41750: a2 = u64 [s1 + 0x68]\n 41753: t0 = 0x660\n 41757: jump @1767\n      : @1618 [@dyn 815] (gas: 2)\n 41760: a2 = u64 [s1 + 0x68]\n 41763: t0 = 1632, jump @1767\n      : @1619 [@dyn 816] (gas: 42)\n 41769: t0 = a1 | a0\n 41772: a3 = a3 >> 0x20\n 41775: a2 = reverse a2\n 41777: a1 = a2 << 0x20\n 41780: a1 = a1 | a3\n 41783: a2 = a2 >> 0x20\n 41786: u64 [s1 + 152] = 0\n 41790: u64 [s1 + 184] = 0\n 41794: a0 = u64 [s1]\n 41796: u64 [s1 + 0xb0] = a0\n 41800: a0 = u64 [s1 + 0x70]\n 41803: u64 [s1 + 0xa8] = a0\n 41807: a0 = u64 [s1 + 0x78]\n 41810: u64 [s1 + 0xa0] = a0\n 41814: a0 = u64 [s1 + 0x20]\n 41817: u64 [s1 + 0xd8] = a0\n 41821: a0 = u64 [s1 + 0x18]\n 41824: u64 [s1 + 0xd0] = a0\n 41828: a0 = u64 [s1 + 0x10]\n 41831: u64 [s1 + 0xc8] = a0\n 41835: a0 = u64 [s1 + 0x8]\n 41838: u64 [s1 + 0xc0] = a0\n 41842: a3 = u64 [0x20148]\n 41847: a4 = u64 [0x20150]\n 41852: a5 = u64 [0x20158]\n 41857: a0 = u64 [0x20160]\n 41862: u64 [s1 + 0xf8] = a3\n 41866: u64 [s1 + 0xf0] = a4\n 41870: u64 [s1 + 0xe8] = a5\n 41874: u64 [s1 + 0xe0] = a0\n 41878: u64 [s1 + 0x90] = a2\n 41882: u64 [s1 + 0x88] = a1\n 41886: a2 = s1 + 0xe0\n 41890: a3 = s1 + 0xc0\n 41894: a4 = s1 + 0xa0\n 41898: a5 = s1 + 0x80\n 41902: u64 [s1 + 0x80] = t0\n 41906: a0 = 0\n 41908: a1 = 0\n 41910: ra = 0x662\n 41914: t0 = 0xa\n 41917: jump @1825\n      : @1620 [@dyn 817] (gas: 4)\n 41920: a0 = 0\n 41922: a1 = 0x1\n 41925: a2 = u64 [s1 + 0x58]\n 41928: t0 = 1636, jump @1769\n      : @1621 [@dyn 818] (gas: 1)\n 41934: ret\n      : @1622 [@dyn 819] (gas: 22)\n 41936: u64 [s1 + 0x50] = a3\n 41939: a3 = u64 [a2 + 0x8]\n 41942: u64 [s1 + 0x70] = a3\n 41945: a2 = u64 [a2]\n 41947: u64 [s1 + 0x78] = a2\n 41950: a2 = u64 [a1]\n 41952: a3 = u64 [a1 + 0x8]\n 41955: a4 = u64 [a1 + 0x10]\n 41958: a1 = u64 [a1 + 0x18]\n 41961: u64 [s1 + 0x58] = a0\n 41964: u64 [s1 + 0x8] = a1\n 41967: a0 = s1 + 0x200\n 41971: u64 [a0 + 0x38] = a1\n 41974: u64 [s1 + 0x10] = a4\n 41977: u64 [a0 + 0x30] = a4\n 41980: u64 [s1 + 0x18] = a3\n 41983: u64 [a0 + 0x28] = a3\n 41986: a1 = s1 + 0x220\n 41990: u64 [s1 + 0x20] = a2\n 41993: u64 [a0 + 0x20] = a2\n 41996: a0 = 0\n 41998: ra = 1640, jump @9\n      : @1623 [@dyn 820] (gas: 1)\n 42005: t0 = 1642, jump @1773\n      : @1624 [@dyn 821] (gas: 1)\n 42011: ra = 1644, jump @9\n      : @1625 [@dyn 822] (gas: 3)\n 42018: a1 = 0x201f0\n 42023: a0 = i32 [0x201f0]\n 42028: jump @1627 if a0 >u 63\n      : @1626 (gas: 2)\n 42032: u32 [0x201f0] = 0x40\n 42038: fallthrough\n      : @1627 (gas: 6)\n 42039: a0 = sp + 0xffffffffffffffe0\n 42042: a2 = a0 & 0xffffffffffffffe0\n 42045: u64 [s1 + 0x48] = a2\n 42048: sp = a2\n 42050: a0 = 0x20200\n 42055: t0 = 1646, jump @1822\n      : @1628 [@dyn 823] (gas: 4)\n 42061: ra = 0x670\n 42065: ecalli 8 // 'hash_keccak_256'\n 42067: t0 = 0x672\n 42071: jump @1763\n      : @1629 [@dyn 824] (gas: 1)\n 42074: t0 = 1650, jump @1763\n      : @1630 [@dyn 825] (gas: 1)\n 42080: ra = 1652, jump @9\n      : @1631 [@dyn 826] (gas: 1)\n 42087: t0 = 1654, jump @1803\n      : @1632 [@dyn 827] (gas: 1)\n 42093: ra = 1656, jump @9\n      : @1633 [@dyn 828] (gas: 3)\n 42100: a1 = u64 [s1 + 0x68]\n 42103: a0 = i32 [a1]\n 42105: jump @1635 if a0 >u 63\n      : @1634 (gas: 2)\n 42109: u32 [a1 + 0] = 0x40\n 42112: fallthrough\n      : @1635 (gas: 4)\n 42113: a0 = sp + 0xffffffffffffffe0\n 42116: a0 = a0 & 0xffffffffffffffe0\n 42119: u64 [s1 + 0x50] = a0\n 42122: t0 = 1658, jump @1776\n      : @1636 [@dyn 829] (gas: 4)\n 42128: ra = 0x67c\n 42132: ecalli 8 // 'hash_keccak_256'\n 42134: t0 = 0x67e\n 42138: jump @1787\n      : @1637 [@dyn 830] (gas: 1)\n 42141: t0 = 1662, jump @1787\n      : @1638 [@dyn 831] (gas: 1)\n 42147: ra = 1664, jump @11\n      : @1639 [@dyn 832] (gas: 2)\n 42154: a0 = u8 [s1 + 0x1a0]\n 42158: jump @1641 if a0 == 0\n      : @1640 (gas: 5)\n 42161: a1 = 0\n 42163: a0 = 0\n 42165: a2 = u64 [s1 + 0x58]\n 42168: t0 = 0x6a6\n 42172: jump @1769\n      : @1641 (gas: 12)\n 42175: a0 = u64 [s1 + 0x20]\n 42178: a2 = s1 + 0x100\n 42182: u64 [a2 + 0x80] = a0\n 42186: a0 = u64 [s1 + 0x18]\n 42189: u64 [a2 + 0x88] = a0\n 42193: a0 = u64 [s1 + 0x10]\n 42196: u64 [a2 + 0x90] = a0\n 42200: a1 = s1 + 0x180\n 42204: a0 = u64 [s1 + 0x8]\n 42207: u64 [a2 + 0x98] = a0\n 42211: a0 = 0\n 42213: ra = 1666, jump @9\n      : @1642 [@dyn 833] (gas: 1)\n 42220: t0 = 1668, jump @1772\n      : @1643 [@dyn 834] (gas: 1)\n 42226: ra = 1670, jump @9\n      : @1644 [@dyn 835] (gas: 3)\n 42233: a1 = u64 [s1 + 0x68]\n 42236: a0 = i32 [a1]\n 42238: jump @1646 if a0 >u 63\n      : @1645 (gas: 2)\n 42242: u32 [a1 + 0] = 0x40\n 42245: fallthrough\n      : @1646 (gas: 4)\n 42246: a0 = sp + 0xffffffffffffffe0\n 42249: a0 = a0 & 0xffffffffffffffe0\n 42252: u64 [s1 + 0x50] = a0\n 42255: t0 = 1672, jump @1776\n      : @1647 [@dyn 836] (gas: 4)\n 42261: ra = 0x68a\n 42265: ecalli 8 // 'hash_keccak_256'\n 42267: t0 = 0x68c\n 42271: jump @1766\n      : @1648 [@dyn 837] (gas: 1)\n 42274: t0 = 1676, jump @1766\n      : @1649 [@dyn 838] (gas: 1)\n 42280: ra = 1678, jump @9\n      : @1650 [@dyn 839] (gas: 1)\n 42287: t0 = 1680, jump @1798\n      : @1651 [@dyn 840] (gas: 1)\n 42293: ra = 1682, jump @9\n      : @1652 [@dyn 841] (gas: 3)\n 42300: a1 = u64 [s1 + 0x68]\n 42303: a0 = i32 [a1]\n 42305: jump @1654 if a0 >u 63\n      : @1653 (gas: 2)\n 42309: u32 [a1 + 0] = 0x40\n 42312: fallthrough\n      : @1654 (gas: 4)\n 42313: a0 = sp + 0xffffffffffffffe0\n 42316: a0 = a0 & 0xffffffffffffffe0\n 42319: u64 [s1 + 0x68] = a0\n 42322: t0 = 1684, jump @1776\n      : @1655 [@dyn 842] (gas: 4)\n 42328: ra = 0x696\n 42332: ecalli 8 // 'hash_keccak_256'\n 42334: t0 = 0x698\n 42338: jump @1783\n      : @1656 [@dyn 843] (gas: 1)\n 42341: t0 = 1688, jump @1783\n      : @1657 [@dyn 844] (gas: 1)\n 42347: ra = 1690, jump @11\n      : @1658 [@dyn 845] (gas: 1)\n 42354: t0 = 1692, jump @1791\n      : @1659 [@dyn 846] (gas: 1)\n 42360: ra = 1694, jump @12\n      : @1660 [@dyn 847] (gas: 8)\n 42367: a0 = 0x30200\n 42372: u64 [s1 + 0x68] = a0\n 42375: i32 a0 = a0 + 0\n 42377: ra = 0x6a0\n 42381: ecalli 4 // 'caller'\n 42383: a2 = u64 [s1 + 0x68]\n 42386: t0 = 0x6a2\n 42390: jump @1767\n      : @1661 [@dyn 848] (gas: 2)\n 42393: a2 = u64 [s1 + 0x68]\n 42396: t0 = 1698, jump @1767\n      : @1662 [@dyn 849] (gas: 42)\n 42402: t0 = a1 | a0\n 42405: a3 = a3 >> 0x20\n 42408: a2 = reverse a2\n 42410: a1 = a2 << 0x20\n 42413: a1 = a1 | a3\n 42416: a2 = a2 >> 0x20\n 42419: u64 [s1 + 152] = 0\n 42423: u64 [s1 + 184] = 0\n 42427: a0 = u64 [s1]\n 42429: u64 [s1 + 0xb0] = a0\n 42433: a0 = u64 [s1 + 0x70]\n 42436: u64 [s1 + 0xa8] = a0\n 42440: a0 = u64 [s1 + 0x78]\n 42443: u64 [s1 + 0xa0] = a0\n 42447: a0 = u64 [s1 + 0x8]\n 42450: u64 [s1 + 0xd8] = a0\n 42454: a0 = u64 [s1 + 0x10]\n 42457: u64 [s1 + 0xd0] = a0\n 42461: a0 = u64 [s1 + 0x18]\n 42464: u64 [s1 + 0xc8] = a0\n 42468: a0 = u64 [s1 + 0x20]\n 42471: u64 [s1 + 0xc0] = a0\n 42475: a3 = u64 [0x20168]\n 42480: a4 = u64 [0x20170]\n 42485: a5 = u64 [0x20178]\n 42490: a0 = u64 [0x20180]\n 42495: u64 [s1 + 0xf8] = a3\n 42499: u64 [s1 + 0xf0] = a4\n 42503: u64 [s1 + 0xe8] = a5\n 42507: u64 [s1 + 0xe0] = a0\n 42511: u64 [s1 + 0x90] = a2\n 42515: u64 [s1 + 0x88] = a1\n 42519: a2 = s1 + 0xe0\n 42523: a3 = s1 + 0xc0\n 42527: a4 = s1 + 0xa0\n 42531: a5 = s1 + 0x80\n 42535: u64 [s1 + 0x80] = t0\n 42539: a0 = 0\n 42541: a1 = 0\n 42543: ra = 0x6a4\n 42547: t0 = 0xa\n 42550: jump @1825\n      : @1663 [@dyn 850] (gas: 4)\n 42553: a0 = 0\n 42555: a1 = 0x1\n 42558: a2 = u64 [s1 + 0x58]\n 42561: t0 = 1702, jump @1769\n      : @1664 [@dyn 851] (gas: 1)\n 42567: ret\n      : @1665 [@dyn 852] (gas: 22)\n 42569: u64 [s1 + 0x38] = a2\n 42572: a2 = u64 [a1 + 0x8]\n 42575: u64 [s1 + 0x70] = a2\n 42578: a1 = u64 [a1]\n 42580: u64 [s1 + 0x78] = a1\n 42583: u64 [s1 + 0x30] = a0\n 42586: a0 = u64 [0x20188]\n 42591: u64 [s1 + 0x58] = a0\n 42594: a3 = s1 + 0x200\n 42598: u64 [a3 + 0x38] = a0\n 42601: a1 = u64 [0x20190]\n 42606: a2 = u64 [0x20198]\n 42611: a0 = u64 [0x201a0]\n 42616: u64 [s1 + 0x50] = a1\n 42619: u64 [a3 + 0x30] = a1\n 42622: u64 [s1 + 0x48] = a2\n 42625: u64 [a3 + 0x28] = a2\n 42628: a1 = s1 + 0x220\n 42632: u64 [s1 + 0x40] = a0\n 42635: u64 [a3 + 0x20] = a0\n 42638: a0 = 0\n 42640: ra = 1706, jump @9\n      : @1666 [@dyn 853] (gas: 1)\n 42647: t0 = 1708, jump @1773\n      : @1667 [@dyn 854] (gas: 1)\n 42653: ra = 1710, jump @9\n      : @1668 [@dyn 855] (gas: 3)\n 42660: a1 = 0x201f0\n 42665: a0 = i32 [0x201f0]\n 42670: jump @1670 if a0 >u 63\n      : @1669 (gas: 2)\n 42674: u32 [0x201f0] = 0x40\n 42680: fallthrough\n      : @1670 (gas: 6)\n 42681: a0 = sp + 0xffffffffffffffe0\n 42684: a2 = a0 & 0xffffffffffffffe0\n 42687: u64 [s1 + 0x28] = a2\n 42690: sp = a2\n 42692: a0 = 0x20200\n 42697: t0 = 1712, jump @1822\n      : @1671 [@dyn 856] (gas: 4)\n 42703: ra = 0x6b2\n 42707: ecalli 8 // 'hash_keccak_256'\n 42709: t0 = 0x6b4\n 42713: jump @1762\n      : @1672 [@dyn 857] (gas: 1)\n 42716: t0 = 1716, jump @1762\n      : @1673 [@dyn 858] (gas: 1)\n 42722: ra = 1718, jump @9\n      : @1674 [@dyn 859] (gas: 1)\n 42729: t0 = 1720, jump @1801\n      : @1675 [@dyn 860] (gas: 1)\n 42735: ra = 1722, jump @9\n      : @1676 [@dyn 861] (gas: 3)\n 42742: a1 = u64 [s1 + 0x68]\n 42745: a0 = i32 [a1]\n 42747: jump @1678 if a0 >u 63\n      : @1677 (gas: 2)\n 42751: u32 [a1 + 0] = 0x40\n 42754: fallthrough\n      : @1678 (gas: 4)\n 42755: a0 = sp + 0xffffffffffffffe0\n 42758: a0 = a0 & 0xffffffffffffffe0\n 42761: u64 [s1 + 0x20] = a0\n 42764: t0 = 1724, jump @1776\n      : @1679 [@dyn 862] (gas: 4)\n 42770: ra = 0x6be\n 42774: ecalli 8 // 'hash_keccak_256'\n 42776: t0 = 0x6c0\n 42780: jump @1786\n      : @1680 [@dyn 863] (gas: 1)\n 42783: t0 = 1728, jump @1786\n      : @1681 [@dyn 864] (gas: 1)\n 42789: ra = 1730, jump @11\n      : @1682 [@dyn 865] (gas: 2)\n 42796: a0 = u8 [s1 + 0x1a0]\n 42800: jump @1706 if a0 == 0\n      : @1683 (gas: 12)\n 42804: a0 = u64 [s1 + 0x58]\n 42807: a2 = s1 + 0x100\n 42811: u64 [a2 + 0x98] = a0\n 42815: a0 = u64 [s1 + 0x50]\n 42818: u64 [a2 + 0x90] = a0\n 42822: a0 = u64 [s1 + 0x48]\n 42825: u64 [a2 + 0x88] = a0\n 42829: a1 = s1 + 0x180\n 42833: a0 = u64 [s1 + 0x40]\n 42836: u64 [a2 + 0x80] = a0\n 42840: a0 = 0\n 42842: ra = 1732, jump @9\n      : @1684 [@dyn 866] (gas: 1)\n 42849: t0 = 1734, jump @1772\n      : @1685 [@dyn 867] (gas: 1)\n 42855: ra = 1736, jump @9\n      : @1686 [@dyn 868] (gas: 3)\n 42862: a1 = u64 [s1 + 0x68]\n 42865: a0 = i32 [a1]\n 42867: jump @1688 if a0 >u 63\n      : @1687 (gas: 2)\n 42871: u32 [a1 + 0] = 0x40\n 42874: fallthrough\n      : @1688 (gas: 4)\n 42875: a0 = sp + 0xffffffffffffffe0\n 42878: a0 = a0 & 0xffffffffffffffe0\n 42881: u64 [s1 + 0x28] = a0\n 42884: t0 = 1738, jump @1776\n      : @1689 [@dyn 869] (gas: 4)\n 42890: ra = 0x6cc\n 42894: ecalli 8 // 'hash_keccak_256'\n 42896: t0 = 0x6ce\n 42900: jump @1764\n      : @1690 [@dyn 870] (gas: 1)\n 42903: t0 = 1742, jump @1764\n      : @1691 [@dyn 871] (gas: 1)\n 42909: ra = 1744, jump @9\n      : @1692 [@dyn 872] (gas: 1)\n 42916: t0 = 1746, jump @1802\n      : @1693 [@dyn 873] (gas: 1)\n 42922: ra = 1748, jump @9\n      : @1694 [@dyn 874] (gas: 3)\n 42929: a1 = u64 [s1 + 0x68]\n 42932: a0 = i32 [a1]\n 42934: jump @1696 if a0 >u 63\n      : @1695 (gas: 2)\n 42938: u32 [a1 + 0] = 0x40\n 42941: fallthrough\n      : @1696 (gas: 4)\n 42942: a0 = sp + 0xffffffffffffffe0\n 42945: a0 = a0 & 0xffffffffffffffe0\n 42948: u64 [s1 + 0x68] = a0\n 42951: t0 = 1750, jump @1776\n      : @1697 [@dyn 875] (gas: 4)\n 42957: ra = 0x6d8\n 42961: ecalli 8 // 'hash_keccak_256'\n 42963: t0 = 0x6da\n 42967: jump @1782\n      : @1698 [@dyn 876] (gas: 1)\n 42970: t0 = 1754, jump @1782\n      : @1699 [@dyn 877] (gas: 1)\n 42976: ra = 1756, jump @11\n      : @1700 [@dyn 878] (gas: 1)\n 42983: t0 = 1758, jump @1792\n      : @1701 [@dyn 879] (gas: 1)\n 42989: ra = 1760, jump @12\n      : @1702 [@dyn 880] (gas: 8)\n 42996: a0 = 0x30200\n 43001: u64 [s1 + 0x68] = a0\n 43004: i32 a0 = a0 + 0\n 43006: ra = 0x6e2\n 43010: ecalli 4 // 'caller'\n 43012: a2 = u64 [s1 + 0x68]\n 43015: t0 = 0x6e4\n 43019: jump @1767\n      : @1703 [@dyn 881] (gas: 2)\n 43022: a2 = u64 [s1 + 0x68]\n 43025: t0 = 1764, jump @1767\n      : @1704 [@dyn 882] (gas: 42)\n 43031: t0 = a1 | a0\n 43034: a3 = a3 >> 0x20\n 43037: a2 = reverse a2\n 43039: a1 = a2 << 0x20\n 43042: a1 = a1 | a3\n 43045: a2 = a2 >> 0x20\n 43048: u64 [s1 + 152] = 0\n 43052: u64 [s1 + 184] = 0\n 43056: a0 = u64 [s1 + 0x38]\n 43059: u64 [s1 + 0xb0] = a0\n 43063: a0 = u64 [s1 + 0x70]\n 43066: u64 [s1 + 0xa8] = a0\n 43070: a0 = u64 [s1 + 0x78]\n 43073: u64 [s1 + 0xa0] = a0\n 43077: a0 = u64 [s1 + 0x58]\n 43080: u64 [s1 + 0xd8] = a0\n 43084: a0 = u64 [s1 + 0x50]\n 43087: u64 [s1 + 0xd0] = a0\n 43091: a0 = u64 [s1 + 0x48]\n 43094: u64 [s1 + 0xc8] = a0\n 43098: a0 = u64 [s1 + 0x40]\n 43101: u64 [s1 + 0xc0] = a0\n 43105: a3 = u64 [0x201a8]\n 43110: a4 = u64 [0x201b0]\n 43115: a5 = u64 [0x201b8]\n 43120: a0 = u64 [0x201c0]\n 43125: u64 [s1 + 0xf8] = a3\n 43129: u64 [s1 + 0xf0] = a4\n 43133: u64 [s1 + 0xe8] = a5\n 43137: u64 [s1 + 0xe0] = a0\n 43141: u64 [s1 + 0x90] = a2\n 43145: u64 [s1 + 0x88] = a1\n 43149: a2 = s1 + 0xe0\n 43153: a3 = s1 + 0xc0\n 43157: a4 = s1 + 0xa0\n 43161: a5 = s1 + 0x80\n 43165: u64 [s1 + 0x80] = t0\n 43169: a0 = 0\n 43171: a1 = 0\n 43173: ra = 0x6e6\n 43177: t0 = 0xa\n 43180: jump @1825\n      : @1705 [@dyn 883] (gas: 5)\n 43183: a0 = 0\n 43185: a1 = 0x1\n 43188: a2 = u64 [s1 + 0x30]\n 43191: t0 = 0x6e8\n 43195: jump @1769\n      : @1706 (gas: 3)\n 43198: a1 = 0\n 43200: a2 = u64 [s1 + 0x30]\n 43203: t0 = 1768, jump @1769\n      : @1707 [@dyn 884] (gas: 1)\n 43209: ret\n      : @1708 [@dyn 885] (gas: 22)\n 43211: u64 [s1 + 0x38] = a3\n 43214: a3 = u64 [a2 + 0x8]\n 43217: u64 [s1 + 0x70] = a3\n 43220: a2 = u64 [a2]\n 43222: u64 [s1 + 0x78] = a2\n 43225: a2 = u64 [a1]\n 43227: a3 = u64 [a1 + 0x8]\n 43230: a4 = u64 [a1 + 0x10]\n 43233: a1 = u64 [a1 + 0x18]\n 43236: u64 [s1 + 0x30] = a0\n 43239: u64 [s1 + 0x40] = a1\n 43242: a0 = s1 + 0x200\n 43246: u64 [a0 + 0x38] = a1\n 43249: u64 [s1 + 0x48] = a4\n 43252: u64 [a0 + 0x30] = a4\n 43255: u64 [s1 + 0x50] = a3\n 43258: u64 [a0 + 0x28] = a3\n 43261: a1 = s1 + 0x220\n 43265: u64 [s1 + 0x58] = a2\n 43268: u64 [a0 + 0x20] = a2\n 43271: a0 = 0\n 43273: ra = 1772, jump @9\n      : @1709 [@dyn 886] (gas: 1)\n 43280: t0 = 1774, jump @1773\n      : @1710 [@dyn 887] (gas: 1)\n 43286: ra = 1776, jump @9\n      : @1711 [@dyn 888] (gas: 3)\n 43293: a1 = 0x201f0\n 43298: a0 = i32 [0x201f0]\n 43303: jump @1713 if a0 >u 63\n      : @1712 (gas: 2)\n 43307: u32 [0x201f0] = 0x40\n 43313: fallthrough\n      : @1713 (gas: 6)\n 43314: a0 = sp + 0xffffffffffffffe0\n 43317: a2 = a0 & 0xffffffffffffffe0\n 43320: u64 [s1 + 0x28] = a2\n 43323: sp = a2\n 43325: a0 = 0x20200\n 43330: t0 = 1778, jump @1822\n      : @1714 [@dyn 889] (gas: 4)\n 43336: ra = 0x6f4\n 43340: ecalli 8 // 'hash_keccak_256'\n 43342: t0 = 0x6f6\n 43346: jump @1762\n      : @1715 [@dyn 890] (gas: 1)\n 43349: t0 = 1782, jump @1762\n      : @1716 [@dyn 891] (gas: 1)\n 43355: ra = 1784, jump @9\n      : @1717 [@dyn 892] (gas: 1)\n 43362: t0 = 1786, jump @1801\n      : @1718 [@dyn 893] (gas: 1)\n 43368: ra = 1788, jump @9\n      : @1719 [@dyn 894] (gas: 3)\n 43375: a1 = u64 [s1 + 0x68]\n 43378: a0 = i32 [a1]\n 43380: jump @1721 if a0 >u 63\n      : @1720 (gas: 2)\n 43384: u32 [a1 + 0] = 0x40\n 43387: fallthrough\n      : @1721 (gas: 4)\n 43388: a0 = sp + 0xffffffffffffffe0\n 43391: a0 = a0 & 0xffffffffffffffe0\n 43394: u64 [s1 + 0x20] = a0\n 43397: t0 = 1790, jump @1776\n      : @1722 [@dyn 895] (gas: 4)\n 43403: ra = 0x700\n 43407: ecalli 8 // 'hash_keccak_256'\n 43409: t0 = 0x702\n 43413: jump @1786\n      : @1723 [@dyn 896] (gas: 1)\n 43416: t0 = 1794, jump @1786\n      : @1724 [@dyn 897] (gas: 1)\n 43422: ra = 1796, jump @11\n      : @1725 [@dyn 898] (gas: 2)\n 43429: a0 = u8 [s1 + 0x1a0]\n 43433: jump @1749 if a0 == 0\n      : @1726 (gas: 12)\n 43437: a0 = u64 [s1 + 0x58]\n 43440: a2 = s1 + 0x100\n 43444: u64 [a2 + 0x80] = a0\n 43448: a0 = u64 [s1 + 0x50]\n 43451: u64 [a2 + 0x88] = a0\n 43455: a0 = u64 [s1 + 0x48]\n 43458: u64 [a2 + 0x90] = a0\n 43462: a1 = s1 + 0x180\n 43466: a0 = u64 [s1 + 0x40]\n 43469: u64 [a2 + 0x98] = a0\n 43473: a0 = 0\n 43475: ra = 1798, jump @9\n      : @1727 [@dyn 899] (gas: 1)\n 43482: t0 = 1800, jump @1772\n      : @1728 [@dyn 900] (gas: 1)\n 43488: ra = 1802, jump @9\n      : @1729 [@dyn 901] (gas: 3)\n 43495: a1 = u64 [s1 + 0x68]\n 43498: a0 = i32 [a1]\n 43500: jump @1731 if a0 >u 63\n      : @1730 (gas: 2)\n 43504: u32 [a1 + 0] = 0x40\n 43507: fallthrough\n      : @1731 (gas: 4)\n 43508: a0 = sp + 0xffffffffffffffe0\n 43511: a0 = a0 & 0xffffffffffffffe0\n 43514: u64 [s1 + 0x28] = a0\n 43517: t0 = 1804, jump @1776\n      : @1732 [@dyn 902] (gas: 4)\n 43523: ra = 0x70e\n 43527: ecalli 8 // 'hash_keccak_256'\n 43529: t0 = 0x710\n 43533: jump @1764\n      : @1733 [@dyn 903] (gas: 1)\n 43536: t0 = 1808, jump @1764\n      : @1734 [@dyn 904] (gas: 1)\n 43542: ra = 1810, jump @9\n      : @1735 [@dyn 905] (gas: 1)\n 43549: t0 = 1812, jump @1802\n      : @1736 [@dyn 906] (gas: 1)\n 43555: ra = 1814, jump @9\n      : @1737 [@dyn 907] (gas: 3)\n 43562: a1 = u64 [s1 + 0x68]\n 43565: a0 = i32 [a1]\n 43567: jump @1739 if a0 >u 63\n      : @1738 (gas: 2)\n 43571: u32 [a1 + 0] = 0x40\n 43574: fallthrough\n      : @1739 (gas: 4)\n 43575: a0 = sp + 0xffffffffffffffe0\n 43578: a0 = a0 & 0xffffffffffffffe0\n 43581: u64 [s1 + 0x68] = a0\n 43584: t0 = 1816, jump @1776\n      : @1740 [@dyn 908] (gas: 4)\n 43590: ra = 0x71a\n 43594: ecalli 8 // 'hash_keccak_256'\n 43596: t0 = 0x71c\n 43600: jump @1782\n      : @1741 [@dyn 909] (gas: 1)\n 43603: t0 = 1820, jump @1782\n      : @1742 [@dyn 910] (gas: 1)\n 43609: ra = 1822, jump @11\n      : @1743 [@dyn 911] (gas: 1)\n 43616: t0 = 1824, jump @1792\n      : @1744 [@dyn 912] (gas: 1)\n 43622: ra = 1826, jump @12\n      : @1745 [@dyn 913] (gas: 8)\n 43629: a0 = 0x30200\n 43634: u64 [s1 + 0x68] = a0\n 43637: i32 a0 = a0 + 0\n 43639: ra = 0x724\n 43643: ecalli 4 // 'caller'\n 43645: a2 = u64 [s1 + 0x68]\n 43648: t0 = 0x726\n 43652: jump @1767\n      : @1746 [@dyn 914] (gas: 2)\n 43655: a2 = u64 [s1 + 0x68]\n 43658: t0 = 1830, jump @1767\n      : @1747 [@dyn 915] (gas: 42)\n 43664: t0 = a1 | a0\n 43667: a3 = a3 >> 0x20\n 43670: a2 = reverse a2\n 43672: a1 = a2 << 0x20\n 43675: a1 = a1 | a3\n 43678: a2 = a2 >> 0x20\n 43681: u64 [s1 + 152] = 0\n 43685: u64 [s1 + 184] = 0\n 43689: a0 = u64 [s1 + 0x38]\n 43692: u64 [s1 + 0xb0] = a0\n 43696: a0 = u64 [s1 + 0x70]\n 43699: u64 [s1 + 0xa8] = a0\n 43703: a0 = u64 [s1 + 0x78]\n 43706: u64 [s1 + 0xa0] = a0\n 43710: a0 = u64 [s1 + 0x40]\n 43713: u64 [s1 + 0xd8] = a0\n 43717: a0 = u64 [s1 + 0x48]\n 43720: u64 [s1 + 0xd0] = a0\n 43724: a0 = u64 [s1 + 0x50]\n 43727: u64 [s1 + 0xc8] = a0\n 43731: a0 = u64 [s1 + 0x58]\n 43734: u64 [s1 + 0xc0] = a0\n 43738: a3 = u64 [0x201c8]\n 43743: a4 = u64 [0x201d0]\n 43748: a5 = u64 [0x201d8]\n 43753: a0 = u64 [0x201e0]\n 43758: u64 [s1 + 0xf8] = a3\n 43762: u64 [s1 + 0xf0] = a4\n 43766: u64 [s1 + 0xe8] = a5\n 43770: u64 [s1 + 0xe0] = a0\n 43774: u64 [s1 + 0x90] = a2\n 43778: u64 [s1 + 0x88] = a1\n 43782: a2 = s1 + 0xe0\n 43786: a3 = s1 + 0xc0\n 43790: a4 = s1 + 0xa0\n 43794: a5 = s1 + 0x80\n 43798: u64 [s1 + 0x80] = t0\n 43802: a0 = 0\n 43804: a1 = 0\n 43806: ra = 0x728\n 43810: t0 = 0xa\n 43813: jump @1825\n      : @1748 [@dyn 916] (gas: 5)\n 43816: a0 = 0\n 43818: a1 = 0x1\n 43821: a2 = u64 [s1 + 0x30]\n 43824: t0 = 0x72a\n 43828: jump @1769\n      : @1749 (gas: 3)\n 43831: a1 = 0\n 43833: a2 = u64 [s1 + 0x30]\n 43836: t0 = 1834, jump @1769\n      : @1750 [@dyn 917] (gas: 1)\n 43842: ret\n      : @1751 [export #0: 'call'] (gas: 2)\n 43844: a0 = 0\n 43846: ra = 1836, jump @24\n      : @1752 [@dyn 918] [export #1: 'deploy'] (gas: 2)\n 43853: a0 = 0x1\n 43856: ra = 1838, jump @24\n      : @1753 [@dyn 919] (gas: 15)\n 43863: a1 = a0 <u a1\n 43866: a5 = a3 + a1\n 43869: a3 = a5 <u a3\n 43872: a3 = a1 if a1 == 0\n 43875: a3 = a3 + a4\n 43878: a1 = a3 <u a4\n 43881: a1 = a1 + a2\n 43884: a2 = a0 | a3\n 43887: a1 = a1 | a5\n 43890: a2 = a2 | a1\n 43893: a2 = a2 >> 0x20\n 43896: a1 = a1 | a3\n 43899: a1 = a1 << 0x20\n 43902: a1 = a1 | a2\n 43905: jump [t0]\n      : @1754 (gas: 9)\n 43907: a1 = u64 [s1 + 0x110]\n 43911: a2 = u64 [s1 + 0x190]\n 43915: a1 = a2 <u a1\n 43918: a2 = u64 [s1 + 0xf8]\n 43922: a4 = u64 [s1 + 0x178]\n 43926: a3 = a4 ^ a2\n 43929: a4 = a4 <u a2\n 43932: a4 = a1 if a3 == 0\n 43935: jump [t0]\n      : @1755 (gas: 9)\n 43937: a1 = a0 | ra\n 43940: a2 = u64 [s1 + 0x270]\n 43944: a3 = t1 | a2\n 43947: a1 = a1 | a3\n 43950: a1 = a1 >> 0x20\n 43953: a2 = a3 | ra\n 43956: a2 = a2 << 0x20\n 43959: a1 = a1 | a2\n 43962: jump [t0]\n      : @1756 (gas: 6)\n 43964: a0 = u64 [s1 + 0x278]\n 43968: a1 = u64 [a0]\n 43970: a2 = u64 [a0 + 0x18]\n 43973: a3 = u64 [a0 + 0x8]\n 43976: a4 = u64 [a0 + 0x10]\n 43979: jump [t0]\n      : @1757 (gas: 4)\n 43981: a1 = a1 >u 0\n 43983: a2 = s1 + 0x7ff\n 43987: a2 = a2 + 0x1f9\n 43991: jump [t0]\n      : @1758 (gas: 21)\n 43993: a2 = u64 [s1 + 0x68]\n 43996: a0 = u64 [a2 + 0x8]\n 43999: a1 = i32 [a2 + 0x10]\n 44002: a2 = u64 [a2]\n 44004: a0 = reverse a0\n 44006: a3 = a0 << 0x20\n 44009: a1 = reverse a1\n 44011: a1 = a1 >> 0x20\n 44014: a3 = a3 | a1\n 44017: a0 = a0 >> 0x20\n 44020: a1 = reverse a2\n 44022: a2 = a1 << 0x20\n 44025: a0 = a0 | a2\n 44028: a1 = a1 >> 0x20\n 44031: u64 [s1 + 312] = 0\n 44035: u64 [s1 + 0x130] = a1\n 44039: u64 [s1 + 0x128] = a0\n 44043: a1 = s1 + 0x120\n 44047: u64 [s1 + 0x120] = a3\n 44051: a0 = 0\n 44053: jump [t0]\n      : @1759 (gas: 7)\n 44055: a1 = u64 [s1 + 0x1d8]\n 44059: a0 = a1 <u a0\n 44062: a1 = u64 [s1 + 0x1d0]\n 44066: a0 = 0 if a1 != 0\n 44068: a1 = u64 [s1 + 0x250]\n 44072: a0 = 0 if a1 != 0\n 44074: jump [t0]\n      : @1760 (gas: 21)\n 44076: a2 = u64 [s1 + 0x68]\n 44079: a0 = u64 [a2 + 0x8]\n 44082: a1 = i32 [a2 + 0x10]\n 44085: a2 = u64 [a2]\n 44087: a0 = reverse a0\n 44089: a3 = a0 << 0x20\n 44092: a1 = reverse a1\n 44094: a1 = a1 >> 0x20\n 44097: a3 = a3 | a1\n 44100: a0 = a0 >> 0x20\n 44103: a1 = reverse a2\n 44105: a2 = a1 << 0x20\n 44108: a0 = a0 | a2\n 44111: a1 = a1 >> 0x20\n 44114: u64 [s1 + 184] = 0\n 44118: u64 [s1 + 0xb0] = a1\n 44122: u64 [s1 + 0xa8] = a0\n 44126: a0 = 0x4\n 44129: a1 = s1 + 0xa0\n 44133: u64 [s1 + 0xa0] = a3\n 44137: jump [t0]\n      : @1761 (gas: 18)\n 44139: a3 = u64 [s1 + 0x68]\n 44142: a0 = u64 [a3 + 0x18]\n 44145: a1 = u64 [a3 + 0x10]\n 44148: a2 = u64 [a3 + 0x8]\n 44151: a3 = u64 [a3]\n 44153: a0 = reverse a0\n 44155: u64 [s1 + 0x58] = a0\n 44158: a0 = reverse a1\n 44160: u64 [s1 + 0x50] = a0\n 44163: a0 = reverse a2\n 44165: u64 [s1 + 0x48] = a0\n 44168: a0 = reverse a3\n 44170: u64 [s1 + 0x40] = a0\n 44173: a0 = sp + 0xffffffffffffffe0\n 44176: a0 = a0 & 0xffffffffffffffe0\n 44179: u64 [s1 + 0x60] = a0\n 44182: sp = a0\n 44184: jump [t0]\n      : @1762 (gas: 30)\n 44186: a3 = u64 [s1 + 0x28]\n 44189: a0 = u64 [a3 + 0x18]\n 44192: a1 = u64 [a3 + 0x10]\n 44195: a2 = u64 [a3 + 0x8]\n 44198: a3 = u64 [a3]\n 44200: a0 = reverse a0\n 44202: u64 [s1 + 0x20] = a0\n 44205: a0 = reverse a1\n 44207: u64 [s1 + 0x18] = a0\n 44210: a0 = reverse a2\n 44212: u64 [s1 + 0x10] = a0\n 44215: a0 = reverse a3\n 44217: u64 [s1 + 0x8] = a0\n 44220: a0 = sp + 0xffffffffffffffe0\n 44223: a0 = a0 & 0xffffffffffffffe0\n 44226: u64 [s1 + 0x28] = a0\n 44229: sp = a0\n 44231: a0 = u64 [s1 + 0x38]\n 44234: a0 = a0 << 0x20\n 44237: a0 = a0 >> 0x20\n 44240: u64 [s1 + 504] = 0\n 44244: u64 [s1 + 0x38] = a0\n 44247: u64 [s1 + 0x1f0] = a0\n 44251: a0 = u64 [s1 + 0x70]\n 44254: u64 [s1 + 0x1e8] = a0\n 44258: a1 = s1 + 0x1e0\n 44262: a0 = u64 [s1 + 0x78]\n 44265: u64 [s1 + 0x1e0] = a0\n 44269: a0 = 0\n 44271: jump [t0]\n      : @1763 (gas: 30)\n 44273: a3 = u64 [s1 + 0x48]\n 44276: a0 = u64 [a3 + 0x18]\n 44279: a1 = u64 [a3 + 0x10]\n 44282: a2 = u64 [a3 + 0x8]\n 44285: a3 = u64 [a3]\n 44287: a0 = reverse a0\n 44289: u64 [s1 + 0x40] = a0\n 44292: a0 = reverse a1\n 44294: u64 [s1 + 0x38] = a0\n 44297: a0 = reverse a2\n 44299: u64 [s1 + 0x30] = a0\n 44302: a0 = reverse a3\n 44304: u64 [s1 + 0x28] = a0\n 44307: a0 = sp + 0xffffffffffffffe0\n 44310: a0 = a0 & 0xffffffffffffffe0\n 44313: u64 [s1 + 0x48] = a0\n 44316: sp = a0\n 44318: a0 = u64 [s1 + 0x50]\n 44321: a0 = a0 << 0x20\n 44324: a0 = a0 >> 0x20\n 44327: u64 [s1 + 504] = 0\n 44331: u64 [s1] = a0\n 44333: u64 [s1 + 0x1f0] = a0\n 44337: a0 = u64 [s1 + 0x70]\n 44340: u64 [s1 + 0x1e8] = a0\n 44344: a1 = s1 + 0x1e0\n 44348: a0 = u64 [s1 + 0x78]\n 44351: u64 [s1 + 0x1e0] = a0\n 44355: a0 = 0\n 44357: jump [t0]\n      : @1764 (gas: 27)\n 44359: a3 = u64 [s1 + 0x28]\n 44362: a0 = u64 [a3 + 0x18]\n 44365: a1 = u64 [a3 + 0x10]\n 44368: a2 = u64 [a3 + 0x8]\n 44371: a3 = u64 [a3]\n 44373: a0 = reverse a0\n 44375: u64 [s1 + 0x20] = a0\n 44378: a0 = reverse a1\n 44380: u64 [s1 + 0x18] = a0\n 44383: a0 = reverse a2\n 44385: u64 [s1 + 0x10] = a0\n 44388: a0 = reverse a3\n 44390: u64 [s1 + 0x8] = a0\n 44393: a0 = sp + 0xffffffffffffffe0\n 44396: a0 = a0 & 0xffffffffffffffe0\n 44399: u64 [s1 + 0x28] = a0\n 44402: sp = a0\n 44404: u64 [s1 + 344] = 0\n 44408: a0 = u64 [s1 + 0x38]\n 44411: u64 [s1 + 0x150] = a0\n 44415: a0 = u64 [s1 + 0x70]\n 44418: u64 [s1 + 0x148] = a0\n 44422: a1 = s1 + 0x140\n 44426: a0 = u64 [s1 + 0x78]\n 44429: u64 [s1 + 0x140] = a0\n 44433: a0 = 0\n 44435: jump [t0]\n      : @1765 (gas: 16)\n 44437: a3 = u64 [s1 + 0x58]\n 44440: a0 = u64 [a3 + 0x18]\n 44443: a1 = u64 [a3 + 0x10]\n 44446: a2 = u64 [a3 + 0x8]\n 44449: a3 = u64 [a3]\n 44451: a0 = reverse a0\n 44453: a4 = reverse a1\n 44455: a2 = reverse a2\n 44457: a3 = reverse a3\n 44459: a1 = u64 [s1 + 0x60]\n 44462: u64 [a1 + 0x18] = a3\n 44465: u64 [a1 + 0x10] = a2\n 44468: u64 [a1 + 0x8] = a4\n 44471: u64 [a1] = a0\n 44473: a0 = s1 + 0xe0\n 44477: jump [t0]\n      : @1766 (gas: 27)\n 44479: a3 = u64 [s1 + 0x50]\n 44482: a0 = u64 [a3 + 0x18]\n 44485: a1 = u64 [a3 + 0x10]\n 44488: a2 = u64 [a3 + 0x8]\n 44491: a3 = u64 [a3]\n 44493: a0 = reverse a0\n 44495: u64 [s1 + 0x48] = a0\n 44498: a0 = reverse a1\n 44500: u64 [s1 + 0x40] = a0\n 44503: a0 = reverse a2\n 44505: u64 [s1 + 0x38] = a0\n 44508: a0 = reverse a3\n 44510: u64 [s1 + 0x30] = a0\n 44513: a0 = sp + 0xffffffffffffffe0\n 44516: a0 = a0 & 0xffffffffffffffe0\n 44519: u64 [s1 + 0x50] = a0\n 44522: sp = a0\n 44524: u64 [s1 + 344] = 0\n 44528: a0 = u64 [s1]\n 44530: u64 [s1 + 0x150] = a0\n 44534: a0 = u64 [s1 + 0x70]\n 44537: u64 [s1 + 0x148] = a0\n 44541: a1 = s1 + 0x140\n 44545: a0 = u64 [s1 + 0x78]\n 44548: u64 [s1 + 0x140] = a0\n 44552: a0 = 0\n 44554: jump [t0]\n      : @1767 (gas: 8)\n 44556: a0 = u64 [a2 + 0x8]\n 44559: a1 = i32 [a2 + 0x10]\n 44562: a2 = u64 [a2]\n 44564: a3 = reverse a0\n 44566: a0 = a3 << 0x20\n 44569: a1 = reverse a1\n 44571: a1 = a1 >> 0x20\n 44574: jump [t0]\n      : @1768 (gas: 14)\n 44576: a0 = u64 [a2 + 0x8]\n 44579: a1 = u64 [a2]\n 44581: a2 = i32 [a2 + 0x10]\n 44584: a0 = reverse a0\n 44586: a3 = a0 >> 0x20\n 44589: a1 = reverse a1\n 44591: a4 = a1 << 0x20\n 44594: a3 = a3 | a4\n 44597: a0 = a0 << 0x20\n 44600: a2 = reverse a2\n 44602: a2 = a2 >> 0x20\n 44605: a0 = a0 | a2\n 44608: a1 = a1 >> 0x20\n 44611: jump [t0]\n      : @1769 (gas: 11)\n 44613: u64 [a2] = a1\n 44615: u64 [a2 + 0x8] = a0\n 44618: u64 [a2 + 0x10] = a0\n 44621: u64 [a2 + 0x18] = a0\n 44624: sp = s0 + 0xfffffffffffffd80\n 44628: a0 = sp + 0x200\n 44632: ra = u64 [a0 + 0x78]\n 44635: s0 = u64 [a0 + 0x70]\n 44638: s1 = u64 [a0 + 0x68]\n 44641: sp = sp + 0x280\n 44645: jump [t0]\n      : @1770 (gas: 7)\n 44647: a1 = u64 [s1 + 0x98]\n 44651: a0 = a1 <u a0\n 44654: a1 = u64 [s1 + 0x90]\n 44658: a0 = 0 if a1 != 0\n 44660: a1 = u64 [s1 + 0x68]\n 44663: a0 = 0 if a1 != 0\n 44665: jump [t0]\n      : @1771 (gas: 7)\n 44667: u64 [s1 + 344] = 0\n 44671: u64 [s1 + 336] = 0\n 44675: u64 [s1 + 328] = 0\n 44679: a0 = 0x20\n 44682: a1 = s1 + 0x140\n 44686: u64 [s1 + 320] = 0\n 44690: jump [t0]\n      : @1772 (gas: 7)\n 44692: u64 [s1 + 376] = 0\n 44696: u64 [s1 + 368] = 0\n 44700: u64 [s1 + 360] = 0\n 44704: a0 = 0x20\n 44707: a1 = s1 + 0x160\n 44711: u64 [s1 + 352] = 0\n 44715: jump [t0]\n      : @1773 (gas: 7)\n 44717: u64 [s1 + 536] = 0\n 44721: u64 [s1 + 528] = 0\n 44725: u64 [s1 + 520] = 0\n 44729: a0 = 0x20\n 44732: a1 = s1 + 0x200\n 44736: u64 [s1 + 512] = 0\n 44740: jump [t0]\n      : @1774 (gas: 8)\n 44742: u64 [s1 + 208] = 0\n 44746: u64 [s1 + 200] = 0\n 44750: u64 [s1 + 192] = 0\n 44754: a0 = 0xe2517d3f00000000\n 44764: a1 = s1 + 0xc0\n 44768: u64 [s1 + 0xd8] = a0\n 44772: a0 = 0\n 44774: jump [t0]\n      : @1775 (gas: 9)\n 44776: a2 = s1 + 0x200\n 44780: a3 = u64 [a2 + 0x78]\n 44783: a0 = 0xffffffbc\n 44793: a0 = a3 <u a0\n 44796: a1 = u64 [a2 + 0x70]\n 44799: a0 = 0 if a1 != 0\n 44801: a1 = u64 [a2 + 0x68]\n 44804: a0 = 0 if a1 != 0\n 44806: jump [t0]\n      : @1776 (gas: 5)\n 44808: sp = a0\n 44810: i32 a2 = a0 + 0\n 44812: a1 = 0x40\n 44815: a0 = u64 [s1 + 0x60]\n 44818: jump [t0]\n      : @1777 (gas: 12)\n 44820: a0 = u64 [s1 + 0x40]\n 44823: a3 = s1 + 0x100\n 44827: u64 [a3 + 0x18] = a0\n 44830: a0 = u64 [s1 + 0x48]\n 44833: u64 [a3 + 0x10] = a0\n 44836: a0 = u64 [s1 + 0x50]\n 44839: u64 [a3 + 0x8] = a0\n 44842: a0 = 0x20\n 44845: a1 = s1 + 0x100\n 44849: a2 = u64 [s1 + 0x58]\n 44852: u64 [a3] = a2\n 44854: jump [t0]\n      : @1778 (gas: 5)\n 44856: a1 = a1 >u 0\n 44858: a2 = s1 + 0x7ff\n 44862: a2 = a2 + 0x1f9\n 44866: a3 = 0\n 44868: jump [t0]\n      : @1779 (gas: 13)\n 44870: a4 = s1 + 0x200\n 44874: a1 = u64 [a4 + 0x70]\n 44877: a2 = u64 [a4 + 0x60]\n 44880: a1 = a1 | a2\n 44883: a3 = u64 [a4 + 0x68]\n 44886: a2 = u64 [a4 + 0x78]\n 44889: a2 = a2 | a3\n 44892: a2 = a2 | a1\n 44895: a2 = a2 >> 0x20\n 44898: a1 = a1 | a3\n 44901: a1 = a1 << 0x20\n 44904: a1 = a1 | a2\n 44907: jump [t0]\n      : @1780 (gas: 12)\n 44909: a1 = a0 <u a1\n 44912: a3 = u64 [s1 + 0x270]\n 44916: a2 = a3 + a1\n 44919: a3 = a2 <u a3\n 44922: a3 = a1 if a1 == 0\n 44925: a1 = u64 [s1 + 0x260]\n 44929: a3 = a3 + a1\n 44932: a1 = a3 <u a1\n 44935: a4 = u64 [s1 + 0x278]\n 44939: a1 = a1 + a4\n 44942: a4 = s1 + 0x31f8\n 44946: jump [t0]\n      : @1781 (gas: 12)\n 44948: a1 = u64 [a0 + 0x10]\n 44951: a2 = u64 [a0 + 0x18]\n 44954: a3 = u64 [a0 + 0x8]\n 44957: a0 = u64 [a0]\n 44959: a2 = a2 | a3\n 44962: a3 = a0 | a1\n 44965: a3 = a3 | a2\n 44968: a3 = a3 >> 0x20\n 44971: a1 = a1 | a2\n 44974: a1 = a1 << 0x20\n 44977: a1 = a1 | a3\n 44980: jump [t0]\n      : @1782 (gas: 16)\n 44982: a3 = u64 [s1 + 0x68]\n 44985: a0 = u64 [a3 + 0x18]\n 44988: a1 = u64 [a3 + 0x10]\n 44991: a2 = u64 [a3 + 0x8]\n 44994: a3 = u64 [a3]\n 44996: a0 = reverse a0\n 44998: a4 = reverse a1\n 45000: a2 = reverse a2\n 45002: a3 = reverse a3\n 45004: a1 = u64 [s1 + 0x28]\n 45007: u64 [a1 + 0x18] = a3\n 45010: u64 [a1 + 0x10] = a2\n 45013: u64 [a1 + 0x8] = a4\n 45016: u64 [a1] = a0\n 45018: a0 = s1 + 0x100\n 45022: jump [t0]\n      : @1783 (gas: 16)\n 45024: a3 = u64 [s1 + 0x68]\n 45027: a0 = u64 [a3 + 0x18]\n 45030: a1 = u64 [a3 + 0x10]\n 45033: a2 = u64 [a3 + 0x8]\n 45036: a3 = u64 [a3]\n 45038: a0 = reverse a0\n 45040: a4 = reverse a1\n 45042: a2 = reverse a2\n 45044: a3 = reverse a3\n 45046: a1 = u64 [s1 + 0x50]\n 45049: u64 [a1 + 0x18] = a3\n 45052: u64 [a1 + 0x10] = a2\n 45055: u64 [a1 + 0x8] = a4\n 45058: u64 [a1] = a0\n 45060: a0 = s1 + 0x100\n 45064: jump [t0]\n      : @1784 (gas: 8)\n 45066: a4 = a4 | a2\n 45069: a2 = a0 | a1\n 45072: a2 = a2 | a4\n 45075: a2 = a2 >> 0x20\n 45078: a1 = a1 | a4\n 45081: a1 = a1 << 0x20\n 45084: a1 = a1 | a2\n 45087: jump [t0]\n      : @1785 (gas: 7)\n 45089: a4 = 0x100000000\n 45099: a0 = 0xfffffffc\n 45109: a0 = a1 <u a0\n 45112: a2 = u64 [a5 + 0x70]\n 45115: a0 = 0 if a2 != 0\n 45117: a0 = 0 if a3 != 0\n 45119: jump [t0]\n      : @1786 (gas: 16)\n 45121: a3 = u64 [s1 + 0x20]\n 45124: a0 = u64 [a3 + 0x18]\n 45127: a1 = u64 [a3 + 0x10]\n 45130: a2 = u64 [a3 + 0x8]\n 45133: a3 = u64 [a3]\n 45135: a0 = reverse a0\n 45137: a4 = reverse a1\n 45139: a2 = reverse a2\n 45141: a3 = reverse a3\n 45143: a1 = u64 [s1 + 0x28]\n 45146: u64 [a1 + 0x18] = a3\n 45149: u64 [a1 + 0x10] = a2\n 45152: u64 [a1 + 0x8] = a4\n 45155: u64 [a1] = a0\n 45157: a0 = s1 + 0x1a0\n 45161: jump [t0]\n      : @1787 (gas: 16)\n 45163: a3 = u64 [s1 + 0x50]\n 45166: a0 = u64 [a3 + 0x18]\n 45169: a1 = u64 [a3 + 0x10]\n 45172: a2 = u64 [a3 + 0x8]\n 45175: a3 = u64 [a3]\n 45177: a0 = reverse a0\n 45179: a4 = reverse a1\n 45181: a2 = reverse a2\n 45183: a3 = reverse a3\n 45185: a1 = u64 [s1 + 0x48]\n 45188: u64 [a1 + 0x18] = a3\n 45191: u64 [a1 + 0x10] = a2\n 45194: u64 [a1 + 0x8] = a4\n 45197: u64 [a1] = a0\n 45199: a0 = s1 + 0x1a0\n 45203: jump [t0]\n      : @1788 (gas: 4)\n 45205: a0 = 0x29f8\n 45209: a3 = s1 + a0\n 45212: a4 = a3 + 0x400\n 45216: jump [t0]\n      : @1789 (gas: 12)\n 45218: a1 = a0 <u a1\n 45221: a3 = u64 [s1 + 0x78]\n 45224: a2 = a3 + a1\n 45227: a3 = a2 <u a3\n 45230: a3 = a1 if a1 == 0\n 45233: a1 = u64 [s1 + 0x88]\n 45237: a3 = a3 + a1\n 45240: a1 = a3 <u a1\n 45243: a4 = u64 [s1 + 0x80]\n 45247: a1 = a1 + a4\n 45250: a4 = s1 + 0x29f8\n 45254: jump [t0]\n      : @1790 (gas: 11)\n 45256: a0 = a1 + 0x2\n 45259: a1 = a0 <u a1\n 45262: a3 = u64 [s1 + 0x258]\n 45266: a2 = a3 + a1\n 45269: a3 = a2 <u a3\n 45272: a3 = a1 if a1 == 0\n 45275: a1 = u64 [s1 + 0x268]\n 45279: a3 = a3 + a1\n 45282: a1 = a3 <u a1\n 45285: a4 = u64 [s1 + 0x260]\n 45289: jump [t0]\n      : @1791 (gas: 15)\n 45291: a4 = s1 + 0x100\n 45295: a0 = u64 [a4]\n 45297: a1 = u64 [a4 + 0x8]\n 45300: a2 = u64 [a4 + 0x18]\n 45303: a3 = u64 [a4 + 0x10]\n 45306: a0 = a0 & 0xffffffffffffff00\n 45310: a0 = a0 | 0x1\n 45313: a4 = s1 + 0x200\n 45317: u64 [a4 + 0x58] = a2\n 45320: u64 [a4 + 0x50] = a3\n 45323: u64 [a4 + 0x48] = a1\n 45326: u64 [a4 + 0x40] = a0\n 45329: a1 = s1 + 0x240\n 45333: a0 = u64 [s1 + 0x50]\n 45336: jump [t0]\n      : @1792 (gas: 14)\n 45338: a4 = s1 + 0x100\n 45342: a0 = u64 [a4]\n 45344: a1 = u64 [a4 + 0x18]\n 45347: a2 = u64 [a4 + 0x10]\n 45350: a3 = u64 [a4 + 0x8]\n 45353: a0 = a0 & 0xffffffffffffff00\n 45357: a4 = s1 + 0x200\n 45361: u64 [a4 + 0x58] = a1\n 45364: u64 [a4 + 0x50] = a2\n 45367: u64 [a4 + 0x48] = a3\n 45370: u64 [a4 + 0x40] = a0\n 45373: a1 = s1 + 0x240\n 45377: a0 = u64 [s1 + 0x28]\n 45380: jump [t0]\n      : @1793 (gas: 9)\n 45382: sp = sp + 0xffffffffffffffc0\n 45385: u64 [sp + 0x38] = ra\n 45388: u64 [sp + 0x30] = s0\n 45391: u64 [sp + 0x28] = s1\n 45394: s0 = sp + 0x40\n 45397: sp = sp & 0xffffffffffffffe0\n 45400: s1 = a0\n 45402: i32 a0 = sp + 0\n 45404: jump [t0]\n      : @1794 (gas: 8)\n 45406: a0 = sp + 0xffffffffffffffe0\n 45409: a0 = a0 & 0xffffffffffffffe0\n 45412: u64 [s1 + 0x58] = a0\n 45415: sp = a0\n 45417: i32 a2 = a0 + 0\n 45419: a1 = 0x40\n 45422: a0 = u64 [s1 + 0x70]\n 45425: jump [t0]\n      : @1795 (gas: 11)\n 45427: a2 = u64 [sp + 0x8]\n 45430: a2 = a2 | s1\n 45433: s1 = 0x100000000\n 45443: a0 = 0xfffffffc\n 45453: a1 = u64 [sp + 0x18]\n 45456: a0 = a1 <u a0\n 45459: a1 = u64 [sp + 0x10]\n 45462: a0 = 0 if a1 != 0\n 45464: u64 [sp + 0x8] = a2\n 45467: a0 = 0 if a2 != 0\n 45469: jump [t0]\n      : @1796 (gas: 16)\n 45471: a4 = u64 [a3]\n 45473: u64 [sp + 0x18] = a4\n 45476: a4 = u64 [a3 + 0x8]\n 45479: u64 [sp + 0x20] = a4\n 45482: a4 = u64 [a3 + 0x10]\n 45485: u64 [sp + 0x28] = a4\n 45488: a3 = u64 [a3 + 0x18]\n 45491: u64 [sp + 0x30] = a3\n 45494: s1 = u64 [a2]\n 45496: a3 = u64 [a2 + 0x8]\n 45499: u64 [sp] = a3\n 45501: a3 = u64 [a2 + 0x10]\n 45504: u64 [sp + 0x8] = a3\n 45507: a2 = u64 [a2 + 0x18]\n 45510: u64 [sp + 0x10] = a2\n 45513: jump [t0]\n      : @1797 (gas: 7)\n 45515: a1 = u64 [a2 + 0x78]\n 45518: a0 = a1 <u a0\n 45521: a1 = u64 [a2 + 0x70]\n 45524: a0 = 0 if a1 != 0\n 45526: a1 = u64 [a2 + 0x68]\n 45529: a0 = 0 if a1 != 0\n 45531: jump [t0]\n      : @1798 (gas: 12)\n 45533: a0 = u64 [s1 + 0x30]\n 45536: a3 = s1 + 0x100\n 45540: u64 [a3 + 0x38] = a0\n 45543: a0 = u64 [s1 + 0x38]\n 45546: u64 [a3 + 0x30] = a0\n 45549: a0 = u64 [s1 + 0x40]\n 45552: u64 [a3 + 0x28] = a0\n 45555: a0 = 0x20\n 45558: a1 = s1 + 0x120\n 45562: a2 = u64 [s1 + 0x48]\n 45565: u64 [a3 + 0x20] = a2\n 45568: jump [t0]\n      : @1799 (gas: 10)\n 45570: a4 = s1 + 0x200\n 45574: a3 = u64 [a4 + 0x68]\n 45577: a2 = u64 [a4 + 0x70]\n 45580: a1 = u64 [a4 + 0x78]\n 45583: a0 = u64 [a4 + 0x60]\n 45586: a0 = a0 + 0xffffffffffffffdc\n 45589: a0 = a1 <u a0\n 45592: a0 = 0 if a2 != 0\n 45594: a0 = 0 if a3 != 0\n 45596: jump [t0]\n      : @1800 (gas: 10)\n 45598: a0 = u64 [sp + 0x10]\n 45601: a1 = u64 [sp + 0x18]\n 45604: a2 = 0x100000000\n 45614: a2 = a2 ^ a0\n 45617: a2 = a2 | a1\n 45620: a3 = a0 >> 0x20\n 45623: a3 = a3 <u 0x1\n 45626: a3 = 0 if a1 != 0\n 45628: a3 = 0 if a2 == 0\n 45630: jump [t0]\n      : @1801 (gas: 12)\n 45632: a0 = u64 [s1 + 0x8]\n 45635: a3 = s1 + 0x100\n 45639: u64 [a3 + 0xd8] = a0\n 45643: a0 = u64 [s1 + 0x10]\n 45646: u64 [a3 + 0xd0] = a0\n 45650: a0 = u64 [s1 + 0x18]\n 45653: u64 [a3 + 0xc8] = a0\n 45657: a0 = 0x20\n 45660: a1 = s1 + 0x1c0\n 45664: a2 = u64 [s1 + 0x20]\n 45667: u64 [a3 + 0xc0] = a2\n 45671: jump [t0]\n      : @1802 (gas: 12)\n 45673: a0 = u64 [s1 + 0x8]\n 45676: a3 = s1 + 0x100\n 45680: u64 [a3 + 0x38] = a0\n 45683: a0 = u64 [s1 + 0x10]\n 45686: u64 [a3 + 0x30] = a0\n 45689: a0 = u64 [s1 + 0x18]\n 45692: u64 [a3 + 0x28] = a0\n 45695: a0 = 0x20\n 45698: a1 = s1 + 0x120\n 45702: a2 = u64 [s1 + 0x20]\n 45705: u64 [a3 + 0x20] = a2\n 45708: jump [t0]\n      : @1803 (gas: 12)\n 45710: a0 = u64 [s1 + 0x28]\n 45713: a3 = s1 + 0x100\n 45717: u64 [a3 + 0xd8] = a0\n 45721: a0 = u64 [s1 + 0x30]\n 45724: u64 [a3 + 0xd0] = a0\n 45728: a0 = u64 [s1 + 0x38]\n 45731: u64 [a3 + 0xc8] = a0\n 45735: a0 = 0x20\n 45738: a1 = s1 + 0x1c0\n 45742: a2 = u64 [s1 + 0x40]\n 45745: u64 [a3 + 0xc0] = a2\n 45749: jump [t0]\n      : @1804 (gas: 15)\n 45751: a2 = u64 [sp + 0xb8]\n 45755: s1 = u64 [sp + 0xb0]\n 45759: a0 = u64 [sp + 0xa8]\n 45763: a1 = u64 [sp + 0xa0]\n 45767: u64 [sp + 0x10] = a0\n 45770: u64 [sp + 0x8] = a2\n 45773: a0 = a0 | a2\n 45776: u64 [sp + 0x18] = a1\n 45779: a1 = a1 | s1\n 45782: a1 = a1 | a0\n 45785: a1 = a1 >> 0x20\n 45788: a0 = a0 | s1\n 45791: a0 = a0 << 0x20\n 45794: a0 = a0 | a1\n 45797: jump [t0]\n      : @1805 (gas: 6)\n 45799: i32 a0 = a2 + 0\n 45801: u64 [s1 + 0x270] = a0\n 45805: a0 = u64 [s1 + 0x278]\n 45809: a1 = a2\n 45811: u64 [s1 + 0x268] = a2\n 45815: jump [t0]\n      : @1806 (gas: 14)\n 45817: sp = sp + 0xffffffffffffff20\n 45821: u64 [sp + 0xd8] = ra\n 45825: u64 [sp + 0xd0] = s0\n 45829: u64 [sp + 0xc8] = s1\n 45833: s0 = sp + 0xe0\n 45837: sp = sp & 0xfffffffffffffff0\n 45840: a1 = u64 [a0 + 0x10]\n 45843: a2 = u64 [a0 + 0x18]\n 45846: a3 = u64 [a0 + 0x8]\n 45849: a0 = u64 [a0]\n 45851: a2 = a2 | a3\n 45854: a0 = a0 | a1\n 45857: a0 = a0 | a2\n 45860: jump [t0]\n      : @1807 (gas: 8)\n 45862: a0 = u64 [a4 + 0x98]\n 45866: a1 = u64 [a4 + 0xa0]\n 45870: a2 = u64 [a4 + 0x90]\n 45874: a3 = u64 [a4 + 0x88]\n 45878: a1 = a1 | a2\n 45881: a0 = a0 | a3\n 45884: a0 = a0 | a1\n 45887: jump [t0]\n      : @1808 (gas: 4)\n 45889: a0 = u64 [s1 + 0x278]\n 45893: a0 = i32 [a0]\n 45895: a1 = 0x23\n 45898: jump [t0]\n      : @1809 (gas: 10)\n 45900: a0 = a0 + 0x1\n 45903: a4 = a0 <u 0x1\n 45906: a2 = a2 + a4\n 45909: a4 = a0 | a2\n 45912: a4 = a4 <u 0x1\n 45915: a4 = a4 + a3\n 45918: a3 = a4 <u a3\n 45921: a1 = a1 + a3\n 45924: a3 = 0x3000\n 45928: jump [t0]\n      : @1810 (gas: 8)\n 45930: sp = sp + 0xfffffffffffffe60\n 45934: u64 [sp + 0x198] = ra\n 45938: u64 [sp + 0x190] = s0\n 45942: u64 [sp + 0x188] = s1\n 45946: s0 = sp + 0x1a0\n 45950: sp = sp & 0xffffffffffffffe0\n 45953: s1 = sp\n 45955: jump [t0]\n      : @1811 (gas: 9)\n 45957: a0 = u64 [a3 + 0x18]\n 45960: a1 = u64 [a3 + 0x10]\n 45963: a2 = u64 [a3 + 0x8]\n 45966: a3 = u64 [a3]\n 45968: a0 = reverse a0\n 45970: a4 = reverse a1\n 45972: a2 = reverse a2\n 45974: a3 = reverse a3\n 45976: jump [t0]\n      : @1812 (gas: 7)\n 45978: a0 = 0xffffffbc\n 45988: a0 = s1 <u a0\n 45991: a1 = u64 [sp + 0x10]\n 45994: a0 = 0 if a1 != 0\n 45996: a1 = u64 [sp + 0x8]\n 45999: a0 = 0 if a1 != 0\n 46001: jump [t0]\n      : @1813 (gas: 11)\n 46003: a0 = u64 [s1 + 0x38]\n 46006: u64 [s1 + 0x98] = a0\n 46010: a0 = u64 [s1 + 0x28]\n 46013: u64 [s1 + 0x90] = a0\n 46017: a0 = u64 [s1 + 0x20]\n 46020: u64 [s1 + 0x88] = a0\n 46024: a0 = 0x24\n 46027: a1 = s1 + 0x80\n 46031: a2 = u64 [s1 + 0x30]\n 46034: u64 [s1 + 0x80] = a2\n 46038: jump [t0]\n      : @1814 (gas: 12)\n 46040: a2 = u64 [sp]\n 46042: a3 = u64 [sp + 0x8]\n 46045: u64 [s1] = a2\n 46047: u64 [s1 + 0x8] = a3\n 46050: u64 [s1 + 0x10] = a0\n 46053: u64 [s1 + 0x18] = a1\n 46056: sp = s0 + 0xffffffffffffffc0\n 46059: ra = u64 [sp + 0x38]\n 46062: s0 = u64 [sp + 0x30]\n 46065: s1 = u64 [sp + 0x28]\n 46068: sp = sp + 0x40\n 46071: jump [t0]\n      : @1815 (gas: 10)\n 46073: sp = sp + 0xfffffffffffffd80\n 46077: a2 = sp + 0x200\n 46081: u64 [a2 + 0x78] = ra\n 46084: u64 [a2 + 0x70] = s0\n 46087: u64 [a2 + 0x68] = s1\n 46090: s0 = sp + 0x280\n 46094: sp = sp & 0xffffffffffffffe0\n 46097: s1 = sp\n 46099: a2 = u64 [a1 + 0x10]\n 46102: jump [t0]\n      : @1816 (gas: 10)\n 46104: sp = sp + 0xfffffffffffffd80\n 46108: a3 = sp + 0x200\n 46112: u64 [a3 + 0x78] = ra\n 46115: u64 [a3 + 0x70] = s0\n 46118: u64 [a3 + 0x68] = s1\n 46121: s0 = sp + 0x280\n 46125: sp = sp & 0xffffffffffffffe0\n 46128: s1 = sp\n 46130: a3 = u64 [a2 + 0x10]\n 46133: jump [t0]\n      : @1817 (gas: 8)\n 46135: a3 = s1 + 0x200\n 46139: a1 = u64 [a3 + 0x78]\n 46142: a0 = a1 <u a0\n 46145: a1 = u64 [a3 + 0x70]\n 46148: a0 = 0 if a1 != 0\n 46150: a1 = u64 [a3 + 0x68]\n 46153: a0 = 0 if a1 != 0\n 46155: jump [t0]\n      : @1818 (gas: 8)\n 46157: u64 [sp + 48] = 0\n 46160: u64 [sp + 40] = 0\n 46163: u64 [sp + 32] = 0\n 46166: a0 = 0x4e487b7100000000\n 46176: a1 = sp + 0x20\n 46179: u64 [sp + 0x38] = a0\n 46182: a0 = 0\n 46184: jump [t0]\n      : @1819 (gas: 8)\n 46186: a0 = s1 + 0xffffffffffffffdc\n 46189: a1 = u64 [sp + 0x18]\n 46192: a0 = a1 <u a0\n 46195: a1 = u64 [sp + 0x10]\n 46198: a0 = 0 if a1 != 0\n 46200: a1 = u64 [sp + 0x8]\n 46203: a0 = 0 if a1 != 0\n 46205: jump [t0]\n      : @1820 (gas: 8)\n 46207: u64 [sp + 144] = 0\n 46211: u64 [sp + 136] = 0\n 46215: u64 [sp + 128] = 0\n 46219: a0 = 0x8c379a000000000\n 46229: a1 = sp + 0x80\n 46233: u64 [sp + 0x98] = a0\n 46237: a0 = u64 [sp + 0x18]\n 46240: jump [t0]\n      : @1821 (gas: 4)\n 46242: a1 = a1 >u 0\n 46244: a2 = s1 + 0x11f8\n 46248: a3 = 0\n 46250: jump [t0]\n      : @1822 (gas: 6)\n 46252: i32 a0 = a0 + 0\n 46254: i32 a2 = a2 + 0\n 46256: u64 [s1 + 0x68] = a1\n 46259: a1 = 0x40\n 46262: u64 [s1 + 0x60] = a0\n 46265: jump [t0]\n      : @1823 (gas: 7)\n 46267: a1 = a1 | a2\n 46270: a1 = a1 | a0\n 46273: a1 = a1 >> 0x20\n 46276: a0 = a0 | a2\n 46279: a0 = a0 << 0x20\n 46282: a0 = a0 | a1\n 46285: jump [t0]\n      : @1824 (gas: 8)\n 46287: a0 = u64 [a4 + 0x58]\n 46290: a1 = u64 [a4 + 0x60]\n 46293: a2 = u64 [a4 + 0x50]\n 46296: a3 = u64 [a4 + 0x48]\n 46299: a1 = a1 | a2\n 46302: a0 = a0 | a3\n 46305: a0 = a0 | a1\n 46308: jump [t0]\n      : @1825 (gas: 7)\n 46310: sp = sp + 0xfffffffffffffee0\n 46314: u64 [sp + 0x118] = ra\n 46318: u64 [sp + 0x110] = s0\n 46322: u64 [sp + 0x108] = s1\n 46326: s0 = sp + 0x120\n 46330: sp = sp & 0xffffffffffffffe0\n 46333: jump [t0]\n      : @1826 (gas: 8)\n 46335: a0 = sp + 0xffffffffffffffe0\n 46338: a0 = a0 & 0xffffffffffffffe0\n 46341: u64 [s1 + 0x30] = a0\n 46344: sp = a0\n 46346: i32 a2 = a0 + 0\n 46348: a1 = 0x40\n 46351: a0 = u64 [s1 + 0x40]\n 46354: jump [t0]\n      : @1827 (gas: 8)\n 46356: a0 = u64 [a4 + 0xd8]\n 46360: a1 = u64 [a4 + 0xe0]\n 46364: a2 = u64 [a4 + 0xd0]\n 46368: a3 = u64 [a4 + 0xc8]\n 46372: a1 = a1 | a2\n 46375: a0 = a0 | a3\n 46378: a0 = a0 | a1\n 46381: jump [t0]\n      : @1828 (gas: 2)\n 46383: a3 = a2 & 0x40\n 46386: jump @1832 if a3 != 0\n      : @1829 (gas: 1)\n 46389: jump @1831 if a2 == 0\n      : @1830 (gas: 6)\n 46392: i32 a3 = 0x40 - a2\n 46395: a3 = a1 << a3\n 46398: a1 = a1 >> a2\n 46401: a0 = a0 >> a2\n 46404: a0 = a0 | a3\n 46407: ret\n      : @1831 (gas: 1)\n 46409: ret\n      : @1832 (gas: 4)\n 46411: a0 = a2 + 0xffffffffffffffc0\n 46414: a0 = a1 >> a0\n 46417: a1 = 0\n 46419: ret\n      : @1833 (gas: 2)\n 46421: a3 = a2 & 0x40\n 46424: jump @1837 if a3 != 0\n      : @1834 (gas: 1)\n 46427: jump @1836 if a2 == 0\n      : @1835 (gas: 6)\n 46430: i32 a3 = 0x40 - a2\n 46433: a3 = a0 >> a3\n 46436: a0 = a0 << a2\n 46439: a1 = a1 << a2\n 46442: a1 = a1 | a3\n 46445: ret\n      : @1836 (gas: 1)\n 46447: ret\n      : @1837 (gas: 4)\n 46449: a1 = a2 + 0xffffffffffffffc0\n 46452: a1 = a0 << a1\n 46455: a0 = 0\n 46457: ret\n      : @1838 (gas: 1)\n 46459: jump @1841 if a1 == 0\n      : @1839 (gas: 2)\n 46462: a5 = a1 <u 0\n 46464: jump @1842 if a5 != 0\n      : @1840 (gas: 5)\n 46467: sp = sp + 0xffffffffffffffd0\n 46470: u64 [sp + 0x28] = ra\n 46473: u64 [sp + 0x20] = s0\n 46476: u64 [sp + 0x18] = s1\n 46479: jump @1843\n      : @1841 (gas: 2)\n 46481: a5 = a0 <u a2\n 46484: jump @1840 if a5 == 0\n      : @1842 (gas: 3)\n 46487: a0 = 0\n 46489: a1 = 0\n 46491: jump @651\n      : @1843 (gas: 2)\n 46494: u64 [sp + 8] = 0\n 46497: jump @1856 if a1 >=u a2\n      : @1844 (gas: 30)\n 46501: a3 = a2 >> 0x1\n 46504: a3 = a3 | a2\n 46507: a5 = a3 >> 0x2\n 46510: a3 = a3 | a5\n 46513: a5 = a3 >> 0x4\n 46516: a3 = a3 | a5\n 46519: a5 = a3 >> 0x8\n 46522: a3 = a3 | a5\n 46525: a5 = a3 >> 0x10\n 46528: a3 = a3 | a5\n 46531: a5 = a3 >> 0x20\n 46534: a3 = a3 | a5\n 46537: a3 = a3 ^ 0xffffffffffffffff\n 46540: a5 = a3 >> 0x1\n 46543: s0 = 0x5555555555555555\n 46553: a5 = a5 & s0\n 46556: a3 = a3 - a5\n 46559: a5 = 0x3333333333333333\n 46569: s1 = a3 & a5\n 46572: a3 = a3 >> 0x2\n 46575: a3 = a3 & a5\n 46578: a3 = a3 + s1\n 46581: a5 = a3 >> 0x4\n 46584: a3 = a3 + a5\n 46587: a5 = 0xf0f0f0f0f0f0f0f\n 46597: a3 = a3 & a5\n 46600: a5 = 0x101010101010101\n 46610: a3 = a3 * a5\n 46613: a4 = a3 >> 0x38\n 46616: jump @1846 if a4 == 0\n      : @1845 (gas: 8)\n 46619: a2 = a2 << a4\n 46622: a1 = a1 << a4\n 46625: a3 = a4 ^ 0xffffffffffffffff\n 46628: a5 = a0 >> 0x1\n 46631: a3 = a5 >> a3\n 46634: a1 = a1 | a3\n 46637: a0 = a0 << a4\n 46640: fallthrough\n      : @1846 (gas: 10)\n 46641: ra = a2 >> 0x20\n 46644: a5 = a2 << 0x20\n 46647: a5 = a5 >> 0x20\n 46650: t1 = a0 >> 0x20\n 46653: a0 = a0 << 0x20\n 46656: a0 = a0 >> 0x20\n 46659: t0 = a1 /u ra\n 46662: a3 = t0 * ra\n 46665: s1 = a1 - a3\n 46668: jump @1848\n      : @1847 (gas: 4)\n 46670: s1 = s1 + ra\n 46673: a3 = s1 >> 0x20\n 46676: t0 = t0 + 0xffffffffffffffff\n 46679: jump @1850 if a3 != 0\n      : @1848 (gas: 2)\n 46682: s0 = t0 >> 0x20\n 46685: jump @1847 if s0 != 0\n      : @1849 (gas: 4)\n 46688: s0 = t0 * a5\n 46691: a3 = s1 << 0x20\n 46694: a3 = a3 | t1\n 46697: jump @1847 if a3 <u s0\n      : @1850 (gas: 9)\n 46700: a1 = a1 << 0x20\n 46703: a1 = t1 | a1\n 46706: a3 = t0 * a2\n 46709: a1 = a1 - a3\n 46712: t2 = a1 /u ra\n 46715: s1 = t2 * ra\n 46718: u64 [sp + 0x10] = a1\n 46721: a3 = a1 - s1\n 46724: jump @1852\n      : @1851 (gas: 4)\n 46726: a3 = a3 + ra\n 46729: a1 = a3 >> 0x20\n 46732: t2 = t2 + 0xffffffffffffffff\n 46735: jump @1854 if a1 != 0\n      : @1852 (gas: 2)\n 46738: a1 = t2 >> 0x20\n 46741: jump @1851 if a1 != 0\n      : @1853 (gas: 4)\n 46744: a1 = t2 * a5\n 46747: s0 = a3 << 0x20\n 46750: s1 = s0 | a0\n 46753: jump @1851 if s1 <u a1\n      : @1854 (gas: 11)\n 46756: t1 = 0\n 46758: a1 = u64 [sp + 0x10]\n 46761: a1 = a1 << 0x20\n 46764: a1 = a1 | a0\n 46767: a2 = t2 * a2\n 46770: a1 = a1 - a2\n 46773: a2 = a1 >> a4\n 46776: t0 = t0 << 0x20\n 46779: t2 = t2 + t0\n 46782: a4 = u64 [sp + 0x8]\n 46785: jump @1867 if a4 != 0\n      : @1855 (gas: 1)\n 46789: jump @1868\n      : @1856 (gas: 33)\n 46792: t1 = a1 /u a2\n 46795: t2 = t1 * a2\n 46798: a5 = a2 >> 0x1\n 46801: s1 = a2 | a5\n 46804: a5 = s1 >> 0x2\n 46807: s1 = s1 | a5\n 46810: a5 = s1 >> 0x4\n 46813: s1 = s1 | a5\n 46816: a5 = s1 >> 0x8\n 46819: s1 = s1 | a5\n 46822: a5 = s1 >> 0x10\n 46825: s1 = s1 | a5\n 46828: a5 = s1 >> 0x20\n 46831: a5 = a5 | s1\n 46834: a3 = a5 ^ 0xffffffffffffffff\n 46837: s0 = 0x5555555555555555\n 46847: a5 = a3 >> 0x1\n 46850: a5 = a5 & s0\n 46853: a3 = a3 - a5\n 46856: a5 = 0x3333333333333333\n 46866: s1 = a3 & a5\n 46869: a3 = a3 >> 0x2\n 46872: a3 = a3 & a5\n 46875: a3 = a3 + s1\n 46878: a5 = a3 >> 0x4\n 46881: a3 = a3 + a5\n 46884: a5 = 0xf0f0f0f0f0f0f0f\n 46894: a3 = a3 & a5\n 46897: a5 = 0x101010101010101\n 46907: a3 = a3 * a5\n 46910: ra = a3 >> 0x38\n 46913: t2 = a1 - t2\n 46916: jump @1858 if ra == 0\n      : @1857 (gas: 8)\n 46919: a2 = a2 << ra\n 46922: a1 = t2 << ra\n 46925: a3 = ra ^ 0xffffffffffffffff\n 46928: a5 = a0 >> 0x1\n 46931: a3 = a5 >> a3\n 46934: t2 = a1 | a3\n 46937: a0 = a0 << ra\n 46940: fallthrough\n      : @1858 (gas: 12)\n 46941: a5 = a2\n 46943: a2 = a2 >> 0x20\n 46946: a4 = a5\n 46948: a5 = a5 << 0x20\n 46951: a5 = a5 >> 0x20\n 46954: s0 = a0 >> 0x20\n 46957: a0 = a0 << 0x20\n 46960: a1 = a0 >> 0x20\n 46963: t0 = t2 /u a2\n 46966: s1 = t0 * a2\n 46969: a3 = t2 - s1\n 46972: jump @1860\n      : @1859 (gas: 4)\n 46974: a3 = a3 + a2\n 46977: a0 = a3 >> 0x20\n 46980: t0 = t0 + 0xffffffffffffffff\n 46983: jump @1862 if a0 != 0\n      : @1860 (gas: 2)\n 46986: a0 = t0 >> 0x20\n 46989: jump @1859 if a0 != 0\n      : @1861 (gas: 4)\n 46992: a0 = t0 * a5\n 46995: s1 = a3 << 0x20\n 46998: s1 = s1 | s0\n 47001: jump @1859 if s1 <u a0\n      : @1862 (gas: 8)\n 47004: t2 = t2 << 0x20\n 47007: a0 = s0 | t2\n 47010: a3 = t0 * a4\n 47013: s0 = a0 - a3\n 47016: t2 = s0 /u a2\n 47019: a0 = t2 * a2\n 47022: s1 = s0 - a0\n 47025: jump @1864\n      : @1863 (gas: 4)\n 47027: s1 = s1 + a2\n 47030: a0 = s1 >> 0x20\n 47033: t2 = t2 + 0xffffffffffffffff\n 47036: jump @1866 if a0 != 0\n      : @1864 (gas: 2)\n 47039: a0 = t2 >> 0x20\n 47042: jump @1863 if a0 != 0\n      : @1865 (gas: 4)\n 47045: a0 = t2 * a5\n 47048: a3 = s1 << 0x20\n 47051: a3 = a3 | a1\n 47054: jump @1863 if a3 <u a0\n      : @1866 (gas: 9)\n 47057: s0 = s0 << 0x20\n 47060: a1 = a1 | s0\n 47063: a0 = t2 * a4\n 47066: a1 = a1 - a0\n 47069: a2 = a1 >> ra\n 47072: t0 = t0 << 0x20\n 47075: t2 = t2 + t0\n 47078: a4 = u64 [sp + 0x8]\n 47081: jump @1868 if a4 == 0\n      : @1867 (gas: 3)\n 47084: u64 [a4 + 8] = 0\n 47087: u64 [a4] = a2\n 47089: fallthrough\n      : @1868 (gas: 7)\n 47090: ra = u64 [sp + 0x28]\n 47093: s0 = u64 [sp + 0x20]\n 47096: s1 = u64 [sp + 0x18]\n 47099: sp = sp + 0x30\n 47102: a0 = t2\n 47104: a1 = t1\n 47106: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "ADMIN_ROLE()": "75b238fc",
              "AI_AGENT_ROLE()": "25b8e7eb",
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "bond(uint128)": "defe4b12",
              "challenges(uint256)": "8f1d3776",
              "completeChallenge(uint256)": "a7817bbc",
              "getChallenge(uint256)": "1bdd4b74",
              "getCurrentDate()": "9254d772",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantAiAgentRole(address)": "36561c64",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "nominate(address[])": "19f2fdad",
              "renounceRole(bytes32,address)": "36568abe",
              "reportMissedSleep(uint256,uint64)": "11688c71",
              "revokeAiAgentRole(address)": "916d9e53",
              "revokeRole(bytes32,address)": "d547741f",
              "stakingPrecompile()": "f845c5b3",
              "startChallenge(uint64,address)": "69c498dc",
              "supportsInterface(bytes4)": "01ffc9a7",
              "unbond(uint128)": "e8111842"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/access/AccessControl.sol\", 1:\"@openzeppelin/contracts/access/IAccessControl.sol\", 2:\"@openzeppelin/contracts/utils/Context.sol\", 3:\"@openzeppelin/contracts/utils/introspection/ERC165.sol\", 4:\"@openzeppelin/contracts/utils/introspection/IERC165.sol\", 7:\"contracts/SleepFine.sol\"\nobject \"SleepFine_1626\" {\n    code {\n        {\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"SleepFine_1626\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            let value := mload(_1)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 7:1724:1762  \"stakingPrecompile = _stakingPrecompile\"\n            mstore(128, value)\n            /// @src 7:1773:1815  \"_grantRole(DEFAULT_ADMIN_ROLE, msg.sender)\"\n            pop(fun_grantRole(/** @src 7:1804:1814  \"msg.sender\" */ caller()))\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"SleepFine_1626_deployed\")\n            codecopy(_2, dataoffset(\"SleepFine_1626_deployed\"), _3)\n            setimmutable(_2, \"1258\", mload(/** @src 7:1724:1762  \"stakingPrecompile = _stakingPrecompile\" */ 128))\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            return(_2, _3)\n        }\n        /// @ast-id 256 @src 0:6179:6495  \"function _grantRole(bytes32 role, address account) internal virtual returns (bool) {...\"\n        function fun_grantRole(var_account) -> var\n        {\n            /// @src 0:6256:6260  \"bool\"\n            var := /** @src 0:2232:2236  \"0x00\" */ 0x00\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            mstore(/** @src 0:2232:2236  \"0x00\" */ 0x00, 0x00)\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            mstore(0x20, /** @src 0:2232:2236  \"0x00\" */ 0x00)\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            let dataSlot := keccak256(/** @src 0:2232:2236  \"0x00\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n            /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n            let dataSlot_1 := /** @src -1:-1:-1 */ 0\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6277:6299  \"hasRole(role, account)\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n            mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n            /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n            switch /** @src 0:6276:6299  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n            case /** @src 0:6272:6489  \"if (!hasRole(role, account)) {...\" */ 0 {\n                /// @src 0:6466:6478  \"return false\"\n                var := /** @src 0:2232:2236  \"0x00\" */ 0x00\n                /// @src 0:6466:6478  \"return false\"\n                leave\n            }\n            default /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src 0:2232:2236  \"0x00\" */ 0x00, 0x00)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(0x20, /** @src 0:2232:2236  \"0x00\" */ 0x00)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let dataSlot_2 := keccak256(/** @src 0:2232:2236  \"0x00\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:6315:6344  \"_roles[role].hasRole[account]\"\n                let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:6315:6327  \"_roles[role]\" */ dataSlot_2)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                sstore(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ or(and(sload(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ not(255)), /** @src 0:6347:6351  \"true\" */ 0x01))\n                /// @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\"\n                log4(/** @src 0:2232:2236  \"0x00\" */ 0x00, 0x00, /** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d, /** @src 0:2232:2236  \"0x00\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller())\n                /// @src 0:6424:6435  \"return true\"\n                var := /** @src 0:6347:6351  \"true\" */ 0x01\n                /// @src 0:6424:6435  \"return true\"\n                leave\n            }\n        }\n    }\n    /// @use-src 0:\"@openzeppelin/contracts/access/AccessControl.sol\", 2:\"@openzeppelin/contracts/utils/Context.sol\", 3:\"@openzeppelin/contracts/utils/introspection/ERC165.sol\", 7:\"contracts/SleepFine.sol\"\n    object \"SleepFine_1626_deployed\" {\n        code {\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x01ffc9a7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(4)\n                        let _2 := and(value, shl(224, 0xffffffff))\n                        if iszero(eq(value, _2)) { revert(0, 0) }\n                        /// @src 0:2673:2760  \"interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId)\"\n                        let expr := /** @src 0:2673:2720  \"interfaceId == type(IAccessControl).interfaceId\" */ eq(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ _2, /** @src 0:2688:2720  \"type(IAccessControl).interfaceId\" */ shl(224, 0x7965db0b))\n                        /// @src 0:2673:2760  \"interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId)\"\n                        if iszero(expr)\n                        {\n                            expr := /** @src 3:862:902  \"interfaceId == type(IERC165).interfaceId\" */ eq(_2, /** @src 3:877:902  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                        }\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        mstore(_1, iszero(iszero(expr)))\n                        return(_1, 32)\n                    }\n                    case 0x11688c71 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_1 := calldataload(4)\n                        let value_2 := 0\n                        value_2 := calldataload(36)\n                        if iszero(eq(value_2, and(value_2, 0xffffffffffffffff))) { revert(0, 0) }\n                        /// @src 7:1491:1514  \"challenges[challengeId]\"\n                        let _3, _4 := storage_array_index_access_struct_Challenge__dyn(value_1)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let value_3 := and(sload(/** @src 7:1491:1518  \"challenges[challengeId].app\" */ add(_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1)), sub(shl(160, 1), 1))\n                        /// @src 7:1483:1551  \"require(challenges[challengeId].app == msg.sender, \\\"Not authorized\\\")\"\n                        require_helper_stringliteral_fac3(/** @src 7:1491:1532  \"challenges[challengeId].app == msg.sender\" */ eq(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ value_3, /** @src 7:1522:1532  \"msg.sender\" */ caller()))\n                        /// @src 7:3689:3712  \"challenges[challengeId]\"\n                        let _5, _6 := storage_array_index_access_struct_Challenge__dyn(value_1)\n                        /// @src 7:3722:3774  \"require(!c.completed, \\\"Challenge already completed\\\")\"\n                        require_helper_stringliteral_dfbf(/** @src 7:3730:3742  \"!c.completed\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(shr(160, sload(/** @src 7:3731:3742  \"c.completed\" */ add(_5, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1))), 0xff)))\n                        /// @src 7:3789:3806  \"c.missedDaysArray\"\n                        let _7 := add(_5, 3)\n                        /// @src 7:3789:3813  \"c.missedDaysArray[dayId]\"\n                        let _8, _9 := storage_array_index_access_bool_dyn(_7, value_2)\n                        /// @src 7:3784:3904  \"if (!c.missedDaysArray[dayId]) {...\"\n                        if /** @src 7:3788:3813  \"!c.missedDaysArray[dayId]\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(shr(shl(/** @src 7:3789:3806  \"c.missedDaysArray\" */ 3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ _9), sload(/** @src 7:3789:3813  \"c.missedDaysArray[dayId]\" */ _8)), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                        /// @src 7:3784:3904  \"if (!c.missedDaysArray[dayId]) {...\"\n                        {\n                            /// @src 7:3829:3853  \"c.missedDaysArray[dayId]\"\n                            let _10, _11 := storage_array_index_access_bool_dyn(_7, value_2)\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            let _12 := sload(_10)\n                            let result := 0\n                            let shiftBits := shl(/** @src 7:3789:3806  \"c.missedDaysArray\" */ 3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ _11)\n                            result := or(and(_12, not(shl(shiftBits, 0xff))), shl(shiftBits, 1))\n                            sstore(_10, result)\n                            /// @src 7:3874:3891  \"c.missedDaysCount\"\n                            let _13 := add(_5, 2)\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            let value_4 := and(shr(64, sload(/** @src 7:3874:3893  \"c.missedDaysCount++\" */ _13)), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xffffffffffffffff)\n                            if eq(value_4, 0xffffffffffffffff)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x11)\n                                revert(0, 36)\n                            }\n                            let _14 := sload(_13)\n                            sstore(_13, or(and(_14, not(0xffffffffffffffff0000000000000000)), and(shl(64, add(value_4, 1)), 0xffffffffffffffff0000000000000000)))\n                        }\n                        return(0, 0)\n                    }\n                    case 0x19f2fdad {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                        let length := calldataload(add(4, offset))\n                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                        if gt(add(add(offset, shl(5, length)), 36), calldatasize()) { revert(0, 0) }\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole_18620()\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        let _15 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ mload(64)\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        mstore(_15, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(224, 0x19f2fdad))\n                        let tail := add(/** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ _15, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 36)\n                        mstore(/** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ add(_15, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4), 32)\n                        let pos := tail\n                        mstore(tail, length)\n                        pos := add(/** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ _15, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 68)\n                        let srcPtr := add(offset, 36)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            let value_5 := 0\n                            value_5 := calldataload(srcPtr)\n                            let _16 := and(value_5, sub(shl(160, 1), 1))\n                            if iszero(eq(value_5, _16)) { revert(0, 0) }\n                            mstore(pos, _16)\n                            pos := add(pos, 32)\n                            srcPtr := add(srcPtr, 32)\n                        }\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        let _17 := call(gas(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 7:4620:4637  \"stakingPrecompile\" */ loadimmutable(\"1258\"), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), 0, /** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ _15, sub(pos, _15), _15, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32)\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        if iszero(_17)\n                        {\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        let expr_1 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                        /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                        if _17\n                        {\n                            let _18 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32\n                            /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                            if gt(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32, /** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ returndatasize()) { _18 := returndatasize() }\n                            finalize_allocation(_15, _18)\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            if slt(sub(/** @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\" */ add(_15, _18), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ _15), 32) { revert(0, 0) }\n                            let value_6 := mload(_15)\n                            if iszero(eq(value_6, iszero(iszero(value_6)))) { revert(0, 0) }\n                            /// @src 7:4620:4655  \"stakingPrecompile.nominate(targets)\"\n                            expr_1 := value_6\n                        }\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, iszero(iszero(expr_1)))\n                        return(memPos, 32)\n                    }\n                    case 0x1bdd4b74 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let memPtr := mload(64)\n                        finalize_allocation_18621(memPtr)\n                        mstore(memPtr, 0)\n                        mstore(add(memPtr, 32), 0)\n                        mstore(add(memPtr, 64), 0)\n                        mstore(add(memPtr, 96), 0)\n                        mstore(add(memPtr, 128), 0)\n                        mstore(add(memPtr, 160), 0)\n                        mstore(add(memPtr, 192), 96)\n                        mstore(add(memPtr, 224), 0)\n                        /// @src 7:5054:5077  \"challenges[challengeId]\"\n                        let _19, _20 := storage_array_index_access_struct_Challenge__dyn(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ calldataload(4))\n                        let memPtr_1 := mload(64)\n                        finalize_allocation_18621(memPtr_1)\n                        mstore(memPtr_1, and(sload(_19), sub(shl(160, 1), 1)))\n                        let _21 := sload(add(_19, 1))\n                        let _22 := add(memPtr_1, 32)\n                        mstore(_22, and(_21, sub(shl(160, 1), 1)))\n                        let _23 := add(memPtr_1, 64)\n                        mstore(_23, iszero(iszero(and(shr(160, _21), 0xff))))\n                        let _24 := add(memPtr_1, 96)\n                        mstore(_24, and(shr(168, _21), 0xffffffffffffffff))\n                        let _25 := sload(add(_19, 2))\n                        let _26 := add(memPtr_1, 128)\n                        mstore(_26, and(_25, 0xffffffffffffffff))\n                        let _27 := add(memPtr_1, 160)\n                        mstore(_27, and(shr(64, _25), 0xffffffffffffffff))\n                        let _28 := add(_19, 3)\n                        let pos_2 := mload(64)\n                        let memPtr_2 := pos_2\n                        let length_1 := sload(_28)\n                        mstore(pos_2, length_1)\n                        pos_2 := add(pos_2, 32)\n                        mstore(0, _28)\n                        let srcPtr_1 := keccak256(0, 32)\n                        let itemCounter := 0\n                        for { }\n                        lt(add(itemCounter, 31), length_1)\n                        {\n                            itemCounter := add(itemCounter, 32)\n                        }\n                        {\n                            let data := sload(srcPtr_1)\n                            mstore(pos_2, iszero(iszero(and(data, 0xff))))\n                            mstore(add(pos_2, 32), iszero(iszero(and(shr(8, data), 0xff))))\n                            mstore(add(pos_2, 64), iszero(iszero(and(shr(16, data), 0xff))))\n                            mstore(add(pos_2, 96), iszero(iszero(and(shr(24, data), 0xff))))\n                            mstore(add(pos_2, 128), iszero(iszero(and(shr(32, data), 0xff))))\n                            mstore(add(pos_2, 160), iszero(iszero(and(shr(40, data), 0xff))))\n                            mstore(add(pos_2, 192), iszero(iszero(and(shr(48, data), 0xff))))\n                            mstore(add(pos_2, 224), iszero(iszero(and(shr(56, data), 0xff))))\n                            mstore(add(pos_2, 256), iszero(iszero(and(shr(64, data), 0xff))))\n                            mstore(add(pos_2, 288), iszero(iszero(and(shr(72, data), 0xff))))\n                            mstore(add(pos_2, 320), iszero(iszero(and(shr(80, data), 0xff))))\n                            mstore(add(pos_2, 352), iszero(iszero(and(shr(88, data), 0xff))))\n                            mstore(add(pos_2, 384), iszero(iszero(and(shr(96, data), 0xff))))\n                            mstore(add(pos_2, 416), iszero(iszero(and(shr(104, data), 0xff))))\n                            mstore(add(pos_2, 448), iszero(iszero(and(shr(112, data), 0xff))))\n                            mstore(add(pos_2, 480), iszero(iszero(and(shr(120, data), 0xff))))\n                            mstore(add(pos_2, 512), iszero(iszero(and(shr(128, data), 0xff))))\n                            mstore(add(pos_2, 544), iszero(iszero(and(shr(136, data), 0xff))))\n                            mstore(add(pos_2, 576), iszero(iszero(and(shr(144, data), 0xff))))\n                            mstore(add(pos_2, 608), iszero(iszero(and(shr(152, data), 0xff))))\n                            mstore(add(pos_2, 640), iszero(iszero(and(shr(160, data), 0xff))))\n                            mstore(add(pos_2, 672), iszero(iszero(and(shr(168, data), 0xff))))\n                            mstore(add(pos_2, 704), iszero(iszero(and(shr(176, data), 0xff))))\n                            mstore(add(pos_2, 736), iszero(iszero(and(shr(184, data), 0xff))))\n                            mstore(add(pos_2, 768), iszero(iszero(and(shr(192, data), 0xff))))\n                            mstore(add(pos_2, 800), iszero(iszero(and(shr(200, data), 0xff))))\n                            mstore(add(pos_2, 832), iszero(iszero(and(shr(208, data), 0xff))))\n                            mstore(add(pos_2, 864), iszero(iszero(and(shr(216, data), 0xff))))\n                            mstore(add(pos_2, 896), iszero(iszero(and(shr(224, data), 0xff))))\n                            mstore(add(pos_2, 928), iszero(iszero(and(shr(232, data), 0xff))))\n                            mstore(add(pos_2, 960), iszero(iszero(and(shr(240, data), 0xff))))\n                            mstore(add(pos_2, 992), iszero(iszero(shr(248, data))))\n                            pos_2 := add(pos_2, 1024)\n                            srcPtr_1 := add(srcPtr_1, 1)\n                        }\n                        let data_1 := sload(srcPtr_1)\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(data_1, 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(8, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(16, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(24, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(32, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(40, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(48, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(56, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(64, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(72, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(80, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(88, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(96, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(104, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(112, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(120, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(128, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(136, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(144, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(152, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(160, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(168, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(176, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(184, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(192, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(200, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(208, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(216, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(224, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(232, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(and(shr(240, data_1), 0xff))))\n                            pos_2 := add(pos_2, 32)\n                            itemCounter := add(itemCounter, 1)\n                        }\n                        if lt(itemCounter, length_1)\n                        {\n                            mstore(pos_2, iszero(iszero(shr(248, data_1))))\n                            pos_2 := add(pos_2, 32)\n                        }\n                        finalize_allocation(memPtr_2, sub(pos_2, memPtr_2))\n                        let _29 := add(memPtr_1, 192)\n                        mstore(_29, memPtr_2)\n                        let value_7 := and(sload(add(_19, 4)), 0xffffffffffffffffffffffffffffffff)\n                        let _30 := add(memPtr_1, 224)\n                        mstore(_30, value_7)\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, 32)\n                        let tail_1 := add(memPos_1, 288)\n                        mstore(add(memPos_1, 32), and(mload(memPtr_1), sub(shl(160, 1), 1)))\n                        mstore(add(memPos_1, 64), and(mload(_22), sub(shl(160, 1), 1)))\n                        mstore(add(memPos_1, 96), iszero(iszero(mload(_23))))\n                        mstore(add(memPos_1, 128), and(mload(_24), 0xffffffffffffffff))\n                        mstore(add(memPos_1, 160), and(mload(_26), 0xffffffffffffffff))\n                        mstore(add(memPos_1, 192), and(mload(_27), 0xffffffffffffffff))\n                        let memberValue0 := mload(_29)\n                        mstore(add(memPos_1, 224), 256)\n                        let pos_3 := tail_1\n                        let length_2 := mload(memberValue0)\n                        mstore(tail_1, length_2)\n                        pos_3 := add(memPos_1, 320)\n                        let srcPtr_2 := add(memberValue0, 32)\n                        let i_1 := 0\n                        for { } lt(i_1, length_2) { i_1 := add(i_1, 1) }\n                        {\n                            mstore(pos_3, iszero(iszero(mload(srcPtr_2))))\n                            pos_3 := add(pos_3, 32)\n                            srcPtr_2 := add(srcPtr_2, 32)\n                        }\n                        mstore(add(memPos_1, 256), and(mload(_30), 0xffffffffffffffffffffffffffffffff))\n                        return(memPos_1, sub(pos_3, memPos_1))\n                    }\n                    case 0x248a9ca3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let ret := fun_getRoleAdmin(calldataload(4))\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, ret)\n                        return(memPos_2, 32)\n                    }\n                    case 0x25b8e7eb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x2f2ff15d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_8 := calldataload(4)\n                        let value1 := abi_decode_address_18624()\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole(/** @src 0:4300:4318  \"getRoleAdmin(role)\" */ fun_getRoleAdmin(value_8))\n                        /// @src 0:4330:4355  \"_grantRole(role, account)\"\n                        pop(fun_grantRole(value_8, value1))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0x36561c64 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole_18626()\n                        /// @src 7:1950:1984  \"_grantRole(AI_AGENT_ROLE, aiAgent)\"\n                        pop(fun_grantRole_18627(value0))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0x36568abe {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value1_1 := abi_decode_address_18624()\n                        /// @src 0:5417:5519  \"if (callerConfirmation != _msgSender()) {...\"\n                        if /** @src 0:5421:5455  \"callerConfirmation != _msgSender()\" */ iszero(eq(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:5421:5455  \"callerConfirmation != _msgSender()\" */ value1_1, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller()))\n                        /// @src 0:5417:5519  \"if (callerConfirmation != _msgSender()) {...\"\n                        {\n                            /// @src 0:5478:5508  \"AccessControlBadConfirmation()\"\n                            mstore(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, /** @src 0:5478:5508  \"AccessControlBadConfirmation()\" */ shl(225, 0x334bd919))\n                            revert(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 4)\n                        }\n                        /// @src 0:5529:5566  \"_revokeRole(role, callerConfirmation)\"\n                        pop(fun_revokeRole(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ calldataload(4), /** @src 0:5529:5566  \"_revokeRole(role, callerConfirmation)\" */ value1_1))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0x69c498dc {\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_9 := 0\n                        value_9 := calldataload(4)\n                        let _31 := and(value_9, 0xffffffffffffffff)\n                        if iszero(eq(value_9, _31)) { revert(0, 0) }\n                        let value1_2 := abi_decode_address_18624()\n                        if /** @src 7:2500:2513  \"msg.value > 0\" */ iszero(/** @src 7:2500:2509  \"msg.value\" */ callvalue())\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        {\n                            let memPtr_3 := mload(64)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, 4), 32)\n                            mstore(add(memPtr_3, 36), 16)\n                            mstore(add(memPtr_3, 68), \"Deposit required\")\n                            revert(memPtr_3, 100)\n                        }\n                        /// @src 7:2567:2584  \"challenges.length\"\n                        let expr_2 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sload(/** @src 7:2567:2577  \"challenges\" */ 0x01)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        if iszero(lt(expr_2, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        sstore(/** @src 7:2567:2577  \"challenges\" */ 0x01, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ add(expr_2, /** @src 7:2567:2577  \"challenges\" */ 0x01))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let slot, offset_1 := storage_array_index_access_struct_Challenge__dyn(expr_2)\n                        /// @src 7:2643:2666  \"challenges[challengeId]\"\n                        let _32, _33 := storage_array_index_access_struct_Challenge__dyn(expr_2)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        sstore(/** @src 7:2676:2695  \"c.user = msg.sender\" */ _32, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ or(and(sload(/** @src 7:2676:2695  \"c.user = msg.sender\" */ _32), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(/** @src 7:2685:2695  \"msg.sender\" */ caller(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 7:2705:2710  \"c.app\"\n                        let _34 := add(_32, /** @src 7:2567:2577  \"challenges\" */ 0x01)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        sstore(/** @src 7:2705:2716  \"c.app = app\" */ _34, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ or(and(sload(/** @src 7:2705:2716  \"c.app = app\" */ _34), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(/** @src 7:2705:2716  \"c.app = app\" */ value1_2, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 7:2740:2756  \"getCurrentDate()\"\n                        let _35 := fun_getCurrentDate()\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let _36 := sload(_34)\n                        sstore(_34, or(and(_36, not(shl(168, 0xffffffffffffffff))), and(shl(168, _35), shl(168, 0xffffffffffffffff))))\n                        /// @src 7:2766:2780  \"c.durationDays\"\n                        let _37 := add(_32, 2)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        sstore(_37, or(and(sload(_37), not(0xffffffffffffffff)), _31))\n                        /// @src 7:2800:2809  \"c.deposit\"\n                        let _38 := add(_32, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4)\n                        sstore(_38, or(and(sload(_38), not(0xffffffffffffffffffffffffffffffff)), and(/** @src 7:2500:2509  \"msg.value\" */ callvalue(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xffffffffffffffffffffffffffffffff)))\n                        sstore(_37, and(sload(_37), not(0xffffffffffffffff0000000000000000)))\n                        let _39 := array_allocation_size_array_bool_dyn(_31)\n                        let memPtr_4 := mload(64)\n                        finalize_allocation(memPtr_4, _39)\n                        mstore(memPtr_4, _31)\n                        let dataSize := array_allocation_size_array_bool_dyn(_31)\n                        let dataStart := add(memPtr_4, 32)\n                        calldatacopy(dataStart, calldatasize(), add(dataSize, not(31)))\n                        /// @src 7:2871:2888  \"c.missedDaysArray\"\n                        let _40 := add(_32, 3)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let length_3 := mload(memPtr_4)\n                        if gt(length_3, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        if gt(length_3, 18446744073709551616)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        let oldLen := sload(_40)\n                        sstore(_40, length_3)\n                        if lt(length_3, oldLen)\n                        {\n                            mstore(0, _40)\n                            let data_2 := keccak256(0, 32)\n                            let deleteStart := add(data_2, shr(5, add(length_3, 31)))\n                            let deleteEnd := add(data_2, shr(5, add(oldLen, 31)))\n                            let _41 := and(length_3, 31)\n                            if iszero(iszero(_41))\n                            {\n                                let _42 := add(deleteStart, not(0))\n                                sstore(_42, and(shr(shl(/** @src 7:2871:2888  \"c.missedDaysArray\" */ 3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(32, _41)), not(0)), sload(_42)))\n                            }\n                            let start := deleteStart\n                            for { }\n                            lt(start, deleteEnd)\n                            {\n                                start := add(start, /** @src 7:2567:2577  \"challenges\" */ 0x01)\n                            }\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            { sstore(start, 0) }\n                        }\n                        let srcPtr_3 := dataStart\n                        mstore(0, _40)\n                        let data_3 := keccak256(0, 32)\n                        let fullSlots := shr(5, length_3)\n                        let i_2 := 0\n                        for { }\n                        lt(i_2, fullSlots)\n                        {\n                            i_2 := add(i_2, /** @src 7:2567:2577  \"challenges\" */ 0x01)\n                        }\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        {\n                            let dstSlotValue := 0\n                            let j := 0\n                            for { }\n                            lt(j, 32)\n                            {\n                                j := add(j, /** @src 7:2567:2577  \"challenges\" */ 0x01)\n                            }\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            {\n                                dstSlotValue := update_byte_slice_dynamic1(dstSlotValue, j, iszero(iszero(mload(srcPtr_3))))\n                                srcPtr_3 := add(srcPtr_3, 32)\n                            }\n                            sstore(add(data_3, i_2), dstSlotValue)\n                        }\n                        let _43 := and(length_3, not(31))\n                        let spill := sub(length_3, _43)\n                        if iszero(eq(length_3, _43))\n                        {\n                            let dstSlotValue_1 := 0\n                            let j_1 := 0\n                            for { }\n                            lt(j_1, spill)\n                            {\n                                j_1 := add(j_1, /** @src 7:2567:2577  \"challenges\" */ 0x01)\n                            }\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            {\n                                dstSlotValue_1 := update_byte_slice_dynamic1(dstSlotValue_1, j_1, iszero(iszero(mload(srcPtr_3))))\n                                srcPtr_3 := add(srcPtr_3, 32)\n                            }\n                            sstore(add(data_3, fullSlots), dstSlotValue_1)\n                        }\n                        sstore(_34, and(sload(_34), not(shl(160, 255))))\n                        /// @src 7:2955:2992  \"NewChallenge(msg.sender, challengeId)\"\n                        let _44 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ mload(64)\n                        /// @src 7:2955:2992  \"NewChallenge(msg.sender, challengeId)\"\n                        log3(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0, /** @src 7:2955:2992  \"NewChallenge(msg.sender, challengeId)\" */ 0x405bd78338cd4095fe6be4280019762282b9331e09f5123f4bedd1b93cbe4f1f, /** @src 7:2685:2695  \"msg.sender\" */ caller(), /** @src 7:2955:2992  \"NewChallenge(msg.sender, challengeId)\" */ expr_2)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        mstore(_44, expr_2)\n                        return(_44, 32)\n                    }\n                    case 0x75b238fc {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, /** @src 7:273:296  \"keccak256(\\\"ADMIN_ROLE\\\")\" */ 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0x8f1d3776 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_10 := calldataload(4)\n                        /// @src 7:1350:1379  \"Challenge[] public challenges\"\n                        if iszero(lt(value_10, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sload(1)))\n                        /// @src 7:1350:1379  \"Challenge[] public challenges\"\n                        {\n                            revert(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0)\n                        }\n                        /// @src 7:1350:1379  \"Challenge[] public challenges\"\n                        let slot_1, offset_2 := storage_array_index_access_struct_Challenge__dyn(value_10)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let value_11 := and(sload(/** @src 7:1350:1379  \"Challenge[] public challenges\" */ slot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1))\n                        let _45 := sload(/** @src 7:1350:1379  \"Challenge[] public challenges\" */ add(slot_1, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1))\n                        let _46 := sload(/** @src 7:1350:1379  \"Challenge[] public challenges\" */ add(slot_1, 2))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let value_12 := and(sload(/** @src 7:1350:1379  \"Challenge[] public challenges\" */ add(slot_1, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4)), 0xffffffffffffffffffffffffffffffff)\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, value_11)\n                        mstore(add(memPos_5, 32), and(_45, sub(shl(160, 1), 1)))\n                        mstore(add(memPos_5, 64), iszero(iszero(and(shr(160, _45), 0xff))))\n                        mstore(add(memPos_5, 96), and(shr(168, _45), 0xffffffffffffffff))\n                        mstore(add(memPos_5, 128), and(_46, 0xffffffffffffffff))\n                        mstore(add(memPos_5, 160), and(shr(64, _46), 0xffffffffffffffff))\n                        mstore(add(memPos_5, 192), value_12)\n                        return(memPos_5, 224)\n                    }\n                    case 0x916d9e53 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole_18626()\n                        /// @src 7:2081:2116  \"_revokeRole(AI_AGENT_ROLE, aiAgent)\"\n                        pop(fun_revokeRole_18637(value0_1))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0x91d14854 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value1_3 := abi_decode_address_18624()\n                        mstore(0, calldataload(4))\n                        mstore(32, 0)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(value1_3, sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                        let value_13 := and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff)\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, iszero(iszero(value_13)))\n                        return(memPos_6, 32)\n                    }\n                    case 0x9254d772 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret_1 := fun_getCurrentDate()\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, and(ret_1, 0xffffffffffffffff))\n                        return(memPos_7, 32)\n                    }\n                    case 0xa217fddf {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, 0)\n                        return(memPos_8, 32)\n                    }\n                    case 0xa7817bbc {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_14 := calldataload(4)\n                        /// @src 7:1491:1514  \"challenges[challengeId]\"\n                        let _47, _48 := storage_array_index_access_struct_Challenge__dyn(value_14)\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let value_15 := and(sload(/** @src 7:1491:1518  \"challenges[challengeId].app\" */ add(_47, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1)), sub(shl(160, 1), 1))\n                        /// @src 7:1483:1551  \"require(challenges[challengeId].app == msg.sender, \\\"Not authorized\\\")\"\n                        require_helper_stringliteral_fac3(/** @src 7:1491:1532  \"challenges[challengeId].app == msg.sender\" */ eq(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ value_15, /** @src 7:1522:1532  \"msg.sender\" */ caller()))\n                        /// @src 7:4026:4049  \"challenges[challengeId]\"\n                        let _49, _50 := storage_array_index_access_struct_Challenge__dyn(value_14)\n                        /// @src 7:4068:4079  \"c.completed\"\n                        let _51 := add(_49, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1)\n                        let _52 := sload(/** @src 7:4068:4079  \"c.completed\" */ _51)\n                        /// @src 7:4059:4111  \"require(!c.completed, \\\"Challenge already completed\\\")\"\n                        require_helper_stringliteral_dfbf(/** @src 7:4067:4079  \"!c.completed\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(shr(160, _52), 0xff)))\n                        let _53 := sload(/** @src 7:4143:4157  \"c.durationDays\" */ add(_49, 2))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        let cleaned := and(_53, 0xffffffffffffffff)\n                        let sum := add(and(shr(168, _52), 0xffffffffffffffff), cleaned)\n                        if gt(sum, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        if /** @src 7:4129:4177  \"c.startDate + c.durationDays <= getCurrentDate()\" */ gt(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 7:4129:4177  \"c.startDate + c.durationDays <= getCurrentDate()\" */ sum, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xffffffffffffffff), and(/** @src 7:4161:4177  \"getCurrentDate()\" */ fun_getCurrentDate(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xffffffffffffffff))\n                        {\n                            let memPtr_5 := mload(64)\n                            mstore(memPtr_5, shl(229, 4594637))\n                            mstore(add(memPtr_5, 4), 32)\n                            mstore(add(memPtr_5, 36), 32)\n                            mstore(add(memPtr_5, 68), \"Challenge time not completed yet\")\n                            revert(memPtr_5, 100)\n                        }\n                        sstore(_51, or(and(_52, not(shl(160, 255))), shl(160, 1)))\n                        let value_16 := and(sload(/** @src 7:4270:4279  \"c.deposit\" */ add(_49, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4)), 0xffffffffffffffffffffffffffffffff)\n                        let diff := sub(cleaned, and(shr(64, _53), 0xffffffffffffffff))\n                        if gt(diff, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        let product_raw := mul(value_16, and(diff, 0xffffffffffffffff))\n                        let product := and(product_raw, 0xffffffffffffffffffffffffffffffff)\n                        if iszero(eq(product, product_raw))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        if iszero(cleaned)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x12)\n                            revert(0, 0x24)\n                        }\n                        let value_17 := and(sload(/** @src 7:4378:4384  \"c.user\" */ _49), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1))\n                        /// @src 7:4370:4409  \"payable(c.user).call{value: refund}(\\\"\\\")\"\n                        let expr_component := call(gas(), value_17, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(div(product, cleaned), 0xffffffffffffffffffffffffffffffff), 0, 0, 0, 0)\n                        /// @src 7:4370:4409  \"payable(c.user).call{value: refund}(\\\"\\\")\"\n                        let data_4 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                        switch returndatasize()\n                        case 0 { data_4 := 96 }\n                        default {\n                            let _54 := returndatasize()\n                            if gt(_54, 0xffffffffffffffff)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            let memPtr_6 := mload(64)\n                            finalize_allocation(memPtr_6, add(and(add(_54, 31), not(31)), 32))\n                            mstore(memPtr_6, _54)\n                            data_4 := memPtr_6\n                            returndatacopy(add(memPtr_6, 32), 0, returndatasize())\n                        }\n                        if iszero(expr_component)\n                        {\n                            let memPtr_7 := mload(64)\n                            mstore(memPtr_7, shl(229, 4594637))\n                            mstore(add(memPtr_7, 4), 32)\n                            mstore(add(memPtr_7, 36), 15)\n                            mstore(add(memPtr_7, 68), \"Transfer failed\")\n                            revert(memPtr_7, 100)\n                        }\n                        return(0, 0)\n                    }\n                    case 0xd547741f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_18 := calldataload(4)\n                        let value1_4 := abi_decode_address_18624()\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole(/** @src 0:4717:4735  \"getRoleAdmin(role)\" */ fun_getRoleAdmin(value_18))\n                        /// @src 0:4747:4773  \"_revokeRole(role, account)\"\n                        pop(fun_revokeRole(value_18, value1_4))\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0xdefe4b12 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_19 := calldataload(4)\n                        let _55 := and(value_19, 0xffffffffffffffffffffffffffffffff)\n                        if iszero(eq(value_19, _55)) { revert(0, 0) }\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole_18620()\n                        /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                        let _56 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ mload(64)\n                        /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                        mstore(_56, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(224, 0x64c9ec6f))\n                        /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                        let _57 := call(gas(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 7:4741:4758  \"stakingPrecompile\" */ loadimmutable(\"1258\"), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\" */ _55, _56, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4, /** @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\" */ _56, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32)\n                        /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                        if iszero(_57)\n                        {\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            let pos_4 := mload(64)\n                            returndatacopy(pos_4, 0, returndatasize())\n                            revert(pos_4, returndatasize())\n                        }\n                        /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                        if _57\n                        {\n                            let _58 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32\n                            /// @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\"\n                            if gt(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32, /** @src 7:4741:4782  \"stakingPrecompile.bond{ value: amount }()\" */ returndatasize()) { _58 := returndatasize() }\n                            finalize_allocation(_56, _58)\n                            pop(abi_decode_uint128_fromMemory(_56, add(_56, _58)))\n                        }\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0xe8111842 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_20 := calldataload(4)\n                        let _59 := and(value_20, 0xffffffffffffffffffffffffffffffff)\n                        if iszero(eq(value_20, _59)) { revert(0, 0) }\n                        /// @src 0:2475:2479  \"role\"\n                        fun_checkRole_18620()\n                        /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                        let _60 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ mload(64)\n                        /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                        mstore(_60, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(225, 0x74088c21))\n                        mstore(/** @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\" */ add(_60, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 4), _59)\n                        /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                        let _61 := call(gas(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 7:4870:4887  \"stakingPrecompile\" */ loadimmutable(\"1258\"), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), 0, /** @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\" */ _60, 36, _60, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32)\n                        /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                        if iszero(_61)\n                        {\n                            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                            let pos_5 := mload(64)\n                            returndatacopy(pos_5, 0, returndatasize())\n                            revert(pos_5, returndatasize())\n                        }\n                        /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                        if _61\n                        {\n                            let _62 := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32\n                            /// @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\"\n                            if gt(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 32, /** @src 7:4870:4902  \"stakingPrecompile.unbond(amount)\" */ returndatasize()) { _62 := returndatasize() }\n                            finalize_allocation(_60, _62)\n                            pop(abi_decode_uint128_fromMemory(_60, add(_60, _62)))\n                        }\n                        /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                        return(0, 0)\n                    }\n                    case 0xf845c5b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, and(/** @src 7:1385:1428  \"IStaking public immutable stakingPrecompile\" */ loadimmutable(\"1258\"), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_9, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address_18624() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function storage_array_index_access_struct_Challenge__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 7:1491:1501  \"challenges\" */ 0x01)))\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1491:1501  \"challenges\" */ 0x01)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x20)\n                slot := add(data, mul(index, 5))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            function require_helper_stringliteral_fac3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 14)\n                    mstore(add(memPtr, 68), \"Not authorized\")\n                    revert(memPtr, 100)\n                }\n            }\n            function require_helper_stringliteral_dfbf(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 27)\n                    mstore(add(memPtr, 68), \"Challenge already completed\")\n                    revert(memPtr, 100)\n                }\n            }\n            function storage_array_index_access_bool_dyn(array, index) -> slot, offset\n            {\n                if iszero(lt(index, sload(array)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ array)\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x20)\n                slot := add(data, shr(5, index))\n                offset := and(index, 31)\n            }\n            function update_byte_slice_dynamic1(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := shl(3, shiftBytes)\n                result := or(and(value, not(shl(shiftBits, 255))), shl(shiftBits, and(toInsert, 255)))\n            }\n            function finalize_allocation_18621(memPtr)\n            {\n                let newFreePtr := add(memPtr, 256)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @ast-id 128 @src 0:3810:3930  \"function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {...\"\n            function fun_getRoleAdmin(var_role) -> var\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src 0:3901:3907  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ var_role)\n                mstore(0x20, /** @src 0:3901:3907  \"_roles\" */ 0x00)\n                /// @src 0:3894:3923  \"return _roles[role].adminRole\"\n                var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sload(/** @src 0:3901:3923  \"_roles[role].adminRole\" */ add(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ keccak256(/** @src 0:3901:3907  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40), /** @src 0:3901:3923  \"_roles[role].adminRole\" */ 1))\n            }\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            function array_allocation_size_array_bool_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(shl(5, length), 0x20)\n            }\n            /// @ast-id 1625 @src 7:5090:5208  \"function getCurrentDate() public view returns (uint64) {...\"\n            function fun_getCurrentDate() -> var\n            {\n                /// @src 7:5162:5194  \"uint64(block.timestamp) / 1 days\"\n                let r := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let _1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                _1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                r := div(and(/** @src 7:5169:5184  \"block.timestamp\" */ timestamp(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xffffffffffffffff), 86400)\n                /// @src 7:5162:5201  \"uint64(block.timestamp) / 1 days / 1000\"\n                let r_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let _2 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                _2 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                r_1 := div(and(r, 0xffffffffffffffff), 1000)\n                /// @src 7:5155:5201  \"return uint64(block.timestamp) / 1 days / 1000\"\n                var := r_1\n            }\n            /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n            function abi_decode_uint128_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                value0 := value\n            }\n            /// @ast-id 93 @src 0:3199:3302  \"function _checkRole(bytes32 role) internal view virtual {...\"\n            function fun_checkRole_18620()\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(0x20, /** @src 0:2954:2960  \"_roles\" */ 0x00)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let dataSlot := keccak256(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 2:735:745  \"msg.sender\" */ caller(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                if /** @src 0:3519:3542  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                {\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ shl(224, 0xe2517d3f))\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ 4, /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(36, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    revert(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 68)\n                }\n            }\n            /// @ast-id 93 @src 0:3199:3302  \"function _checkRole(bytes32 role) internal view virtual {...\"\n            function fun_checkRole_18626()\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:273:296  \"keccak256(\\\"ADMIN_ROLE\\\")\" */ 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(0x20, /** @src 0:2954:2960  \"_roles\" */ 0x00)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let dataSlot := keccak256(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 2:735:745  \"msg.sender\" */ caller(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                if /** @src 0:3519:3542  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                {\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ shl(224, 0xe2517d3f))\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ 4, /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(36, /** @src 7:273:296  \"keccak256(\\\"ADMIN_ROLE\\\")\" */ 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775)\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    revert(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 68)\n                }\n            }\n            /// @ast-id 93 @src 0:3199:3302  \"function _checkRole(bytes32 role) internal view virtual {...\"\n            function fun_checkRole(var_role)\n            {\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ var_role)\n                mstore(0x20, /** @src 0:2954:2960  \"_roles\" */ 0x00)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                let dataSlot := keccak256(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 2:735:745  \"msg.sender\" */ caller(), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                if /** @src 0:3519:3542  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                /// @src 0:3515:3623  \"if (!hasRole(role, account)) {...\"\n                {\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    mstore(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ shl(224, 0xe2517d3f))\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\" */ 4, /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(36, var_role)\n                    /// @src 0:3565:3612  \"AccessControlUnauthorizedAccount(account, role)\"\n                    revert(/** @src 0:2954:2960  \"_roles\" */ 0x00, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 68)\n                }\n            }\n            /// @ast-id 256 @src 0:6179:6495  \"function _grantRole(bytes32 role, address account) internal virtual returns (bool) {...\"\n            function fun_grantRole_18627(var_account) -> var\n            {\n                /// @src 0:6256:6260  \"bool\"\n                var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                mstore(0, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(0x20, 0)\n                let dataSlot := keccak256(0, 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6277:6299  \"hasRole(role, account)\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n                switch /** @src 0:6276:6299  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                case /** @src 0:6272:6489  \"if (!hasRole(role, account)) {...\" */ 0 {\n                    /// @src 0:6466:6478  \"return false\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                    /// @src 0:6466:6478  \"return false\"\n                    leave\n                }\n                default /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n                {\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0x20, 0)\n                    let dataSlot_2 := keccak256(0, 0x40)\n                    /// @src 0:6315:6344  \"_roles[role].hasRole[account]\"\n                    let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                    mstore(0x20, /** @src 0:6315:6327  \"_roles[role]\" */ dataSlot_2)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                    sstore(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ or(and(sload(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ not(255)), /** @src 0:6347:6351  \"true\" */ 0x01))\n                    /// @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\"\n                    log4(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0, /** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:6424:6435  \"return true\"\n                    var := /** @src 0:6347:6351  \"true\" */ 0x01\n                    /// @src 0:6424:6435  \"return true\"\n                    leave\n                }\n            }\n            /// @ast-id 256 @src 0:6179:6495  \"function _grantRole(bytes32 role, address account) internal virtual returns (bool) {...\"\n            function fun_grantRole(var_role, var_account) -> var\n            {\n                /// @src 0:6256:6260  \"bool\"\n                var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                mstore(0, var_role)\n                mstore(0x20, 0)\n                let dataSlot := keccak256(0, 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6277:6299  \"hasRole(role, account)\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n                switch /** @src 0:6276:6299  \"!hasRole(role, account)\" */ iszero(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff))\n                case /** @src 0:6272:6489  \"if (!hasRole(role, account)) {...\" */ 0 {\n                    /// @src 0:6466:6478  \"return false\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                    /// @src 0:6466:6478  \"return false\"\n                    leave\n                }\n                default /// @src 0:6272:6489  \"if (!hasRole(role, account)) {...\"\n                {\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0, var_role)\n                    mstore(0x20, 0)\n                    let dataSlot_2 := keccak256(0, 0x40)\n                    /// @src 0:6315:6344  \"_roles[role].hasRole[account]\"\n                    let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                    mstore(0x20, /** @src 0:6315:6327  \"_roles[role]\" */ dataSlot_2)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                    sstore(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ or(and(sload(/** @src 0:6315:6344  \"_roles[role].hasRole[account]\" */ dataSlot_3), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ not(255)), /** @src 0:6347:6351  \"true\" */ 0x01))\n                    /// @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\"\n                    log4(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0, /** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d, var_role, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6370:6410  \"RoleGranted(role, account, _msgSender())\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:6424:6435  \"return true\"\n                    var := /** @src 0:6347:6351  \"true\" */ 0x01\n                    /// @src 0:6424:6435  \"return true\"\n                    leave\n                }\n            }\n            /// @ast-id 294 @src 0:6732:7049  \"function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {...\"\n            function fun_revokeRole_18637(var_account) -> var\n            {\n                /// @src 0:6810:6814  \"bool\"\n                var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                mstore(0, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(0x20, 0)\n                let dataSlot := keccak256(0, 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6830:6852  \"hasRole(role, account)\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:6826:7043  \"if (hasRole(role, account)) {...\"\n                switch /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff)\n                case /** @src 0:6826:7043  \"if (hasRole(role, account)) {...\" */ 0 {\n                    /// @src 0:7020:7032  \"return false\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                    /// @src 0:7020:7032  \"return false\"\n                    leave\n                }\n                default /// @src 0:6826:7043  \"if (hasRole(role, account)) {...\"\n                {\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0x20, 0)\n                    let dataSlot_2 := keccak256(0, 0x40)\n                    /// @src 0:6868:6897  \"_roles[role].hasRole[account]\"\n                    let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                    mstore(0x20, /** @src 0:6868:6880  \"_roles[role]\" */ dataSlot_2)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                    sstore(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ dataSlot_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ dataSlot_3), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ not(255)))\n                    /// @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\"\n                    log4(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0, /** @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\" */ 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b, /** @src 7:343:369  \"keccak256(\\\"AI_AGENT_ROLE\\\")\" */ 0xfaa623ff490ff9197b5ad863cd7f72b33e2e131994d09bd7260d7cd680faad79, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:6978:6989  \"return true\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1\n                    /// @src 0:6978:6989  \"return true\"\n                    leave\n                }\n            }\n            /// @ast-id 294 @src 0:6732:7049  \"function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {...\"\n            function fun_revokeRole(var_role, var_account) -> var\n            {\n                /// @src 0:6810:6814  \"bool\"\n                var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                mstore(0, var_role)\n                mstore(0x20, 0)\n                let dataSlot := keccak256(0, 0x40)\n                /// @src 0:2954:2983  \"_roles[role].hasRole[account]\"\n                let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6830:6852  \"hasRole(role, account)\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:2954:2966  \"_roles[role]\" */ dataSlot)\n                /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                /// @src 0:6826:7043  \"if (hasRole(role, account)) {...\"\n                switch /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:2954:2983  \"_roles[role].hasRole[account]\" */ dataSlot_1), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0xff)\n                case /** @src 0:6826:7043  \"if (hasRole(role, account)) {...\" */ 0 {\n                    /// @src 0:7020:7032  \"return false\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0\n                    /// @src 0:7020:7032  \"return false\"\n                    leave\n                }\n                default /// @src 0:6826:7043  \"if (hasRole(role, account)) {...\"\n                {\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(0, var_role)\n                    mstore(0x20, 0)\n                    let dataSlot_2 := keccak256(0, 0x40)\n                    /// @src 0:6868:6897  \"_roles[role].hasRole[account]\"\n                    let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)))\n                    mstore(0x20, /** @src 0:6868:6880  \"_roles[role]\" */ dataSlot_2)\n                    /// @src 7:194:5210  \"contract SleepFine is AccessControl {...\"\n                    dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0x40)\n                    sstore(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ dataSlot_3, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(sload(/** @src 0:6868:6897  \"_roles[role].hasRole[account]\" */ dataSlot_3), /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ not(255)))\n                    /// @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\"\n                    log4(/** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 0, 0, /** @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\" */ 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b, var_role, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ and(/** @src 0:6924:6964  \"RoleRevoked(role, account, _msgSender())\" */ var_account, /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ sub(shl(160, 1), 1)), /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:6978:6989  \"return true\"\n                    var := /** @src 7:194:5210  \"contract SleepFine is AccessControl {...\" */ 1\n                    /// @src 0:6978:6989  \"return true\"\n                    leave\n                }\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122023cfbe6c5289de8778a0c98decbcfba75e069c161b7baa29b53959aee3ef1ca964736f6c634300081a0033\"\n    }\n}\n",
          "hash": "63517be6f0abbe72612c237e65e3c1d7cb2307c565c94322874574434fdad07f",
          "factoryDependencies": {}
        }
      }
    }
  }
}